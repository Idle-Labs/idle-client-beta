{"version":3,"sources":["PortfolioEquity/PortfolioEquity.js","ChartCustomTooltip/ChartCustomTooltip.js","ChartCustomTooltipRow/ChartCustomTooltipRow.js"],"names":["PortfolioEquity","state","startDate","chartData","chartProps","chartwidth","chartHeight","functionsUtil","this","setProps","props","FunctionsUtil","loadUtils","loadChartData","prevProps","prevState","quickDateSelectionChanged","quickDateSelection","JSON","stringify","enabledTokens","setState","_this2","componentDidMount","isMobile","length","Object","keys","availableTokens","getEtherscanTxs","account","etherscanTxs","tokensBalance","firstTxTimestamp","asyncForEach","_ref","_Users_samuelecester_Desktop_git_idle_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_Users_samuelecester_Desktop_git_idle_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee3","selectedToken","filteredTxs","amountLent","wrap","_context3","prev","next","values","filter","tx","token","_this3","BNify","forEach","index","hash","status","Math","min","parseInt","timeStamp","tokenAmount","action","plus","minus","lt","balance","tokenPrice","idleTokens","isNaN","push","stop","_x3","apply","arguments","currentDate","strToMoment","Date","clone","subtract","days","prevBalances","prevTimestamp","minChartValue","maxChartValue","aggregatedBalance","aggregatedBalancesKeys","tokensBalancesPerDate","currTimestamp","getTime","tokensData","isRisk","selectedStrategy","_ref2","_callee4","_context4","getTokenApiData","address","sent","_x4","idleTokenBalance","foundBalances","tokensBalances","lastTokenData","lastTokenDataUnfiltered","pop","filteredTokenData","timestamp","tokenDecimals","decimals","filteredBalances","lastFilteredTx","assign","parseFloat","idlePrice","fixTokenDecimals","newBalance","times","lastTx","lastTxBalance","gt","tokenUsdConversionRate","conversionRateField","getGlobalConfig","chartToken","conversionRate","momentDate","isSameOrAfter","isAfter","formattedDate","format","toFixed","max","frequencySeconds","_loop","aggregatedBalances","map","date","x","y","balances","itemIndex","item","itemPos","floor","toUpperCase","id","color","join","data","yFormatDecimals","gridYStep","gridYValues","i","gridYValue","daysCount","daysFrequency","ceil","xScale","type","yScale","stacked","xFormat","yFormat","value","formatMoney","axisBottom","legend","tickSize","tickPadding","orient","legendOffset","legendPosition","tickValues","pointSize","useMesh","axisLeft","tickRotation","v","abbreviateNumber","animate","pointLabel","areaOpacity","enableArea","enableSlices","enableGridY","curve","enableGridX","pointBorderWidth","colors","d","pointLabelYOffset","areaBaselineValue","pointColor","from","modifiers","theme","axis","ticks","text","fontSize","fontWeight","fill","fontFamily","fonts","sansSerif","grid","line","stroke","strokeDasharray","margin","top","right","bottom","left","sliceTooltip","slideData","point","slice","points","react__WEBPACK_IMPORTED_MODULE_9___default","createElement","_ChartCustomTooltip_ChartCustomTooltip__WEBPACK_IMPORTED_MODULE_12__","_ChartCustomTooltipRow_ChartCustomTooltipRow__WEBPACK_IMPORTED_MODULE_13__","label","serieId","concat","yFormatted","formattedBalance","key","_GenericChart_GenericChart__WEBPACK_IMPORTED_MODULE_11__","Line","showLoader","parentId","height","parentIdHeight","Component","ChartCustomTooltip","react__WEBPACK_IMPORTED_MODULE_8___default","_DashboardCard_DashboardCard__WEBPACK_IMPORTED_MODULE_9__","cardProps","py","px","width","rimble_ui__WEBPACK_IMPORTED_MODULE_7__","flexDirection","xFormatted","mb","textAlign","children","ChartCustomTooltipRow","react__WEBPACK_IMPORTED_MODULE_7___default","rimble_ui__WEBPACK_IMPORTED_MODULE_8__","alignItems","pr","style","flexBasis","flex","justifyContent","mr","borderRadius","backgroundColor","textTransform","whiteSpace","dangerouslySetInnerHTML","__html"],"mappings":"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","file":"static/js/14.dcd15fd8.chunk.js","sourcesContent":["import theme from '../theme';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\n// import { linearGradientDef } from '@nivo/core'\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport ChartCustomTooltip from '../ChartCustomTooltip/ChartCustomTooltip';\nimport ChartCustomTooltipRow from '../ChartCustomTooltipRow/ChartCustomTooltipRow';\n\nclass PortfolioEquity extends Component {\n  state = {\n    startDate:null,\n    chartData:null,\n    chartProps:null,\n    chartwidth:null,\n    chartHeight:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentDidMount(){\n    this.loadUtils();\n    this.loadChartData();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    const quickDateSelectionChanged = prevProps.quickDateSelection !== this.props.quickDateSelection;\n    const enabledTokensChanged = JSON.stringify(prevProps.enabledTokens) !== JSON.stringify(this.props.enabledTokens);\n    if (enabledTokensChanged || quickDateSelectionChanged){\n      this.setState({\n        chartData:null\n      },() => {\n        this.componentDidMount();\n      });\n    }\n\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (mobileChanged){\n      this.loadChartData();\n    }\n  }\n\n  async loadChartData() {\n\n    let enabledTokens = this.props.enabledTokens;\n    if (!enabledTokens || !enabledTokens.length){\n      enabledTokens = Object.keys(this.props.availableTokens);\n    }\n\n    const etherscanTxs = await this.functionsUtil.getEtherscanTxs(this.props.account,0,'latest',enabledTokens);\n\n    const chartData = [];\n    let tokensBalance = {};\n    let firstTxTimestamp = null;\n\n    await this.functionsUtil.asyncForEach(enabledTokens,async (selectedToken) => {\n\n      tokensBalance[selectedToken] = [];\n\n      const filteredTxs = Object.values(etherscanTxs).filter(tx => (tx.token === selectedToken));\n      if (filteredTxs && filteredTxs.length){\n\n        let amountLent = this.functionsUtil.BNify(0);\n\n        filteredTxs.forEach((tx,index) => {\n\n          // Skip transactions with no hash or pending\n          if (!tx.hash || (tx.status && tx.status === 'Pending')){\n            return false;\n          }\n          \n          firstTxTimestamp = firstTxTimestamp ? Math.min(firstTxTimestamp,parseInt(tx.timeStamp)) : parseInt(tx.timeStamp);\n\n          const tokenAmount = this.functionsUtil.BNify(tx.tokenAmount);\n\n          switch (tx.action){\n            case 'Swap':\n            case 'Deposit':\n            case 'Receive':\n            case 'Migrate':\n            case 'CurveOut':\n              amountLent = amountLent.plus(tokenAmount);\n            break;\n            case 'Send':\n            case 'Redeem':\n            case 'SwapOut':\n            case 'CurveIn':\n            case 'Withdraw':\n              amountLent = amountLent.minus(tokenAmount);\n            break;\n            default:\n            break;\n          }\n\n          // Reset amountLent if below zero\n          if (amountLent.lt(0)){\n            amountLent = this.functionsUtil.BNify(0);\n          }\n\n          const balance = amountLent;\n          const action = tx.action;\n          const timeStamp = parseInt(tx.timeStamp);\n          const tokenPrice = this.functionsUtil.BNify(tx.tokenPrice);\n          const idleTokens = this.functionsUtil.BNify(tx.idleTokens);\n\n          if (!tokenPrice.isNaN() && !tokenPrice.isNaN()){\n            tokensBalance[selectedToken].push({\n              action,\n              balance,\n              timeStamp,\n              tokenPrice,\n              idleTokens,\n              tokenAmount\n            });\n          }\n        });\n      }\n    });\n\n    // Calculate Start Date\n    let startDate = null;\n    const currentDate = this.functionsUtil.strToMoment(new Date());\n\n    switch (this.props.quickDateSelection){\n      case 'week':\n        startDate = currentDate.clone().subtract(1,'week');\n      break;\n      case 'month':\n        startDate = currentDate.clone().subtract(1,'month');\n      break;\n      case 'month3':\n        startDate = currentDate.clone().subtract(3,'month');\n      break;\n      case 'month6':\n        startDate = currentDate.clone().subtract(6,'month');\n      break;\n      default:\n        startDate = null;\n      break;\n    }\n\n    const days = {};\n    let prevBalances = {};\n    let prevTimestamp = null;\n    let minChartValue = null;\n    let maxChartValue = null;\n    let aggregatedBalance = null;\n    const aggregatedBalancesKeys = {};\n    const tokensBalancesPerDate = {};\n    const currTimestamp = parseInt(new Date().getTime()/1000)+86400;\n\n    const tokensData = {};\n    const isRisk = this.props.selectedStrategy === 'risk';\n\n    await this.functionsUtil.asyncForEach(Object.keys(tokensBalance),async (token) => {\n      tokensData[token] = await this.functionsUtil.getTokenApiData(this.props.availableTokens[token].address,isRisk,firstTxTimestamp,null,false,3600);\n    });\n\n    // debugger;\n\n    const idleTokenBalance = {};\n\n    for (let timeStamp=firstTxTimestamp;timeStamp<=currTimestamp;timeStamp+=this.props.frequencySeconds){\n\n      const foundBalances = {};\n      const tokensBalances = {};\n      timeStamp = Math.min(currTimestamp,timeStamp);\n      aggregatedBalance = this.functionsUtil.BNify(0);\n\n      // await this.functionsUtil.asyncForEach(Object.keys(tokensBalance),async (token) => {\n      // eslint-disable-next-line\n      Object.keys(tokensBalance).forEach(token => {\n\n        let lastTokenData = null;\n        const lastTokenDataUnfiltered = Object.values(tokensData[token]).pop();\n        const filteredTokenData = tokensData[token].filter(tx => (tx.timestamp>=prevTimestamp && tx.timestamp<=timeStamp));\n        if (filteredTokenData && filteredTokenData.length){\n          lastTokenData = filteredTokenData.pop();\n        }\n\n        if (!idleTokenBalance[token]){\n          idleTokenBalance[token] = this.functionsUtil.BNify(0);\n        }\n\n        const tokenConfig = this.props.availableTokens[token];\n        const tokenDecimals = tokenConfig.decimals;\n        let filteredBalances = tokensBalance[token].filter(tx => (tx.timeStamp<=timeStamp && (!prevTimestamp || tx.timeStamp>prevTimestamp)));\n        \n        if (!filteredBalances.length){\n          if (prevBalances && prevBalances[token]){\n            filteredBalances = prevBalances[token];\n            const lastFilteredTx = Object.assign([],filteredBalances).pop();\n            const currentBalance = parseFloat(lastFilteredTx.balance);\n\n            // Take idleToken price from API and calculate new balance\n            if (currentBalance>0 && timeStamp>firstTxTimestamp && lastTokenData){\n              const idleTokens = idleTokenBalance[token];\n              const idlePrice = this.functionsUtil.fixTokenDecimals(lastTokenData.idlePrice,tokenDecimals);\n              let newBalance = idleTokens.times(idlePrice);\n\n              // Set new balance and tokenPrice\n              lastFilteredTx.balance = newBalance;\n              lastFilteredTx.tokenPrice = idlePrice;\n              filteredBalances = [lastFilteredTx];\n            }\n          } else {\n            filteredBalances = [{\n              balance:this.functionsUtil.BNify(0),\n              tokenPrice:this.functionsUtil.BNify(0)\n            }];\n          }\n        } else {\n          filteredBalances.forEach(tx => {\n            switch (tx.action){\n              case 'Swap':\n              case 'Deposit':\n              case 'Migrate':\n              case 'Receive':\n              case 'CurveOut':\n                idleTokenBalance[token] = idleTokenBalance[token].plus(tx.idleTokens);\n              break;\n              default:\n                idleTokenBalance[token] = idleTokenBalance[token].minus(tx.idleTokens);\n                if (idleTokenBalance[token].lt(0)){\n                  idleTokenBalance[token] = this.functionsUtil.BNify(0);\n                }\n              break;\n            }\n          });\n        }\n\n        const lastTx = Object.assign([],filteredBalances).pop();\n        // let lastTxBalance = this.functionsUtil.BNify(lastTx.balance);\n        let lastTxBalance = idleTokenBalance[token].times(lastTx.tokenPrice);\n\n        if (lastTxBalance.gt(0)){\n          // Convert token balance to USD\n          let tokenUsdConversionRate = null;\n          const conversionRateField = this.functionsUtil.getGlobalConfig(['stats','tokens',token,'conversionRateField']);\n          if (!this.props.chartToken && conversionRateField){\n            const conversionRate = lastTokenData && lastTokenData[conversionRateField] ? lastTokenData[conversionRateField] : lastTokenDataUnfiltered && lastTokenDataUnfiltered[conversionRateField] ? lastTokenDataUnfiltered[conversionRateField] : null;\n            if (conversionRate){\n              tokenUsdConversionRate = this.functionsUtil.fixTokenDecimals(conversionRate,18);\n              if (tokenUsdConversionRate.gt(0)){\n                lastTxBalance = lastTxBalance.times(tokenUsdConversionRate);\n              }\n            }\n          }\n          \n          tokensBalances[token] = lastTxBalance;\n          aggregatedBalance = aggregatedBalance.plus(lastTxBalance);\n        }\n\n        foundBalances[token] = filteredBalances;\n      });\n\n      let momentDate = this.functionsUtil.strToMoment(timeStamp*1000);\n\n      if (startDate === null || momentDate.isSameOrAfter(startDate)){\n        \n        if (momentDate.isAfter(new Date(),'day')){\n          momentDate = this.functionsUtil.strToMoment(new Date());\n        }\n\n        // Force date to midnight\n        const formattedDate = momentDate.format('YYYY/MM/DD 00:00');\n\n        // Save days for axisBottom format\n        days[momentDate.format('YYYY/MM/DD')] = 1;\n\n        aggregatedBalance = parseFloat(parseFloat(aggregatedBalance.toFixed(6)));\n\n        aggregatedBalancesKeys[formattedDate] = aggregatedBalance;\n        tokensBalancesPerDate[formattedDate] = tokensBalances;\n\n        // console.log(formattedDate,tokensBalances);\n\n        minChartValue = minChartValue === null ? aggregatedBalance : Math.min(minChartValue,aggregatedBalance);\n        maxChartValue = maxChartValue === null ? aggregatedBalance : Math.max(maxChartValue,aggregatedBalance);\n      }\n\n      prevTimestamp = timeStamp;\n      prevBalances = foundBalances;\n    }\n\n    const aggregatedBalances = Object.keys(aggregatedBalancesKeys).map(date => ({\n      x:date,\n      y:aggregatedBalancesKeys[date],\n      balances:tokensBalancesPerDate[date]\n    }));\n\n    let itemIndex = 0;\n    aggregatedBalances.forEach( (item,index) => {\n      const itemPos = Math.floor(itemIndex/aggregatedBalances.length*100);\n      aggregatedBalances[index].itemPos = itemPos;\n      itemIndex++;\n    });\n\n    /*\n    aggregatedBalances.push({\n      x:momentDate.format('YYYY/MM/DD HH:mm'),\n      y:aggregatedBalance\n    });\n    */\n\n    // Add day before to start with zero balance\n    /*\n    const firstTxMomentDate = this.functionsUtil.strToMoment(firstTxTimestamp*1000);\n    if ((startDate === null || startDate.isSameOrBefore(firstTxMomentDate)) && aggregatedBalances.length){\n      const firstItem = aggregatedBalances[0];\n      const firstDate = this.functionsUtil.strToMoment(firstItem.x,'YYYY/MM/DD HH:mm');\n      firstDate.subtract(1,'day');\n      aggregatedBalances.unshift({\n        x:firstDate.format('YYYY/MM/DD HH:mm'),\n        y:0\n      });\n    }\n    */\n\n    const chartToken = this.props.chartToken ? this.props.chartToken.toUpperCase() : 'USD';\n\n    // Add token Data\n    chartData.push({\n      id:chartToken,\n      color: 'hsl('+ this.functionsUtil.getGlobalConfig(['stats','tokens',chartToken,'color','hsl']).join(',')+')',\n      data:aggregatedBalances\n    });\n\n    let yFormatDecimals = 2;\n    if (maxChartValue-minChartValue<1){\n      yFormatDecimals = 4;\n    }\n\n    if (maxChartValue === minChartValue){\n      minChartValue = Math.max(0,maxChartValue-1);\n    }\n\n    const maxGridLines = 5;\n    const gridYStep = (maxChartValue-minChartValue)/maxGridLines;\n    const gridYValues = [];\n    for (let i=0;i<=maxGridLines;i++){\n      const gridYValue = parseFloat(parseFloat(minChartValue+(i*gridYStep)).toFixed(6));\n      gridYValues.push(gridYValue);\n    }\n    \n    const axisBottomMaxValues = 10;\n    const daysCount = Object.values(days).length;    \n    const daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n    const chartProps = {\n      xScale:{\n        type: 'time',\n        format: '%Y/%m/%d %H:%M',\n      },\n      yScale:{\n        type: 'linear',\n        stacked: false,\n        min: minChartValue,\n        max: maxChartValue\n      },\n      xFormat:'time:%b %d %Y',\n      yFormat:value => this.functionsUtil.formatMoney(value,yFormatDecimals),\n      axisBottom: this.props.isMobile ? null : {\n        legend: '',\n        tickSize:0,\n        format: '%b %d',\n        tickPadding: 15,\n        orient: 'bottom',\n        legendOffset: 36,\n        legendPosition: 'middle',\n        tickValues:'every '+daysFrequency+' days'\n      },\n      gridYValues,\n      pointSize:0,\n      useMesh:true,\n      axisLeft: this.props.isMobile ? null : {\n        legend: '',\n        tickSize: 0,\n        orient: 'left',\n        tickPadding: 10,\n        tickRotation: 0,\n        legendOffset: -70,\n        tickValues:gridYValues,\n        legendPosition: 'middle',\n        format: v => this.functionsUtil.abbreviateNumber(v,2),\n      },\n      animate:true,\n      pointLabel:'y',\n      areaOpacity:0.1,\n      enableArea:true,\n      enableSlices:'x',\n      enableGridY:true,\n      curve:'monotoneX',\n      enableGridX:false,\n      pointBorderWidth:1,\n      colors:d => d.color,\n      pointLabelYOffset:-12,\n      areaBaselineValue:minChartValue,\n      pointColor:{ from: 'color', modifiers: []},\n      theme:{\n        axis: {\n          ticks: {\n            text: {\n              fontSize:12,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '8 4'\n          }\n        },\n      },\n      /*\n      defs:[\n        linearGradientDef('gradientA', [\n          { offset: 0, color: 'inherit' },\n          { offset: 100, color: 'inherit', opacity: 0 },\n        ]),\n      ],\n      fill:[{ match: '*', id: 'gradientA' }],\n      */\n      margin: this.props.isMobile ? { top: 20, right: 25, bottom: 25, left: 20 } : { top: 30, right: 50, bottom: 45, left: 60 },\n      sliceTooltip:(slideData) => {\n        const { slice } = slideData;\n        const point = slice.points[0];\n        return (\n          <ChartCustomTooltip\n            point={point}\n          >\n            <ChartCustomTooltipRow\n              color={point.color}\n              label={point.serieId}\n              value={`$ ${point.data.yFormatted}`}\n            />\n            {\n            typeof point.data.balances === 'object' && Object.keys(point.data.balances).length &&\n              Object.keys(point.data.balances).map(token => {\n                if (token === point.serieId){\n                  return null;\n                }\n                const color = this.functionsUtil.getGlobalConfig(['stats','tokens',token,'color','hex']);\n                const balance = point.data.balances[token];\n                let formattedBalance = this.functionsUtil.formatMoney(balance,2);\n                if (parseFloat(balance)>=0.01){\n                  return (\n                    <ChartCustomTooltipRow\n                      label={token}\n                      color={color}\n                      key={`row_${token}`}\n                      value={`$ ${formattedBalance}`}\n                    />\n                  );\n                }\n                return null;\n              })\n            }\n          </ChartCustomTooltip>\n        );\n      }\n    };\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  render() {\n    return (\n      <GenericChart\n        type={Line}\n        showLoader={true}\n        {...this.state.chartProps}\n        data={this.state.chartData}\n        parentId={this.props.parentId}\n        height={this.props.chartHeight}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default PortfolioEquity;","import { Flex, Text } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass ChartCustomTooltip extends Component {\n\n  async componentWillMount(){\n\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    \n  }\n\n  render() {\n    return (\n      <DashboardCard\n        key={this.props.point.id}\n        cardProps={{\n          py:2,\n          px:3,\n          width:1,\n          left: this.props.point.data.itemPos && this.props.point.data.itemPos>50 ? '-110%' : '0'\n        }}\n      >\n        <Flex\n          width={1}\n          flexDirection={'column'}\n        >\n          {\n            this.props.point.data.xFormatted && \n              <Text\n                mb={2}\n                fontSize={1}\n                fontWeight={3}\n                color={'cellText'}\n                textAlign={'left'}\n              >\n                {this.props.point.data.xFormatted}\n              </Text>\n          }\n          {this.props.children}\n        </Flex>\n      </DashboardCard>\n    );\n  }\n}\n\nexport default ChartCustomTooltip;\n","import React, { Component } from 'react';\nimport { Flex, Box, Text } from \"rimble-ui\";\n\nclass ChartCustomTooltipRow extends Component {\n\n  async componentWillMount(){\n    \n  }\n\n  async componentDidUpdate(prevProps,prevState){\n\n  }\n\n  render() {\n    return (\n      <Flex\n        mb={2}\n        width={1}\n        alignItems={'center'}\n        flexDirection={'row'}\n      >\n        <Flex\n          pr={2}\n          style={{\n            flexBasis:'0',\n            flex:'1 1 0px'\n          }}\n          alignItems={'center'}\n          justifyContent={'flex-start'}\n        > \n          {\n            this.props.color && \n            <Box\n              mr={2}\n              width={'10px'}\n              height={'10px'}\n              borderRadius={'50%'}\n              backgroundColor={this.props.color}\n            >\n            </Box>\n          }\n          <Text\n            fontSize={1}\n            fontWeight={2}\n            textAlign={'left'}\n            color={'dark-gray'}\n            style={{\n              textTransform:'capitalize'\n            }}\n          >\n            {this.props.label}\n          </Text>\n        </Flex>\n        <Flex\n          style={{\n            flexBasis:'0',\n            flex:'1 1 0px'\n          }}\n          alignItems={'center'}\n          justifyContent={'flex-end'}\n        >\n          <Text\n            fontSize={1}\n            fontWeight={3}\n            color={'cellText'}\n            textAlign={'right'}\n            style={{\n              whiteSpace:'nowrap'\n            }}\n            dangerouslySetInnerHTML={{\n              __html: this.props.value\n            }}\n          >\n          </Text>\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default ChartCustomTooltipRow;\n"],"sourceRoot":""}