{"version":3,"sources":["Rebalance/Rebalance.js"],"names":["Rebalance","state","loading","processing","rebalance","txHash","shouldRebalance","functionsUtil","checkRebalance","_callee","_Users_samuelecester_Desktop_git_idle_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","a","wrap","_context","prev","next","_this","setState","props","tokenConfig","sent","stop","this","_callee2","e","callback","callback_receipt","_context2","preventDefault","tx","error","eventData","eventCategory","eventAction","selectedToken","eventLabel","status","getTransactionError","sendGoogleAnalyticsEvent","window","toastProvider","addMessage","secondaryMessage","colorTheme","actionHref","actionText","variant","prevState","Object","_Users_samuelecester_Desktop_git_idle_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","transactionHash","contractMethodSendWrapper","idle","token","setProps","FunctionsUtil","loadUtils","prevProps","accountChanged","account","_this2","react__WEBPACK_IMPORTED_MODULE_9___default","createElement","rimble_ui__WEBPACK_IMPORTED_MODULE_8__","px","width","minHeight","alignItems","flexDirection","justifyContent","_FlexLoader_FlexLoader__WEBPACK_IMPORTED_MODULE_10__","flexProps","loaderProps","size","textProps","ml","text","_TxProgressBar_TxProgressBar__WEBPACK_IMPORTED_MODULE_13__","web3","waitText","endMessage","hash","mt","mb","textAlign","_RoundButton_RoundButton__WEBPACK_IMPORTED_MODULE_11__","buttonProps","disabled","handleClick","Component"],"mappings":"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","file":"static/js/28.8a117405.chunk.js","sourcesContent":["import { Flex, Text } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass Rebalance extends Component {\n\n  state = {\n    loading:true,\n    processing:{\n      rebalance:{\n        txHash:null,\n        loading:false\n      },\n    },\n    shouldRebalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.checkRebalance();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged || accountChanged){\n      this.checkRebalance();\n    }\n  }\n\n  checkRebalance = async () => {\n    this.setState({\n      loading:true,\n    });\n\n    const shouldRebalance = await this.functionsUtil.checkRebalance(this.props.tokenConfig);\n\n    this.setState({\n      loading:false,\n      shouldRebalance\n    });\n  }\n\n  rebalance = async (e) => {\n    e.preventDefault();\n\n    const callback = (tx,error) => {\n\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Rebalance',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      let txDenied = false;\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      if (tx.status === 'success'){\n        // Toast message\n        window.toastProvider.addMessage(`Rebalance completed`, {\n          secondaryMessage: `Now the pool is balanced!`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"success\",\n        });\n\n      } else if (!txDenied){\n        window.toastProvider.addMessage(`Rebalance error`, {\n          secondaryMessage: `The rebalance has failed, try again...`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"failure\",\n        });\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          rebalance:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n\n      this.checkRebalance();\n    }\n\n    const callback_receipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            rebalance:{\n              ...prevState.processing.rebalance,\n              txHash\n            }\n          }\n        })\n      );\n    };\n\n    this.props.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'rebalance', [], null , callback, callback_receipt);\n\n    this.setState({\n      processing:{\n        rebalance:{\n          txHash:null,\n          loading:true\n        }\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Flex\n        px={3}\n        width={1}\n        minHeight={'100px'}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n      {\n        this.state.loading ? (\n          <FlexLoader\n            flexProps={{\n              flexDirection:'row'\n            }}\n            loaderProps={{\n              size:'30px'\n            }}\n            textProps={{\n              ml:2\n            }}\n            text={'Checking rebalance...'}\n          />\n        ) : (\n          this.state.processing.rebalance.loading ? (\n            <TxProgressBar web3={this.props.web3} waitText={`Rebalance estimated in`} endMessage={`Finalizing rebalance request...`} hash={this.state.processing.rebalance.txHash} />\n          ) : (\n            <Flex\n              width={1}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                mt={0}\n                mb={3}\n                textAlign={'center'}\n              >\n                {this.state.shouldRebalance ? 'Rebalance the entire pool. All users will bless you.' : 'The pool is already balanced.'}\n              </Text>\n              <RoundButton\n                buttonProps={{\n                  width:'auto',\n                  disabled:!this.state.shouldRebalance\n                }}\n                handleClick={e => this.rebalance(e)}\n              >\n                Rebalance\n              </RoundButton>\n            </Flex>\n          )\n        )\n      }\n      </Flex>\n    )\n  }\n}\n\nexport default Rebalance;"],"sourceRoot":""}