{"version":3,"sources":["EstimatedEarnings/EstimatedEarnings.js"],"names":["EstimatedEarnings","state","tokenApy","chartData","chartProps","inputValue","maxInputValue","functionsUtil","this","setProps","props","FunctionsUtil","loadUtils","loadChart","prevProps","prevState","selectedToken","getTokenApy","tokenConfig","setState","amount","BNify","earningsYear","times","div","amountMonth","parseFloat","amount3Months","amount6Months","amountYear","perc","label","value","month","color","getGlobalConfig","join","monthColor","month3","month3Color","month6","month6Color","year","yearColor","labelTextColorModifiers","gridYStep","gridYValues","i","gridYValue","push","padding","animate","indexBy","labelSkipWidth","labelSkipHeight","keys","colors","_ref","id","data","concat","d","_this2","abbreviateNumber","labelTextColor","from","modifiers","isInteractive","minValue","axisLeft","format","v","tickValues","orient","tickSize","tickPadding","tickRotation","legend","legendPosition","axisBottom","theme","labels","text","fontSize","fontWeight","fill","counter","fontFamily","fonts","sansSerif","axis","ticks","grid","line","stroke","strokeDasharray","margin","isMobile","top","right","bottom","left","e","target","length","isNaN","Math","min","_this3","showAPYDisclaimer","react__WEBPACK_IMPORTED_MODULE_9___default","a","createElement","_DashboardCard_DashboardCard__WEBPACK_IMPORTED_MODULE_14__","cardProps","p","rimble_ui__WEBPACK_IMPORTED_MODULE_15__","width","flexDirection","justifyContent","alignItems","_AssetField_AssetField__WEBPACK_IMPORTED_MODULE_10__","token","fieldInfo","name","mb","height","textAlign","toFixed","style","display","verticalAlign","placement","message","ml","size","mt","max","type","required","borderRadius","boxShadow","onChange","changeInputValue","bind","border","divider","placeholder","toUpperCase","_RoundButton_RoundButton__WEBPACK_IMPORTED_MODULE_11__","buttonProps","handleClick","map","index","py","my","key","position","minHeight","zIndex","background","_GenericChart_GenericChart__WEBPACK_IMPORTED_MODULE_13__","Object","assign","Bar","showLoader","parentId","Component"],"mappings":"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","file":"static/js/37.d7f784df.chunk.js","sourcesContent":["import theme from '../theme';\nimport { Bar } from '@nivo/bar';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Text, Input, Icon, Tooltip } from \"rimble-ui\";\n\nclass EstimatedEarnings extends Component {\n\n  state = {\n    tokenApy:null,\n    chartData:null,\n    chartProps:null,\n    inputValue:1000,\n    maxInputValue:999999999999999\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    this.loadChart();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged){\n      this.loadChart();\n    }\n  }\n\n  async getTokenApy(){\n    const tokenApy = this.state.tokenApy || await this.functionsUtil.getTokenApy(this.props.tokenConfig);\n    if (this.state.tokenApy !== tokenApy){\n      this.setState({\n        tokenApy\n      });\n    }\n    return tokenApy;\n  }\n\n  async loadChart(){\n\n    const tokenApy = await this.getTokenApy();\n\n    const amount = this.functionsUtil.BNify(this.state.inputValue);\n    const earningsYear = amount.times(tokenApy.div(100));\n\n    const amountMonth = parseFloat(earningsYear.div(12));\n    const amount3Months = parseFloat(earningsYear.div(4));\n    const amount6Months = parseFloat(earningsYear.div(2));\n    const amountYear = parseFloat(earningsYear.div(1));\n\n    const chartData = [\n      {\n        perc:1/12,\n        label:'MONTH',\n        value:amountMonth,\n        month:amountMonth,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        monthColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:3/12,\n        label:'3 MONTHS',\n        value:amount3Months,\n        month3:amount3Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month3Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:6/12,\n        label:'6 MONTHS',\n        value:amount6Months,\n        month6:amount6Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month6Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:1,\n        label:'YEAR',\n        year:amountYear,\n        value:amountYear,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        yearColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      }\n    ];\n\n    let labelTextColorModifiers = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'chart','labelTextColorModifiers']);\n\n    const maxGridLines = 4;\n    const gridYStep = amountYear/maxGridLines;\n    const gridYValues = [0];\n    for (let i=1;i<=maxGridLines;i++){\n      const gridYValue = i*gridYStep;\n      gridYValues.push(gridYValue);\n    }\n\n    const chartProps = {\n      padding: 0.2,\n      animate: false,\n      indexBy: 'label',\n      // enableLabel: false,\n      labelSkipWidth: 16,\n      labelSkipHeight: 16,\n      keys: ['month','month3','month6','year'],\n      colors: ({ id, data }) => data[`${id}Color`],\n      label: d => this.functionsUtil.abbreviateNumber(d.value,2,4)+' '+this.props.selectedToken,\n      labelTextColor: labelTextColorModifiers ? { from: 'color', modifiers: [ labelTextColorModifiers ] } : null,\n      isInteractive:false,\n      minValue:0,\n      gridYValues,\n      // maxValue:amountYear,\n      axisLeft:{\n        format: v => this.functionsUtil.abbreviateNumber(v,1,3),\n        tickValues:gridYValues,\n        orient: 'left',\n        tickSize: 0,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendPosition: 'middle'\n      },\n      axisBottom:{\n        legend: '',\n        tickSize:0,\n        tickPadding: 15,\n        orient: 'bottom',\n      },\n      theme:{\n        labels:{\n          text:{\n            fontSize:15,\n            fontWeight:600,\n            fill:theme.colors.counter,\n            fontFamily: theme.fonts.sansSerif\n          }\n        },\n        axis: {\n          ticks: {\n            text: {\n              fontSize:14,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '9 5'\n          }\n        },\n      },\n      margin: this.props.isMobile ? { top: 0, right: 0, bottom: 30, left: 0 } : { top: 10, right: 0, bottom: 50, left: 65 }\n    }\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  changeInputValue(e){\n    let inputValue = e.target.value.length && !isNaN(e.target.value) ? Math.min(this.state.maxInputValue,parseFloat(e.target.value)) : 0;\n    inputValue = this.functionsUtil.BNify(inputValue);\n    this.setState({\n      inputValue\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const showAPYDisclaimer = idleTokenEnabled && this.functionsUtil.getGlobalConfig(['govTokens','IDLE','showAPR']);\n\n    return (\n      <DashboardCard\n        cardProps={{\n          p:[3,4]\n        }}\n      >\n        <Flex\n          width={1}\n          flexDirection={['column','row']}\n        >\n          <Flex\n            width={[1,0.3]}\n            flexDirection={'column'}\n            justifyContent={'flex-start'}\n          >\n            <Flex\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <AssetField\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'icon',\n                  props:{\n                    mb:2,\n                    height:'2.5em'\n                  }\n                }}\n              />\n              <Text\n                fontSize={2}\n                color={'cellText'}\n                textAlign={'center'}\n              >\n                Set the amount and see your estimated earnings on time based on the current APY: { this.state.tokenApy ? `${this.state.tokenApy.toFixed(2)}%` : null}\n                {\n                  showAPYDisclaimer && \n                    <Flex\n                      style={{\n                        display:'inline-flex',\n                        verticalAlign:'middle'\n                      }}\n                    >\n                      <Tooltip\n                        placement={'top'}\n                        message={this.functionsUtil.getGlobalConfig(['messages','apyLong'])}\n                      >\n                        <Icon\n                          ml={1}\n                          name={\"Info\"}\n                          size={'1em'}\n                          color={'cellTitle'}\n                        />\n                      </Tooltip>\n                    </Flex>\n                }\n              </Text>\n            </Flex>\n            <Flex\n              mt={3}\n              flexDirection={'column'}\n            >\n              <Input\n                min={0}\n                max={this.state.maxInputValue}\n                type={\"number\"}\n                required={true}\n                height={['3em','3.4em']}\n                borderRadius={2}\n                fontWeight={500}\n                textAlign={'center'}\n                boxShadow={'none !important'}\n                onChange={this.changeInputValue.bind(this)}\n                border={`1px solid ${theme.colors.divider}`}\n                placeholder={`Insert ${this.props.selectedToken.toUpperCase()} amount`}\n                value={this.state.inputValue && !isNaN(this.state.inputValue) ? this.state.inputValue : ''}\n              />\n            </Flex>\n            <Flex\n              mt={3}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                buttonProps={{\n                  width:[1,1/2],\n                }}\n                handleClick={this.loadChart.bind(this)}\n              >\n                CALCULATE\n              </RoundButton>\n            </Flex>\n          </Flex>\n          <Flex\n            mt={[3,0]}\n            width={[1,0.7]}\n            id={'estimated-earnings-chart'}\n          >\n            {\n              this.props.isMobile ? (\n                <Flex\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  {\n                    this.state.chartData !== null && this.state.chartData.map((v,index) => (\n                      <Flex\n                        py={2}\n                        my={2}\n                        width={1}\n                        flexDirection={'row'}\n                        key={`earnings_${index}`}\n                      >\n                        <Flex\n                          width={0.35}\n                          alignItems={'center'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            color={'legend'}\n                          >\n                            {v.label}\n                          </Text>\n                        </Flex>\n                        <Flex\n                          width={0.65}\n                          position={'relative'}\n                          alignItems={'center'}\n                          minHeight={['20px','35px']}\n                          justifyContent={'center'}\n                        >\n                          <Flex\n                            zIndex={1}\n                            position={'relative'}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Text\n                              fontSize={1}\n                              fontWeight={3}\n                              color={'counter'}\n                            >\n                              {this.functionsUtil.abbreviateNumber(v.value,2,4)} {this.props.selectedToken}\n                            </Text>\n                          </Flex>\n                          <Flex\n                            right={0}\n                            width={v.perc}\n                            position={'absolute'}\n                            height={['20px','35px']}\n                            borderRadius={['20px 0 0 20px','35px 0 0 35px']}\n                            style={{background:`linear-gradient(-90deg, rgba(${v.color},0) 0%, rgba(${v.color},1) 100%)`}}\n                          ></Flex>\n                        </Flex>\n                      </Flex>\n                    ))\n                  }\n                </Flex>\n              ) : (\n                <GenericChart\n                  type={Bar}\n                  height={250}\n                  showLoader={true}\n                  {...this.state.chartProps}\n                  data={this.state.chartData}\n                  parentId={'estimated-earnings-chart'}\n                />\n              )\n            }\n          </Flex>\n        </Flex>\n      </DashboardCard>\n    );\n  }\n}\n\nexport default EstimatedEarnings;"],"sourceRoot":""}