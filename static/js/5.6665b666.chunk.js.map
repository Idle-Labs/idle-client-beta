{"version":3,"sources":["CardIconButton/CardIconButton.js","Notifications/Notifications.js","utilities/components/AccountModal.js","MenuAccount/MenuAccount.js","utilities/components/GovModal.js","DelegateVesting/DelegateVesting.js","DashboardHeader/DashboardHeader.js","MenuAccount/MenuAccount.module.scss","Notifications/Notifications.module.scss","CryptoInput/CryptoInput.module.scss"],"names":["CardIconButton","cardProps","Object","assign","py","width","px","this","props","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","_DashboardCard_DashboardCard__WEBPACK_IMPORTED_MODULE_7__","isInteractive","isActive","handleClick","rimble_ui__WEBPACK_IMPORTED_MODULE_6__","my","alignItems","flexDirection","justifyContent","useIconOnly","align","name","icon","size","isMobile","color","iconColor","mr","p","borderRadius","backgroundColor","iconBgColor","theme","colors","transactions","actionBg","redeem","fontWeight","fontSize","textProps","text","Component","Notifications","state","tabOpened","notifications","mouseOverBell","unreadNotifications","lastOpenTimestamp","mouseOverNotifications","functionsUtil","governanceUtil","setProps","GovernanceUtil","loadUtils","loadNotifications","prevProps","prevState","clickEvent","setState","length","sendGoogleAnalyticsEvent","eventCategory","eventAction","eventLabel","updateLastOpenTimestamp","notificationsChanged","JSON","stringify","filter","n","timestamp","_this2","Date","now","notificationsParams","getStoredItem","setLocalStorage","Promise","all","getSnapshotProposals","getProposals","getBatchedDeposits","account","activeSnapshotProposals","governanceProposals","batchedDeposits","currTime","snapshotProposalBaseUrl","getGlobalConfig","enabled","start","end","forEach","msg","payload","body","replace","push","image","title","link","authorIpfsHash","date","_this3","strToMoment","utc","format","governanceProposalUrl","iconProps","hash","id","batchDepositConfig","batchDepositBaseUrl","concat","route","keys","batchToken","batchInfo","lastExecution","timeStamp","batchRedeems","toFixed","status","completed","sort","b","notification","openWindow","window","location","_this4","hasUnreadNotifications","react_default","index_es","zIndex","position","flexProps","onMouseOut","e","setMouseOverBell","onMouseOver","onClick","toggleTab","bind","className","styles","bell","ring","active","counter","DashboardCard","style","right","maxHeight","overflow","top","minWidth","setMouseOverNotifications","map","index","ExtLink","textDecoration","key","openNotification","borderBottom","divider","src","height","ml","lineHeight","whiteSpace","textOverflow","textAlign","AccountModal","logout","balances","loadBalances","_callee","regenerator_default","wrap","_context","prev","next","_this","availableStrategies","contractsInitialized","abrupt","best","baseToken","tokens","strategy","strategyToken","idle","token","stop","setConnector","_callee2","connectorName","_context2","context","sent","FunctionsUtil","accountChanged","acccount","section","goToSection","closeModal","rows","renderBalances","i","mt","boxShadow","tokenIndex","AssetField","tokenConfig","fieldInfo","isOpen","ModalCard","closeFunc","Header","Body","mb","maxWidth","address","h4","toolName","toolConfig","mx","label","Footer","error","ButtonLoader","buttonText","isLoading","asyncToGenerator","mark","_callee4","_context4","buttonProps","gradientButton","React","MenuAccount","isModalOpen","idleTokenBalance","idleGovToken","toggleModal","modalName","objectSpread","getIdleGovToken","loadIdleTokenBalance","BNify","getBalance","getUnclaimedTokens","balance","unclaimed","plus","walletProvider","connectorInfo","toLowerCase","walletIcon","governanceRoute","governanceEnabled","dashboardRoute","display","alt","ShortHash","src_Notifications_Notifications","flex","balanceButton","setGovModal","isDashboard","RoundButton","mainColor","isGovernance","components_AccountModal","connectAndValidateAccount","GovModal","total","txStatus","processing","txHash","loading","loadTokenInfo","_ref2","_ref3","slicedToArray","claim","callback","callbackReceipt","tx","eventData","getTransactionError","newState","claimCallback","transactionHash","claimRewards","_callee3","action","_context3","bgLayer","background","pt","titleProps","gt","pb","href","TxProgressBar","textColor","web3","cancelTextColor","cancelTextHoverColor","waitText","endMessage","cancelTransaction","contrastColor","disabled","lte","DelegateVesting","newDelegate","delegatee","vestingAmount","currentDelegate","delegateAddressValid","delegateDifferentWallet","vestingContractDelegated","getDelegatesChanges","getCurrentDelegate","getVestingContract","delegatesChanges","vestingContract","getVestingAmount","lastDelegateTx","d","returnValues","delegator","pop","toDelegate","revoke","delegate","repeat","checkAddress","loadData","delegateVesting","target","value","div","min","type","required","placeholder","onChange","changeDelegate","border","checked","setDelegateDifferentWallet","DashboardHeader","govModalOpened","src_MenuAccount_MenuAccount","hoverColor","src_DelegateVesting_DelegateVesting","components_GovModal","module","exports","list","newLink","newPill","mainInput","button","newPillContainerAnim"],"mappings":"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","file":"static/js/5.6665b666.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Flex, Text, Icon } from \"rimble-ui\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass CardIconButton extends Component {\n  render() {\n    const cardProps = Object.assign({\n      py:1,\n      width:'auto',\n      px:['12px',3],\n    },this.props.cardProps);\n\n    return (\n       <DashboardCard\n         cardProps={cardProps}\n         isInteractive={true}\n         isActive={this.props.isActive}\n         handleClick={this.props.handleClick}\n       >\n         <Flex\n           my={1}\n           alignItems={'center'}\n           flexDirection={'row'}\n           justifyContent={'center'}\n         >\n          {\n            this.props.useIconOnly ? (\n              <Icon\n                align={'center'}\n                name={this.props.icon}\n                size={ this.props.isMobile ? '1.2em' : '1.4em' }\n                color={ this.props.iconColor ? this.props.iconColor : 'redeem' }\n              />\n            ) : (\n             <Flex\n               mr={2}\n               p={['4px','7px']}\n               borderRadius={'50%'}\n               alignItems={'center'}\n               justifyContent={'center'}\n               backgroundColor={ this.props.iconBgColor ? this.props.iconBgColor : this.props.theme.colors.transactions.actionBg.redeem }\n             >\n               <Icon\n                 align={'center'}\n                 name={this.props.icon}\n                 size={ this.props.isMobile ? '1.2em' : '1.4em' }\n                 color={ this.props.iconColor ? this.props.iconColor : 'redeem' }\n               />\n             </Flex>\n            )\n          }\n           <Text\n             fontWeight={3}\n             fontSize={[1,3]}\n             {...this.props.textProps}\n           >\n             {this.props.text}\n           </Text>\n         </Flex>\n       </DashboardCard>\n    );\n  }\n}\n\nexport default CardIconButton;","import ExtLink from '../ExtLink/ExtLink';\nimport React, { Component } from 'react';\nimport styles from './Notifications.module.scss';\nimport { Flex, Icon, Box, Text, Image } from \"rimble-ui\";\nimport GovernanceUtil from '../utilities/GovernanceUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass Notifications extends Component {\n\n  state = {\n    tabOpened:false,\n    notifications:[],\n    mouseOverBell:false,\n    unreadNotifications:0,\n    lastOpenTimestamp:null,\n    mouseOverNotifications:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  governanceUtil = null;\n\n  loadUtils(){\n    if (this.governanceUtil){\n      this.governanceUtil.setProps(this.props);\n    } else {\n      this.governanceUtil = new GovernanceUtil(this.props);\n    }\n    this.functionsUtil = this.governanceUtil.functionsUtil;\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.loadNotifications();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const clickEventChanged = prevProps.clickEvent !== this.props.clickEvent;\n    if (clickEventChanged && this.props.clickEvent && !this.state.mouseOverNotifications && !this.state.mouseOverBell && this.state.tabOpened){\n      this.setState({\n        tabOpened:false\n      });\n    }\n\n    const tabOpenedChanged = prevState.tabOpened !== this.state.tabOpened;\n    if (tabOpenedChanged && this.state.tabOpened && this.state.notifications.length>0){\n\n      // Send Google Analytics event\n      this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'Notifications',\n        eventAction: 'open_tab',\n        eventLabel: ''\n      });\n\n      this.updateLastOpenTimestamp();\n    }\n\n    const notificationsChanged = JSON.stringify(prevState.notifications) !== JSON.stringify(this.state.notifications);\n    const lastOpenTimestampChanged = prevState.lastOpenTimestamp !== this.state.lastOpenTimestamp;\n    if (lastOpenTimestampChanged || notificationsChanged){\n      const unreadNotifications = this.state.lastOpenTimestamp ? this.state.notifications.filter( n => n.timestamp>this.state.lastOpenTimestamp ).length  : this.state.notifications.length;\n      this.setState({\n        unreadNotifications\n      });\n    }\n  }\n\n  updateLastOpenTimestamp(){\n    const lastOpenTimestamp = Date.now();\n    \n    // Set Notification params in localStorage\n    const notificationsParams = this.functionsUtil.getStoredItem('notificationsParams',true,{});\n    notificationsParams.lastOpenTimestamp = lastOpenTimestamp;\n    this.functionsUtil.setLocalStorage('notificationsParams',notificationsParams,true);\n\n    this.setState({\n      lastOpenTimestamp\n    });\n  }\n\n  async loadNotifications(){\n\n    // Get stored lastOpenTimestamp for notifications\n    const notificationsParams = this.functionsUtil.getStoredItem('notificationsParams',true,{});\n    const lastOpenTimestamp = notificationsParams.lastOpenTimestamp || null;\n\n    // Get active snapshot proposals\n    const [\n      activeSnapshotProposals,\n      governanceProposals,\n      batchedDeposits\n    ] = await Promise.all([\n      this.functionsUtil.getSnapshotProposals(true),\n      this.governanceUtil.getProposals(null,'Active'),\n      this.functionsUtil.getBatchedDeposits(this.props.account,'executed')\n    ]);\n\n    const currTime = Date.now();\n\n    // Add snapshot proposals\n    const snapshotProposalBaseUrl = this.functionsUtil.getGlobalConfig(['network','providers','snapshot','urls','proposals']);\n    let notifications = this.functionsUtil.getGlobalConfig(['notifications']).filter( n => (n.enabled && n.start<=currTime && n.end>currTime) );\n\n    activeSnapshotProposals.forEach( p => {\n        const text = p.msg.payload.body.replace(/^[#]*/,'');\n        // const text = p.msg.payload.name.replace(/^[#]*/,'');\n        notifications.push({\n          text,\n          image:'/images/snapshot.png',\n          title:'Snapshot Proposal',\n          timestamp:p.msg.payload.start*1000,\n          link:snapshotProposalBaseUrl+p.authorIpfsHash,\n          date:this.functionsUtil.strToMoment(p.msg.payload.start*1000).utc().format('MMM DD, YYYY HH:mm UTC'),\n        });\n    });\n\n    // Add governance proposals\n    const governanceProposalUrl = this.functionsUtil.getGlobalConfig(['governance','baseRoute'])+'/proposals/';\n    governanceProposals.forEach( p => {\n      notifications.push(\n        {\n          text:p.title,\n          iconProps:{\n            color:'#00acff'\n          },\n          icon:'LightbulbOutline',\n          timestamp:p.timestamp*1000,\n          title:'Governance Proposal',\n          hash:governanceProposalUrl+p.id,\n          date:this.functionsUtil.strToMoment(p.timestamp*1000).utc().format('MMM DD, YYYY HH:mm UTC'),\n        }\n      );\n    });\n\n    // Add Executed Batch Deposits\n    const batchDepositConfig = this.functionsUtil.getGlobalConfig(['tools','batchDeposit']);\n    const batchDepositBaseUrl = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute'])+`/tools/${batchDepositConfig.route}/`;\n    Object.keys(batchedDeposits).forEach( batchToken => {\n      const batchInfo = batchedDeposits[batchToken];\n      const timestamp = batchInfo.lastExecution.timeStamp*1000;\n      const text = `You can claim ${batchInfo.batchRedeems.toFixed(4)} ${batchToken}`;\n      notifications.push({\n        text,\n        timestamp,\n        icon:'DoneAll',\n        title:'Batch Deposit Executed',\n        hash:batchDepositBaseUrl+batchToken,\n        iconProps:{\n          color:this.props.theme.colors.transactions.status.completed\n        },\n        date:this.functionsUtil.strToMoment(timestamp).utc().format('MMM DD, YYYY HH:mm UTC')\n      });\n    });\n\n    notifications = notifications.sort((a,b) => (a.timestamp < b.timestamp ? 1 : -1));\n\n    this.setState({\n      notifications,\n      lastOpenTimestamp\n    });\n  }\n\n  setMouseOverBell(mouseOverBell){\n    this.setState({\n      mouseOverBell\n    });\n  }\n\n  setMouseOverNotifications(mouseOverNotifications){\n    this.setState({\n      mouseOverNotifications\n    });\n  }\n\n  toggleTab(){\n    this.setState((prevState) => ({\n      tabOpened:!prevState.tabOpened\n    }));\n  }\n\n  openNotification(notification){\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'Notifications',\n      eventAction: 'open_notification',\n      eventLabel: notification.link || notification.hash\n    });\n\n    if (notification.link){\n      return this.functionsUtil.openWindow(notification.link);\n    } else if (notification.hash) {\n      return window.location.hash = notification.hash;\n    }\n\n    return false;\n  }\n\n  render() {\n    const hasUnreadNotifications = this.state.unreadNotifications>0;\n    const iconColor = hasUnreadNotifications ? '#ffdc00' : 'cellText';\n    return (\n      <Flex\n        zIndex={999}\n        position={'relative'}\n        {...this.props.flexProps}\n      >\n        <Box\n          width={1}\n          position={'relative'}\n          onMouseOut={(e) => this.setMouseOverBell(false)}\n          onMouseOver={(e) => this.setMouseOverBell(true)}\n        >\n          <Icon\n            size={'2.4em'}\n            color={iconColor}\n            name={'Notifications'}\n            onClick={this.toggleTab.bind(this)}\n            className={[styles.bell,(hasUnreadNotifications ? styles.ring : null),(this.state.tabOpened || this.state.notifications.length>0 ? styles.active : null)]}\n          />\n          {\n            hasUnreadNotifications && \n              <Box\n                className={styles.counter}\n              >\n                {this.state.notifications.length}\n              </Box>\n          }\n        </Box>\n        {\n          this.state.tabOpened &&\n            <DashboardCard\n              cardProps={{\n                style:{\n                  right:0,\n                  maxHeight:'21em',\n                  overflow:'scroll',\n                  position:'absolute',\n                  top:this.props.isMobile ? '2.8em' : '3em',\n                },\n                minWidth:['91vw','20em'],\n                onMouseOut:(e) => this.setMouseOverNotifications(false),\n                onMouseOver:(e) => this.setMouseOverNotifications(true),\n              }}\n            >\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n              {\n                this.state.notifications.length>0 ?\n                  this.state.notifications.map( (n,index) => (\n                    <ExtLink\n                      style={{\n                        textDecoration:'none'\n                      }}\n                      key={`notification_${index}`}\n                      onClick={ e => this.openNotification(n) }\n                    >\n                      <Flex\n                        py={2}\n                        px={1}\n                        flexDirection={'row'}\n                        className={styles.notification}\n                        borderBottom={index<this.state.notifications.length-1 ? `1px solid ${this.props.theme.colors.divider}` : null}\n                      >\n                        <Flex\n                          minWidth={'2em'}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          {\n                            n.icon ? (\n                              <Icon\n                                name={n.icon}\n                                size={'1.6em'}\n                                color={'copyColor'}\n                                {...n.iconProps}\n                              />\n                            ) : n.image && (\n                              <Image\n                                src={n.image}\n                                width={'1.6em'}\n                                height={'1.6em'}\n                              />\n                            )\n                          }\n                        </Flex>\n                        <Flex\n                          ml={1}\n                          overflow={'hidden'}\n                          flexDirection={'column'}\n                        >\n                          <Text\n                            fontSize={1}\n                            color={'blue'}\n                            lineHeight={1.3}\n                          >\n                            {n.title}\n                          </Text>\n                          <Text\n                            fontSize={1}\n                            lineHeight={1.3}\n                            color={'copyColor'}\n                            style={{\n                              overflow:'hidden',\n                              whiteSpace:'nowrap',\n                              textOverflow:'ellipsis'\n                            }}\n                          >\n                            {n.text}\n                          </Text>\n                          <Text\n                            fontSize={0}\n                            lineHeight={1.3}\n                            color={'cellText'}\n                          >\n                            {n.date}\n                          </Text>\n                        </Flex>\n                      </Flex>\n                    </ExtLink>\n                  ))\n                : (\n                  <Text\n                    py={2}\n                    textAlign={'center'}\n                  >\n                    There are no notifications.\n                  </Text>\n                )\n              }\n              </Flex>\n            </DashboardCard>\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default Notifications;\n","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport AssetField from '../../AssetField/AssetField.js';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport { Heading, Modal, Flex, EthAddress } from \"rimble-ui\";\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\nimport styles from '../../CryptoInput/CryptoInput.module.scss';\nimport CardIconButton from '../../CardIconButton/CardIconButton';\n\nclass AccountModal extends React.Component {\n\n  state = {\n    logout: false,\n    balances: null\n  }\n\n  loadBalances = async () => {\n\n    if (!this.props.availableStrategies || !this.props.contractsInitialized || !this.props.account || this.state.balances !== null){\n      return false;\n    }\n\n    const balances = [];\n    const allTokens = Object.keys(this.props.availableStrategies.best);\n\n    allTokens.forEach( baseToken => {\n      const tokens = [];\n      tokens.push(baseToken);\n      Object.keys(this.props.availableStrategies).forEach( strategy => {\n        const strategyToken = this.props.availableStrategies[strategy][baseToken];\n        if (strategyToken){\n          tokens.push(strategyToken.idle.token);\n        }\n      });\n\n      balances.push(tokens);\n    });\n\n    this.setState({\n      balances\n    });\n  }\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n    this.loadBalances();\n  }\n\n  componentDidUpdate(prevProps) {\n    this.loadUtils();\n\n    const accountChanged = prevProps.acccount !== this.props.account;\n    const contractsInitialized = !prevProps.contractsInitialized && this.props.contractsInitialized;\n    const availableStrategiesChanged = !prevProps.availableStrategies && this.props.availableStrategies;\n    if (availableStrategiesChanged || accountChanged || contractsInitialized){\n      this.loadBalances();\n    }\n  }\n\n  setConnector = async (connectorName) => {\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'Connect',\n      eventAction: 'logout'\n    });\n\n    if (typeof this.props.setConnector === 'function'){\n      this.props.setConnector(connectorName);\n    }\n\n    return await this.props.context.setConnector(connectorName);\n  }\n\n  async logout(){\n    this.setState({\n      logout:true\n    });\n\n    this.props.logout();\n    await this.setConnector('Infura');\n    // this.props.closeModal();\n  }\n\n  goToSection(section){\n    this.props.goToSection(section);\n    this.props.closeModal();\n  }\n\n  render(){\n    if (this.props.account){\n\n      const rows = (Object.keys(this.props.availableStrategies).length+1);\n      const renderBalances = this.state.balances && this.state.balances.map( (tokens,i) => {\n        return (\n          <Flex\n            mt={2}\n            width={1}\n            boxShadow={0}\n            key={'balance_'+i}\n            alignItems={'center'}\n            flexDirection={'row'}\n            >\n              {\n                tokens.map( (token,tokenIndex) => (\n                  <Flex\n                    width={1/rows}\n                    flexDirection={'row'}\n                    key={'balance_token_'+token}\n                    justifyContent={'flex-start'}\n                  >\n                    <AssetField\n                      token={token}\n                      tokenConfig={{\n                        token:token\n                      }}\n                      fieldInfo={{\n                        name:'icon',\n                        props:{\n                          mr:[1,2],\n                          ml:[1,4],\n                          width:['1.4em','2em'],\n                          height:['1.4em','2em']\n                        }\n                      }}\n                    />\n                    <AssetField\n                      {...this.props}\n                      token={token}\n                      tokenConfig={{\n                        token:token\n                      }}\n                      fieldInfo={{\n                        name:'tokenBalance',\n                        props:{\n                          fontSize:[0,2],\n                          fontWeight:500,\n                          color:'cellText'\n                        }\n                      }}\n                    />\n                  </Flex>\n                ) )\n              }\n          </Flex>\n        );\n      });\n\n      const showTools = ['addFunds','tokenSwap'];\n\n      return (\n        <Modal isOpen={this.props.isOpen}>\n          <ModalCard closeFunc={this.props.closeModal}>\n            <ModalCard.Header title={'Account overview'}></ModalCard.Header>\n            <ModalCard.Body>\n              <Flex\n                alignItems={'center'}\n                width={[\"auto\", \"40em\"]}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <Flex\n                  width={1}\n                  mb={[2,3]}\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  maxWidth={['100%','30em']}\n                  justifyContent={'stretch'}\n                >\n                  <EthAddress\n                    width={1}\n                    address={this.props.account}\n                  />\n                </Flex>\n                <Flex\n                  width={1}\n                  mb={[2,3]}\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  maxWidth={['100%','30em']}\n                >\n                  <Heading.h4\n                    textAlign={'center'}\n                  >\n                    Balances:\n                  </Heading.h4>\n                  { renderBalances }\n                </Flex>\n                <Flex\n                  width={1}\n                  mb={[2,3]}\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  <Heading.h4\n                    mb={2}\n                    textAlign={'center'}\n                  >\n                    Tools:\n                  </Heading.h4>\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    justifyContent={'center'}\n                    flexDirection={['column','row']}\n                  >\n                    {\n                      showTools.map( toolName => {\n                        const toolConfig = this.functionsUtil.getGlobalConfig(['tools',toolName]);\n                        return (\n                          <CardIconButton\n                            {...this.props}\n                            key={`tool_${toolName}`}\n                            cardProps={{\n                              mx:[0,2],\n                              my:[2,0],\n                              width:'auto',\n                              minWidth:['50%','auto']\n                            }}\n                            icon={toolConfig.icon}\n                            text={toolConfig.label}\n                            handleClick={ e => this.goToSection(`tools/${toolConfig.route}`) }\n                          />\n                        )\n                      })\n                    }\n                  </Flex>\n                </Flex>\n              </Flex>\n            </ModalCard.Body>\n\n            <ModalCard.Footer>\n              {(this.props.context.active || (this.props.context.error && this.props.context.connectorName)) && (\n                <ButtonLoader\n                  buttonText={'Logout wallet'}\n                  isLoading={this.state.logout}\n                  handleClick={ async () => { await this.logout() } }\n                  buttonProps={{className:styles.gradientButton,borderRadius:'2rem',mt:[4,8],minWidth:['95px','145px'],size:['auto','medium']}}\n                >\n                </ButtonLoader>\n              )}\n            </ModalCard.Footer>\n          </ModalCard>\n        </Modal>\n      );\n    }\n    return null;\n  }\n}\n\nexport default AccountModal;\n","import React, { Component } from 'react';\nimport styles from './MenuAccount.module.scss';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport ShortHash from \"../utilities/components/ShortHash\";\nimport { Flex, Icon, Image, Link, Text } from \"rimble-ui\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport Notifications from '../Notifications/Notifications';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport AccountModal from \"../utilities/components/AccountModal\";\n\nclass MenuAccount extends Component {\n\n  state = {\n    isModalOpen: null,\n    idleTokenBalance: null\n  };\n\n  // Utils\n  idleGovToken = null;\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    this.idleGovToken = this.functionsUtil.getIdleGovToken();\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.loadIdleTokenBalance();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    if (accountChanged){\n      this.loadIdleTokenBalance();\n    }\n  }\n\n  async loadIdleTokenBalance(){\n    const idleGovTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    if (idleGovTokenEnabled){\n      let idleTokenBalance = this.functionsUtil.BNify(0);\n      const [\n        balance,\n        unclaimed\n      ] = await Promise.all([\n        this.idleGovToken.getBalance(this.props.account),\n        this.idleGovToken.getUnclaimedTokens(this.props.account)\n      ]);\n\n      if (balance && unclaimed){\n        idleTokenBalance = this.functionsUtil.BNify(balance).plus(unclaimed);\n      }\n\n      return this.setState({\n        idleTokenBalance\n      });\n    }\n    return null;\n  }\n\n  toggleModal = (modalName) => {\n    this.setState(state => ({...state, isModalOpen: (state.isModalOpen===modalName ? null : modalName) }));\n  }\n\n  render() {\n    const walletProvider = this.functionsUtil.getStoredItem('walletProvider',false,null);\n    const connectorInfo = walletProvider ? this.functionsUtil.getGlobalConfig(['connectors',walletProvider.toLowerCase()]) : null;\n    const walletIcon = connectorInfo && connectorInfo.icon ? connectorInfo.icon : walletProvider ? `${walletProvider.toLowerCase()}.svg` : null;\n\n    const governanceRoute = this.functionsUtil.getGlobalConfig(['governance','baseRoute']);\n    const governanceEnabled = this.functionsUtil.getGlobalConfig(['governance','enabled']);\n    const dashboardRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute'])+'/'+Object.keys(this.props.availableStrategies)[0];\n\n    return (\n      this.props.account ? (\n        <Flex\n          width={1}\n          flexDirection={['column','row']}\n          alignItems={['flex-start','center']}\n        >\n          <Flex\n            mb={[2,0]}\n            flexDirection={'row'}\n            alignItems={'center'}\n            width={[1,'fit-content']}\n            justifyContent={'space-between'}\n          >\n            <DashboardCard\n              {...this.props}\n              cardProps={{\n                py:1,\n                px:[1,2],\n                mr:[2,0],\n                display:'flex',\n                width:[1,'auto']\n              }}\n              isActive={true}\n              isInteractive={true}\n              handleClick={e => this.toggleModal('account')}\n            >\n              <Flex\n                p={0}\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={['center','flex-start']}\n              >\n                {\n                  connectorInfo ? (\n                    <Image\n                      mr={[1,2]}\n                      width={'2em'}\n                      height={'2em'}\n                      display={'inline-flex'}\n                      src={`images/${walletIcon}`}\n                      alt={walletProvider.toLowerCase()}\n                    />\n                  ) : (\n                    <Icon\n                      mr={[1,2]}\n                      size={'2em'}\n                      color={'copyColor'}\n                      name={'AccountCircle'}\n                    />\n                  )\n                }\n                <ShortHash\n                  fontSize={2}\n                  fontWeight={3}\n                  color={'copyColor'}\n                  hash={this.props.account}\n                />\n              </Flex>\n            </DashboardCard>\n            {\n              this.props.isMobile &&\n                <Notifications\n                  {...this.props}\n                />\n            }\n          </Flex>\n          <Flex\n            ml={[0,3]}\n            style={{\n              flex:'1 1 auto'\n            }}\n            width={[1,'auto']}\n            alignItems={'center'}\n            flexDirection={'row'}\n            justifyContent={this.state.idleTokenBalance ? 'space-between' : 'flex-end'}\n          >\n            {\n              this.state.idleTokenBalance && \n                <Link\n                  style={{\n                    textDecoration:'none'\n                  }}\n                  px={2}\n                  className={styles.balanceButton}\n                  onClick={ e => this.props.setGovModal(true) }\n                >\n                  <Flex\n                    alignItems={'center'}\n                    height={['38px','42px']}\n                    justifyContent={'center'}\n                  >\n                    <Image\n                      mr={1}\n                      width={'1.7em'}\n                      height={'1.7em'}\n                      display={'inline-flex'}\n                      src={`images/tokens/IDLE.png`}\n                    />\n                    <Text\n                      color={'white'}\n                      fontSize={[1,2]}\n                      fontWeight={500}\n                    >\n                      {this.state.idleTokenBalance.toFixed(2)} IDLE\n                    </Text>\n                  </Flex>\n                </Link>\n            }\n            <Flex\n              width={'auto'}\n              alignItems={'center'}\n              flexDirection={'row'}\n              justifyContent={'flex-end'}\n            >\n              {\n                governanceEnabled && this.props.isDashboard ? (\n                  <RoundButton\n                    buttonProps={{\n                      mainColor:'redeem',\n                      style:{\n                        width:'auto',\n                        height:this.props.isMobile ? '38px' : '45px'\n                      },\n                      size:this.props.isMobile ? 'small' : 'medium'\n                    }}\n                    handleClick={ (e) => { this.props.goToSection(governanceRoute,false) } }\n                  >\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                    >\n                      <Icon\n                        mr={[1,2]}\n                        size={'1.6em'}\n                        color={'white'}\n                        name={'ExitToApp'}\n                      />\n                      <Text\n                        fontWeight={3}\n                        color={'white'}\n                        fontSize={[2,3]}\n                      >\n                        Governance\n                      </Text>\n                    </Flex>\n                  </RoundButton>\n                ) : this.props.isGovernance && (\n                  <RoundButton\n                    buttonProps={{\n                      mainColor:'redeem',\n                      style:{\n                        width:'auto',\n                        height:this.props.isMobile ? '38px' : '45px'\n                      },\n                      size:this.props.isMobile ? 'small' : 'medium'\n                    }}\n                    handleClick={ (e) => { this.props.goToSection(dashboardRoute,false) } }\n                  >\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                    >\n                      <Icon\n                        mr={[1,2]}\n                        size={'1.6em'}\n                        color={'white'}\n                        name={'ExitToApp'}\n                      />\n                      <Text\n                        fontWeight={3}\n                        color={'white'}\n                        fontSize={[2,3]}\n                      >\n                        Dashboard\n                      </Text>\n                    </Flex>\n                  </RoundButton>\n                )\n              }\n              {\n                !this.props.isMobile &&\n                  <Notifications\n                    {...this.props}\n                    flexProps={{\n                      ml:2\n                    }}\n                  />\n              }\n            </Flex>\n          </Flex>\n          <AccountModal\n            {...this.props}\n            isOpen={this.state.isModalOpen==='account'}\n            closeModal={e => this.toggleModal('account') }\n          />\n        </Flex>\n      ) : (\n        <Flex\n          width={1}\n          justifyContent={'flex-start'}\n        >\n          <CardIconButton\n            icon={'Power'}\n            {...this.props}\n            text={'Connect'}\n            handleClick={this.props.connectAndValidateAccount}\n          />\n        </Flex>\n      )\n    );\n  }\n}\n\nexport default MenuAccount;\n","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport RoundButton from '../../RoundButton/RoundButton';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport TxProgressBar from '../../TxProgressBar/TxProgressBar';\nimport { Text, Modal, Flex, Image, Link, Icon } from \"rimble-ui\";\n\nclass GovModal extends React.Component {\n\n  state = {\n    total:null,\n    balance:null,\n    txStatus:null,\n    unclaimed:null,\n    processing: {\n      txHash:null,\n      loading:false\n    }\n  }\n\n  // Utils\n  functionsUtil = null;\n  idleGovToken = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    this.idleGovToken = this.functionsUtil.getIdleGovToken();\n  }\n\n  loadTokenInfo = async () => {\n    const [\n      balance,\n      unclaimed\n    ] = await Promise.all([\n      this.idleGovToken.getBalance(this.props.account),\n      this.idleGovToken.getUnclaimedTokens(this.props.account)\n    ]);\n\n    let total = this.functionsUtil.BNify(0);\n    if (balance && unclaimed){\n      total = this.functionsUtil.BNify(balance).plus(unclaimed);\n    }\n\n    this.setState({\n      total,\n      balance,\n      unclaimed\n    });\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n    this.loadTokenInfo();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n    // const txStatusChanged = prevState.txStatus !== this.state.txStatus;\n    // if (txStatusChanged && this.state.txStatus === 'success'){\n    //   this.loadTokenInfo();\n    // }\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      txStatus:null,\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  claim = async () => {\n    const callback = (tx,error) => {\n      // Send Google Analytics event\n      const eventData = {\n        eventAction: 'claim',\n        eventCategory: 'Governance',\n        eventLabel: tx.status ? tx.status : error\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      const newState = {\n        processing: {\n          txHash:null,\n          loading:false\n        },\n        txStatus:tx.status ? tx.status : 'error',\n      };\n\n      if (tx.status === 'success'){\n        newState.balance = this.state.unclaimed;\n        newState.unclaimed = this.BNify(0);\n\n        if (typeof this.props.claimCallback === 'function'){\n          this.props.claimCallback();\n        }\n      }\n\n      this.setState(newState);\n    };\n\n    const callbackReceipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    this.idleGovToken.claimRewards(callback,callbackReceipt);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  closeModal = async (action) => {\n    this.props.closeModal();\n  }\n\n  render() {\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          bgLayer={true}\n          mainColor={'white'}\n          maxWidth={['auto','420px']}\n          closeFunc={this.props.closeModal}\n          background={'radial-gradient(76.02% 75.41% at 1.84% 0%, rgb(162, 196, 246) 0%, rgb(10, 79, 176) 100%)'}\n        >\n          <ModalCard.Header\n            pt={3}\n            titleProps={{\n              color:'white'\n            }}\n            title={'Your IDLE balance'}\n            borderBottom={'1px solid rgba(255,255,255,0.2)'}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body\n            px={3}\n          >\n            <Flex\n              width={1}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Image\n                mt={2}\n                width={'3em'}\n                height={'3em'}\n                src={'images/tokens/IDLE.png'}\n              />\n              <Text\n                mt={2}\n                fontSize={7}\n                color={'white'}\n                fontWeight={500}\n              >\n                {this.state.total ? this.state.total.toFixed(2) : '-'}\n              </Text>\n              <Text\n                mb={2}\n                fontSize={3}\n                color={'white'}\n                fontWeight={400}\n                textAlign={'center'}\n              >\n                {\n                  this.state.unclaimed && this.state.unclaimed.gt(0) ? 'You can now claim your IDLE tokens from the Early LPs Program!' : 'You don\\'t have any IDLE to claim from the Early LPs Program'\n                }\n              </Text>\n              <Flex\n                pb={2}\n                mb={3}\n                width={1}\n                flexDirection={'column'}\n                borderBottom={'1px solid rgba(255,255,255,0.2)'}\n              >\n                <Flex\n                  mb={2}\n                  width={1}\n                  flexDirection={'row'}\n                  justifyContent={'space-between'}\n                >\n                  <Text\n                    color={'white'}\n                    fontWeight={500}\n                  >\n                    Balance:\n                  </Text>\n                  <Text\n                    color={'white'}\n                    fontWeight={500}\n                  >\n                    {this.state.balance ? this.state.balance.toFixed(4) : '-'}\n                  </Text>\n                </Flex>\n                <Flex\n                  width={1}\n                  flexDirection={'row'}\n                  justifyContent={'space-between'}\n                >\n                  <Text\n                    color={'white'}\n                    fontWeight={500}\n                  >\n                    Unclaimed:\n                  </Text>\n                  <Text\n                    color={'white'}\n                    fontWeight={500}\n                  >\n                    {this.state.unclaimed ? this.state.unclaimed.toFixed(4) : '-'}\n                  </Text>\n                </Flex>\n                <Link\n                  href={`/#${this.functionsUtil.getGlobalConfig(['governance','baseRoute'])}`}\n                >\n                  <Flex\n                    zIndex={10}\n                    position={'relative'}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={2}\n                      color={'white'}\n                      fontWeight={400}\n                    >\n                      Go to governance\n                    </Text>\n                    <Icon\n                      ml={1}\n                      size={'1em'}\n                      color={'white'}\n                      name={\"OpenInNew\"}\n                    />\n                  </Flex>\n                </Link>\n              </Flex>\n              {\n                <Flex\n                  mb={3}\n                  width={1}\n                  zIndex={10}\n                  position={'relative'}\n                  alignItems={'center'}\n                  justifyContent={'center'}\n                >\n                  {\n                    this.state.unclaimed && this.state.unclaimed.gt(0) ? \n                      // Sending transaction\n                      this.state.processing && this.state.processing.loading ? (\n                        <TxProgressBar\n                          textColor={'white'}\n                          web3={this.props.web3}\n                          cancelTextColor={'moon-gray'}\n                          cancelTextHoverColor={'white'}\n                          waitText={`Claim estimated in`}\n                          hash={this.state.processing.txHash}\n                          endMessage={`Finalizing Claim request...`}\n                          cancelTransaction={this.cancelTransaction.bind(this)}\n                        />\n                      ) : (\n                        <RoundButton\n                          buttonProps={{\n                            color:'blue',\n                            width:[1,'45%'],\n                            mainColor:'white',\n                            contrastColor:'blue',\n                            disabled:!this.state.unclaimed || this.state.unclaimed.lte(0)\n                          }}\n                          handleClick={this.claim.bind(this)}\n                        >\n                          Claim\n                        </RoundButton>\n                      )\n                    : (\n                      <RoundButton\n                        buttonProps={{\n                          color:'blue',\n                          width:[1,'45%'],\n                          mainColor:'white',\n                          contrastColor:'blue',\n                        }}\n                        handleClick={this.closeModal.bind(this)}\n                      >\n                        Close\n                      </RoundButton>\n                    )\n                  }\n                </Flex>\n              }\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default GovModal;","import React, { Component } from 'react';\nimport GovernanceUtil from '../utilities/GovernanceUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport { Flex, Text, Button, Icon, Checkbox, Input } from \"rimble-ui\";\n\nclass DelegateVesting extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    newDelegate:'',\n    delegatee:null,\n    vestingAmount:null,\n    currentDelegate:null,\n    delegateAddressValid:false,\n    delegateDifferentWallet:false,\n    vestingContractDelegated:false\n  };\n\n  // Utils\n  idleGovToken = null;\n  functionsUtil = null;\n  governanceUtil = null;\n\n  loadUtils(){\n    if (this.governanceUtil){\n      this.governanceUtil.setProps(this.props);\n    } else {\n      this.governanceUtil = new GovernanceUtil(this.props);\n    }\n\n    this.functionsUtil = this.governanceUtil.functionsUtil;\n    this.idleGovToken = this.functionsUtil.getIdleGovToken();\n  }\n\n  async loadData(){\n    const idleGovTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    if (idleGovTokenEnabled && this.props.account){\n      const [\n        delegatesChanges,\n        currentDelegate,\n        vestingContract,\n      ] = await Promise.all([\n        this.governanceUtil.getDelegatesChanges(),\n        this.governanceUtil.getCurrentDelegate(this.props.account),\n        this.governanceUtil.getVestingContract(this.props.account)\n      ]);\n\n      // Init flags\n      let delegatee = null;\n      let vestingAmount = null;\n      let vestingContractDelegated = false;\n\n      if (vestingContract){\n        // Take vesting amount\n        vestingAmount = await this.governanceUtil.getVestingAmount(this.props.account);\n\n        // Check Vesting Contract Delegated\n        const lastDelegateTx = delegatesChanges.filter( d => (d.returnValues.delegator.toLowerCase() === vestingContract.toLowerCase() ) ).pop();\n        delegatee = lastDelegateTx ? lastDelegateTx.returnValues.toDelegate : false;\n        vestingContractDelegated = delegatee && delegatee !== '0x0000000000000000000000000000000000000000';\n      }\n\n      return this.setState({\n        delegatee,\n        vestingAmount,\n        currentDelegate,\n        vestingContractDelegated\n      });\n    }\n    return null;\n  }\n\n  /*\n  async delegateTokens(){\n\n    const callback = (tx,error) => {\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Governance',\n        eventAction: 'delegateTokens',\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n\n      const newState = {\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      };\n\n      const txSucceeded = tx.status === 'success';\n      if (txSucceeded){\n        newState.idleTokenDelegated = true;\n        this.loadData();\n      }\n\n      this.setState(newState);\n    };\n\n    const callbackReceipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    this.governanceUtil.setDelegate(this.props.account,callback,callbackReceipt);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n  */\n\n  async delegateVesting(revoke=false){\n\n    let delegate = this.state.delegateDifferentWallet ? this.state.newDelegate : this.props.account;\n    if (revoke){\n      delegate = '0x'+'0'.repeat(40);\n    }\n\n    const delegateValid = this.functionsUtil.checkAddress(delegate);\n    if (!delegateValid){\n      return false;\n    }\n\n    const callback = (tx,error) => {\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Governance',\n        eventAction: 'delegateVesting',\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      const newState = {\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      };\n\n      const txSucceeded = tx.status === 'success';\n      if (txSucceeded){\n        newState.delegatee=delegate;\n        newState.delegateDifferentWallet=false;\n        newState.vestingContractDelegated=!revoke;\n        this.loadData();\n      }\n\n      this.setState(newState);\n    };\n\n    const callbackReceipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    this.governanceUtil.delegateVesting(this.props.account,delegate,callback,callbackReceipt);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  changeDelegate(e){\n    const newDelegate = e.target.value;\n    const delegateAddressValid = this.functionsUtil.checkAddress(newDelegate);\n    this.setState({\n      newDelegate,\n      delegateAddressValid\n    });\n  }\n\n  setDelegateDifferentWallet(delegateDifferentWallet){\n    this.setState({\n      delegateDifferentWallet\n    });\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.loadData();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    if (accountChanged){\n      this.loadData();\n    }\n  }\n\n  render() {\n    return this.state.vestingAmount ? (\n      <Flex\n        p={2}\n        mt={3}\n        width={1}\n        borderRadius={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n        backgroundColor={'#f3f6ff'}\n        boxShadow={'0px 0px 0px 1px rgba(0,54,255,0.3)'}\n      >\n        <Flex\n          width={1}\n          alignItems={'center'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          <Text\n            mb={1}\n            fontSize={3}\n            fontWeight={500}\n            color={'#3f4e9a'}\n            textAlign={'center'}\n          >\n            You have {this.state.vestingAmount.div(1e18).toFixed(5)} {this.functionsUtil.getGlobalConfig(['governance','props','tokenName'])} in the Vesting Contract\n          </Text>\n          {\n            (this.state.vestingContractDelegated && this.state.delegatee && !this.state.delegateDifferentWallet) ? (\n              <Text\n                mb={1}\n                fontWeight={500}\n                color={'#3f4e9a'}\n                fontSize={'15px'}\n                textAlign={'center'}\n              >\n                Currently your votes are delegated to {this.state.delegatee}\n              </Text>\n            ) : (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <Text\n                  mb={1}\n                  fontWeight={500}\n                  color={'#3f4e9a'}\n                  fontSize={'15px'}\n                  textAlign={'center'}\n                >\n                  {\n                    this.state.delegateDifferentWallet ? 'Follow the next steps to delegate your tokens:' : 'Press the button below to delegate the votes in the vesting contract to yourself:'\n                  }\n                </Text>\n                {\n                  this.state.delegateDifferentWallet && (\n                    <Flex\n                      mb={2}\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    > \n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ this.state.delegateAddressValid ? 'CheckBox' : 'LooksOne'}\n                          color={ this.state.delegateAddressValid ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={1}\n                          fontWeight={500}\n                          fontSize={'15px'}\n                          color={'#3f4e9a'}\n                          textAlign={'left'}\n                        >\n                          Insert delegate address\n                        </Text>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={'LooksTwo'}\n                          color={'cellText'}\n                        />\n                        <Text\n                          ml={1}\n                          fontWeight={500}\n                          fontSize={'15px'}\n                          color={'#3f4e9a'}\n                          textAlign={'left'}\n                        >\n                          Delegate Vesting\n                        </Text>\n                      </Flex>\n                    </Flex>\n                  )\n                }\n              </Flex>\n            )\n          }\n        </Flex>\n        {\n          this.state.delegateDifferentWallet && (\n            <Input\n              mb={2}\n              min={0}\n              type={'text'}\n              required={true}\n              borderRadius={2}\n              fontWeight={500}\n              textAlign={'center'}\n              width={['100%','30em']}\n              boxShadow={'none !important'}\n              value={this.state.newDelegate}\n              placeholder={`Insert delegate address`}\n              onChange={this.changeDelegate.bind(this)}\n              border={`1px solid ${this.props.theme.colors.divider}`}\n            />\n          )\n        }\n        {\n          this.state.processing && this.state.processing.loading ? (\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <TxProgressBar\n                web3={this.props.web3}\n                waitText={`Delegate estimated in`}\n                hash={this.state.processing.txHash}\n                endMessage={`Finalizing delegate request...`}\n                cancelTransaction={this.cancelTransaction.bind(this)}\n              />\n            </Flex>\n          ) : (this.state.vestingContractDelegated && !this.state.delegateDifferentWallet) ? (\n            <Button\n              size={'small'}\n              mainColor={'red'}\n              onClick={ e => this.delegateVesting(true) }\n            >\n              REVOKE DELEGATE\n            </Button>\n          )\n          /*\n          : !this.state.idleTokenDelegated && !this.state.delegateDifferentWallet ? (\n            <Button\n              size={'small'}\n              onClick={ e => this.delegateTokens() }\n            >\n              DELEGATE TOKENS\n            </Button>\n          )*/\n          : (!this.state.vestingContractDelegated || this.state.delegateDifferentWallet) && (\n            <Button\n              size={'small'}\n              onClick={ e => this.delegateVesting(false) }\n              disabled={ this.state.delegateDifferentWallet && !this.state.delegateAddressValid }\n            >\n              DELEGATE VESTING\n            </Button>\n          )\n        }\n        <Checkbox\n          mt={1}\n          required={false}\n          color={'#f3f6ff'}\n          label={`Delegate to different wallet`}\n          checked={this.state.delegateDifferentWallet}\n          onChange={ e => this.setDelegateDifferentWallet(e.target.checked) }\n        />\n      </Flex>\n    ) : null;\n  }\n}\n\nexport default DelegateVesting;\n","import theme from '../theme';\nimport ExtLink from '../ExtLink/ExtLink';\nimport React, { Component } from 'react';\nimport MenuAccount from '../MenuAccount/MenuAccount';\nimport GovModal from \"../utilities/components/GovModal\";\nimport GovernanceUtil from '../utilities/GovernanceUtil';\nimport { Box, Flex, Text, Icon, Button } from \"rimble-ui\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport DelegateVesting from '../DelegateVesting/DelegateVesting';\n\nclass DashboardHeader extends Component {\n\n  state = {\n    unclaimed:null,\n    vestingAmount:null,\n    govModalOpened:false\n  }\n\n  // Utils\n  idleGovToken = null;\n  functionsUtil = null;\n  governanceUtil = null;\n\n  loadUtils(){\n    if (this.governanceUtil){\n      this.governanceUtil.setProps(this.props);\n    } else {\n      this.governanceUtil = new GovernanceUtil(this.props);\n    }\n\n    this.functionsUtil = this.governanceUtil.functionsUtil;\n    this.idleGovToken = this.functionsUtil.getIdleGovToken();\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.loadData();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  async loadData(){\n    const idleGovTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    if (idleGovTokenEnabled && this.props.account){\n      const unclaimed = await this.idleGovToken.getUnclaimedTokens(this.props.account);\n      return this.setState({\n        unclaimed\n      });\n    }\n    return null;\n  }\n\n  setConnector = async (connectorName) => {\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventAction: 'logout',\n      eventCategory: 'Connect'\n    });\n\n    if (typeof this.props.setConnector === 'function'){\n      this.props.setConnector(connectorName);\n    }\n\n    return await this.props.context.setConnector(connectorName);\n  }\n\n  async exit(){\n    this.props.goToSection('/',false);\n  }\n\n  setGovModal(govModalOpened){\n    this.setState({\n      govModalOpened\n    });\n  }\n\n  render() {\n    return (\n      <Box\n        mb={3}\n      >\n        <Flex\n          pb={2}\n          width={1}\n          flexDirection={'row'}\n          justifyContent={'space-between'}\n          alignItems={['flex-end','center']}\n          borderBottom={`1px solid ${theme.colors.divider}`}\n        >\n          <MenuAccount\n            {...this.props}\n            setGovModal={this.setGovModal.bind(this)}\n          />\n        </Flex>\n        {\n          this.state.unclaimed && this.state.unclaimed.gt(0) ? (\n            <DashboardCard\n              cardProps={{\n                p:2,\n                mt:3,\n                width:1,\n              }}\n              isActive={true}\n              isInteractive={false}\n            >\n              <Flex\n                alignItems={'center'}\n                justifyContent={'center'}\n                flexDirection={['column','row']}\n              >\n                <Text\n                  fontWeight={500}\n                  color={'#3f4e9a'}\n                  fontSize={'15px'}\n                  textAlign={'center'}\n                >\n                  IDLE Governance Token is now available, \n                  <ExtLink\n                    ml={1}\n                    fontWeight={500}\n                    color={'primary'}\n                    fontSize={'15px'}\n                    hoverColor={'primary'}\n                    href={'https://idlefinance.medium.com/idle-governance-is-live-9b55e8f407d7'}\n                  >\n                    discover more\n                  </ExtLink>! You have {this.state.unclaimed.toFixed(4)} IDLE tokens to claim.\n                </Text>\n                <Button\n                  ml={[0,2]}\n                  mt={[2,0]}\n                  size={'small'}\n                  onClick={ e => this.setGovModal(true) }\n                >\n                  CLAIM NOW\n                </Button>\n              </Flex>\n            </DashboardCard>\n          ) : this.props.isDashboard && (\n            <DashboardCard\n              cardProps={{\n                p:2,\n                mt:3,\n                width:1,\n              }}\n              isActive={true}\n              isInteractive={false}\n            >\n              <Flex\n                alignItems={'center'}\n                justifyContent={'center'}\n                flexDirection={['column','row']}\n              >\n                <Icon\n                  mr={1}\n                  size={'1.2em'}\n                  color={'#3f4e9a'}\n                  name={'LightbulbOutline'}\n                />\n                <Text\n                  fontWeight={500}\n                  color={'#3f4e9a'}\n                  fontSize={'15px'}\n                  textAlign={'center'}\n                >\n                  Do you have any idea to improve the Idle Protocol? Let's discuss it in our\n                </Text>\n                <ExtLink\n                  ml={1}\n                  fontWeight={500}\n                  color={'primary'}\n                  fontSize={'15px'}\n                  hoverColor={'primary'}\n                  href={this.functionsUtil.getGlobalConfig(['forumURL'])}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    Governance Forum\n                    <Icon\n                      ml={1}\n                      size={'0.9em'}\n                      color={'primary'}\n                      name={'OpenInNew'}\n                    />\n                    .\n                  </Flex>\n                </ExtLink>\n              </Flex>\n            </DashboardCard>\n          )\n        }\n        {\n          this.props.isGovernance && \n            <DelegateVesting\n              {...this.props}\n            />\n        }\n        <GovModal\n          {...this.props}\n          isOpen={this.state.govModalOpened}\n          claimCallback={this.loadData.bind(this)}\n          closeModal={e => this.setGovModal(false) }\n        />\n      </Box>\n    );\n  }\n}\n\nexport default DashboardHeader;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"balanceButton\":\"MenuAccount_balanceButton__3t7wZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bell\":\"Notifications_bell__5m9tk\",\"active\":\"Notifications_active__2Mwzv\",\"ring\":\"Notifications_ring__1ir3w\",\"counter\":\"Notifications_counter__3EbuS\",\"list\":\"Notifications_list__2pkAk\",\"notification\":\"Notifications_notification__TMlFX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newLink\":\"CryptoInput_newLink__35W_s\",\"newPill\":\"CryptoInput_newPill__2Q8cA\",\"mainInput\":\"CryptoInput_mainInput__1zffg\",\"button\":\"CryptoInput_button__1N9EQ\",\"gradientButton\":\"CryptoInput_gradientButton__2kh5r\",\"newPillContainerAnim\":\"CryptoInput_newPillContainerAnim__RvOCw\"};"],"sourceRoot":""}