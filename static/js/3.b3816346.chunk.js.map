{"version":3,"sources":["AssetsUnderManagement/AssetsUnderManagement.js","DepositRedeem/DepositRedeem.module.scss","TwitterShareButton/TwitterShareButton.module.scss","Stats/StatsChart.js","Rebalance/Rebalance.js","utilities/components/DateRangeModal.js","ExecuteTransaction/ExecuteTransaction.js","Stats/Stats.js","Utils/Utils.js","FundsOverview/FundsOverview.js","CurveRedeem/CurveRedeem.js","TwitterShareButton/TwitterShareButton.js","utilities/components/ShareModal.js","DepositRedeem/DepositRedeem.js","EstimatedEarnings/EstimatedEarnings.js","AssetPage/AssetPage.js","CurveDeposit/CurveDeposit.js","PortfolioEquityCurve/PortfolioEquityCurve.js","FundsOverviewCurve/FundsOverviewCurve.js","CurveStrategy/CurveStrategy.js","utilities/components/WelcomeModal.js","utilities/components/MigrateModal.js","utilities/components/UpgradeModal.js","Dashboard/Dashboard.js"],"names":["AssetsUnderManagement","state","totalAUM","totalAUMEndOfYear","functionsUtil","this","setProps","props","FunctionsUtil","loadUtils","loadTotalAUM","prevProps","prevState","contractsInitialized","availableStrategies","JSON","stringify","getAggregatedStats","avgAPY","plus","times","div","setState","_this2","react__WEBPACK_IMPORTED_MODULE_9___default","a","createElement","rimble_ui__WEBPACK_IMPORTED_MODULE_10__","width","react_countup__WEBPACK_IMPORTED_MODULE_8___default","delay","decimals","decimal","separator","useEasing","duration","start","parseFloat","end","formattingFn","n","formatMoney","_ref2","countUpRef","style","counterStyle","display","color","whiteSpace","fontFamily","theme","fonts","counter","fontWeight","fontWeights","textAlign","isMobile","fontSize","fontSizes","ref","subtitle","_Title_Title__WEBPACK_IMPORTED_MODULE_7__","Object","assign","subtitleProps","span","alignItems","justifyContent","size","Component","module","exports","input","twitterIcon","StatsChart","chartProps","chartType","chartData","chartWidth","parseAum","value","parseInt","toFixed","_this","selectedToken","loadApiData","_callee3","CustomTooltipRow","CustomTooltip","maxGridLines","apiResults","apiResults_unfiltered","totalItems","protocols","versionInfo","keys","tempData","gridYStep","itemIndex","gridYValues","maxChartValue","axisBottomIndex","idleChartData","firstIdleBlock","divergingData","startTimestamp","endTimestamp","timestamp","date","lastRow","maxRange","i","_i","_i2","_i3","prevValue","_i4","prevApr","prevData","startBalance","currentBalance","avgApy","_i5","firstTokenPrice","_i6","regenerator_default","wrap","_context3","prev","next","tokenConfig","chartMode","abrupt","react_default","index_es","mb","flexDirection","pr","flexBasis","flex","mr","height","borderRadius","backgroundColor","textTransform","label","dangerouslySetInnerHTML","__html","DashboardCard","key","point","id","cardProps","py","px","left","data","itemPos","xFormatted","children","length","globalConfigs","stats","versions","idleVersion","Line","t0","moment","_d","getTime","format","deposits","redeems","forEach","row","idleTokens","fixTokenDecimals","idleSupply","idleTokensPrev","eq","diff","minus","gte","Math","max","abs","values","filter","v","Bar","push","indexBy","enableLabel","minValue","maxValue","d","axisBottom","tickSize","legend","tickPadding","orient","legendOffset","legendPosition","tickValues","axisLeft","axisRight","tickRotation","abbreviateNumber","markers","axis","lineStyle","strokeOpacity","textStyle","fill","colors","transactions","action","deposit","legendOrientation","legendOffsetX","stroke","strokeDasharray","redeem","padding","labelTextColor","labelSkipWidth","labelSkipHeight","pointSize","useMesh","animate","pointLabel","curve","enableArea","enableSlices","enableGridX","enableGridY","pointBorderWidth","pointLabelYOffset","legends","dataFrom","itemWidth","itemHeight","translateX","translateY","symbolSize","itemsSpacing","direction","anchor","symbolShape","itemTextColor","effects","on","ticks","text","sansSerif","grid","line","lineChartStroke","tooltip","container","boxShadow","background","pointColor","from","modifiers","margin","top","right","bottom","strToMoment","indexValue","depositFormatted","redeemFormatted","tokens","hsl","join","map","idlePrice","aum","x","y","toString","p","j","protocolsData","protocolAllocation","protocolAddr","toLowerCase","address","z","BNify","rate","allocation","foundItem","item","pos","indexOf","allocations","name","undefined","xScale","type","xFormat","yFormat","yScale","stacked","showAdvanced","sliceTooltip","slideData","slice","points","serieId","serieColor","yFormatted","protocolName","protocolColor","protocolAllocationFormatted","protocolAllocationPerc","concat","protocolData","protocolPaused","foundProtocol","find","capitalize","_ref3","borderCollapse","totalAllocation","reduce","accumulator","allocationPerc","_ref4","_ref5","idle","idleRate","protocolEarning","defiScore","isNaN","idleScore","apy","apr","days","earnings","earning","blocknumber","floor","additionalProtocols","additionalProtocol","protocolInfo","protocol","enabled","unshift","rateField","chartRow","baseProfit","firstProtocolData","firstProtocolBlock","pData","protocolRate","acc","field","idlePerformance","d1","rowData","protocolApy","tokenPrice","asyncForEach","_ref6","asyncToGenerator","mark","_callee2","lastRowData","lastTokenPrice","_context2","_ref7","_callee","tokenExchangeRate","tokenPriceFixed","lastYDiff","_context","price","lt","stop","_x2","apply","arguments","_x","showAdvancedChanged","apiResultsChanged","tokenChanged","componentDidMount","GenericChart","showLoader","parentId","parentIdHeight","Rebalance","loading","processing","rebalance","txHash","shouldRebalance","checkRebalance","sent","e","callback","callback_receipt","preventDefault","tx","error","eventData","eventCategory","eventAction","eventLabel","status","getTransactionError","sendGoogleAnalyticsEvent","window","toastProvider","addMessage","secondaryMessage","colorTheme","actionHref","actionText","variant","objectSpread","transactionHash","contractMethodSendWrapper","token","accountChanged","account","minHeight","FlexLoader","flexProps","loaderProps","textProps","ml","TxProgressBar","web3","waitText","endMessage","hash","mt","RoundButton","buttonProps","disabled","handleClick","DateRangeModal","quickSelection","ranges","startDate","Date","endDate","componentDidUpdate","selection","target","clone","subtract","closeModal","newState","handleSelect","startTimestampObj","endTimestampObj","_this3","isOpen","ModalCard","closeFunc","Header","title","Body","required","onChange","handleQuickSelect","bind","options","dist","minDate","maxDate","Footer","my","mx","onClick","React","ExecuteTransaction","txStatus","contractName","methodName","params","ExecuteComponent","parentProps","progressBarProps","cancelTransaction","execute","componentProps","Stats","delta","carouselMax","rebalances","buttonGroups","carouselIndex","statsVersions","minStartTime","govTokensPool","unlentBalance","carouselOffsetLeft","showRefreshIdleSpeed","dateRangeModalOpened","quickSelections","day","week","weeks","month","componentUnmounted","setDateRange","isSameOrAfter","isSame","add","isBefore","isAfter","maxEndDate","setStateSafe","toggleAdvancedCharts","setDateRangeModal","filterTokenData","r","setIdleVersion","isRisk","firstResult","lastResult","firstIdlePrice","lastIdlePrice","compoundInfo","firstCompoundData","lastCompoundData","compoundWithCOMPInfo","compoundAvgApr","firstCompoundPrice","lastCompoundPrice","compoundApr","includes","selectedStrategy","getTokenApiData","pop","convertTokenBalance","sum","compoundWithCOMP","compoundData","compoundRate","index","prevRow","prevTotalAllocation","hasRebalanced","prevP","prevAllocation","getGovTokenPool","getUnlentBalance","selectToken","strategy","setStrategyToken","changeToken","handleCarousel","$element","jQuery","position","loadParams","latestVersion","version","enabledStrategies","strategiesParams","versionInfoExtra","param","match","currentNetworkAvailableTokens","availableTokens","customToken","toUpperCase","getLatestAvailableVersion","getVersionInfo","newEndTimestampObj","newStartTimestampObj","initWeb3","document","innerHTML","body","appendChild","loadCarousel","strategyChanged","dateChanged","versionChanged","idleTokenEnabled","getGlobalConfig","apyLong","textSize","versionsOptions","enabledTokens","performanceTooltip","versionDefaultValue","Breadcrumb","showPathMobile","goToSection","path","GenericSelector","innerProps","defaultValue","AssetSelector","isInteractive","StatsCard","labelTooltip","VariationNumber","iconPos","iconSize","lineHeight","description","Stats_StatsChart","contracts","pb","pt","AllocationChart","src_Rebalance_Rebalance","pl","h4","RoundIconButton","iconName","transition","titleParentProps","components_DateRangeModal","strategies","statsTokens","statsProtocols","strategyInfo","Title","titlePostfix","AssetsList","cols","fields","mobile","overflow","desc","showTooltip","mainColor","rgb","hoverColor","isActive","src_ExecuteTransaction_ExecuteTransaction","Button","completed","Utils","SubComponent","selectedSubsection","subComponent","selectedSection","route","directProps","toolProps","flexWrap","submenu","tool","toolIndex","image","src","icon","FundsOverview","govTokensAprs","aggregatedValues","govTokensTotalApr","govTokensUserBalance","govTokensDistribution","govTokensTotalBalance","govTokensTotalAprTooltip","idleTokenUserDistribution","govTokensDistributionTooltip","govTokensTotalBalanceTooltip","idleGovToken","getIdleGovToken","govTokenAvailableTokens","Promise","all","getGovTokensAprs","getUserDistribution","getGovTokensUserBalances","loadAssetField","totBalance","govTokenBalance","govToken","balance","gt","totApr","govTokenApr","AssetField","fieldInfo","PortfolioEquity","chartHeight","chartToken","frequencySeconds","getFrequencySeconds","component","Heading","h3","maxPrecision","govTokenIndex","tokenName","distributionFrequency","CurveRedeem","inputValue","maxSlippage","unevenAmounts","buttonDisabled","showMaxSlippage","redeemUnderlying","curveTokenConfig","curvePoolContract","curveSwapContract","curveTokenBalance","curveTokensAmounts","fastBalanceSelector","redeemUnevenAmounts","curveRedeemableIdleTokens","toggleUnevenAmounts","checkButtonDisabled","amount","changeInputValue","setFastBalanceSelector","setMaxSlippage","initToken","max_slippage","lte","normalizedAmount","normalizeTokenAmount","withdrawSlippage","curveIdleTokensAmounts","getCurveTokensAmounts","getCurveIdleTokensAmounts","getCurveSlippage","getCurveTokenPrice","curveTokenPrice","redeemableBalance","redeemUnevenAmountsChanged","setInputValue","inputChanged","maxSlippageChanged","tokenConfigChanged","calculateSlippage","loadSelectedTokenConfig","selectedPercentage","curveConfig","getCurvePoolContract","getCurveSwapContract","getCurveTokenBalance","getCurveRedeemableIdleTokens","getCurveAvailableTokens","callbackRedeem","txSucceeded","eventValue","callbackReceiptRedeem","_amount","min_amounts","console","log","coin_index","migrationParams","coinIndex","min_amount","showSlippage","curveTokenName","checked","placement","message","showBalance","selectDestinationToken","SmartNumber","number","slippage","FastBalanceSelector","percentage","onMouseDown","maxWidth","failed","textOverflow","min","placeholder","border","divider","TwitterShareButton","share","parent","w","innerWidth","open","tweet","contrastColor","className","styles","ShareModal","getGlobalConfigs","analytics","google","events","escape","customText","confettiEnabled","react_confetti_default","zIndex","run","recycle","innerHeight","src_TwitterShareButton_TwitterShareButton","DepositRedeem","txError","tokenAPY","curveAPY","canRedeem","canDeposit","directMint","activeModal","showBuyFlow","tokenApproved","skipMigration","showRedeemFlow","contractPaused","canRedeemCurve","redeemGovTokens","canDepositCurve","actionProxyContract","migrationEnabled","componentMounted","redeemCurveEnabled","depositCurveBalance","depositCurveEnabled","showAdvancedOptions","depositCurveSlippage","metaTransactionsEnabled","setShowRedeemFlow","setShowBuyFlow","toggleShowAdvancedOptions","toggleSkipMigration","toggleRedeemCurve","toggleDepositCurve","toggleSkipMint","toggleRedeemGovTokens","toggleMetaTransactionsEnabled","resetModal","setActiveModal","approveContract","callbackApprove","callbackReceiptApprove","curveDepositContract","proxyContract","enableERC20","biconomy","checkTokenApproved","approveToken","approve","loadTokenInfo","_callee4","curveTokenEnabled","_context4","checkContractPaused","getCurveDepositContract","checkMigration","slicedToArray","tokenBalance","idleTokenBalance","boost","checkAction","loadAPY","_callee5","_context5","defineProperty","executeAction","_callee6","contractSendResult","callbackDeposit","callbackReceiptDeposit","curvePoolContractInfo","tokensToDeposit","amounts","minMintAmount","depositParams","_tokensToDeposit","depositMetaTransactionsEnabled","_depositParams","mintProxyContractInfo","mintProxyContract","_mintProxyContract$me","functionSignature","_skipMint","_ref9","_ref10","maxUnlentPerc","depositPerc","txData","idleTokenToRedeem","idleTokenPrice","_callbackRedeem","_callbackReceiptRedeem","redeemParams","_context6","getFastBalanceSelector","localStorage","setLocalStorage","lendingProcessing","lendAmount","genericError","getCurveAmounts","getCurveTokenAmount","integerValue","contract","methods","function","toConsumableArray","encodeABI","sendBiconomyTxWithPersonalSign","skipMintForDeposit","genericContractCall","setAction","loadProxyContracts","actions","_ref11","_callee9","hasProxyContract","_context9","initContract","abi","approved","_x3","getTokenAprs","tokenAprs","getCurveAPY","tokenBalanceChanged","actionChanged","fastBalanceSelectorChanged","depositCurveChanged","calculateCurveSlippage","govTokensDisabled","govTokensEnabled","skipMintForDepositEnabled","skipMintCheckboxEnabled","redeemGovTokenEnabled","metaTransactionsAvailable","useMetaTx","totalBalance","migrateText","migration","depositCurve","showDepositOptions","canPerformAction","showDepositCurve","showRedeemCurve","showActionFlow","showCurveSlippage","showRebalanceOption","showAdvancedDepositOptions","batchDepositInfo","batchDepositEnabled","batchDepositDepositEnabled","depositEnabled","showBatchDeposit","isMigrationTool","Migrate","migrateTextBefore","TransactionField","transaction","isDisabled","openTooltipModal","isRainbow","getWalletProvider","primary","href","govTokensBalance","tokenFeesPercentage","borderColor","minWidth","ConnectBox","src_CurveRedeem_CurveRedeem","BuyModal","showInline","availableMethods","buyToken","components_ShareModal","EstimatedEarnings","tokenApy","maxInputValue","loadChart","getTokenApy","earningsYear","amountMonth","amount3Months","amount6Months","amountYear","perc","monthColor","month3","month3Color","month6","month6Color","year","yearColor","labelTextColorModifiers","gridYValue","_ref","labels","showAPYDisclaimer","verticalAlign","AssetPage","tokenFees","availableGovTokens","getTokenFees","getTokenBalance","getUserTokenFees","getGovTokensUserTotalBalance","getTokenGovTokens","loadTokensInfo","transactionsChanged","userHasFunds","CardIconButton","src_DepositRedeem_DepositRedeem","src_FundsOverview_FundsOverview","src_EstimatedEarnings_EstimatedEarnings","TransactionsList","CurveDeposit","depositSlippage","migrationContract","curveTokensBalance","migrationSucceeded","migrationContractApproved","checkMigrationContractApproved","getMigrationParams","approveCallback","migrationCallback","idleTokenBalanceChanged","toMigrate","n_coins","underlyingBalanceToDeposit","getIdleTokenPrice","normalizeIdleTokenBalance","hasCurveTokens","PortfolioEquityCurve","chartwidth","loadChartData","quickDateSelectionChanged","quickDateSelection","getCurveTxs","curveTxs","tokensBalance","processedTxs","firstTxTimestamp","timeStamp","curveTokens","currentDate","prevBalances","prevTimestamp","minChartValue","aggregatedBalancesKeys","tokensBalancesPerDate","aggregatedBalance","currTimestamp","tokensData","foundBalances","tokensBalances","momentDate","filteredTokenData","filteredBalances","lastFilteredTx","lastTokenData","lastTx","lastTxBalance","formattedDate","aggregatedBalanceParsed","aggregatedBalances","balances","yFormatDecimals","daysCount","daysFrequency","ceil","areaOpacity","areaBaselineValue","ChartCustomTooltip","ChartCustomTooltipRow","tokenInfo","hex","formattedBalance","FundsOverviewCurve","compAPR","getCurveAvgBuyPrice","getCurveAvgSlippage","src_PortfolioEquityCurve_PortfolioEquityCurve","redeemBalance","depositBalance","curveZapContract","curveAvailableTokens","changeFromToken","setSelectedToken","baseToken","getSelectedToken","urlParams","param1","getCurveZapContract","updateAssetSelector","curveTokensToRedeem","src_CurveDeposit_CurveDeposit","src_FundsOverviewCurve_FundsOverviewCurve","enabledActions","WelcomeModal","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","email","subscribed","sendingForm","sendUserInfo","sendEmail","walletProvider","userInfo","provider","simpleIDPassUserInfo","setTimeout","err","handleSubmit","assertThisInitialized","handleValidation","axios","post","newsletterSubscription","endpoint","then","catch","walletAddress","lastLogin","getItem","parse","signedUp","parentNode","classList","onSubmit","green","Field","Input","outline","ButtonLoader","buttonText","isLoading","header_styles","gradientButton","MigrateModal","dontShowAgain","toggleDontShowAgain","removeStoredItem","migrate","tokenMigrationRoute","fieldProps","iconHeight","protocolsTokensBalances","minPrecision","UpgradeModal","_args3","convert","convertTool","tokensToMigrate","tokenKey","oldContractBalanceFormatted","oldIdleTokensToMigrate","newTokenConfig","Dashboard","menu","baseRoute","clickEvent","currentRoute","pageComponent","currentSection","showResetButton","timeoutId","modalTitle","modalContent","logout","setConnector","s","comingSoon","selected","bgColor","imageInactive","iconInactive","imageInactiveDark","iconInactiveDark","curveParams","CurveStrategy","u","isExternalLink","section","param2","section_is_strategy","param1_is_strategy","param1_is_token","param2_is_token","m","sectionRoute","subm","clearTimeout","setCurrentSection","loadMenu","accountInizialized","initAccount","initializeContracts","checkModals","prevParams","checkTokensToMigrate","checkWelcomeModal","checkProtocolsTokensBalances","showUpgradeModal","getStoredItem","getTokensToMigrate","getProtocolsTokensBalances","welcomeIsOpen","welcomeModalProps","currTime","lastTime","frequency","migrateModalEnabled","showMigrateModal","isDashboard","replace","newRoute","location","scrollTo","routeParts","PageComponent","menuRightBorder","borderRight","DashboardMenu","overflowY","overflowX","DashboardHeader","components_UpgradeModal","components_MigrateModal","TooltipModal","content","components_WelcomeModal","simpleID","network","current","initSimpleID","baseTokenName"],"mappings":"sNAMMA,6MAEJC,MAAQ,CACNC,SAAS,KACTC,kBAAkB,QAIpBC,cAAgB,gFAGVC,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,4JAK9CF,KAAKI,YACLJ,KAAKK,oMAGkBC,EAAUC,yEACjCP,KAAKI,YACCI,EAAuBF,EAAUE,uBAAyBR,KAAKE,MAAMM,uBACvCF,EAAUG,qBAAuBC,KAAKC,UAAUL,EAAUG,uBAAyBC,KAAKC,UAAUX,KAAKE,MAAMO,sBAC/GD,IAChCR,KAAKK,kRAMFL,KAAKE,MAAMO,qBAAwBT,KAAKE,MAAMM,+DAC1C,0BAMCR,KAAKD,cAAca,qCAF3BC,WACAhB,aAGIC,EAAoBD,EAASiB,KAAKjB,EAASkB,MAAMF,EAAOG,IAAI,OAElEhB,KAAKiB,SAAS,CACZpB,WACAC,yJAIK,IAAAoB,EAAAlB,KACP,OAAOA,KAAKJ,MAAMC,SAChBsB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAO,GAEPJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CACEK,MAAO,EACPC,SAAU,EACVC,QAAS,IACTC,UAAW,GACXC,WAAW,EACXC,SAAU,QACVC,MAAOC,WAAWhC,KAAKJ,MAAMC,UAC7BoC,IAAKD,WAAWhC,KAAKJ,MAAME,mBAC3BoC,aAAe,SAAAC,GAAC,MAAI,KAAKjB,EAAKnB,cAAcqC,YAAYD,EAAE,KAEzD,SAAAE,GAAA,IAAGC,EAAHD,EAAGC,WAAHD,EAAeN,MAAf,OACCZ,EAAAC,EAAAC,cAAA,QACEkB,MAAQrB,EAAKhB,MAAMsC,aAAetB,EAAKhB,MAAMsC,aAAe,CAC1DC,QAAQ,QACRC,MAAM,YACNC,WAAW,SACXC,WAAW1B,EAAKhB,MAAM2C,MAAMC,MAAMC,QAClCC,WAAW9B,EAAKhB,MAAM2C,MAAMI,YAAY,GACxCC,UAAWhC,EAAKhB,MAAMiD,SAAW,SAAW,QAC5CC,SAAUlC,EAAKhB,MAAMiD,SAAW,QAAUjC,EAAKhB,MAAM2C,MAAMQ,UAAU,IAEvEC,IAAKhB,OAKuB,qBAAxBtC,KAAKE,MAAMqD,UAA4BvD,KAAKE,MAAMqD,WACxDpC,EAAAC,EAAAC,cAACmC,EAAA,EAADC,OAAAC,OAAA,CACEV,WAAY,EACZI,SAAU,CAAC,EAAE,GACbV,MAAO,YACPQ,UAAW,CAAC,SAAS,UACjBlD,KAAKE,MAAMyD,eAGb3D,KAAKE,MAAMqD,SAAWvD,KAAKE,MAAMqD,SAC/BpC,EAAAC,EAAAC,cAACC,EAAA,EAAKsC,KAAN,CAAWZ,WAAY,UAAWN,MAAO,UAAWU,SAAU,WAA9D,2BAAiGjC,EAAAC,EAAAC,cAACC,EAAA,EAAKsC,KAAN,CAAWlB,MAAO,YAAaM,WAAY,EAAGI,SAAU,OAAxD,gBAQ7GjC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEuC,WAAY,SACZC,eAAgB,UAEhB3C,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQyC,KAAK,iBAzGeC,aA+GrBrE,4BCpHfsE,EAAAC,QAAA,CAAkBC,MAAA,oDCAlBF,EAAAC,QAAA,CAAkBE,YAAA,sRC65DHC,6MAl5DbzE,MAAQ,CACN0E,WAAW,GACXC,UAAU,KACVC,UAAU,KACVC,WAAW,QAuBb1E,cAAgB,OAShB2E,SAAW,SAAAC,GACT,OAAQC,SAASD,IAAQ,IAAO3C,WAAW2C,EAAM,KAAME,QAAQ,GAAG,IAAM7C,WAAW2C,IAAS,IAAIG,EAAK5E,MAAM6E,iBAG7GC,iCAAc,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAArB,EAAAF,EAAAC,EAAAuB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAApG,EAAAqG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAEP9C,EAAK5E,MAAM2H,aAAgB/C,EAAK5E,MAAM6E,eAAkBD,EAAK5E,MAAM4H,WAAchD,EAAK5E,MAAMmF,WAFrF,CAAAqC,EAAAE,KAAA,eAAAF,EAAAK,OAAA,UAGH,GAHG,OAMN7C,EAAmB,SAAAhF,GAAK,OAC5B8H,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,EACJ3G,MAAO,EACPsC,WAAY,SACZsE,cAAe,OAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEG,GAAI,EACJ7F,MAAO,CACL8F,UAAU,IACVC,KAAK,WAEPzE,WAAY,SACZC,eAAgB,cAGd5D,EAAMwC,OACNsF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEM,GAAI,EACJhH,MAAO,OACPiH,OAAQ,OACRC,aAAc,MACdC,gBAAiBxI,EAAMwC,QAI3BsF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE7E,SAAU,EACVJ,WAAY,EACZE,UAAW,OACXR,MAAO,YACPH,MAAO,CACLoG,cAAc,eAGfzI,EAAM0I,QAGXZ,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1F,MAAO,CACL8F,UAAU,IACVC,KAAK,WAEPzE,WAAY,SACZC,eAAgB,YAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE7E,SAAU,EACVJ,WAAY,EACZN,MAAO,WACPQ,UAAW,QACXX,MAAO,CACLI,WAAW,UAEbkG,wBAAyB,CACvBC,OAAQ5I,EAAMyE,YAQlBQ,EAAgB,SAAAjF,GACpB,OACE8H,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEC,IAAK9I,EAAM+I,MAAMC,GACjBC,UAAW,CACTC,GAAG,EACHC,GAAG,EACH9H,MAAM,EACN+H,KAAMpJ,EAAM+I,MAAMM,KAAKC,QAAQ,GAAK,QAAU,MAGhDxB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP4G,cAAe,UAGbjI,EAAM+I,MAAMM,KAAKE,YACfzB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,EACJ9E,SAAU,EACVJ,WAAY,EACZN,MAAO,WACPQ,UAAW,QAEVhD,EAAM+I,MAAMM,KAAKE,YAGvBvJ,EAAMwJ,YAMTtE,EAAe,EACfC,EAAaP,EAAK5E,MAAMmF,WACxBC,EAAwBR,EAAK5E,MAAMoF,sBACnCC,EAAaF,EAAWsE,OACxBnE,EAAY/B,OAAOC,OAAO,GAAGoB,EAAK5E,MAAM2H,YAAYrC,WAGpDC,EAAcmE,IAAcC,MAAMC,SAAShF,EAAK5E,MAAM6J,aAExDrE,EAAO,GACPC,EAAW,GACXC,EAAY,EACZC,EAAY,EACZrB,EAAY,GACZF,EAAa,GACbC,EAAYyF,IACZlE,EAAc,GACdC,EAAgB,EAChBC,EAAkB,EAClBC,EAAgB,KAChBC,EAAiB,KA3HTwB,EAAAuC,GA6HJnF,EAAK5E,MAAM4H,UA7HPJ,EAAAE,KA8HL,QA9HKF,EAAAuC,GAAA,GA4aL,QA5aKvC,EAAAuC,GAAA,GAypBL,QAzpBKvC,EAAAuC,GAAA,GA8yBL,aA9yBKvC,EAAAuC,GAAA,GAq4BL,QAr4BKvC,EAAAuC,GAAA,GAojCL,UApjCKvC,EAAAuC,GAAA,GAquCL,aAruCKvC,EAAAuC,GAAA,GA8hDL,UA9hDKvC,EAAAuC,GAAA,sBAoIR,IALI9D,EAAgB,GAEdC,EAAiBxB,SAASU,EAAsB,GAAGgB,WACnDD,EAAezB,SAASsF,MAASC,GAAGC,UAAU,KAE3C9D,EAAUF,EAAeE,GAAWD,EAAaC,GAAW,MAC7DC,EAAO2D,IAAiB,IAAV5D,GAAgB+D,OAAO,cACtClE,EAAcI,KACjBJ,EAAcI,GAAQ,CACpBA,OACAD,YACAgE,SAAU,EACVC,QAAS,IAwDf,IAnDI/D,EAAU,KACdlB,EAAsBkF,QAAQ,SAAAC,GAC5B,IAAMlE,EAAO2D,IAAqB,IAAdO,EAAInE,WAAgB+D,OAAO,cACzCK,EAAa5F,EAAK/E,cAAc4K,iBAAiBF,EAAIG,WAAW,IAWtE,GATKzE,EAAcI,KACjBJ,EAAcI,GAAQ,CACpBA,OACAD,UAAUmE,EAAInE,UACdgE,SAAU,EACVC,QAAS,IAIT/D,EAAQ,CACV,IAAMqE,EAAiB/F,EAAK/E,cAAc4K,iBAAiBnE,EAAQoE,WAAW,IAE9E,IADwBF,EAAWI,GAAGD,GACnB,CACjB,IAAME,EAAOL,EAAWM,MAAMH,GAE1BE,EAAKE,IAAI,IACX9E,EAAcI,GAAM+D,UAAUtI,WAAW+I,GACzChF,EAAgBmF,KAAKC,IAAIpF,EAAcI,EAAcI,GAAM+D,YAE3DnE,EAAcI,GAAMgE,SAASvI,WAAW+I,GACxChF,EAAgBmF,KAAKC,IAAIpF,EAAcmF,KAAKE,IAAIjF,EAAcI,GAAM+D,kBAKxEnE,EAAcI,GAAM+D,UAAUtI,WAAW0I,GAG3ClE,EAAUiE,IAGZjG,EAAYf,OAAO4H,OAAOlF,GAAemF,OAAO,SAAAC,GAC9C,QAASzG,EAAK5E,MAAMkG,gBAAkBmF,EAAEjF,WAAWxB,EAAK5E,MAAMkG,mBAAqBtB,EAAK5E,MAAMmG,cAAgBkF,EAAEjF,WAAWxB,EAAK5E,MAAMmG,gBAGpII,EAAW,EACfjC,EAAUgG,QAAQ,SAAAe,GAChB9E,EAAWyE,KAAKC,IAAI1E,EAASyE,KAAKE,IAAIG,EAAEjB,UAAUY,KAAKE,IAAIG,EAAEhB,YAG/DhG,EAAYiH,IAEZxF,EAAkB,EAElBJ,EAAY5D,WAAW+D,EAAcX,GACrCU,EAAc,CAAC,GACNY,EAAE,EAAEA,GAAG,EAAEA,IAChBZ,EAAY2F,KAAK/E,EAAEd,GApMb,OAuMRtB,EAAa,CACXoH,QAAS,OACTC,aAAa,EACbC,UAAUnF,EACVoF,SAASpF,EACTmC,MAAO,SAAAkD,GACL,OAAOZ,KAAKE,IAAIU,EAAEnH,QAEpBoH,WAAYjH,EAAK5E,MAAMiD,SAAW,KAAO,CACvC6I,SAAU,EACVC,OAAQ,GACR5B,OAAQ,SAAC1F,GACP,GAAIqB,IAAoB,IAAM,EAC5B,OAAOkE,IAAOvF,EAAM,oBAAoB0F,OAAO,WAGnD6B,YAAa,GACbC,OAAQ,SACRC,aAAc,EACdC,eAAgB,SAChBC,WAAY,gBAEdC,SAAU,KACVC,UAAW,CACTP,OAAQ,GACRD,SAAU,EACVG,OAAQ,OACRD,YAAa,GACbO,aAAc,EACdL,cAAe,GACfE,WAAW,EACXD,eAAgB,SAChBhC,OAAQ,SAAAkB,GAAC,OAAIzG,EAAK/E,cAAc2M,iBAAiBxB,KAAKE,IAAIG,GAAG,KAE/DoB,QAAS,CACP,CACEC,KAAM,IACNjI,MAAO,EACPkI,UAAW,CAAEC,cAAe,GAC5BC,UAAW,CAAEC,KAAMnK,IAAMoK,OAAOC,aAAaC,OAAOC,SACpDnB,OAAQ,WACRI,eAAgB,WAChBgB,kBAAmB,WAEnBC,eAAgB,IAElB,CACEV,KAAM,IACNjI,MAAO,EACPkI,UAAW,CAAEU,OAAQ1K,IAAMoK,OAAO,aAAcO,gBAAiB,OACjET,UAAW,CAAEC,KAAMnK,IAAMoK,OAAOC,aAAaC,OAAOM,QACpDxB,OAAQ,UACRI,eAAgB,cAChBgB,kBAAmB,WAEnBC,eAAgB,KAGpB5H,KAAK,CAAC,WAAW,WACjBgI,QAAQ,GACRT,OAAO,CAACpK,IAAMoK,OAAOC,aAAaC,OAAOC,QAASvK,IAAMoK,OAAOC,aAAaC,OAAOM,QACnFE,eAAgB,sBAChBC,eAAgB,GAChBC,gBAAiB,GACjBC,UAAU,EACVC,SAAQ,EACRC,SAAQ,EACRC,WAAW,IACXC,MAAM,SACNC,YAAW,EACXC,aAAa,IACbC,aAAY,EACZC,aAAY,EACZC,iBAAiB,EACjBC,mBAAmB,GACnBC,QAAQ,CACN,CACEC,SAAS,OACTC,UAAW7J,EAAK5E,MAAMiD,SAAW,GAAK,IACtCyL,WAAY,GACZC,WAAY,EACZC,WAAYhK,EAAK5E,MAAMiD,SAAW,GAAK,GACvC4L,WAAY,GACZC,aAAc,EACdC,UAAW,MACXC,OAAQ,cACRC,YAAa,SACbC,cAAevM,IAAMoK,OAAOhB,OAC5BoD,QAAS,CACP,CACEC,GAAI,QACJ/M,MAAO,CACL6M,cAAe,YAMzBvM,MAAM,CACJ+J,KAAM,CACJ2C,MAAO,CACLC,KAAM,CACJpM,SAAU0B,EAAK5E,MAAMiD,SAAW,GAAI,GACpCH,WAAW,IACXgK,KAAKnK,IAAMoK,OAAOhB,OAClBrJ,WAAYC,IAAMC,MAAM2M,aAI9BC,KAAM,CACJC,KAAM,CACJpC,OAAQ1K,IAAMoK,OAAO2C,gBAAiBpC,gBAAiB,SAG3DiB,QAAQ,CACNe,KAAK,CACHpM,SAAU0B,EAAK5E,MAAMiD,SAAW,GAAI,GACpCH,WAAW,IACXJ,WAAYC,IAAMC,MAAM2M,YAG5BI,QAAQ,CACNC,UAAU,CACRC,UAAU,KACVC,WAAW,QAIjBC,WAAW,CAAEC,KAAM,QAASC,UAAW,IACvCC,OAAQtL,EAAK5E,MAAMiD,SAAW,CAAEkN,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIjH,KAAM,IAAO,CAAE+G,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIjH,KAAM,IACrHuG,QAAQ,SAACtG,GACP,IAAME,EAAa3E,EAAK/E,cAAcyQ,YAAYjH,EAAKkH,YAAYpG,OAAO,UACpEpB,EAAQ,CACZC,GAAGK,EAAKL,GACRK,KAAK,CACHE,eAGEiH,EAAmB5L,EAAK/E,cAAc2M,iBAAiBnD,EAAKA,KAAKe,SAAS,GAAG,IAAIxF,EAAK5E,MAAM6E,cAC5F4L,EAAkB7L,EAAK/E,cAAc2M,iBAAiBnD,EAAKA,KAAKgB,QAAQ,GAAG,IAAIzF,EAAK5E,MAAM6E,cAChG,OACEiD,EAAA5G,EAAAC,cAAC8D,EAAD,CACE8D,MAAOA,GAEPjB,EAAA5G,EAAAC,cAAC6D,EAAD,CACE0D,MAAO,WACPlG,MAAOG,IAAMoK,OAAOG,QACpBzI,MAAO+L,IAET1I,EAAA5G,EAAAC,cAAC6D,EAAD,CACE0D,MAAO,SACPlG,MAAOG,IAAMoK,OAAOQ,OACpB9I,MAAOgM,OA/VTjJ,EAAAK,OAAA,qBAmeR,IArDAhC,EAAgB,EAEhBvB,EAAUiH,KAAK,CACbvC,GAAG,MACHxG,MAAO,OAAOkH,IAAcC,MAAM+G,OAAO9L,EAAK5E,MAAM6E,eAAerC,MAAMmO,IAAIC,KAAK,KAAK,IACvFvH,KAAMlE,EAAW0L,IAAI,SAACjF,EAAEpF,GACtB,IAAMgE,EAAa5F,EAAK/E,cAAc4K,iBAAiBmB,EAAElB,WAAW,IAC9DoG,EAAYlM,EAAK/E,cAAc4K,iBAAiBmB,EAAEkF,UAAUlM,EAAK5E,MAAM2H,YAAYnG,UACnFuP,EAAMvG,EAAW3J,MAAMiQ,GACvBE,EAAIhH,IAAmB,IAAZ4B,EAAExF,WAAgB+D,OAAO,oBACpC8G,EAAInP,WAAWiP,EAAIG,YAIzB,OAFArL,EAAgBmF,KAAKC,IAAIpF,EAAcoL,GAEhC,CAAED,IAAEC,SAKfrM,EAAK5E,MAAM2H,YAAYrC,UAAUgF,QAAQ,SAAC6G,EAAEC,GAC1CjM,EAAW0L,IAAI,SAACjF,EAAEpF,GAChB,OAAOoF,EAAEyF,cAAcjG,OAAO,SAACkG,EAAmBN,GAC9C,OAAOM,EAAmBC,aAAaC,gBAAkBL,EAAEM,QAAQD,gBAEtEX,IAAI,SAACS,EAAmBI,GAEvB,IADuB9M,EAAK/E,cAAc8R,MAAML,EAAmBM,MAAMhH,GAAG,GACxD,CAClB,IAAMoG,EAAIhH,IAAmB,IAAZ4B,EAAExF,WAAgB+D,OAAO,oBACtC8G,EAAInP,WAAW8C,EAAK/E,cAAc4K,iBAAiB6G,EAAmBO,WAAWjN,EAAK5E,MAAM2H,YAAYnG,WAE5GqE,EAAgBmF,KAAKC,IAAIpF,EAAcoL,GAEvC,IAAIa,EAAYxN,EAAU,GAAG+E,KAAK+B,OAAO,SAAA2G,GAAU,OAAOA,EAAKf,IAAMA,IACrE,GAAIc,EAAU,CACZA,EAAYA,EAAU,GACtB,IAAME,EAAM1N,EAAU,GAAG+E,KAAK4I,QAAQH,GACjCA,EAAUI,cACbJ,EAAUI,YAAc,IAE1BJ,EAAUI,YAAYf,EAAEgB,MAAQlB,EAChC3M,EAAU,GAAG+E,KAAK2I,GAAOF,MAI5B,KACF1G,OAAO,SAACC,GAAQ,YAAa+G,IAAN/G,MAI5BhH,EAAYyF,IAEZpE,EAAY5D,WAAW+D,EAAcX,GACrCU,EAAc,CAAC,GACNY,EAAE,EAAEA,GAAG,EAAEA,IAChBZ,EAAY2F,KAAK/E,EAAEd,GApeb,OAueRtB,EAAa,CACXiO,OAAO,CACLC,KAAM,OACNnI,OAAQ,kBAGVoI,QAAQ,mBACRC,QAAQ,SAAAnH,GAAC,OAAIzG,EAAK/E,cAAcqC,YAAYmJ,EAAEA,EAAE,EAAI,EAAG,IACvDoH,OAAO,CACLH,KAAM,SACNI,SAAS,GAEXrG,SAAS,CACPN,OAAQ,GACRD,SAAU,EACVG,OAAQ,OACRD,YAAa,GACbO,aAAc,EACdL,cAAe,GACfE,WAAWxG,EACXuG,eAAgB,SAChBhC,OAAQ,SAAAkB,GAAC,OAAIzG,EAAK/E,cAAc2M,iBAAiBnB,EAAEA,EAAE,EAAI,EAAG,KAE9DQ,WAAYjH,EAAK5E,MAAMiD,SAAW,KAAO,CACvC6I,SAAU,EACV3B,OAAQ,QACR6B,YAAa,GACbI,WAAYxH,EAAK5E,MAAMiD,SAAW,eAAmB2B,EAAK5E,MAAM2S,aAAe,eAAiB,eAChG1G,OAAQ,SACRF,OAAQ,GACRG,aAAc,EACdC,eAAgB,UAElBvG,cACAgI,UAAU,EACVC,SAAQ,EACRC,SAAQ,EACRC,WAAW,IACXC,MAAM,SACNC,YAAW,EACXC,aAAa,IACbC,aAAY,EACZC,aAAY,EACZC,iBAAiB,EACjBtB,OAAO,SAAAnB,GAAC,OAAIA,EAAEpJ,OACd8L,mBAAmB,GACnBC,QAAQ,CACN,CACEE,UAAW7J,EAAK5E,MAAMiD,SAAW,GAAK,GACtCyL,WAAY,GACZC,WAAY/J,EAAK5E,MAAMiD,UAAY,GAAK,EACxC2L,WAAYhK,EAAK5E,MAAMiD,SAAW,GAAK,GACvC4L,WAAY,GACZC,aAAc,EACdC,UAAW,MACXC,OAAQ,cACRC,YAAa,SACbC,cAAevM,IAAMoK,OAAOhB,OAC5BoD,QAAS,CACP,CACEC,GAAI,QACJ/M,MAAO,CACL6M,cAAe,YAMzBvM,MAAM,CACJ+J,KAAM,CACJ2C,MAAO,CACLC,KAAM,CACJpM,SAAU0B,EAAK5E,MAAMiD,SAAW,GAAI,GACpCH,WAAW,IACXgK,KAAKnK,IAAMoK,OAAOhB,OAClBrJ,WAAYC,IAAMC,MAAM2M,aAI9BC,KAAM,CACJC,KAAM,CACJpC,OAAQ1K,IAAMoK,OAAO2C,gBAAiBpC,gBAAiB,SAG3DiB,QAAQ,CACNe,KAAK,CACHpM,SAAU0B,EAAK5E,MAAMiD,SAAW,GAAI,GACpCH,WAAW,IACXJ,WAAYC,IAAMC,MAAM2M,aAI9BQ,WAAW,CAAEC,KAAM,QAASC,UAAW,IACvCC,OAAQtL,EAAK5E,MAAMiD,SAAW,CAAEkN,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIjH,KAAM,IAAO,CAAE+G,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIjH,KAAM,IACrHwJ,aAAa,SAACC,GAAc,IAEpB9J,EADY8J,EAAVC,MACYC,OAAO,GAC3B,MAAqB,kBAAVhK,GAA4C,kBAAfA,EAAMM,KAE1CvB,EAAA5G,EAAAC,cAAC8D,EAAD,CACE8D,MAAOA,GAEPjB,EAAA5G,EAAAC,cAAC6D,EAAD,CACE0D,MAAOK,EAAMiK,QACbxQ,MAAOuG,EAAMkK,WACbxO,MAAOsE,EAAMM,KAAK6J,aAGlBnK,EAAMM,KAAK6I,aAAiD,kBAA3BnJ,EAAMM,KAAK6I,aAC1C3O,OAAOiC,KAAKuD,EAAMM,KAAK6I,aAAarB,IAAI,SAAAsC,GACtC,IAAMC,EAAgB,OAAO1J,IAAcC,MAAMrE,UAAU6N,GAAc3Q,MAAMmO,IAAIC,KAAK,KAAK,IACvFU,EAAqBvI,EAAMM,KAAK6I,YAAYiB,GAC5CE,EAA8BzO,EAAK/E,cAAcqC,YAAYoP,EAAmBA,EAAmB,EAAI,EAAI,GAC3GgC,EAAyB1O,EAAK/E,cAAc8R,MAAM5I,EAAMM,KAAK6I,YAAYiB,IAAerS,IAAI8D,EAAK/E,cAAc8R,MAAM5I,EAAMM,KAAK4H,IAAIpQ,MAAM,KAAK8D,QAAQ,GAAG,IAChK,OACEmD,EAAA5G,EAAAC,cAAC6D,EAAD,CACE0D,MAAOyK,EACP3Q,MAAO4Q,EACPtK,IAAG,GAAAyK,OAAKxK,EAAMC,GAAX,KAAAuK,OAAiBJ,GACpB1O,MAAK,GAAA8O,OAAKF,EAAL,MAAAE,OAAqCD,EAArC,UAuDd,OArpBH9L,EAAAK,OAAA,qBAmsBR,IAzCArC,EAAO,GACPC,EAAW,GAEXN,EAAWmF,QAAQ,SAACsB,EAAEpF,GACpB,IAAMH,EAAO2D,IAAmB,IAAZ4B,EAAExF,WAAgB+D,OAAO,cAEzCI,EAAM,CACRlE,QAGFuF,EAAEyF,cAAc/G,QAAQ,SAACkJ,GACvB,IAAMC,EAAiB7O,EAAK/E,cAAc8R,MAAM6B,EAAa5B,MAAMhH,GAAG,GAChE8I,EAAgB9O,EAAK5E,MAAM2H,YAAYrC,UAAUqO,KAAK,SAACxC,GAAQ,OAAOA,EAAEM,QAAQD,gBAAkBgC,EAAajC,aAAaC,gBAClI,GAAIkC,EAAc,CAChB,IAAMP,EAAevO,EAAK/E,cAAc+T,WAAWF,EAAcvB,MACjE,GAAKsB,EAQHlJ,EAAI4I,GAAgB,MARF,CAClB,IAAItB,EAAa/P,WAAW8C,EAAK/E,cAAc4K,iBAAiB+I,EAAa3B,WAAWjN,EAAK5E,MAAM2H,YAAYnG,WAC/GgE,EAAK2N,GAAgB,EACrB5I,EAAI4I,GAAgBtB,EACpBtH,EAAG,GAAAgJ,OAAIJ,EAAJ,UAA2B,OAAOzJ,IAAcC,MAAMrE,UAAU6N,EAAa3B,eAAehP,MAAMmO,IAAIC,KAAK,KAAK,IAEnH/K,EAAgBmF,KAAKC,IAAIpF,EAAcgM,OAQ7CpM,EAASY,GAAQkE,IAGnBjG,EAAYf,OAAO4H,OAAO1F,GAG1BpB,EAAYiH,IAEZxF,EAAkB,EAElBJ,EAAY5D,WAAW+D,EAAcX,GACrCU,EAAc,CAAC,GACNY,EAAE,EAAEA,GAAG,EAAEA,IAChBZ,EAAY2F,KAAK/E,EAAEd,GApsBb,OAusBRtB,EAAa,CACXoJ,QAAS,GACTM,SAAS,EACTtC,QAAS,OACTC,aAAa,EACbiC,eAAgB,GAChBC,gBAAiB,GACjBnI,KAAMjC,OAAOiC,KAAKA,GAClBiI,eAAgB,sBAChBV,OAAQ,SAAA5K,GAAA,IAAG6G,EAAH7G,EAAG6G,GAAH,OAAA7G,EAAOkH,KAAe,GAAAkK,OAAIvK,EAAJ,WAC9BqD,SAAS,CACPlC,OAAQ,SAAAkB,GAAC,OAAIzG,EAAK/E,cAAc2M,iBAAiBnB,EAAEA,EAAE,EAAI,EAAG,IAC5DY,OAAQ,OACRH,SAAU,EACVE,YAAa,GACbO,aAAc,EACdR,OAAQ,GACRG,cAAe,GACfE,WAAWxG,EACXuG,eAAgB,UAElBvG,cACAiG,WAAYjH,EAAK5E,MAAMiD,SAAW,KAAO,CACvC8I,OAAQ,GACR5B,OAAQ,SAAC1F,GACP,GAAIqB,IAAoB,IAAM,EAC5B,OAAOkE,IAAOvF,EAAM,oBAAoB0F,OAAO,WAGnD2B,SAAU,EACVE,YAAa,GACbC,OAAQ,cACRC,aAAc,GACdC,eAAgB,SAChBC,WAAY,gBAEdmC,QAAQ,CACN,CACEC,SAAS,OACTC,UAAW7J,EAAK5E,MAAMiD,SAAW,GAAK,GACtCyL,WAAY,GACZC,WAAY/J,EAAK5E,MAAMiD,UAAY,GAAK,EACxC2L,WAAYhK,EAAK5E,MAAMiD,SAAW,GAAK,GACvC4L,WAAY,GACZC,aAAc,EACdC,UAAW,MACXC,OAAQ,cACRC,YAAa,SACbC,cAAevM,IAAMoK,OAAOhB,OAC5BoD,QAAS,CACP,CACEC,GAAI,QACJ/M,MAAO,CACL6M,cAAe,YAMzBvM,MAAM,CACJ+J,KAAM,CACJ2C,MAAO,CACLC,KAAM,CACJpM,SAAS0B,EAAK5E,MAAMiD,SAAW,GAAK,GACpCH,WAAW,IACXgK,KAAKnK,IAAMoK,OAAOhB,OAClBrJ,WAAYC,IAAMC,MAAM2M,aAI9BC,KAAM,CACJC,KAAM,CACJpC,OAAQ1K,IAAMoK,OAAO2C,gBAAiBpC,gBAAiB,SAG3DiB,QAAQ,CACNe,KAAK,CACHpM,SAAS0B,EAAK5E,MAAMiD,SAAW,GAAK,GACpCH,WAAW,IACXJ,WAAYC,IAAMC,MAAM2M,aAI9BQ,WAAW,CAAEC,KAAM,QAASC,UAAW,IACvCC,OAAQtL,EAAK5E,MAAMiD,SAAW,CAAEkN,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIjH,KAAM,IAAO,CAAE+G,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIjH,KAAM,IACrHuG,QAAQ,SAAAkE,GAA0B,IAAvB7K,EAAuB6K,EAAvB7K,GAAIvE,EAAmBoP,EAAnBpP,MAAOjC,EAAYqR,EAAZrR,MACdqP,EAAajN,EAAK/E,cAAcqC,YAAYuC,EAAM,GACxD,OACEqD,EAAA5G,EAAAC,cAAA,SAAOkB,MAAO,CAAChB,MAAM,OAAOyS,eAAe,aACzChM,EAAA5G,EAAAC,cAAA,aACE2G,EAAA5G,EAAAC,cAAA,UACE2G,EAAA5G,EAAAC,cAAA,MAAIkB,MAAO,CAACmL,QAAQ,YAClB1F,EAAA5G,EAAAC,cAAA,QAAMkB,MAAO,CAACE,QAAQ,QAASlB,MAAO,OAAQiH,OAAQ,OAAQwH,WAAYtN,MAE5EsF,EAAA5G,EAAAC,cAAA,MAAIkB,MAAO,CAACmL,QAAQ,UAAU/E,cAAc,eAAgBO,GAC5DlB,EAAA5G,EAAAC,cAAA,MAAIkB,MAAO,CAACmL,QAAQ,YAAY1F,EAAA5G,EAAAC,cAAA,cAAS0Q,EAAT,IAAsBjN,EAAK5E,MAAM6E,qBAtyBrE2C,EAAAK,OAAA,4BA+yBRrC,EAAO,GACPC,EAAW,GAEXN,EAAWmF,QAAQ,SAACsB,EAAEpF,GACpB,IAAMH,EAAO2D,IAAmB,IAAZ4B,EAAExF,WAAgB+D,OAAO,cACzCI,EAAM,CACRlE,KAAK2D,IAAmB,IAAZ4B,EAAExF,WAAgB+D,OAAO,qBAEnC1E,EAASY,KACXkE,EAAM9E,EAASY,IAGjB,IAAM0N,EAAkBnI,EAAEyF,cAAc2C,OAAO,SAACC,EAAY3C,GAC1D,IAAMO,EAAajN,EAAK/E,cAAc4K,iBAAiB6G,EAAmBO,WAAWjN,EAAK5E,MAAM2H,YAAYnG,UAC5G,OAAOoD,EAAK/E,cAAc8R,MAAMsC,GAAarT,KAAKiR,IAClD,GAEFjG,EAAEyF,cAAc/G,QAAQ,SAACkJ,GACvB,IAAMC,EAAiB7O,EAAK/E,cAAc8R,MAAM6B,EAAa5B,MAAMhH,GAAG,GAChEuI,EAAevO,EAAK5E,MAAM2H,YAAYrC,UAAU8F,OAAO,SAAC+F,GAAQ,OAAOA,EAAEM,QAAQD,gBAAkBgC,EAAajC,aAAaC,gBAAiB,GAAGW,KACvJ,GAAKsB,OAMmCrB,WAAtB7H,EAAI4I,KACpB5I,EAAI4I,GAAgB,OAPF,CAClB,IAAMtB,EAAajN,EAAK/E,cAAc4K,iBAAiB+I,EAAa3B,WAAWjN,EAAK5E,MAAM2H,YAAYnG,UAChG0S,EAAiBpS,WAAW+P,EAAW/Q,IAAIiT,GAAiBlT,MAAM,MACxE2E,EAAK2N,GAAgB,EACrB5I,EAAI4I,GAAgBe,EACpB3J,EAAG,GAAAgJ,OAAIJ,EAAJ,UAA2B,OAAOzJ,IAAcC,MAAMrE,UAAU6N,GAAc3Q,MAAMmO,IAAIC,KAAK,KAAK,OAMzGnL,EAASY,GAAQkE,IAGnBjG,EAAYf,OAAO4H,OAAO1F,GAG1BpB,EAAYiH,IAEZxF,EAAkB,EAElB1B,EAAa,CACXoJ,QAAS,GACTM,SAAS,EACTtC,QAAS,OACTnC,KAAM/E,EACNmH,aAAa,EACbiC,eAAgB,GAChBC,gBAAiB,GACjBnI,KAAMjC,OAAOiC,KAAKA,GAClBiI,eAAgB,sBAChByC,OAAQtL,EAAK5E,MAAMiD,SAAW,CAAEkN,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIjH,KAAM,IAAO,CAAE+G,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIjH,KAAM,IACrH2D,OAAQ,SAAAoH,GAAA,IAAGnL,EAAHmL,EAAGnL,GAAH,OAAAmL,EAAO9K,KAAe,GAAAkK,OAAIvK,EAAJ,WAC9BqD,SAAS,CACPlC,OAAQ,SAAAkB,GAAC,OAAI3G,SAAS2G,GAAG,MAE3BQ,WAAYjH,EAAK5E,MAAMiD,SAAW,KAAO,CACvC8I,OAAQ,GACR5B,OAAQ,SAAC1F,GACP,GAAIqB,IAAoB,IAAM,EAC5B,OAAOkE,IAAOvF,EAAM,oBAAoB0F,OAAO,WAGnD8B,OAAQ,SACRC,aAAc,GACdC,eAAgB,SAChBC,WAAY,gBAEduD,QAAQ,SAAAyE,GAA0B,IAAvBpL,EAAuBoL,EAAvBpL,GAAIvE,EAAmB2P,EAAnB3P,MAAOjC,EAAY4R,EAAZ5R,MACdqP,EAA+B,MAAlBnN,SAASD,GAAeG,EAAK/E,cAAcqC,YAAYuC,EAAM,GAAKG,EAAK/E,cAAcqC,YAAYuC,EAAM,GAC1H,OACEqD,EAAA5G,EAAAC,cAAA,SAAOkB,MAAO,CAAChB,MAAM,OAAOyS,eAAe,aACzChM,EAAA5G,EAAAC,cAAA,aACE2G,EAAA5G,EAAAC,cAAA,UACE2G,EAAA5G,EAAAC,cAAA,MAAIkB,MAAO,CAACmL,QAAQ,YAClB1F,EAAA5G,EAAAC,cAAA,QAAMkB,MAAO,CAACE,QAAQ,QAASlB,MAAO,OAAQiH,OAAQ,OAAQwH,WAAYtN,MAE5EsF,EAAA5G,EAAAC,cAAA,MAAIkB,MAAO,CAACmL,QAAQ,UAAU/E,cAAc,eAAgBO,GAC5DlB,EAAA5G,EAAAC,cAAA,MAAIkB,MAAO,CAACmL,QAAQ,YAAY1F,EAAA5G,EAAAC,cAAA,cAAS0Q,EAAT,WA73BpCrK,EAAAK,OAAA,qBAs7BR,IA/CAhC,EAAgB,EAEhBjB,EAAK5E,MAAM2H,YAAYrC,UAAUgF,QAAQ,SAAC6G,EAAEC,GACtC9M,EAAU8G,OAAO,SAAAQ,GAAO,OAAOA,EAAEuG,OAAShB,EAAEgB,OAAS1I,QAGzDnF,EAAUiH,KAAK,CACbvC,GAAGmI,EAAEgB,KACL3P,MAAM,OAAOkH,IAAcC,MAAMrE,UAAU6L,EAAEgB,MAAM3P,MAAMmO,IAAIC,KAAK,KAAK,IACvEvH,KAAKlE,EAAW0L,IAAI,SAACjF,EAAEpF,GACrB,OAAOoF,EAAEyF,cAAcjG,OAAO,SAACkG,EAAmBN,GAC9C,OAAOM,EAAmBC,aAAaC,gBAAkBL,EAAEM,QAAQD,gBAEtEX,IAAI,SAACS,EAAmBI,GAEvB,IADuB9M,EAAK/E,cAAc8R,MAAML,EAAmBM,MAAMhH,GAAG,GACxD,CAClB,IAAMoG,EAAIhH,IAAmB,IAAZ4B,EAAExF,WAAgB+D,OAAO,oBACpC8G,EAAInP,WAAW8C,EAAK/E,cAAc4K,iBAAiB6G,EAAmBM,KAAK,KAIjF,OAFA/L,EAAgBmF,KAAKC,IAAIpF,EAAcoL,GAEhC,CAAED,IAAGC,QAGb,KACF7F,OAAO,SAACC,GAAQ,YAAa+G,IAAN/G,QAI9B/G,EAAUiH,KAAK,CACbvC,GAAG,OACHxG,MAAO,OAAOkH,IAAcC,MAAMrE,UAAU+O,KAAK7R,MAAMmO,IAAIC,KAAK,KAAK,IACrEvH,KAAMlE,EAAW0L,IAAI,SAACjF,EAAEpF,GACtB,IAAMwK,EAAIhH,IAAmB,IAAZ4B,EAAExF,WAAgB+D,OAAO,oBACpC8G,EAAInP,WAAW8C,EAAK/E,cAAc4K,iBAAiBmB,EAAE0I,SAAS,KAIpE,OAFAzO,EAAgBmF,KAAKC,IAAIpF,EAAcoL,GAEhC,CAAED,IAAGC,SAKhB5M,EAAYyF,IAEZpE,EAAY5D,WAAW+D,EAAcX,GACrCU,EAAc,CAAC,GACNY,EAAE,EAAEA,GAAG,EAAEA,IAChBZ,EAAY2F,KAAK/E,EAAEd,GAv7Bb,OA07BRtB,EAAa,CACXiO,OAAO,CACLC,KAAM,OACNnI,OAAQ,kBAGVoI,QAAQ,mBACRC,QAAQ,SAAA/N,GAAK,OAAI3C,WAAW2C,GAAOE,QAAQ,GAAG,KAC9C8N,OAAO,CACLH,KAAM,SACNI,SAAS,GAEXrG,SAAS,CACPN,OAAQ,GACRD,SAAU,EACVG,OAAQ,OACRD,YAAa,GACbO,aAAc,EACdL,cAAe,GACfE,WAAWxG,EACXuG,eAAgB,SAChBhC,OAAO,SAAA1F,GAAK,OAAI3C,WAAW2C,GAAOE,QAAQ,GAAG,MAE/CkH,WAAYjH,EAAK5E,MAAMiD,SAAW,KAAO,CACvC6I,SAAU,EACV3B,OAAQ,QACR6B,YAAa,GACbI,WAAYxH,EAAK5E,MAAMiD,SAAW,eAAmB2B,EAAK5E,MAAM2S,aAAe,eAAiB,eAChG1G,OAAQ,SACRF,OAAQ,GACRG,aAAc,EACdC,eAAgB,UAElBvG,cACAgI,UAAU,EACVC,SAAQ,EACRC,SAAQ,EACRC,WAAW,IACXC,MAAM,SACNC,YAAW,EACXC,aAAa,IACbC,aAAY,EACZC,aAAY,EACZC,iBAAiB,EACjBtB,OAAO,SAAAnB,GAAC,OAAIA,EAAEpJ,OACd8L,mBAAmB,GACnBC,QAAQ,CACN,CACEE,UAAW7J,EAAK5E,MAAMiD,SAAW,GAAK,GACtCyL,WAAY,GACZC,WAAY/J,EAAK5E,MAAMiD,UAAY,GAAK,EACxC2L,WAAYhK,EAAK5E,MAAMiD,SAAW,GAAK,GACvC4L,WAAY,GACZC,aAAc,EACdC,UAAW,MACXC,OAAQ,cACRC,YAAa,SACbC,cAAevM,IAAMoK,OAAOhB,OAC5BoD,QAAS,CACP,CACEC,GAAI,QACJ/M,MAAO,CACL6M,cAAe,YAMzBvM,MAAM,CACJ+J,KAAM,CACJ2C,MAAO,CACLC,KAAM,CACJpM,SAAU0B,EAAK5E,MAAMiD,SAAW,GAAI,GACpCH,WAAW,IACXgK,KAAKnK,IAAMoK,OAAOhB,OAClBrJ,WAAYC,IAAMC,MAAM2M,aAI9BC,KAAM,CACJC,KAAM,CACJpC,OAAQ1K,IAAMoK,OAAO2C,gBAAiBpC,gBAAiB,SAG3DiB,QAAQ,CACNe,KAAK,CACHpM,SAAU0B,EAAK5E,MAAMiD,SAAW,GAAI,GACpCH,WAAW,IACXJ,WAAYC,IAAMC,MAAM2M,aAI9BQ,WAAW,CAAEC,KAAM,QAASC,UAAW,IACvCC,OAAQtL,EAAK5E,MAAMiD,SAAW,CAAEkN,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIjH,KAAM,IAAO,CAAE+G,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIjH,KAAM,IACrHwJ,aAAa,SAACC,GAAc,IAClBC,EAAUD,EAAVC,MACF/J,EAAQ+J,EAAMC,OAAO,GAC3B,OACEjL,EAAA5G,EAAAC,cAAC8D,EAAD,CACE8D,MAAOA,GAGiB,kBAAjB+J,EAAMC,QAAuBD,EAAMC,OAAOtJ,QAC/CqJ,EAAMC,OAAOlC,IAAI,SAAA9H,GACf,IAAMoK,EAAepK,EAAMiK,QACrBuB,EAAkBxL,EAAMM,KAAK6J,WAEnC,OACEpL,EAAA5G,EAAAC,cAAC6D,EAAD,CACE8D,IAAKC,EAAMC,GACXxG,MAAOuG,EAAMvG,MACbkG,MAAOyK,EACP1O,MAAO8P,SA1iCf/M,EAAAK,OAAA,qBAwmCR,IAlDIjB,EAAY,EAChBf,EAAgB,EAEhBjB,EAAK5E,MAAM2H,YAAYrC,UAAUgF,QAAQ,SAAC6G,EAAEC,GACtC9M,EAAU8G,OAAO,SAAAQ,GAAO,OAAOA,EAAEuG,OAAShB,EAAEgB,OAAS1I,QAIzDnF,EAAUiH,KAAK,CACbvC,GAAGmI,EAAEgB,KACL3P,MAAM,OAAOkH,IAAcC,MAAMrE,UAAU6L,EAAEgB,MAAM3P,MAAMmO,IAAIC,KAAK,KAAK,IACvEvH,KAAKlE,EAAW0L,IAAI,SAACjF,EAAEpF,GACrB,OAAOoF,EAAEyF,cAAcjG,OAAO,SAACkG,EAAmBN,GAC9C,OAAOM,EAAmBC,aAAaC,gBAAkBL,EAAEM,QAAQD,gBAEtEX,IAAI,SAACS,EAAmBI,GACvB,IAAMV,EAAIhH,IAAmB,IAAZ4B,EAAExF,WAAgB+D,OAAO,oBACtC8G,EAAInP,WAAWwP,EAAmBkD,WAMtC,OAJAvD,EAAIwD,MAAMxD,KAAOA,EAAIrK,EAAYqK,EACjCrK,EAAYqK,EACZpL,EAAgBmF,KAAKC,IAAIpF,EAAcoL,GAEhC,CAAED,IAAGC,OACX,KACF7F,OAAO,SAACC,GAAQ,YAAa+G,IAAN/G,QAI9B/G,EAAUiH,KAAK,CACbvC,GAAG,OACHxG,MAAO,OAAOkH,IAAcC,MAAMrE,UAAU+O,KAAK7R,MAAMmO,IAAIC,KAAK,KAAK,IACrEvH,KAAMlE,EAAW0L,IAAI,SAACjF,EAAEpF,GACtB,IAAMwK,EAAIhH,IAAmB,IAAZ4B,EAAExF,WAAgB+D,OAAO,oBACtC8G,EAAInP,WAAW8J,EAAE8I,WAKrB,OAJAzD,EAAIwD,MAAMxD,KAAOA,EAAIrK,EAAYqK,EACjCrK,EAAYqK,EACZpL,EAAgBmF,KAAKC,IAAIpF,EAAcoL,GAEhC,CAAED,IAAGC,SAOhB5M,EAAYyF,IAEZpE,EAAY5D,WAAW+D,EAAcX,GACrCU,EAAc,CAAC,GACNY,EAAE,EAAEA,GAAG,EAAEA,IAChBZ,EAAY2F,KAAK/E,EAAEd,GAzmCb,OA4mCRtB,EAAa,CACXiO,OAAO,CACLC,KAAM,OACNnI,OAAQ,kBAGVoI,QAAQ,mBACRC,QAAQ,SAAA/N,GAAK,OAAI3C,WAAW2C,GAAOE,QAAQ,IAC3C8N,OAAO,CACLH,KAAM,SACNI,SAAS,GAEXrG,SAAS,CACPN,OAAQ,GACRD,SAAU,EACVG,OAAQ,OACRD,YAAa,GACbO,aAAc,EACdL,cAAe,GACfE,WAAWxG,EACXuG,eAAgB,SAChBhC,OAAO,SAAA1F,GAAK,OAAI3C,WAAW2C,GAAOE,QAAQ,KAE5CkH,WAAYjH,EAAK5E,MAAMiD,SAAW,KAAO,CACvC6I,SAAU,EACV3B,OAAQ,QACR6B,YAAa,GACbI,WAAYxH,EAAK5E,MAAMiD,SAAW,eAAmB2B,EAAK5E,MAAM2S,aAAe,eAAiB,eAChG1G,OAAQ,SACRF,OAAQ,GACRG,aAAc,EACdC,eAAgB,UAElBvG,cACAgI,UAAU,EACVC,SAAQ,EACRC,SAAQ,EACRC,WAAW,IACXC,MAAM,SACNC,YAAW,EACXC,aAAa,IACbC,aAAY,EACZC,aAAY,EACZC,iBAAiB,EACjBtB,OAAO,SAAAnB,GAAC,OAAIA,EAAEpJ,OACd8L,mBAAmB,GACnBC,QAAQ,CACN,CACEE,UAAW7J,EAAK5E,MAAMiD,SAAW,GAAK,GACtCyL,WAAY,GACZC,WAAY/J,EAAK5E,MAAMiD,UAAY,GAAK,EACxC2L,WAAYhK,EAAK5E,MAAMiD,SAAW,GAAK,GACvC4L,WAAY,GACZC,aAAc,EACdC,UAAW,MACXC,OAAQ,cACRC,YAAa,SACbC,cAAevM,IAAMoK,OAAOhB,OAC5BoD,QAAS,CACP,CACEC,GAAI,QACJ/M,MAAO,CACL6M,cAAe,YAMzBvM,MAAM,CACJ+J,KAAM,CACJ2C,MAAO,CACLC,KAAM,CACJpM,SAAU0B,EAAK5E,MAAMiD,SAAW,GAAI,GACpCH,WAAW,IACXgK,KAAKnK,IAAMoK,OAAOhB,OAClBrJ,WAAYC,IAAMC,MAAM2M,aAI9BC,KAAM,CACJC,KAAM,CACJpC,OAAQ1K,IAAMoK,OAAO2C,gBAAiBpC,gBAAiB,SAG3DiB,QAAQ,CACNe,KAAK,CACHpM,SAAU0B,EAAK5E,MAAMiD,SAAW,GAAI,GACpCH,WAAW,IACXJ,WAAYC,IAAMC,MAAM2M,aAI9BQ,WAAW,CAAEC,KAAM,QAASC,UAAW,IACvCC,OAAQtL,EAAK5E,MAAMiD,SAAW,CAAEkN,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIjH,KAAM,IAAO,CAAE+G,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIjH,KAAM,IACrHwJ,aAAa,SAACC,GAAc,IAClBC,EAAUD,EAAVC,MACF/J,EAAQ+J,EAAMC,OAAO,GAC3B,OACEjL,EAAA5G,EAAAC,cAAC8D,EAAD,CACE8D,MAAOA,GAGiB,kBAAjB+J,EAAMC,QAAuBD,EAAMC,OAAOtJ,QAC/CqJ,EAAMC,OAAOlC,IAAI,SAAA9H,GACf,IAAMoK,EAAepK,EAAMiK,QACrBuB,EAAkBxL,EAAMM,KAAK6J,WACnC,OACEpL,EAAA5G,EAAAC,cAAC6D,EAAD,CACE8D,IAAKC,EAAMC,GACXxG,MAAOuG,EAAMvG,MACbkG,MAAOyK,EACP1O,MAAO8P,SA3tCf/M,EAAAK,OAAA,qBAs5CR,IA/KAlC,EAAY,EACZE,EAAgB,EAEZiB,EAAU,KACVC,EAAW,KACXC,EAAepC,EAAK/E,cAAc8R,MAAM,GACxC1K,EAAiBrC,EAAK/E,cAAc8R,MAAM,GAC1CzK,EAAStC,EAAK/E,cAAc8R,MAAM,GAItC5L,EAAgBZ,EAAW0L,IAAI,SAACjF,EAAEpF,GAEhC,IAAIyK,EAAI,EACJ0D,EAAM,EACJ3D,EAAIhH,IAAmB,IAAZ4B,EAAExF,WAAgB+D,OAAO,oBACpCyK,EAAMhQ,EAAK/E,cAAc4K,iBAAiBmB,EAAE0I,SAAS,IAAIxT,IAAI,KAKnE,GAFAoG,EAASA,EAAOtG,KAAKgU,EAAI/T,MAAM,MAE3BiG,EAAQ,CACV,IAAM+N,GAAQjJ,EAAExF,UAAUW,EAASX,WAAW,MAGxC0O,EAAW7N,EAAepG,MAAMiG,EAAQjG,MAAMgU,GAAM/T,IAAI,MAGxDiU,GAFN9N,EAAiBA,EAAerG,KAAKkU,IAENhU,IAAIkG,GAAc8D,MAAM,GAAGjK,MAAM,KAChEoQ,EAAInP,WAAWiT,GAGfJ,EAAMzN,EAAOpG,IAAI0F,EAAE,GAAG7B,QAAQ,GAGhCoC,EAAW6E,EAEX9E,EAAU8N,EAEa,OAAnB5O,IACFA,EAAiBtB,SAASkH,EAAEoJ,cAG9BnP,EAAgBmF,KAAKC,IAAIpF,EAAcoL,GAEvC,IAAM3H,EAAU0B,KAAKiK,MAAMtP,EAAUN,EAAW,KAC1C2P,EAAcpJ,EAAEoJ,YAItB,OAFArP,IAEO,CAAEqL,IAAGC,IAAG0D,MAAKK,cAAa1L,aAI/B/D,EAAY2P,qBAAuB3P,EAAY2P,oBAAoBzL,OAAO,GAC5ElE,EAAY2P,oBAAoB5K,QAAS,SAAA6K,GACvC,IAAMC,EAAexQ,EAAK5E,MAAM2H,YAAYrC,UAAUqO,KAAM,SAAAxC,GAAC,OAAKA,EAAEgB,OAASgD,EAAmBE,WAC5FD,IACFD,EAAmBG,SAAU,EAC7BH,EAAmB1D,QAAU2D,EAAa3D,QAC1CnM,EAAUiQ,QAAQJ,MAKxB7P,EAAUgF,QAAS,SAAA6G,GAEjB,IAAMiE,EAAe1L,IAAcC,MAAMrE,UAAU6L,EAAEgB,MAC/CqD,EAAYJ,EAAaI,UAAYJ,EAAaI,UAAY,OAE9DC,EAAW,CACfzM,GAAGoM,EAAa1M,MAChBlG,MAAO,OAAO4S,EAAa5S,MAAMmO,IAAIC,KAAK,KAAK,IAC/CvH,KAAM,IAGR1D,EAAY,EAEZmB,EAAU,KACVC,EAAW,KACX,IAAI2O,EAAa,EACbC,EAAoB,KACpBC,EAAqB,KACzB1O,EAAStC,EAAK/E,cAAc8R,MAAM,GAClC3K,EAAepC,EAAK/E,cAAc8R,MAAM,GACxC1K,EAAiBrC,EAAK/E,cAAc8R,MAAM,GAE1CxM,EAAWmF,QAAS,SAACsB,EAAEpF,GAErB,IAAMgN,EAAe5H,EAAEyF,cAAcsC,KAAK,SAACkC,EAAM7E,GAC/C,OAAO6E,EAAMtE,aAAaC,gBAAkBL,EAAEM,QAAQD,gBAGxD,GAAIgC,EAAa,CAEVmC,IACHA,EAAoBnC,GAGtB,IAAMsC,EAAoC,kBAAdN,GAA0BA,EAAU/L,OAAS+L,EAAUxB,OAAO,SAAC+B,EAAIC,GAC7F,OAAIxC,EAAawC,GACRpR,EAAK/E,cAAc8R,MAAMoE,GAAKnV,KAAKgE,EAAK/E,cAAc8R,MAAM6B,EAAawC,KAE3EpR,EAAK/E,cAAc8R,MAAMoE,IAChC,GAAKnR,EAAK/E,cAAc8R,MAAM6B,EAAagC,IAG7C,IADuBM,EAAalL,GAAG,GACnB,CAGlB,GAA2B,OAAvBgL,IACFA,EAAqBlR,SAASkH,EAAEoJ,cACThP,EAAe,CACpC,IAAMiQ,EAAkBlQ,EAAc4N,KAAK,SAAAuC,GAAE,OAAKA,EAAGlB,aAAaY,IAC9DK,IACFP,EAAaO,EAAgBhF,GAKnC,IAAIkF,EAEAlF,EAAI,EACJ0D,EAAM,EACJ3D,EAAIhH,IAAmB,IAAZ4B,EAAExF,WAAgB+D,OAAO,oBACpCyK,EAAMhQ,EAAK/E,cAAc4K,iBAAiBqL,EAAa,IAAIhV,IAAI,KAKrE,GAHAoG,EAASA,EAAOtG,KAAKgU,EAAI/T,MAAM,MAG3BkG,EAAS,CACX,IAAM8N,GAAQjJ,EAAExF,UAAUW,EAASX,WAAW,MAGxC0O,EAAW7N,EAAepG,MAAMiG,EAAQjG,MAAMgU,GAAM/T,IAAI,MAGxDiU,GAFN9N,EAAiBA,EAAerG,KAAKkU,IAENhU,IAAIkG,GAAc8D,MAAM,GAAGjK,MAAM,KAChEoQ,EAAInP,WAAWiT,GAASW,EAExBf,EAAMzN,EAAOpG,IAAI0F,EAAE,GAAG7B,QAAQ,GAGhCoC,EAAW6E,EACX9E,EAAU8N,EAEa,OAAnB5O,IACFA,EAAiBtB,SAASkH,EAAEoJ,cAG9BnP,EAAgBmF,KAAKC,IAAIpF,EAAcoL,GAEvC,IAAM3H,EAAU0B,KAAKiK,MAAMtP,EAAUN,EAAW,KAGhDM,IAEAwQ,EAAU,CACRnF,IACAC,IACA0D,MACArL,WAGF3D,IACA8P,EAASpM,KAAKkC,KAAK4K,OAKzB7R,EAAUiH,KAAKkK,KAGjB/P,EAAY5D,WAAW+D,EAAcX,GACrCU,EAAc,CAAC,GACNY,EAAE,EAAEA,GAAG,EAAEA,IAChBZ,EAAY2F,KAAK/E,EAAEd,GAv5Cb,OA05CRpB,EAAUiH,KAAK,CACbvC,GAAG,OACHxG,MAAO,OAAOkH,IAAcC,MAAMrE,UAAU+O,KAAK7R,MAAMmO,IAAIC,KAAK,KAAK,IACrEvH,KAAMtD,IAIR1B,EAAYyF,IAEZ1F,EAAa,CACXiO,OAAO,CACLC,KAAM,OACNnI,OAAQ,kBAGVoI,QAAQ,mBACRC,QAAQ,SAAA/N,GAAK,OAAI3C,WAAW2C,GAAOE,QAAQ,GAAG,KAC9C8N,OAAO,CACLH,KAAM,SACNI,SAAS,GAGXrG,SAAS,CACPN,OAAQ,GACRD,SAAU,EACVG,OAAQ,OACRD,YAAa,GACbO,aAAc,EACdL,cAAe,GACfE,WAAWxG,EACXuG,eAAgB,SAChBhC,OAAQ,SAAA1F,GAAK,OAAI3C,WAAW2C,GAAOE,QAAQ,GAAG,MAEhDkH,WAAYjH,EAAK5E,MAAMiD,SAAW,KAAO,CACvC8I,OAAQ,GACRD,SAAU,EACV3B,OAAQ,QACR6B,YAAa,GACbE,aAAc,EACdD,OAAQ,SACRE,eAAgB,SAChBC,WAAYxH,EAAK5E,MAAMiD,SAAW,eAAmB2B,EAAK5E,MAAM2S,aAAe,eAAiB,gBAElG/M,cACAgI,UAAU,EACVC,SAAQ,EACRC,SAAQ,EACRC,WAAW,IACXC,MAAM,YACNC,YAAW,EACXC,aAAa,IACbC,aAAY,EACZC,aAAY,EACZC,iBAAiB,EACjBtB,OAAO,SAAAnB,GAAC,OAAIA,EAAEpJ,OACd8L,mBAAmB,GACnBC,QAAQ,CACN,CACEG,WAAY,GACZD,UAAW7J,EAAK5E,MAAMiD,SAAW,GAAK,IACtC0L,WAAY/J,EAAK5E,MAAMiD,UAAY,GAAK,EACxC2L,WAAYhK,EAAK5E,MAAMiD,SAAW,GAAK,GACvC4L,WAAY,GACZC,aAAc,EACdC,UAAW,MACXC,OAAQ,cACRC,YAAa,SACbC,cAAevM,IAAMoK,OAAOhB,OAC5BoD,QAAS,CACP,CACEC,GAAI,QACJ/M,MAAO,CACL6M,cAAe,YAMzBvM,MAAM,CACJ+J,KAAM,CACJ2C,MAAO,CACLC,KAAM,CACJpM,SAAU0B,EAAK5E,MAAMiD,SAAW,GAAI,GACpCH,WAAW,IACXgK,KAAKnK,IAAMoK,OAAOhB,OAClBrJ,WAAYC,IAAMC,MAAM2M,aAI9BC,KAAM,CACJC,KAAM,CACJpC,OAAQ1K,IAAMoK,OAAO2C,gBAAiBpC,gBAAiB,SAG3DiB,QAAQ,CACNe,KAAK,CACHpM,SAAU0B,EAAK5E,MAAMiD,SAAW,GAAI,GACpCH,WAAW,IACXJ,WAAYC,IAAMC,MAAM2M,aAI9BQ,WAAW,CAAEC,KAAM,QAASC,UAAW,IACvCC,OAAQtL,EAAK5E,MAAMiD,SAAW,CAAEkN,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIjH,KAAM,IAAO,CAAE+G,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIjH,KAAM,IACrHwJ,aAAa,SAACC,GAAc,IAClBC,EAAUD,EAAVC,MACF/J,EAAQ+J,EAAMC,OAAO,GAC3B,OACEjL,EAAA5G,EAAAC,cAAC8D,EAAD,CACE8D,MAAOA,GAGiB,kBAAjB+J,EAAMC,QAAuBD,EAAMC,OAAOtJ,QAC/CqJ,EAAMC,OAAOlC,IAAI,SAAA9H,GACf,IAAMoK,EAAepK,EAAMiK,QACrBuB,EAAkBxL,EAAMM,KAAK6J,WAC7BkD,EAAcrN,EAAMM,KAAKsL,IAC/B,OACE7M,EAAA5G,EAAAC,cAAC6D,EAAD,CACE8D,IAAKC,EAAMC,GACXN,MAAOyK,EACP3Q,MAAOuG,EAAMvG,MACbiC,MAAK,GAAA8O,OAAKgB,EAAL,aAAAhB,OAAgC6C,EAAhC,yBAphDb5O,EAAAK,OAAA,6BAgiDRhC,EAAgB,EACZuB,EAAkB,KAEtBrB,EAAgBZ,EAAW0L,IAAI,SAACjF,EAAEpF,GAEhC,IAAIyK,EAAI,EACJ0D,EAAM,EACNE,EAAO,EACL7D,EAAIhH,IAAmB,IAAZ4B,EAAExF,WAAgB+D,OAAO,oBACpCkM,EAAazR,EAAK/E,cAAc4K,iBAAiBmB,EAAEkF,UAAUlM,EAAK5E,MAAM2H,YAAYnG,UAErF4F,GAGH6J,EAAInP,WAAWuU,EAAWvV,IAAIsG,GAAiB0D,MAAM,GAAGjK,MAAM,MAE9DgU,GAAQjJ,EAAExF,UAAUjB,EAAW,GAAGiB,WAAW,MAE7CuO,EADgB0B,EAAWvV,IAAIsG,GAAiB0D,MAAM,GAAGjK,MAAM,KACjDA,MAAM,KAAKC,IAAI+T,GAAMlQ,QAAQ,IAN3CyC,EAAkBiP,EAWG,OAAnBrQ,IACFA,EAAiBtB,SAASkH,EAAEoJ,cAG9BnP,EAAgBmF,KAAKC,IAAIpF,EAAcoL,GAEvC,IAAM3H,EAAU0B,KAAKiK,MAAMtP,EAAUN,EAAW,KAC1C2P,EAAcpJ,EAAEoJ,YAItB,OAFArP,IAEO,CAAEqL,IAAGC,IAAG0D,MAAKK,cAAa1L,aAI/B/D,EAAY2P,qBAAuB3P,EAAY2P,oBAAoBzL,OAAO,GAC5ElE,EAAY2P,oBAAoB5K,QAAS,SAAA6K,GACvC,IAAMC,EAAexQ,EAAK5E,MAAM2H,YAAYrC,UAAUqO,KAAM,SAAAxC,GAAC,OAAKA,EAAEgB,OAASgD,EAAmBE,WAC5FD,IACFD,EAAmBG,SAAU,EAC7BH,EAAmB1D,QAAU2D,EAAa3D,QAC1CnM,EAAUiQ,QAAQJ,MA5kDhB3N,EAAAE,KAAA,IAilDF9C,EAAK/E,cAAcyW,aAAahR,EAAhC,eAAAiR,EAAAhT,OAAAiT,EAAA,EAAAjT,CAAA+D,EAAApG,EAAAuV,KAA0C,SAAAC,EAAOvF,GAAP,IAAAiE,EAAAI,EAAAC,EAAAC,EAAAiB,EAAAC,EAAAjB,EAAAC,EAAA,OAAAtO,EAAApG,EAAAqG,KAAA,SAAAsP,GAAA,cAAAA,EAAApP,KAAAoP,EAAAnP,MAAA,cAExC0N,EAAe1L,IAAcC,MAAMrE,UAAU6L,EAAEgB,MAC/CqD,EAAYJ,EAAaI,UAAYJ,EAAaI,UAAY,OAE9DC,EAAW,CACfzM,GAAGoM,EAAa1M,MAChBlG,MAAO,OAAO4S,EAAa5S,MAAMmO,IAAIC,KAAK,KAAK,IAC/CvH,KAAM,IAGR1D,EAAY,EACR+P,EAAa,EACjBtO,EAAkB,KACduP,EAAc,KACdC,EAAiB,KACjBjB,EAAoB,KACpBC,EAAqB,KAjBqBiB,EAAAnP,KAAA,GAmBxC9C,EAAK/E,cAAcyW,aAAanR,EAAhC,eAAA2R,EAAAvT,OAAAiT,EAAA,EAAAjT,CAAA+D,EAAApG,EAAAuV,KAA2C,SAAAM,EAAOnL,GAAP,IAAA4H,EAAAyC,EAAAE,EAAAa,EAAAC,EAAAjG,EAAAC,EAAA0D,EAAAuC,EAAArC,EAAAE,EAAAzL,EAAA,OAAAhC,EAAApG,EAAAqG,KAAA,SAAA4P,GAAA,cAAAA,EAAA1P,KAAA0P,EAAAzP,MAAA,QAEzC8L,EAAe5H,EAAEyF,cAAcsC,KAAK,SAACkC,EAAM7E,GAC/C,OAAO6E,EAAMtE,aAAaC,gBAAkBL,EAAEM,QAAQD,kBAGpCgC,EAAagC,KAE1BG,IACHA,EAAoBnC,GAGC5O,EAAK/E,cAAc8R,MAAM6B,EAAagC,IAAY5K,GAAG,KAI/C,OAAvBgL,IACFA,EAAqBlR,SAASkH,EAAEoJ,cACThP,IACfiQ,EAAkBlQ,EAAc4N,KAAK,SAAAuC,GACzC,OAAOA,EAAGlB,aAAaY,OAGvBF,EAAaO,EAAgBhF,GAKrB,GACV+F,EAAoBxD,EAAa4D,MACjCH,EAAkBrS,EAAK/E,cAAc4K,iBAAiBuM,EAAkB7F,EAAE3P,UACxEwP,EAAIhH,IAAmB,IAAZ4B,EAAExF,WAAgB+D,OAAO,oBAGtCiL,GAAgBA,EAAa/L,MAAQ+L,EAAa/L,KAAK8H,EAAEM,QAAQD,gBAAkB4D,EAAa/L,KAAK8H,EAAEM,QAAQD,eAAe5F,EAAEoJ,eAClIgC,EAAoBpS,EAAK/E,cAAc8R,MAAMjI,IAAcC,MAAMrE,UAAU6L,EAAEgB,MAAM9I,KAAK8H,EAAEM,QAAQD,eAAe5F,EAAEoJ,cACnHiC,EAAkBrS,EAAK/E,cAAc4K,iBAAiBuM,EAAkB7F,EAAE3P,WAiBxEyP,EAAIyE,EACJf,EAAM,EAELvN,GAGC6P,EAAgBI,GAAGT,IACrBxP,EAAkB6P,EACZC,EAAYzB,EAASpM,KAAKoM,EAASpM,KAAKI,OAAO,GAAGwH,EAAEwE,EAASpM,KAAKoM,EAASpM,KAAKI,OAAO,GAAGwH,EAChGA,EAAI0F,EAAY1F,EAAEiG,EAClBxB,EAAazE,GAEbA,GAAKnP,WAAWmV,EAAgBnW,IAAIsG,GAAiB0D,MAAM,GAAGjK,MAAM,MAGhEgU,GAAQjJ,EAAExF,UAAUjB,EAAW,GAAGiB,WAAW,MAC7C2O,EAAUkC,EAAgBnW,IAAIsG,GAAiB0D,MAAM,GAAGjK,MAAM,KACpE8T,EAAMI,EAAQlU,MAAM,KAAKC,IAAI+T,GAAMlQ,QAAQ,IAb3CyC,EAAkB6P,EAgBpBhG,EAAIjG,KAAKC,IAAI,EAAEgG,GACfpL,EAAgBmF,KAAKC,IAAIpF,EAAcoL,GAEjC3H,EAAU0B,KAAKiK,MAAMtP,EAAUN,EAAW,KAShDM,IACAgR,EARAR,EAAU,CACRnF,IACAC,IACA0D,MACArL,WAKFmM,EAASpM,KAAKkC,KAAK4K,GACnBS,EAAiBK,IAxF0B,wBAAAE,EAAAG,SAAAP,EAAAjX,SAA3C,gBAAAyX,GAAA,OAAAT,EAAAU,MAAA1X,KAAA2X,YAAA,IAnBwC,QAgH9CnT,EAAUiH,KAAKkK,GAhH+B,yBAAAoB,EAAAS,SAAAZ,EAAA5W,SAA1C,gBAAA4X,GAAA,OAAAnB,EAAAiB,MAAA1X,KAAA2X,YAAA,IAjlDE,SAssDR,IAFA/R,EAAY5D,WAAW+D,EAAcX,GACrCU,EAAc,CAAC,GACNY,EAAE,EAAEA,GAAG,EAAEA,IAChBZ,EAAY2F,KAAK/E,EAAEd,GAvsDb,OA0sDRpB,EAAUiH,KAAK,CACbvC,GAAG,OACHxG,MAAO,OAAOkH,IAAcC,MAAMrE,UAAU+O,KAAK7R,MAAMmO,IAAIC,KAAK,KAAK,IACrEvH,KAAMtD,IAIR1B,EAAYyF,IAEZ1F,EAAa,CACXiO,OAAO,CACLC,KAAM,OACNnI,OAAQ,kBAGVoI,QAAQ,mBACRC,QAAQ,SAAA/N,GAAK,OAAI3C,WAAW2C,GAAOE,QAAQ,GAAG,KAC9C8N,OAAO,CACLH,KAAM,SACNI,SAAS,GAGXrG,SAAS,CACPN,OAAQ,GACRD,SAAU,EACVG,OAAQ,OACRD,YAAa,GACbO,aAAc,EACdL,cAAe,GACfE,WAAWxG,EACXuG,eAAgB,SAChBhC,OAAQ,SAAA1F,GAAK,OAAI3C,WAAW2C,GAAOE,QAAQ,GAAG,MAEhDkH,WAAYjH,EAAK5E,MAAMiD,SAAW,KAAO,CACvC8I,OAAQ,GACRD,SAAU,EACV3B,OAAQ,QACR6B,YAAa,GACbE,aAAc,EACdD,OAAQ,SACRE,eAAgB,SAChBC,WAAYxH,EAAK5E,MAAMiD,SAAW,eAAmB2B,EAAK5E,MAAM2S,aAAe,eAAiB,gBAElG/M,cACAgI,UAAU,EACVC,SAAQ,EACRC,SAAQ,EACRC,WAAW,IACXC,MAAM,YACNC,YAAW,EACXC,aAAa,IACbC,aAAY,EACZC,aAAY,EACZC,iBAAiB,EACjBtB,OAAO,SAAAnB,GAAC,OAAIA,EAAEpJ,OACd8L,mBAAmB,GACnBC,QAAQ,CACN,CACEG,WAAY,GACZD,UAAW7J,EAAK5E,MAAMiD,SAAW,GAAK,IACtC0L,WAAY/J,EAAK5E,MAAMiD,UAAY,GAAK,EACxC2L,WAAYhK,EAAK5E,MAAMiD,SAAW,GAAK,GACvC4L,WAAY,GACZC,aAAc,EACdC,UAAW,MACXC,OAAQ,cACRC,YAAa,SACbC,cAAevM,IAAMoK,OAAOhB,OAC5BoD,QAAS,CACP,CACEC,GAAI,QACJ/M,MAAO,CACL6M,cAAe,YAMzBvM,MAAM,CACJ+J,KAAM,CACJ2C,MAAO,CACLC,KAAM,CACJpM,SAAU0B,EAAK5E,MAAMiD,SAAW,GAAI,GACpCH,WAAW,IACXgK,KAAKnK,IAAMoK,OAAOhB,OAClBrJ,WAAYC,IAAMC,MAAM2M,aAI9BC,KAAM,CACJC,KAAM,CACJpC,OAAQ1K,IAAMoK,OAAO2C,gBAAiBpC,gBAAiB,SAG3DiB,QAAQ,CACNe,KAAK,CACHpM,SAAU0B,EAAK5E,MAAMiD,SAAW,GAAI,GACpCH,WAAW,IACXJ,WAAYC,IAAMC,MAAM2M,aAI9BQ,WAAW,CAAEC,KAAM,QAASC,UAAW,IACvCC,OAAQtL,EAAK5E,MAAMiD,SAAW,CAAEkN,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIjH,KAAM,IAAO,CAAE+G,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIjH,KAAM,IACrHwJ,aAAa,SAACC,GAAc,IAClBC,EAAUD,EAAVC,MACF/J,EAAQ+J,EAAMC,OAAO,GAC3B,OACEjL,EAAA5G,EAAAC,cAAC8D,EAAD,CACE8D,MAAOA,GAGiB,kBAAjB+J,EAAMC,QAAuBD,EAAMC,OAAOtJ,QAC/CqJ,EAAMC,OAAOlC,IAAI,SAAA9H,GACf,IAAMoK,EAAepK,EAAMiK,QACrBuB,EAAkBxL,EAAMM,KAAK6J,WAC7BkD,EAAcrN,EAAMM,KAAKsL,IAC/B,OACE7M,EAAA5G,EAAAC,cAAC6D,EAAD,CACE8D,IAAKC,EAAMC,GACXN,MAAOyK,EACP3Q,MAAOuG,EAAMvG,MACbiC,MAAK,GAAA8O,OAAKgB,EAAL,aAAAhB,OAAgC6C,EAAhC,yBAp0Db5O,EAAAK,OAAA,6BAAAL,EAAAK,OAAA,sBAk1DZjD,EAAK7D,SAAS,CACZsD,YACAD,aACAE,cAr1DU,0BAAAkD,EAAA8P,SAAAvS,EAAAjF,oMAhCZA,KAAKiB,SAAS,CACZuD,UAAU,KACVD,UAAU,KACVD,WAAW,OAEbtE,KAAKI,YACLJ,KAAKgF,mMAGkB1E,6EACjBuX,EAAsBvX,EAAUuS,eAAiB7S,KAAKE,MAAM2S,aAC5DiF,EAAoBxX,EAAU+E,aAAerF,KAAKE,MAAMmF,WACxD0S,EAAezX,EAAUyE,gBAAkB/E,KAAKE,MAAM6E,eAAiBrE,KAAKC,UAAUL,EAAUuH,eAAiBnH,KAAKC,UAAUX,KAAKE,MAAM2H,cAC7IiQ,GAAqBD,GAAuBE,IAC9C/X,KAAKgY,2JAOHhY,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,wCAk2D9C,OACE8H,EAAA5G,EAAAC,cAAC4W,EAAA,EAADxU,OAAAC,OAAA,CACEwU,YAAY,GACRlY,KAAKJ,MAAM0E,WAFjB,CAGEkE,OAAQxI,KAAKE,MAAMsI,OACnBgK,KAAMxS,KAAKJ,MAAM2E,UACjBgF,KAAMvJ,KAAKJ,MAAM4E,UACjBjD,MAAOvB,KAAKJ,MAAM6E,WAClBtB,SAAUnD,KAAKE,MAAMiD,SACrBgV,SAAUnY,KAAKE,MAAMiY,SACrBC,eAAgBpY,KAAKE,MAAMkY,yBA74DVpU,uCC6LVqU,6MA/LbzY,MAAQ,CACN0Y,SAAQ,EACRC,WAAW,CACTC,UAAU,CACRC,OAAO,KACPH,SAAQ,IAGZI,gBAAgB,QAIlB3Y,cAAgB,OAyBhB4Y,oCAAiB,SAAA1B,IAAA,IAAAyB,EAAA,OAAAlR,EAAApG,EAAAqG,KAAA,SAAA4P,GAAA,cAAAA,EAAA1P,KAAA0P,EAAAzP,MAAA,cACf9C,EAAK7D,SAAS,CACZqX,SAAQ,IAFKjB,EAAAzP,KAAA,EAKe9C,EAAK/E,cAAc4Y,eAAe7T,EAAK5E,MAAM2H,aAL5D,OAKT6Q,EALSrB,EAAAuB,KAOf9T,EAAK7D,SAAS,CACZqX,SAAQ,EACRI,oBATa,wBAAArB,EAAAG,SAAAP,EAAAjX,WAajBwY,gDAAY,SAAA5B,EAAOiC,GAAP,IAAAC,EAAAC,EAAA,OAAAvR,EAAApG,EAAAqG,KAAA,SAAAsP,GAAA,cAAAA,EAAApP,KAAAoP,EAAAnP,MAAA,OACViR,EAAEG,iBAEIF,EAAW,SAACG,EAAGC,GAGnB,IAAMC,EAAY,CAChBC,cAAe,YACfC,YAAavU,EAAK5E,MAAM6E,cACxBuU,WAAYL,EAAGM,QAKbL,IACFC,EAAUG,WAAaxU,EAAK/E,cAAcyZ,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUI,SACrBzU,EAAK/E,cAAc0Z,yBAAyBN,GAG5B,YAAdF,EAAGM,OAELG,OAAOC,cAAcC,WAArB,sBAAuD,CACrDC,iBAAgB,4BAChBC,WAAY,QACZC,WAAY,GACZC,WAAY,GACZC,QAAS,YAIXP,OAAOC,cAAcC,WAArB,kBAAmD,CACjDC,iBAAgB,yCAChBC,WAAY,QACZC,WAAY,GACZC,WAAY,GACZC,QAAS,YAIbnV,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL,CAERC,UAAU,CACRC,OAAO,KACPH,SAAQ,QAKdxT,EAAK6T,kBAGDI,EAAmB,SAACE,GACxB,IAAMR,EAASQ,EAAGkB,gBAClBrV,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC1BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL,CAERC,UAAU/U,OAAAyW,EAAA,EAAAzW,CAAA,GACLlD,EAAUgY,WAAWC,UADjB,CAEPC,iBAOV3T,EAAK5E,MAAMka,0BAA0BtV,EAAK5E,MAAM2H,YAAY0M,KAAK8F,MAAO,YAAa,GAAI,KAAOvB,EAAUC,GAE1GjU,EAAK7D,SAAS,CACZsX,WAAW,CACTC,UAAU,CACRC,OAAO,KACPH,SAAQ,MA5EJ,wBAAAvB,EAAAS,SAAAZ,EAAA5W,0IAnCNA,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,4JAK9CF,KAAKI,YACLJ,KAAK2Y,sMAGkBrY,EAAUC,yEACjCP,KAAKI,YAECka,EAAiBha,EAAUia,UAAYva,KAAKE,MAAMqa,SACnCja,EAAUyE,gBAAkB/E,KAAKE,MAAM6E,eACxCuV,IAClBta,KAAK2Y,uJAmGA,IAAAzX,EAAAlB,KACP,OACEgI,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEoB,GAAI,EACJ9H,MAAO,EACPiZ,UAAW,QACX3W,WAAY,SACZsE,cAAe,SACfrE,eAAgB,UAGhB9D,KAAKJ,MAAM0Y,QACTtQ,EAAA5G,EAAAC,cAACoZ,EAAA,EAAD,CACEC,UAAW,CACTvS,cAAc,OAEhBwS,YAAa,CACX5W,KAAK,QAEP6W,UAAW,CACTC,GAAG,GAELrL,KAAM,0BAGRxP,KAAKJ,MAAM2Y,WAAWC,UAAUF,QAC9BtQ,EAAA5G,EAAAC,cAACyZ,EAAA,EAAD,CAAeC,KAAM/a,KAAKE,MAAM6a,KAAMC,SAAQ,yBAA4BC,WAAU,kCAAqCC,KAAMlb,KAAKJ,MAAM2Y,WAAWC,UAAUC,SAE/JzQ,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJjT,GAAI,EACJhF,UAAW,UAEVlD,KAAKJ,MAAM8Y,gBAAkB,uDAAyD,iCAEzF1Q,EAAA5G,EAAAC,cAAC+Z,EAAA,EAAD,CACEC,YAAa,CACX9Z,MAAM,OACN+Z,UAAUtb,KAAKJ,MAAM8Y,iBAEvB6C,YAAa,SAAA1C,GAAC,OAAI3X,EAAKsX,UAAUK,KALnC,sBA/KU7U,qHCsJTwX,sNA7Ib5b,MAAQ,CACN6b,eAAe,GACfC,OAAO,CACLC,UAAW7W,EAAK5E,MAAMyb,UAAY7W,EAAK5E,MAAMyb,UAAY,IAAIC,KAC7DC,QAAS/W,EAAK5E,MAAM2b,QAAU/W,EAAK5E,MAAM2b,QAAU,IAAID,KACvD5S,IAAK,gBAsDT8S,mBAAqB,SAACxb,GAChBA,EAAUqb,YAAc7W,EAAK5E,MAAMyb,WAAarb,EAAUub,UAAY/W,EAAK5E,MAAM2b,SACnF/W,EAAK7D,SAAS,CACZya,OAAO,CACLC,UAAW7W,EAAK5E,MAAMyb,UAAY7W,EAAK5E,MAAMyb,UAAY,IAAIC,KAC7DC,QAAS/W,EAAK5E,MAAM2b,QAAU/W,EAAK5E,MAAM2b,QAAU,IAAID,KACvD5S,IAAK,4FAxDA0S,GACX1b,KAAKiB,SAAS,CACZwa,eAAe,GACfC,OAAOA,EAAOK,sDAIAlD,GAAE,IAAA3X,EAAAlB,KACd2b,EAAY,KACZE,EAAU3R,IAAO,IAAI0R,MACnBH,EAAiB5C,EAAEmD,OAAOrX,MAEhC,OAAQ8W,GACN,IAAK,MACHE,EAAYE,EAAQI,QAAQC,SAAS,EAAE,OACzC,MACA,IAAK,OACHP,EAAYE,EAAQI,QAAQC,SAAS,EAAE,QACzC,MACA,IAAK,QACHP,EAAYE,EAAQI,QAAQC,SAAS,EAAE,QACzC,MACA,IAAK,QACHP,EAAYE,EAAQI,QAAQC,SAAS,EAAE,SACzC,MACA,QACEP,EAAY,KACZE,EAAU,KAId,GAAIF,GAAaE,EAAQ,CAIvB,IAAMH,EAAS,CACbC,UAJFA,EAAYA,EAAUxR,GAKpB0R,QAJFA,EAAUA,EAAQ1R,GAKhBnB,IAAI,aAGNhJ,KAAKiB,SAAS,CACZya,SACAD,kBACC,WACDva,EAAKib,qDAkBT,IAAMC,EAAWpc,KAAKE,MAAMmc,aAAarc,KAAKJ,MAAM8b,OAAO1b,KAAKJ,MAAM6b,gBAChEC,EAAS,CACbC,UAAUS,EAASE,kBAAoBF,EAASE,kBAAkBnS,GAAK,IAAIyR,KAC3EC,QAAQO,EAASG,gBAAkBH,EAASG,gBAAgBpS,GAAK,IAAIyR,KACrE5S,IAAK,aAEPhJ,KAAKiB,SAAS,CACZya,WAEF1b,KAAKE,MAAMic,8CAGJ,IAAAK,EAAAxc,KACP,OACEgI,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAOwU,OAAQzc,KAAKE,MAAMuc,QACxBzU,EAAA5G,EAAAC,cAACqb,EAAA,EAAD,CAAWC,UAAW3c,KAAKE,MAAMic,YAC/BnU,EAAA5G,EAAAC,cAACqb,EAAA,EAAUE,OAAX,CAAkBC,MAAO,sBAEzB7U,EAAA5G,EAAAC,cAACqb,EAAA,EAAUI,KAAX,KACE9U,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAM1G,MAAO,EAAG4G,cAAe,SAAUtE,WAAY,UACnDmE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAOW,MAAM,uBAAuBrG,MAAO,CAACE,QAAQ,OAAOlB,MAAM,OAAOsC,WAAW,UAAUC,eAAe,WAC1GkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1F,MAAO,CACLG,MAAM,UACNU,SAAS,OACToF,OAAO,QACPuH,UAAU,QAEZxO,MAAO,OACPwb,UAAU,EACVC,SAAUhd,KAAKid,kBAAkBC,KAAKld,MACtC2E,MAAO3E,KAAKJ,MAAM6b,eAClB0B,QAAS,CACP,CAAExY,MAAO,GAAIiE,MAAO,oBACpB,CAAEjE,MAAO,MAAOiE,MAAO,YACvB,CAAEjE,MAAO,OAAQiE,MAAO,aACxB,CAAEjE,MAAO,QAASiE,MAAO,gBACzB,CAAEjE,MAAO,QAASiE,MAAO,kBAI/BZ,EAAA5G,EAAAC,cAAC+b,EAAA,UAAD,CACE1B,OAAQ,CAAC1b,KAAKJ,MAAM8b,QACpB2B,QAASrd,KAAKE,MAAMmd,QACpBC,QAAStd,KAAKE,MAAMod,QACpBN,SAAUhd,KAAKqc,aAAaa,KAAKld,UAIvCgI,EAAA5G,EAAAC,cAACqb,EAAA,EAAUa,OAAX,KACEvV,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAMoB,GAAI,CAAC,EAAE,GAAIlB,cAAe,CAAC,SAAU,OAAQ5G,MAAO,EAAGuC,eAAgB,UAC3EkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEQ,aAAc,EACd+U,GAAI,EACJC,GAAI,CAAC,EAAG,GACR1Z,KAAM/D,KAAKE,MAAMiD,SAAW,QAAU,SACtCua,QAAU,SAAA7E,GAAC,OAAI2D,EAAKL,WAAWtD,KALjC,oBA7He8E,IAAM3Z,YCsHpB4Z,6MA7Hbhe,MAAQ,CACNie,SAAS,KACTtF,WAAW,CACTE,OAAO,KACPH,SAAQ,MAKZvY,cAAgB,gFAGVC,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,4JAK9CF,KAAKI,iMAGkBE,EAAUC,mEACjCP,KAAKI,qQAILJ,KAAKiB,SAAS,CACZsX,WAAY,CACVE,OAAO,KACPH,SAAQ,yIAKL,IAAApX,EAAAlB,KA8CPA,KAAKD,cAAcqa,0BAA0Bpa,KAAKE,MAAM4d,aAAa9d,KAAKE,MAAM6d,WAAW/d,KAAKE,MAAM8d,OA5CrF,SAAC/E,EAAGC,GAEnB,IAAMC,EAAY,CAChBC,cAAe,cACfE,WAAYpY,EAAKhB,MAAM6d,WACvB1E,YAAanY,EAAKhB,MAAM4d,cAGtB5E,IACFC,EAAUG,WAAapY,EAAKnB,cAAcyZ,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUI,SACrBrY,EAAKnB,cAAc0Z,yBAAyBN,GAGZ,YAAdF,EAAGM,QAEc,oBAAxBrY,EAAKhB,MAAM4Y,UACpB5X,EAAKhB,MAAM4Y,WAIf5X,EAAKD,SAAS,CACZ4c,SAAS5E,EAAGM,OACZhB,WAAY,CACVE,OAAO,KACPH,SAAQ,MAKU,SAACW,GACvB,IAAMR,EAASQ,EAAGkB,gBAClBjZ,EAAKD,SAAS,SAACV,GAAD,MAAgB,CAC5Bsd,SAAS,aACTtF,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL,CAERE,gBAONzY,KAAKiB,SAAS,SAACV,GAAD,MAAgB,CAC5Bsd,SAAS,UACTtF,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL,CAERD,SAAQ,wCAMZ,IAAM2F,EAAmBje,KAAKE,MAAM8D,UACpC,OACEgE,EAAA5G,EAAAC,cAAC4G,EAAA,EACKjI,KAAKE,MAAMge,YAGW,YAAxBle,KAAKJ,MAAMie,UAA0B7d,KAAKE,MAAMwJ,SAC9C1J,KAAKE,MAAMwJ,SACX1J,KAAKJ,MAAM2Y,YAAcvY,KAAKJ,MAAM2Y,WAAWD,QAC/CtQ,EAAA5G,EAAAC,cAACyZ,EAAA,EAADrX,OAAAC,OAAA,CACEqX,KAAM/a,KAAKE,MAAM6a,MACb/a,KAAKE,MAAMie,iBAFjB,CAGEjD,KAAMlb,KAAKJ,MAAM2Y,WAAWE,OAC5BuC,SAAQ,GAAAvH,OAAKzT,KAAKE,MAAMiN,OAAhB,iBACRiR,kBAAmBpe,KAAKoe,kBAAkBlB,KAAKld,MAC/Cib,WAAU,cAAAxH,OAAgBzT,KAAKE,MAAMiN,OAA3B,kBAGZnF,EAAA5G,EAAAC,cAAC4c,EAADxa,OAAAC,OAAA,CACEga,QAAS1d,KAAKqe,QAAQnB,KAAKld,OACvBA,KAAKE,MAAMoe,gBAEdte,KAAKE,MAAMoe,eAAe3Z,eAtHRX,uBC87ClBua,6MA56Cb3e,MAAQ,CACNqR,IAAI,KACJ6D,IAAI,KACJC,KAAK,IACLyJ,MAAM,KACNvJ,QAAQ,KACRoI,QAAQ,KACRC,QAAQ,KACRmB,YAAY,EACZC,WAAW,IACXC,aAAa,GACbtZ,WAAW,KACXuZ,cAAc,EACd7U,YAAY,KACZ8U,cAAc,GACdC,aAAa,KACbzY,aAAa,KACbwM,cAAa,EACbkM,cAAc,KACdC,cAAc,KACdvD,eAAe,KACfrV,eAAe,KACfmW,gBAAgB,KAChB7D,gBAAgB,KAChBuG,mBAAmB,EACnB3C,kBAAkB,KAClB4C,sBAAqB,EACrB5Z,sBAAsB,KACtB6Z,sBAAqB,KAGvBC,gBAAkB,CAChBC,IAAI,WACJC,KAAK,YACLC,MAAM,eACNC,MAAM,gBAIRzf,cAAgB,OAChB0f,mBAAqB,OAqIrBC,aAAe,SAAChE,GAA+B,IAAxBD,EAAwB9D,UAAAhO,OAAA,QAAA2I,IAAAqF,UAAA,GAAAA,UAAA,GAAT,KAE9BmH,EAAe5U,IAAON,IAAcC,MAAM+G,OAAO9L,EAAK5E,MAAM6E,eAAeqB,gBAE7EkW,EAAoBpS,IAAOwR,EAAOC,WAAWgE,cAAcb,GAAgB5U,IAAOwR,EAAOC,WAAamD,EACtGvC,EAAkBrS,IAAOwR,EAAOG,SAEhCS,EAAkBsD,OAAOrD,IAC3BA,EAAgBsD,IAAI,EAAE,OAGxBtD,EAAkBrS,IAAOqS,EAAgBlS,OAAO,oBAAoB,oBAEhEiS,EAAkBwD,SAAShb,EAAKlF,MAAMkf,gBACxCxC,EAAoBxX,EAAKlF,MAAMkf,cAG7BvC,EAAgBwD,QAAQjb,EAAKlF,MAAMogB,cACrCzD,EAAkBzX,EAAKlF,MAAMogB,YAG/B,IAAM5Z,EAAiBxB,SAAS0X,EAAkBnS,GAAGC,UAAU,KAGzDgS,EAAW,CACf0C,eACAzY,aAJmBzB,SAAS2X,EAAgBpS,GAAGC,UAAU,KAKzDqR,iBACArV,iBACAmW,kBACAD,qBAKF,OAFAxX,EAAKmb,aAAa7D,GAEXA,KAGT8D,qBAAuB,SAACrH,GACtBA,EAAEG,iBACFlU,EAAKmb,aAAa,CAChBpN,cAAc/N,EAAKlF,MAAMiT,kBAI7BsN,kBAAoB,SAAChB,GACfA,IAAyBra,EAAKlF,MAAMuf,sBACtCra,EAAKmb,aAAa,CAChBd,4BAsDNiB,gBAAkB,SAAC/a,GACjB,OAAOA,EAAWiG,OAAO,SAAC+U,EAAE3Z,GAC1B,QAAS5B,EAAKlF,MAAMwG,gBAAkBia,EAAE/Z,WAAaxB,EAAKlF,MAAMwG,mBAAqBtB,EAAKlF,MAAMyG,cAAgBga,EAAE/Z,WAAaxB,EAAKlF,MAAMyG,mBAI9Iia,eAAiB,SAAAvW,GACfjF,EAAKmb,aAAa,CAChBlW,mBAIJ/E,iCAAc,SAAAiS,IAAA,IAAA7Q,EAAAC,EAAAka,EAAAjb,EAAAD,EAAAmb,EAAAC,EAAA1L,EAAAD,EAAA0J,EAAA9T,EAAAgW,EAAAC,EAAA1P,EAAA2P,EAAAC,EAAAC,EAAAC,EAAArL,EAAAsL,EAAA/L,EAAAgM,EAAAC,EAAAC,EAAAzC,EAAAK,EAAAC,EAAA,OAAAxX,EAAApG,EAAAqG,KAAA,SAAA4P,GAAA,cAAAA,EAAA1P,KAAA0P,EAAAzP,MAAA,UAEP9C,EAAK5E,MAAM6E,eAAkBD,EAAK5E,MAAM2H,YAFjC,CAAAwP,EAAAzP,KAAA,eAAAyP,EAAAtP,OAAA,UAGH,GAHG,cAUN3B,EAAiBtB,EAAKlF,MAAMyd,QAAUzY,SAASE,EAAK/E,cAAcyQ,YAAY1L,EAAK/E,cAAcyQ,YAAY1L,EAAKlF,MAAMyd,SAAShT,OAAO,uBAAuB,uBAAuBF,GAAGC,UAAU,KAAQ,KAC3M/D,EAAevB,EAAKlF,MAAM0d,QAAU1Y,SAASE,EAAK/E,cAAcyQ,YAAY1L,EAAK/E,cAAcyQ,YAAY1L,EAAKlF,MAAM0d,SAASjT,OAAO,uBAAuB,uBAAuBF,GAAGC,UAAU,KAAQ,KAEzMmW,EAAS,CAAC,KAAK,MAAMa,SAAStc,EAAKlF,MAAMmK,cAAgD,SAAhCjF,EAAK5E,MAAMmhB,iBAb9DhK,EAAAzP,KAAA,EAcsB9C,EAAK/E,cAAcuhB,gBAAgBxc,EAAK5E,MAAM2H,YAAY8J,QAAQ4O,EAAOna,EAAeC,GAAa,EAAK,MAdhI,UAcRf,EAdQ+R,EAAAuB,MAgBNvT,EAAaP,EAAKsb,gBAAgB9a,KAIpBA,GAA0BD,EAAWsE,QAAWrE,EAAsBqE,OApB9E,CAAA0N,EAAAzP,KAAA,gBAAAyP,EAAAtP,OAAA,UAqBH,GArBG,eAwBNyY,EAAcnb,EAAW,GACzBob,EAAahd,OAAO4H,OAAOhG,GAAYkc,MAE7C7H,OAAOxP,OAASA,IAGH,KADT6K,GAAQ0L,EAAWna,UAAUka,EAAYla,WAAW,SAEtDyO,EAAO,GAGLD,EAAM,KACN0J,EAAQ,MAEN9T,EAAa5F,EAAK/E,cAAc4K,iBAAiB8V,EAAW7V,WAAW,IACvE8V,EAAiB5b,EAAK/E,cAAc4K,iBAAiB6V,EAAYxP,UAAUlM,EAAK5E,MAAM2H,YAAYnG,UAClGif,EAAgB7b,EAAK/E,cAAc4K,iBAAiB8V,EAAWzP,UAAUlM,EAAK5E,MAAM2H,YAAYnG,UAGlGuP,EAAMvG,EAAW3J,MAAM4f,GA1CftJ,EAAAzP,KAAA,GA4CA9C,EAAK/E,cAAcyhB,oBAAoBvQ,EAAInM,EAAK5E,MAAM6E,cAAcD,EAAK5E,MAAM2H,YAAY0Y,GA5C3F,eA4CZtP,EA5CYoG,EAAAuB,KA8CNgI,EAAe9b,EAAK5E,MAAM2H,YAAYrC,UAAU8F,OAAO,SAAC+F,GAAQ,MAAkB,aAAXA,EAAEgB,OAAuB,GAChGwO,EAAoBD,EAAeJ,EAAYjP,cAAcjG,OAAO,SAAC+F,GAAQ,OAAOA,EAAEI,aAAaC,gBAAkBkP,EAAajP,QAAQD,gBAAiB,GAAK,KAChKoP,EAAmBF,EAAeH,EAAWlP,cAAcjG,OAAO,SAAC+F,GAAQ,OAAOA,EAAEI,aAAaC,gBAAkBkP,EAAajP,QAAQD,gBAAiB,GAAK,KAErI,OAA3B5M,EAAKlF,MAAMmK,aAQb+K,GANAA,EAAMzP,EAAW6O,OAAQ,SAACuN,EAAIpB,GAC5B,IAAM7L,EAAW1P,EAAK/E,cAAc4K,iBAAiB0V,EAAE7L,SAAS,IAChE,OAAO1P,EAAK/E,cAAc8R,MAAM4P,GAAK3gB,KAAK0T,IAC1C,IAGQxT,IAAIqE,EAAWsE,QAErBiX,IACIG,EAAuBnX,IAAcC,MAAMrE,UAAUkc,iBACrDhM,EAAYqL,EAAqBrL,UAAYqL,EAAqBrL,UAAY,OAqBpFsL,GAnBIA,EAAiB3b,EAAW6O,OAAQ,SAACuN,EAAIpB,GAE3C,IAAMsB,EAAetB,EAAE9O,cAAcsC,KAAK,SAACkC,EAAM7E,GAC/C,OAAO6E,EAAMtE,aAAaC,gBAAkBkP,EAAajP,QAAQD,gBAG/DkQ,EAAoC,kBAAdlM,GAA0BA,EAAU/L,OAAS+L,EAAUxB,OAAO,SAAC+B,EAAIC,GAC3F,OAAIyL,EAAazL,GACRpR,EAAK/E,cAAc8R,MAAMoE,GAAKnV,KAAKgE,EAAK/E,cAAc8R,MAAM8P,EAAazL,KAE3EpR,EAAK/E,cAAc8R,MAAMoE,IAChC,GAAKnR,EAAK/E,cAAc8R,MAAM8P,EAAajM,IAI7C,OAFAkM,EAAe9c,EAAK/E,cAAc4K,iBAAiBiX,EAAa,IAEzD9c,EAAK/E,cAAc8R,MAAM4P,GAAK3gB,KAAK8gB,IAC1C,IAG8B5gB,IAAIqE,EAAWsE,QAK/C6U,EAAQ1J,EAAI9J,MAAMgW,GACdhf,WAAWwc,GAAO,IACpBA,EAAQ,GAEVA,EAAQA,EAAM3Z,QAAQ,IAGxBiQ,EAAMA,EAAIjQ,QAAQ,KAGZoQ,EAAU0L,EAAc3f,IAAI0f,GAAgB1V,MAAM,GAAGjK,MAAM,KACjE+T,EAAMG,EAAQlU,MAAM,KAAKC,IAAI+T,GAAMlQ,QAAQ,GACvCgc,GAAqBC,IACjBG,EAAqBnc,EAAK/E,cAAc4K,iBAAiBkW,EAAkBvJ,MAAMxS,EAAK5E,MAAM2H,YAAYnG,UACxGwf,EAAoBpc,EAAK/E,cAAc4K,iBAAiBmW,EAAiBxJ,MAAMxS,EAAK5E,MAAM2H,YAAYnG,UACtGyf,EAAcD,EAAkBlgB,IAAIigB,GAAoBjW,MAAM,GAAGjK,MAAM,KAC7Eyd,EAAQvJ,EAAQjK,MAAMmW,GAAapgB,MAAM,KAAKC,IAAI+T,GAC9C/S,WAAWwc,GAAO,IACpBA,EAAQ,GAEVA,EAAQA,EAAM3Z,QAAQ,KAKtB6Z,EAAa,EACjBrZ,EAAWmF,QAAQ,SAACC,EAAIoX,GACtB,GAAIA,EAAM,CACR,IAAMC,EAAUzc,EAAWwc,EAAM,GAE3B5N,EAAkBxJ,EAAI8G,cAAc2C,OAAO,SAACC,EAAY3C,GAC5D,IAAMO,EAAajN,EAAK/E,cAAc4K,iBAAiB6G,EAAmBO,WAAWjN,EAAK5E,MAAM2H,YAAYnG,UAC5G,OAAOoD,EAAK/E,cAAc8R,MAAMsC,GAAarT,KAAKiR,IAClD,GAEIgQ,EAAsBD,EAAQvQ,cAAc2C,OAAO,SAACC,EAAY3C,GACpE,IAAMO,EAAajN,EAAK/E,cAAc4K,iBAAiB6G,EAAmBO,WAAWjN,EAAK5E,MAAM2H,YAAYnG,UAC5G,OAAOoD,EAAK/E,cAAc8R,MAAMsC,GAAarT,KAAKiR,IAClD,GAEEiQ,GAAgB,EACpBvX,EAAI8G,cAAc/G,QAAS,SAAA6G,GACzB,IAAI2Q,EAAJ,CAGA,IAAMC,EAAQH,EAAQvQ,cAAcsC,KAAM,SAAAoO,GAAK,OAAKA,EAAMxQ,aAAaC,gBAAkBL,EAAEI,aAAaC,gBAClGK,EAAajN,EAAK/E,cAAc4K,iBAAiB0G,EAAEU,WAAWjN,EAAK5E,MAAM2H,YAAYnG,UACrFwgB,EAAiBpd,EAAK/E,cAAc4K,iBAAiBsX,EAAMlQ,WAAWjN,EAAK5E,MAAM2H,YAAYnG,UAC5EkD,SAAS5C,WAAW+P,EAAW/Q,IAAIiT,GAAiBlT,MAAM,SACtD6D,SAAS5C,WAAWkgB,EAAelhB,IAAI+gB,GAAqBhhB,MAAM,SAE3F2d,IACAsD,GAAgB,SA5IZ3K,EAAAzP,KAAA,GAmJgB9C,EAAK/E,cAAcoiB,gBAAgB,KAAK,KAAK,OAnJ7D,eAmJNpD,EAnJM1H,EAAAuB,QAqJV3H,EAAMA,EAAInQ,KAAKie,IAIjB9N,EAAMnM,EAAK/E,cAAcqC,YAAYJ,WAAWiP,IAzJpCoG,EAAAzP,KAAA,GA2Jc9C,EAAK/E,cAAcqiB,iBAAiBtd,EAAK5E,MAAM2H,aA3J7D,SA2JRmX,EA3JQ3H,EAAAuB,QA6JVoG,EAAgBla,EAAK/E,cAAcqC,YAAYJ,WAAWgd,KAG5Dla,EAAKmb,aAAa,CAChBhP,MACA6D,MACAC,OACAyJ,QACAnZ,aACAqZ,aACAK,gBACAC,gBACA1Z,0BAzKU,yBAAA+R,EAAAG,SAAAP,EAAAjX,WA6KdqiB,kDAAc,SAAAzL,EAAO0L,EAASjI,GAAhB,OAAA7S,EAAApG,EAAAqG,KAAA,SAAAsP,GAAA,cAAAA,EAAApP,KAAAoP,EAAAnP,MAAA,cAAAmP,EAAAnP,KAAA,EACN9C,EAAK5E,MAAMqiB,iBAAiBD,EAASjI,GAD/B,OAEZvV,EAAK5E,MAAMsiB,YAAYnI,GAFX,wBAAAtD,EAAAS,SAAAZ,EAAA5W,mEAKdyiB,eAAiB,SAAAtV,GACf,IAAIyR,EAAgB9Z,EAAKlF,MAAMgf,cAClB,SAATzR,GAAmByR,EAAc9Z,EAAKlF,MAAM6e,YAC9CG,IACkB,SAATzR,GAAmByR,EAAc,GAC1CA,IAGF,IAAM8D,EAAWhJ,OAAOiJ,OAAP,6BAAAlP,OAA2CmL,EAA3C,MACXK,GAAsBjd,WAAW0gB,EAASE,WAAWtZ,MAAM,KAEjExE,EAAKmb,aAAa,CAChBrB,gBACAK,mGApbEjf,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,mKAK9CF,KAAKI,qBACCJ,KAAK6iB,8JAIX7iB,KAAKyf,oBAAqB,+EAGTrD,wFAAStD,iCAAS,KAC9B9Y,KAAKyf,4DACDzf,KAAKiB,SAASmb,EAAStD,oCAEzB,wJAIP9Y,KAAKiB,SAAS,CACZie,sBAAqB,wDAIE,IAAAhe,EAAAlB,KACnB6e,EAAgBjV,IAAcC,MAAMC,SACtCgZ,EAAgB,KAQpB,OAPArf,OAAOiC,KAAKmZ,GAAerU,QAAS,SAAAuY,GACdlE,EAAckE,GAClBC,kBAAkB5B,SAASlgB,EAAKhB,MAAMmhB,oBACpDyB,EAAgBC,KAIbD,yCAGMC,GAKb,GAJKA,IACHA,EAAU/iB,KAAKJ,MAAMmK,cAGlBH,IAAcC,MAAMC,SAASiZ,GAChC,OAAO,KAGT,IAAMtd,EAAchC,OAAOC,OAAO,GAAGkG,IAAcC,MAAMC,SAASiZ,IAElE,GAAItd,EAAYwd,kBAAoBxd,EAAYwd,iBAAiBjjB,KAAKE,MAAMmhB,kBAAkB,CAC5F,IAAM6B,EAAmBzd,EAAYwd,iBAAiBjjB,KAAKE,MAAMmhB,kBACjE5d,OAAOiC,KAAKwd,GAAkB1Y,QAAS,SAAA2Y,GACrC1d,EAAY0d,GAASD,EAAiBC,KAI1C,OAAO1d,kKAKFzF,KAAKE,MAAM6E,eAAkB/E,KAAKE,MAAM2H,sDACpC,aAGHuU,EAAW,GACA4B,EAAahe,KAAKE,MAA3BkjB,MAASpF,OAEXqF,EAAgC5f,OAAOiC,KAAK1F,KAAKE,MAAMojB,iBAEvDtF,EAAOuF,cAA4F,IAA7EF,EAA8BlR,QAAQ6L,EAAOuF,YAAYC,eACnFpH,EAASrX,cAAgBiZ,EAAOuF,YAAYC,cAE5CpH,EAASrX,cAAgB/E,KAAKE,MAAM6E,cAAcye,cAGpDpH,EAASvU,YAAc7H,KAAKE,MAAMojB,gBAAgBlH,EAASrX,eAC3DqX,EAAS0C,aAAe5U,IAAON,IAAcC,MAAM+G,OAAO5Q,KAAKE,MAAM6E,eAAeqB,eAAe,cACnGgW,EAAS4D,WAAa9V,MAEtBkS,EAASG,gBAAkBrS,IAAOA,MAASG,OAAO,oBAAoB,oBAEtE+R,EAAS0G,cAAgB9iB,KAAKyjB,4BAC9BrH,EAASrS,YAAyC,OAA3B/J,KAAKJ,MAAMmK,YAAuBqS,EAAS0G,cAAgB9iB,KAAKJ,MAAMmK,YAEvFtE,EAAczF,KAAK0jB,eAAetH,EAASrS,aAI7CqS,EAASrS,aAAetE,EAAYY,eAChCsd,EAAqBzZ,IAAOA,IAAgC,IAAzBzE,EAAYY,cAAmBgE,OAAO,oBAAoB,oBAC/F+R,EAASG,gBAAgBwD,QAAQ4D,KACnCvH,EAASG,gBAAkBoH,EAC3BvH,EAAS/V,aAAezB,SAASwX,EAASG,gBAAgBpS,GAAGC,UAAU,MAGpEgS,EAAS4D,aAAc5D,EAAS4D,WAAWD,QAAQ4D,KACtDvH,EAAS4D,WAAa2D,IAI1BvH,EAAS/V,aAAezB,SAASwX,EAASG,gBAAgBpS,GAAGC,UAAU,KAGvEgS,EAASE,kBAAoBF,EAASG,gBAAgBN,QAAQC,SAAS,EAAE,SACzEE,EAAShW,eAAiBxB,SAASwX,EAASE,kBAAkBnS,GAAGC,UAAU,KAEvEgS,EAASrS,aAAetE,EAAYW,iBAChCwd,EAAuB1Z,IAAOA,IAAkC,IAA3BzE,EAAYW,gBAAqBiE,OAAO,oBAAoB,oBACnG+R,EAASE,kBAAkBwD,SAAS8D,KACtCxH,EAASE,kBAAoBsH,EAC7BxH,EAAShW,eAAiBxB,SAASwX,EAASE,kBAAkBnS,GAAGC,UAAU,MAGzEgS,EAAS0C,aAAagB,SAAS8D,KACjCxH,EAAS0C,aAAe8E,IAI5BxH,EAASiB,QAAUjB,EAAS0C,aAAa3U,GACzCiS,EAASkB,QAAUlB,EAAS4D,WAAW7V,GAEnCiS,IAAapc,KAAKJ,wCACdI,KAAKigB,aAAa7D,mQA2DrBpc,KAAKE,MAAM6a,4BACd/a,KAAKE,MAAM2jB,8BACJ,iBAGHthB,EAAQuhB,SAASziB,cAAc,UAC/B6H,GAAK,qBACX3G,EAAMiQ,KAAO,WACbjQ,EAAMwhB,UAAN,8DAIAD,SAASE,KAAKC,YAAY1hB,GAE1BvC,KAAKI,sBACCJ,KAAK6iB,qBACX7iB,KAAKgF,cACLhF,KAAKkkB,yJAIL,IAAMzF,EAAcze,KAAKE,MAAMiD,SAAW,EAAI,EAC9CnD,KAAKigB,aAAa,CAChBxB,mGAIqBne,EAAUC,oFAC3BC,EAAuBF,EAAUE,uBAAyBR,KAAKE,MAAMM,qBACrE2jB,EAAkB7jB,EAAU+gB,mBAAqBrhB,KAAKE,MAAMmhB,iBAC5DtJ,EAAezX,EAAUyE,gBAAkB/E,KAAKE,MAAM6E,eAAiBrE,KAAKC,UAAUL,EAAUuH,eAAiBnH,KAAKC,UAAUX,KAAKE,MAAM2H,aAC3Iuc,EAAc7jB,EAAU6F,iBAAmBpG,KAAKJ,MAAMwG,gBAAkB7F,EAAU8F,eAAiBrG,KAAKJ,MAAMyG,aAC9Gge,EAAiB9jB,EAAUwJ,cAAgB/J,KAAKJ,MAAMmK,YACtCzJ,EAAU6C,WAAanD,KAAKE,MAAMiD,UAGtDnD,KAAKkkB,iBAGH1jB,GAAwBuX,GAAgBoM,GAAmBE,qCAEvDrkB,KAAKgY,oDACFoM,GACTpkB,KAAKgF,qJAmNA,IAAAwX,EAAAxc,KAEDskB,EAAmBtkB,KAAKD,cAAcwkB,gBAAgB,CAAC,YAAY,OAAO,YAC1EC,EAAUxkB,KAAKD,cAAcwkB,gBAAgB,CAAC,WAAW,YAE/D,IAAKvkB,KAAKE,MAAMO,oBACd,OACEuH,EAAA5G,EAAAC,cAACoZ,EAAA,EAAD,CACEG,UAAW,CACT6J,SAAS,EACTzhB,WAAW,GAEb2X,YAAa,CACXzS,GAAG,EACHnE,KAAK,QAEP2W,UAAW,CACTF,UAAU,OACVrS,cAAc,UAEhBqH,KAAM,sBAKZ,GAAKxP,KAAKE,MAAM6E,cA2TT,CACL,IAAM2f,EAAkBjhB,OAAOiC,KAAKkE,IAAcC,MAAMC,UAAUwB,OAAQ,SAAAyX,GACxE,IAAMtd,EAAc+W,EAAKkH,eAAeX,GACxC,OAAOtd,EAAYkf,cAAcvD,SAAS5E,EAAKtc,MAAM6E,gBAAkBU,EAAYud,kBAAkB5B,SAAS5E,EAAKtc,MAAMmhB,oBACxHtQ,IAAK,SAAAgS,GAEN,MAAO,CACLpe,MAAMoe,EACNna,MAHkB4T,EAAKkH,eAAeX,GAGpBna,SAIhBnD,EAAczF,KAAK0jB,eAAe1jB,KAAKJ,MAAMmK,aAE/C6a,EAAqB,KACzB,GAAI5kB,KAAKJ,MAAMmK,aAAetE,EAE5Bmf,EAD+B5kB,KAAKD,cAAcwkB,gBAAgB,CAAC,QAAQ,WAAWvkB,KAAKJ,MAAMmK,YAAY,2BAC/D/J,KAAKD,cAAcwkB,gBAAgB,CAAC,QAAQ,SAASvkB,KAAKE,MAAM6E,cAAc,uBAAyB,KAGvJ,IAAM8f,EAAsBH,EAAgB7Q,KAAM,SAAAtI,GAAC,OAAKA,EAAE5G,QAAU6X,EAAK5c,MAAMmK,cAE/E,OACE/B,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEoJ,EAAG,EACH9P,MAAO,EACP4G,cAAe,UAuCfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,CAAC,EAAE,IAEPF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEE,cAAe,CAAC,SAAS,QAEzBH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,CAAC,EAAE,KAEVyG,EAAA5G,EAAAC,cAACyjB,EAAA,EAADrhB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEE6kB,gBAAgB,EAChBvV,KAAM,kBACNrM,SAAUnD,KAAKE,MAAMiD,SACrBoY,YAAc,SAAA1C,GAAC,OAAI2D,EAAKtc,MAAM8kB,YAAY,UAC1CC,KAAM,CAACjlB,KAAKD,cAAcwkB,gBAAgB,CAAC,aAAavkB,KAAKE,MAAMmhB,iBAAiB,eAGxFrZ,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,CAAC,EAAE,GACP5Z,MAAO,CAAC,EAAE,IACV4G,cAAe,CAAC,SAAS,OACzBrE,eAAgB,CAAC,SAAS,kBAE1BkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,CAAC,EAAE,KACV4G,cAAe,UAEfH,EAAA5G,EAAAC,cAAC6jB,EAAA,EAAD,CACEC,WAAY,CACV9T,EAAE,EACF7I,OAAO,CAAC,OAAO,SAEjB6J,KAAM,eACN8K,QAASuH,EACTU,aAAcP,EACd7H,SAAW,SAAAzR,GAAC,OAAIiR,EAAK8D,eAAe/U,OAGxCvD,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,CAAC,EAAE,GACP5Z,MAAO,CAAC,EAAE,IACV4G,cAAe,UAEfH,EAAA5G,EAAAC,cAACgkB,EAAA,EAAD5hB,OAAAC,OAAA,CACEyhB,WAAY,CACV9T,EAAE,IAEArR,KAAKE,SAGb8H,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,CAAC,EAAE,GACP5Z,MAAO,CAAC,EAAE,KACV4G,cAAe,UAEfH,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTkI,EAAE,EACF5O,QAAQ,OACRoB,WAAW,SACX2E,OAAO,CAAC,OAAO,QACf1E,eAAe,UAEjBwhB,eAAe,EACf/J,YAAc,SAAA1C,GAAC,OAAI2D,EAAK2D,mBAAkB,KAE1CnY,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEjF,WAAY,EACZN,MAAO,aAGP1C,KAAKJ,MAAM6b,eAETzb,KAAKof,gBAAgBpf,KAAKJ,MAAM6b,gBAChCzb,KAAKJ,MAAM0c,mBAAqBtc,KAAKJ,MAAM2c,iBAA3C,GAAA9I,OACGzT,KAAKJ,MAAM0c,kBAAkBjS,OAAO,YADvC,OAAAoJ,OACwDzT,KAAKJ,MAAM2c,gBAAgBlS,OAAO,mBAUtGrK,KAAKJ,MAAMmK,aAAgBtE,EAAYW,eAAexB,UAAS,IAAIgX,MAAOxR,UAAU,KAClFpC,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZsE,cAAe,MACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTkI,EAAE,EACF9P,MAAM,CAAC,EAAE,MAGXyG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEpE,WAAY,SACZsE,cAAe,UAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACElE,KAAM,QACNrB,MAAO,WACP2P,KAAM,eAERrK,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ/X,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,cAMclD,KAAKJ,MAAMmK,YANzB,kCAYN/B,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,GAEPyG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,CAAC,EAAE,GACPjT,GAAI,CAAC,EAAE,IAEPF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZC,eAAgB,SAChBqE,cAAe,CAAC,SAAS,QAEzBH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,CAAC,EAAE,GACPE,GAAI,CAAC,EAAE,GACP7G,MAAO,CAAC,EAAE,KACV4G,cAAe,UAEfH,EAAA5G,EAAAC,cAACkkB,EAAA,EAAD,CACE5gB,MAAO3E,KAAKJ,MAAMqR,IAClB4L,MAAO,yBACPjU,MAAQ5I,KAAKJ,MAAMof,cAAX,iBAAAvL,OAA4CzT,KAAKJ,MAAMof,cAAvD,KAAAvL,OAAwEzT,KAAKE,MAAM6E,eAAkB/E,KAAKE,MAAM6E,cACxHygB,aAAexlB,KAAKJ,MAAMof,cAAgBhf,KAAKD,cAAcwkB,gBAAgB,CAAC,WAAW,gBAAkB,QAG/Gvc,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,CAAC,EAAE,GACPE,GAAI,CAAC,EAAE,GACP7G,MAAO,CAAC,EAAE,KACV4G,cAAe,UAEfH,EAAA5G,EAAAC,cAACkkB,EAAA,EAAD,CACE1I,MAAO,UACPjU,MAAO,cAEPZ,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZsE,cAAe,CAAC,SAAS,QAEzBH,EAAA5G,EAAAC,cAACokB,EAAA,EAAD,CACExW,UAAW,KACXyW,QAAS,QACTC,SAAU,QACV7hB,eAAgB,aAChBvC,MAAO,GAEPyG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE2d,WAAY,EACZ5iB,WAAY,CAAC,EAAE,GACfN,MAAO,YACPU,SAAU,CAAC,EAAE,IAEZpD,KAAKJ,MAAMkV,IACZ9M,EAAA5G,EAAAC,cAAC4G,EAAA,EAAKrE,KAAN,CAAWlB,MAAO,YAAaM,WAAY,EAAGI,SAAU,CAAC,MAAM,QAA/D,UAMV4E,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,CAAC,EAAE,GACPE,GAAI,CAAC,EAAE,GACP7G,MAAO,CAAC,EAAE,KACV4G,cAAe,UAEfH,EAAA5G,EAAAC,cAACkkB,EAAA,EAAD,CACE1I,MAAO,8BACPjU,MAAO,cAGL5I,KAAKJ,MAAM4e,QAAU7J,MAAM3U,KAAKJ,MAAM4e,OACpCxW,EAAA5G,EAAAC,cAACokB,EAAA,EAAD,CACExW,UAAW,KACXyW,QAAS,QACTC,SAAU,QACV7hB,eAAgB,cAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE2d,WAAY,EACZxiB,SAAU,CAAC,EAAE,GACbJ,WAAY,CAAC,EAAE,GACfN,MAAO,aAEN1C,KAAKJ,MAAM4e,MACZxW,EAAA5G,EAAAC,cAAC4G,EAAA,EAAKrE,KAAN,CAAWlB,MAAO,YAAaM,WAAY,EAAGI,SAAU,CAAC,MAAM,QAA/D,OAIJ4E,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE2d,WAAY,EACZxiB,SAAU,CAAC,EAAE,GACbJ,WAAY,CAAC,EAAE,GACfN,MAAO,aAEN1C,KAAKJ,MAAM4e,SAMtBxW,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,CAAC,EAAE,GACPE,GAAI,CAAC,EAAE,GACP7G,MAAO,CAAC,EAAE,KACV4G,cAAe,UAEfH,EAAA5G,EAAAC,cAACkkB,EAAA,EAAD,CACE3c,MAAO,IACPiU,MAAO,aACPlY,MAAO3E,KAAKJ,MAAM8e,WAAWtN,gBA+BrCpJ,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACE8T,MAAO,yBACPgJ,YAAajB,EACbzb,UAAW,CACTjB,GAAG,CAAC,EAAE,KAGRF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAMiB,GAAG,cAAc3H,MAAO,EAAG2G,GAAI,GACnCF,EAAA5G,EAAAC,cAACykB,EAADriB,OAAAC,OAAA,CACE8E,OAAS,KACLxI,KAAKJ,MAFX,CAGEuY,SAAU,cACVhV,SAAUnD,KAAKE,MAAMiD,SACrB4iB,UAAW/lB,KAAKE,MAAM6lB,UACtB1gB,WAAYrF,KAAKJ,MAAMyF,WACvB0E,YAAa/J,KAAKJ,MAAMmK,YACxBzE,sBAAuBtF,KAAKJ,MAAM0F,sBAClCwC,UAAW9H,KAAKJ,MAAMmK,cAAgB/J,KAAKJ,MAAMkjB,cAAgB,WAAa,aAKpF9a,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACT6c,GAAG,EACH9d,GAAG,CAAC,EAAE,KAGRF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEE,cAAe,CAAC,SAAS,OACzBrE,eAAgB,iBAGd9D,KAAKJ,MAAMmK,cAAgB/J,KAAKJ,MAAMkjB,eACtC9a,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEge,GAAI,EACJ1kB,MAAO,CAAC,EAAE,EAAE,GACZ2H,GAAI,mBACJf,cAAe,SACftE,WAAY,aACZC,eAAgB,cAEhBkE,EAAA5G,EAAAC,cAAC6kB,EAAA,EAADziB,OAAAC,OAAA,CACE8E,OAAQ,KACJxI,KAAKE,MAFX,CAGEiY,SAAU,sBAEZnQ,EAAA5G,EAAAC,cAAC8kB,EACKnmB,KAAKE,QAIf8H,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,CAAC,EAAE,GACPgB,GAAI,YACJkd,GAAI,CAAC,EAAEpmB,KAAKJ,MAAMmK,cAAgB/J,KAAKJ,MAAMkjB,cAAgB,EAAI,GACjEvhB,MAAO,CAAC,EAAGvB,KAAKJ,MAAMmK,cAAgB/J,KAAKJ,MAAMkjB,cAAgB,EAAE,EAAI,IAEvE9a,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAMpE,WAAY,aAAcC,eAAgB,aAAcqE,cAAe,SAAU5G,MAAO,GAC5FyG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAQoe,GAAT,CACEne,GAAI,EACJ2S,GAAI,EACJM,GAAI,CAAC,EAAE,GACPnY,WAAY,EACZI,SAAU,CAAC,EAAE,GACbF,UAAW,OACXR,MAAO,YACPkjB,WAAY,WARd,yBAYA5d,EAAA5G,EAAAC,cAACykB,EAADriB,OAAAC,OAAA,CACE8E,OAAQ,KACJxI,KAAKJ,MAFX,CAGEkI,UAAW,MACXqQ,SAAU,YACVhV,SAAUnD,KAAKE,MAAMiD,SACrB4iB,UAAW/lB,KAAKE,MAAM6lB,UACtB1gB,WAAYrF,KAAKJ,MAAMyF,WACvB0E,YAAa/J,KAAKJ,MAAMmK,YACxBzE,sBAAuBtF,KAAKJ,MAAM0F,6BAO5C0C,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE2a,SAAU,YAEV5a,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP2H,GAAI,qBACJpF,eAAgB,YAEhBkE,EAAA5G,EAAAC,cAACilB,EAAA,EAAD,CACEjL,YAAa,CACX9S,GAAG,GAELge,SAAU,YACVjL,SAAuC,IAA7Btb,KAAKJ,MAAMgf,cACrBrD,YAAc,SAAA1C,GAAC,OAAI2D,EAAKiG,eAAe,WAEzCza,EAAA5G,EAAAC,cAACilB,EAAA,EAAD,CACEC,SAAU,eACVhL,YAAc,SAAA1C,GAAC,OAAI2D,EAAKiG,eAAe,SACvCnH,SAAUtb,KAAKJ,MAAMgf,gBAAkB5e,KAAKJ,MAAM6e,eAGtDzW,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ3S,OAAQ,QACRoa,SAAU,WACV1Z,GAAI,kBACJ3H,MAAO,CAAC,OAAO,QACfuC,eAAgB,aAChBwF,KAAMtJ,KAAKJ,MAAMqf,mBACjB1c,MAAO,CACLikB,WAAW,0BAGbxe,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTZ,GAAG,EACHC,OAAO,cACPjG,MAAMvC,KAAKE,MAAMiD,SAAW,CAAC5B,MAAM,QAAU,CAACA,MAAM,UAGtDyG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP2H,GAAG,aAEHlB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,EACJ3G,MAAO,EACP4G,cAAe,SACftE,WAAY,aACZC,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAQoe,GAAT,CACExL,GAAI,EACJM,GAAI,EACJjT,GAAI,EACJlF,WAAY,EACZI,SAAU,CAAC,EAAE,GACbF,UAAW,OACXR,MAAO,YACPkjB,WAAY,WARd,0BAYA5d,EAAA5G,EAAAC,cAACykB,EAADriB,OAAAC,OAAA,CACE8E,OAAQ,KACJxI,KAAKJ,MAFX,CAGEkI,UAAW,MACXqQ,SAAU,YACVhV,SAAUnD,KAAKE,MAAMiD,SACrB4iB,UAAW/lB,KAAKE,MAAM6lB,UACtB1gB,WAAYrF,KAAKJ,MAAMyF,WACvB0E,YAAa/J,KAAKJ,MAAMmK,YACxBzE,sBAAuBtF,KAAKJ,MAAM0F,4BAK1C0C,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTZ,GAAG,EACHC,OAAO,cACPjG,MAAMvC,KAAKE,MAAMiD,SAAW,CAAC5B,MAAM,QAAU,CAACA,MAAM,UAGtDyG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAMiB,GAAG,YAAY3H,MAAO,GAC1ByG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,EACJ3G,MAAO,EACP4G,cAAe,SACftE,WAAY,aACZC,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAQoe,GAAT,CACEne,GAAI,EACJ2S,GAAI,EACJM,GAAI,EACJnY,WAAY,EACZI,SAAU,CAAC,EAAE,GACbF,UAAW,OACXR,MAAO,YACPkjB,WAAY,WARd,QAYA5d,EAAA5G,EAAAC,cAACykB,EAADriB,OAAAC,OAAA,CACE8E,OAAQ,KACJxI,KAAKJ,MAFX,CAGEkI,UAAW,MACXqQ,SAAU,YACVhV,SAAUnD,KAAKE,MAAMiD,SACrB4iB,UAAW/lB,KAAKE,MAAM6lB,UACtB1gB,WAAYrF,KAAKJ,MAAMyF,WACvB0E,YAAa/J,KAAKJ,MAAMmK,YACxBzE,sBAAuBtF,KAAKJ,MAAM0F,4BAK1C0C,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTZ,GAAG,EACHC,OAAO,cACPjG,MAAMvC,KAAKE,MAAMiD,SAAW,CAAC5B,MAAM,QAAU,CAACA,MAAM,SAEtDsb,MAAO,aACPgJ,YAAa,iGACbY,iBAAkB,CAChB5L,GAAG,GACHM,GAAG,KAGLnT,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAMiB,GAAG,cAAc3H,MAAO,GAC5ByG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,EACJ3G,MAAO,EACP4G,cAAe,SACftE,WAAY,aACZC,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAACykB,EAADriB,OAAAC,OAAA,CACE8E,OAAQ,KACJxI,KAAKJ,MAFX,CAGEkI,UAAW,QACXqQ,SAAU,cACVhV,SAAUnD,KAAKE,MAAMiD,SACrB4iB,UAAW/lB,KAAKE,MAAM6lB,UACtB1gB,WAAYrF,KAAKJ,MAAMyF,WACvB0E,YAAa/J,KAAKJ,MAAMmK,YACxBzE,sBAAuBtF,KAAKJ,MAAM0F,4BAK1C0C,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTZ,GAAG,EACHC,OAAO,cACPjG,MAAMvC,KAAKE,MAAMiD,SAAW,CAAC5B,MAAM,QAAU,CAACA,MAAM,UAGtDyG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAMiB,GAAG,YAAY3H,MAAO,GAC1ByG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,EACJ3G,MAAO,EACP4G,cAAe,SACftE,WAAY,aACZC,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAQoe,GAAT,CACEne,GAAI,EACJ2S,GAAI,EACJM,GAAI,EACJnY,WAAY,EACZI,SAAU,CAAC,EAAE,GACbF,UAAW,OACXR,MAAO,YACPkjB,WAAY,WARd,UAYA5d,EAAA5G,EAAAC,cAACykB,EAADriB,OAAAC,OAAA,CACE8E,OAAQ,KACJxI,KAAKJ,MAFX,CAGEkI,UAAW,MACXqQ,SAAU,YACVhV,SAAUnD,KAAKE,MAAMiD,SACrB4iB,UAAW/lB,KAAKE,MAAM6lB,UACtB1gB,WAAYrF,KAAKJ,MAAMyF,WACvB0E,YAAa/J,KAAKJ,MAAMmK,YACxBzE,sBAAuBtF,KAAKJ,MAAM0F,+BAWpD0C,EAAA5G,EAAAC,cAACqlB,EAAD,CACErJ,QAASrd,KAAKJ,MAAMyd,QACpBC,QAAStd,KAAKJ,MAAM0d,QACpBjB,aAAcrc,KAAK0f,aACnBjD,OAAQzc,KAAKJ,MAAMuf,qBACnBhD,WAAY,SAAAtD,GAAC,OAAI2D,EAAK2D,mBAAkB,IACxCxE,UAAW3b,KAAKJ,MAAM0c,kBAAoBtc,KAAKJ,MAAM0c,kBAAkBnS,GAAK,KAC5E0R,QAAS7b,KAAKJ,MAAM2c,gBAAkBvc,KAAKJ,MAAM2c,gBAAgBpS,GAAK,QAx6B5E,IAAMwc,EAAa3mB,KAAKD,cAAcwkB,gBAAgB,CAAC,eACjDI,EAAgB,GAChBiC,EAAc5mB,KAAKD,cAAcwkB,gBAAgB,CAAC,QAAQ,WAC1DsC,EAAiB7mB,KAAKD,cAAcwkB,gBAAgB,CAAC,QAAQ,cAOnE,OANA9gB,OAAOiC,KAAKkhB,GAAapc,QAAQ,SAAA6P,GACbuM,EAAYvM,GAChB7E,SACZmP,EAAclZ,KAAK4O,KAIrBrS,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,EACJ3G,MAAO,EACP4G,cAAe,UAEfH,EAAA5G,EAAAC,cAAC1B,EAAA,EACKK,KAAKE,OAGTuD,OAAOiC,KAAKihB,GAAY5V,IAAI,SAAAuR,GAC1B,IAAMwE,EAAeH,EAAWrE,GAC1BgB,EAAkB9G,EAAKtc,MAAMO,oBAAoB6hB,GACvD,QAAKgB,GAIHtb,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,EACJ3G,MAAO,EACP4G,cAAe,SACfrE,eAAgB,SAChBkF,IAAG,sBAAAyK,OAAwB6O,IAE3Bta,EAAA5G,EAAAC,cAAC0lB,EAAA,EAAD,CACE5L,GAAI,EACJjT,GAAI,CAAC,EAAE,IAEPF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEE,cAAe,MACftE,WAAY,WACZC,eAAgB,UAEfgjB,EAAajK,MAEZiK,EAAaE,cACXhf,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE4S,GAAI,EACJ7X,WAAY,EACZI,SAAU,CAAC,EAAE,GACbV,MAAO,aAENokB,EAAaE,gBAKxBhf,EAAA5G,EAAAC,cAAC4lB,EAAA,EAADxjB,OAAAC,OAAA,CACEihB,cAAeA,EACfpJ,YAAa,SAACrb,GAAD,OAAWsc,EAAK6F,YAAYC,EAASpiB,EAAMma,QACxD6M,KAAM,CACJ,CACErK,MAAM,WACN3c,MAAM,CACJqB,MAAM,CAAC,IAAK,MAEd4lB,OAAO,CACL,CACE9U,KAAK,OACLnS,MAAM,CACJqI,GAAG,EACHC,OAAO,CAAC,QAAQ,WAGpB,CACE6J,KAAK,eAIX,CACEwK,MAAM,OACN3c,MAAM,CACJqB,MAAM,CAAC,IAAK,MAEd4lB,OAAO,CACL,CACE9U,KAAK,kBACL+U,QAAO,EACPlJ,YAAY,CACV3c,MAAM,IAERgB,MAAM,CACJ8kB,SAAS,WAEXnP,YAAW,GAEb,CACE7F,KAAK,OACLnS,MAAM,CACJ2a,GAAG,GAELqD,YAAY,CACV3c,MAAM,CAAC,EAAE,QAKjB,CACEsb,MAAM,MACNyK,KAAK9C,EACLtkB,MAAM,CACJqB,MAAO,CAAC,IAAK,MAEf2c,YAAY,CACV/V,cAAc,SACdtE,WAAW,cAEbsjB,OAAO,CACL,CACE9U,KAAK,MACLkV,aAAY,GAEd,CACElV,KAAK,mBACL6F,YAAW,EACXhY,MAAM,CACJwB,SAAS8a,EAAKtc,MAAMiD,SAAW,EAAI,EACnCC,SAASoZ,EAAKtc,MAAMiD,SAAW,MAAQ,MAK/C,CACE0Z,MAAM,aACNyK,KAAK9K,EAAKzc,cAAcwkB,gBAAgB,CAAC,WAAW,cACpD6C,QAAO,EACPlnB,MAAM,CACJqB,MAAM,CAAC,IAAK,MAEd4lB,OAAO,CACL,CACE9U,KAAK,WAIX,CACEwK,MAAM,gBACNuK,QAAO,EACPlnB,MAAM,CACJqB,MAAO,KAET2c,YAAY,CACV3c,MAAM,EACN6G,GAAG,CAAC,EAAE,IAER+e,OAAO,CACL,CACE9U,KAAK,cAIX,CACEwK,MAAM,GACN3c,MAAM,CACJqB,MAAM,CAAC,IAAK,MAEd2c,YAAY,CACV3c,MAAM,GAER4lB,OAAO,CACL,CACE9U,KAAK,SACLzJ,MAAM4T,EAAKtc,MAAMiD,SAAW,OAAS,aACrCjD,MAAM,CACJqB,MAAM,EACN6B,SAAS,EACTJ,WAAW,EACXwF,OAAO,OACPC,aAAa,EACbsH,UAAU,KACVyX,UAAU,SACVzjB,KAAMyY,EAAKtc,MAAMiD,SAAW,QAAU,SACtCoY,YAAY,SAACrb,GAAD,OAAWsc,EAAK6F,YAAYC,EAASpiB,EAAMma,cAM7DmC,EAAKtc,MAnIX,CAoIEmhB,iBAAkBiB,EAClBgB,gBAAiBA,MAGhB9G,EAAKtc,MAAMiD,UACV6E,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJtX,WAAY,SACZsE,cAAe,MACfrE,eAAgB,YAGdL,OAAO4H,OAAOwb,GAAgBvb,OAAQ,SAAA+F,GAAC,OAAKA,EAAEpF,SAAU8E,IAAK,SAACM,EAAEwQ,GAAH,OAC3D7Z,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEM,GAAI,EACJ1E,WAAY,SACZsE,cAAe,MACfa,IAAG,UAAAyK,OAAYoO,IAEf7Z,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEM,GAAI,EACJhH,MAAO,OACPiH,OAAQ,OACRC,aAAc,MACdC,gBAAe,OAAA+K,OAASpC,EAAE3O,MAAM+kB,IAAI3W,KAAK,KAA1B,OAGjB9I,EAAA5G,EAAAC,cAAC4G,EAAA,EAAKrE,KAAN,CACER,SAAU,EACVV,MAAO,YAEN2O,EAAEzI,cAYvB0b,IAAqBtkB,KAAKJ,MAAMsf,qBAC9BlX,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,EACJ3G,MAAO,EACP4Z,GAAI,CAAC,EAAE,GACPtX,WAAY,SACZsE,cAAe,MACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEyf,WAAY,UACZhK,QAAS1d,KAAKkf,qBAAqBhC,KAAKld,OAF1C,uBAOAskB,GAAoBtkB,KAAKJ,MAAMsf,sBACjClX,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTkI,EAAE,EACFnJ,GAAG,EACH3G,MAAM,EACN4Z,GAAG,CAAC,EAAE,IAERwM,UAAU,EACVrC,eAAe,GAEftd,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEpE,WAAY,SACZsE,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEjF,WAAY,IACZN,MAAO,aACPQ,UAAW,SACXE,SAAU,CAAC,EAAE,SAJf,6FAQA4E,EAAA5G,EAAAC,cAACumB,EAADnkB,OAAAC,OAAA,CACEyJ,OAAQ,UACRnJ,UAAW6jB,IACX3J,YAAa,CACX/C,GAAG,GAELmD,eAAgB,CACdva,KAAK,QACLyjB,UAAU,OACV7iB,MAAM,sBAERqZ,OAAQ,GACRF,aAAc,iBACdC,WAAY,qBACR/d,KAAKE,OAET8H,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEE,cAAe,MACftE,WAAY,SACZC,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEM,GAAI,EACJ8J,KAAM,OACNtO,KAAM,QACNrB,MAAO1C,KAAKE,MAAM2C,MAAMoK,OAAOC,aAAaqM,OAAOuO,YAErD9f,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEjF,WAAY,IACZI,SAAU,OACVV,MAAO,YACPQ,UAAW,UAJb,oCAxyBFc,aCkIL+jB,6MA9IbhoB,cAAgB,gFAGVC,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,4JAK9CF,KAAKI,iMAGkBE,EAAUC,mEACjCP,KAAKI,kJAGE,IAAAc,EAAAlB,KACDgoB,EAAehoB,KAAKE,MAAM+nB,oBAAsBjoB,KAAKE,MAAM+nB,mBAAmBC,aAAeloB,KAAKE,MAAM+nB,mBAAmBC,aAAe,KAChJ,OACElgB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP4G,cAAe,UAGbnI,KAAKE,MAAM+nB,mBACTjgB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,GAEPyG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,GAEPyG,EAAA5G,EAAAC,cAACyjB,EAAA,EAADrhB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEE6kB,gBAAgB,EAChB5hB,SAAUnD,KAAKE,MAAMiD,SACrB8hB,KAAM,CAACjlB,KAAKE,MAAM+nB,mBAAmBrf,OACrC4G,KAAMxP,KAAKE,MAAMioB,gBAAgBvf,MAAM4a,cACvCjI,YAAc,SAAA1C,GAAC,OAAI3X,EAAKhB,MAAM8kB,YAAY9jB,EAAKhB,MAAMioB,gBAAgBC,YAGzEpgB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEuV,GAAI,CAAC,EAAE,GACPrV,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC0lB,EAAA,EAAD,CACE7e,GAAI,GAEHlI,KAAKE,MAAM+nB,mBAAmBrf,OAEjCZ,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE/E,UAAW,UAEVlD,KAAKE,MAAM+nB,mBAAmBX,OAGnCtf,EAAA5G,EAAAC,cAAC2mB,EAADvkB,OAAAC,OAAA,GACM1D,KAAKE,MACLF,KAAKE,MAAM+nB,mBAAmBI,YAFpC,CAGEC,UAAWtoB,KAAKE,MAAM+nB,mBAAmB/nB,UAI7C8H,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEuV,GAAI,CAAC,EAAE,GACPrV,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC0lB,EAAA,EAAD,CACE7e,GAAI,GADN,SAKAF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPgB,MAAO,CACLgmB,SAAS,SAIXvoB,KAAKE,MAAMioB,gBAAgBK,QAAQzX,IAAK,SAAC0X,EAAKC,GAAN,OACtC1gB,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEuc,eAAe,EACftc,IAAG,QAAAyK,OAAUiV,GACbvf,UAAW,CACTkI,EAAE,CAAC,EAAE,GACLnJ,GAAG,CAAC,EAAE,GACNK,GAAG,CAAC,EAAE,MACNhG,MAAM,CACJ+F,KAAMpH,EAAKhB,MAAMiD,SAAW,WAAa,WAE3CU,WAAW,SACXsE,cAAc,SACdrE,eAAe,UAEjByX,YAAc,SAAA1C,GAAC,OAAI3X,EAAKhB,MAAM8kB,YAAY9jB,EAAKhB,MAAMioB,gBAAgBC,MAAM,IAAIK,EAAKL,SAEpFpgB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE7E,SAAU,CAAC,EAAE,GACbF,UAAW,UAEVulB,EAAK7f,OAERZ,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEnE,eAAgB,UAGd2kB,EAAKE,MACH3gB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEuV,GAAI,CAAC,EAAE,GACPhV,OAAQ,QACRogB,IAAKH,EAAKE,QAEVF,EAAKI,MACP7gB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEuV,GAAI,CAAC,EAAE,GACPzZ,KAAM,MACNsO,KAAMoW,EAAKI,QAKnB7gB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE7E,SAAU,CAAC,EAAE,GACbF,UAAW,UAEVulB,EAAKnB,mBAnIRtjB,iDCunBL8kB,6MApnBblpB,MAAQ,CACNmpB,cAAc,KACdC,iBAAiB,GACjBC,kBAAkB,KAClBC,qBAAqB,KACrBC,sBAAsB,KACtBC,sBAAsB,KACtBC,yBAAyB,KACzBC,0BAA0B,KAC1BC,6BAA6B,KAC7BC,6BAA6B,QAI/BzpB,cAAgB,OAChB0pB,aAAe,gFAGTzpB,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,OAG9CF,KAAKypB,aAAezpB,KAAKD,cAAc2pB,uKAIvC1pB,KAAKI,8SAKCupB,EAA0B,IACR3pB,KAAKE,MAAM6E,eAAiB/E,KAAKE,MAAM2H,qBAQrD+hB,QAAQC,IAAI,CACpB7pB,KAAKD,cAAc+pB,iBAAiB9pB,KAAKE,MAAM6E,cAAc/E,KAAKE,MAAM2H,aACxE7H,KAAKypB,aAAaM,oBAAoB/pB,KAAKE,MAAMqa,QAAQoP,GAAwB,GACjF3pB,KAAKD,cAAciqB,yBAAyBhqB,KAAKE,MAAMqa,QAAQoP,EAAwB,MACvF3pB,KAAKD,cAAckqB,eAAe,SAASjqB,KAAKE,MAAM6E,cAAc/E,KAAKE,MAAM2H,YAAY7H,KAAKE,MAAMqa,SACtGva,KAAKD,cAAckqB,eAAe,mBAAmBjqB,KAAKE,MAAM6E,cAAc/E,KAAKE,MAAM2H,YAAY7H,KAAKE,MAAMqa,8CAVhHwO,OACAO,OACAJ,OACAroB,OACAkU,OASIqU,EAAwBF,EAAuBzlB,OAAO4H,OAAO6d,GAAsBhV,OAAQ,SAACgW,EAAWC,GAC3G,OAAOD,EAAWppB,KAAKI,EAAKnB,cAAc8R,MAAMsY,KAChDnqB,KAAKD,cAAc8R,MAAM,IAAM,KAE3B2X,EAA+BN,EAAuBzlB,OAAOiC,KAAKwjB,GAAsBnY,IAAK,SAAAqZ,GACjG,IAAMC,EAAUnB,EAAqBkB,GACrC,OAAIC,EAAQC,GAAG,GACb,IAAA7W,OAAW4W,EAAQxlB,QAAQ,GAA3B,KAAA4O,OAAiC2W,GAE1B,OAER9e,OAAO,SAAAC,GAAC,OAAW,OAANA,IAAe,KAIzB0d,EAAoBF,EAAgBtlB,OAAO4H,OAAO0d,GAAe7U,OAAQ,SAACqW,EAAOC,GACrF,OAAOD,EAAOzpB,KAAKI,EAAKnB,cAAc8R,MAAM2Y,KAC5CxqB,KAAKD,cAAc8R,MAAM,IAAM,KAE3BwX,EAA2BN,EAAgBtlB,OAAOiC,KAAKqjB,GAAehY,IAAK,SAAAqZ,GAC/E,IAAMtV,EAAMiU,EAAcqB,GAC1B,OAAItV,EAAIwV,GAAG,GACT,GAAA7W,OAAU2W,EAAV,MAAA3W,OAAuBqB,EAAIjQ,QAAQ,GAAnC,KAEK,OACNyG,OAAO,SAAAC,GAAC,OAAW,OAANA,IAAe,KAazByd,EAAmB,CACvB,CACEtO,UAAU,CACRnZ,MAAM,CAAC,EAAE,MAEXrB,MAAM,CACJ2c,MAAM,UACNnT,SACE1B,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZ2E,OAAQ,CAAC,OAAO,QAChBL,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE2d,WAAY,EACZ5iB,WAAY,CAAC,EAAE,GACfN,MAAO,YACPE,WAAY,UACZQ,SAAU,CAAC,QAAQ,SACnByF,wBAAyB,CAAEC,OAASjI,EAASA,EAAOgE,QAAQ,GAAG,IAAM,UAM/E,CACE6V,UAAU,CACRnZ,MAAM,CAAC,EAAE,MAEXrB,MAAM,CACJ2c,MAAM,qBACNnT,SACE1B,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP2H,GAAI,kBACJV,OAAQ,CAAC,OAAO,QAChBL,cAAe,UAEfH,EAAA5G,EAAAC,cAACopB,EAAA,EAADhnB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEgY,YAAY,EACZwS,UAAW,CACTrY,KAAK,mBAEP8F,SAAU,kBACVkC,MAAOra,KAAKE,MAAM6E,cAClB8C,YAAa7H,KAAKE,MAAM2H,gBAI9Be,MAAM,KAGV,CACE8R,UAAU,CACRnZ,MAAM,CAAC,EAAE,MAEXrB,MAAM,CACJ2c,MAAM,2BACNnT,SACE1B,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZ2E,OAAQ,CAAC,OAAO,QAChBL,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE2d,WAAY,EACZ5iB,WAAY,CAAC,EAAE,GACfN,MAAO,YACPE,WAAY,UACZQ,SAAU,CAAC,QAAQ,SACnByF,wBAAyB,CAAEC,OAASiM,EAAOnQ,SAASmQ,GAAQ,WAQxE/U,KAAKiB,SAAS,CACZ8nB,gBACAC,mBACAC,oBACAC,uBACAE,wBACAC,2BACAC,4BACAE,uNAIqBlpB,EAAUC,mEACjCP,KAAKI,kJAKL,OACE4H,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP4G,cAAe,UAGbnI,KAAKJ,MAAMopB,iBAAiBrf,OAAO,GACjC3B,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP2G,GAAI,CAAC,EAAE,GACPiT,GAAI,CAAC,EAAE,GACPtX,WAAY,SACZsE,cAAe,CAAC,SAAS,OACzBrE,eAAgB,iBAGd9D,KAAKJ,MAAMopB,iBAAiBjY,IAAI,SAACxF,EAAE7E,GAAH,OAC9BsB,EAAA5G,EAAAC,cAAC4G,EAAA,EAADxE,OAAAC,OAAA,GACM6H,EAAEmP,UADR,CAEEvS,cAAe,SACfa,IAAG,mBAAAyK,OAAqB/M,KAExBsB,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTC,GAAG,CAAC,EAAE,GACNlB,GAAG,CAAC,EAAE,KAGRF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,UAGdyH,EAAErL,MAAMwJ,SAAW6B,EAAErL,MAAMwJ,SACzB1B,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE2d,WAAY,EACZ5iB,WAAY,CAAC,EAAE,GACfN,MAAO,YACPE,WAAY,UACZQ,SAAU,CAAC,EAAE,SACbyF,wBAAyB,CAAEC,OAAQyC,EAAErL,MAAMyE,SAKjDqD,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJnY,WAAY,EACZI,SAAU,CAAC,EAAE,GACbV,MAAO,YAEN6I,EAAErL,MAAM2c,aAS3B7U,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTE,GAAG,EACHD,GAAG,IAGLpB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsZ,GAAI,CAAC,EAAE,GACP3R,GAAI,kBAEJlB,EAAA5G,EAAAC,cAACspB,EAAA,EAADlnB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEE0qB,YAAa,IACbzS,SAAU,iBACV0S,WAAY7qB,KAAKE,MAAM6E,cACvB4f,cAAe,CAAC3kB,KAAKE,MAAM6E,eAC3B+lB,iBAAkB9qB,KAAKD,cAAcgrB,oBAAoB,MAAM,OAGnE/iB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP4G,cAAe,CAAC,SAAS,QAEzBH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,CAAC,EAAE,GACP3G,MAAO,CAAC,EAAE,EAAE,GACZsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,cAEhBkE,EAAA5G,EAAAC,cAAC0lB,EAAA,EAAD,CACE7e,GAAI,EACJ9E,SAAU,CAAC,EAAE,GACb4nB,UAAWC,IAAQC,IAHrB,aAOAljB,EAAA5G,EAAAC,cAACopB,EAAA,EAADhnB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEma,MAAOra,KAAKE,MAAM6E,cAClB2lB,UAAW,CACTrY,KAAK,aACLnS,MAAM,CACJwB,SAAS,EACTypB,aAAa,EACbnoB,WAAW,IACXI,SAAS,CAAC,QAAQ,SAClBV,MAAM1C,KAAKE,MAAM2C,MAAMoK,OAAOlK,QAC9B2X,UAAU,CACR5W,eAAe,gBAMzBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,CAAC,EAAE,GACP3G,MAAO,CAAC,EAAE,EAAE,GACZsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,cAEhBkE,EAAA5G,EAAAC,cAAC0lB,EAAA,EAAD,CACE7e,GAAI,EACJ9E,SAAU,CAAC,EAAE,GACb4nB,UAAWC,IAAQC,IAHrB,cAOAljB,EAAA5G,EAAAC,cAACopB,EAAA,EAADhnB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEma,MAAOra,KAAKE,MAAM6E,cAClB2lB,UAAW,CACTrY,KAAK,2BACLnS,MAAM,CACJwB,SAAS,EACTypB,aAAa,EACb5oB,MAAM,CACJS,WAAW,IACXN,MAAM1C,KAAKE,MAAM2C,MAAMoK,OAAOlK,QAC9BK,SAAUpD,KAAKE,MAAMiD,SAAW,QAAU,SAE5CuX,UAAU,CACR5W,eAAe,eAKvBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP4Z,GAAI,QAEJnT,EAAA5G,EAAAC,cAACopB,EAAA,EAADhnB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEma,MAAOra,KAAKE,MAAM6E,cAClB2lB,UAAW,CACTrY,KAAK,eACLnS,MAAM,CACJkD,SAAS,EACTJ,WAAW,EACXN,MAAM,WACNgY,UAAU,CACR5W,eAAe,iBAO3BkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,CAAC,EAAE,GACP3G,MAAO,CAAC,EAAE,EAAE,GACZsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,cAEhBkE,EAAA5G,EAAAC,cAAC0lB,EAAA,EAAD,CACE7e,GAAI,EACJ9E,SAAU,CAAC,EAAE,GACb4nB,UAAWC,IAAQC,IAHrB,YAOAljB,EAAA5G,EAAAC,cAACopB,EAAA,EAADhnB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEma,MAAOra,KAAKE,MAAM6E,cAClB2lB,UAAW,CACTrY,KAAK,kBACLnS,MAAM,CACJwB,SAAS,EACTypB,aAAa,EACb5oB,MAAM,CACJS,WAAW,IACXI,SAASpD,KAAKE,MAAMiD,SAAW,QAAU,QACzCT,MAAM1C,KAAKE,MAAM2C,MAAMoK,OAAOlK,SAEhC2X,UAAU,CACR5W,eAAe,eAMrB9D,KAAKJ,MAAM4pB,8BAAgCxpB,KAAKJ,MAAM4pB,6BAA6B7f,OAAO,GACxF3B,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,UAGd9D,KAAKJ,MAAM4pB,6BAA6BzY,IAAI,SAACoZ,EAAgBiB,GAAjB,OAC1CpjB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE7E,SAAU,EACVwiB,WAAY,EACZ5iB,WAAY,EACZN,MAAO,WACPQ,UAAW,SACXiY,GAAIiQ,EAAgB,EAAI,EACxBpiB,IAAG,YAAAyK,OAAc2X,IAEhBjB,OAqCfniB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,CAAC,EAAE,GACP3G,MAAO,CAAC,EAAE,EAAE,GACZsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,cAEhBkE,EAAA5G,EAAAC,cAAC0lB,EAAA,EAAD,CACE7e,GAAI,EACJ9E,SAAU,CAAC,EAAE,GACb4nB,UAAWC,IAAQC,IAHrB,QAOAljB,EAAA5G,EAAAC,cAACopB,EAAA,EAADhnB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEma,MAAOra,KAAKE,MAAM6E,cAClB2lB,UAAW,CACTrY,KAAK,cACLnS,MAAM,CACJwB,SAAS,EACTypB,aAAa,EACb5oB,MAAM,CACJS,WAAW,IACXI,SAASpD,KAAKE,MAAMiD,SAAW,QAAU,QACzCT,MAAM1C,KAAKE,MAAM2C,MAAMoK,OAAOlK,SAEhC2X,UAAU,CACR5W,eAAe,gBAMzBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,CAAC,EAAE,GACP3G,MAAO,CAAC,EAAE,EAAE,GACZsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,cAEhBkE,EAAA5G,EAAAC,cAAC0lB,EAAA,EAAD,CACE7e,GAAI,EACJ9E,SAAU,CAAC,EAAE,GACb4nB,UAAWC,IAAQC,IAHrB,eAOAljB,EAAA5G,EAAAC,cAACopB,EAAA,EAADhnB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEma,MAAOra,KAAKE,MAAM6E,cAClB2lB,UAAW,CACTrY,KAAK,MACLnS,MAAM,CACJwB,SAAS,EACTsB,WAAW,IACXI,SAAS,CAAC,QAAQ,SAClBV,MAAM1C,KAAKE,MAAM2C,MAAMoK,OAAOlK,QAC9B2X,UAAU,CACR5W,eAAe,eAMrB9D,KAAKJ,MAAM0pB,2BACTthB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ/X,SAAU,EACVwiB,WAAY,EACZ5iB,WAAY,EACZN,MAAO,WACPQ,UAAW,UAEVlD,KAAKJ,MAAM0pB,0BAA0BzkB,QAAQ,GARhD,IAQqD7E,KAAKypB,aAAa4B,UARvE,IAQmFrrB,KAAKypB,aAAa5hB,YAAYyjB,yBA4DzHtjB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,CAAC,EAAE,GACP3G,MAAO,CAAC,EAAE,EAAE,GACZsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,cAEhBkE,EAAA5G,EAAAC,cAAC0lB,EAAA,EAAD,CACE7e,GAAI,EACJ9E,SAAU,CAAC,EAAE,GACb4nB,UAAWC,IAAQC,IAHrB,cAOAljB,EAAA5G,EAAAC,cAACopB,EAAA,EAADhnB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEma,MAAOra,KAAKE,MAAM6E,cAClB2lB,UAAW,CACTrY,KAAK,QACLnS,MAAM,CACJwB,SAAS,EACTsB,WAAW,IACXI,SAAS,CAAC,QAAQ,SAClBV,MAAM1C,KAAKE,MAAM2C,MAAMoK,OAAOlK,QAC9B2X,UAAU,CACR5W,eAAe,0BAzmBTE,4FCmvBbunB,8MA7uBb3rB,MAAQ,CACN2Y,WAAW,CACTE,OAAO,KACPH,SAAQ,GAEVkT,WAAW,KACXC,YAAY,GACZ5jB,YAAY,KACZ6jB,cAAc,KACd3mB,cAAc,KACdue,gBAAgB,KAChBqI,gBAAe,EACfC,iBAAgB,EAChBC,kBAAiB,EACjBC,iBAAiB,KACjBC,kBAAkB,KAClBC,kBAAkB,KAClBC,kBAAkB,KAClBC,mBAAmB,KACnBC,oBAAoB,KACpBC,qBAAoB,EACpBC,0BAA0B,QAI5BtsB,cAAgB,OAqBhBusB,oBAAsB,SAACF,GACrBtnB,EAAK7D,SAAS,CACZmrB,2BA8EJG,oBAAsB,WAAiB,IAAhBC,EAAgB7U,UAAAhO,OAAA,QAAA2I,IAAAqF,UAAA,GAAAA,UAAA,GAAT,KAEvB6U,IACHA,EAAS1nB,EAAKlF,MAAM4rB,YAGtB,IAAIG,EAGFA,GAAkBa,GAAUA,EAAOlC,GAAGxlB,EAAKlF,MAAMqsB,mBAKnDnnB,EAAK7D,SAAS,CACZ0qB,sBAsKJc,iBAAmB,SAAC5T,GAClB,IAAM2S,EAAa3S,EAAEmD,OAAOrX,MAAMgF,SAAWgL,MAAMkE,EAAEmD,OAAOrX,OAASG,EAAK/E,cAAc8R,MAAMgH,EAAEmD,OAAOrX,OAASG,EAAK/E,cAAc8R,MAAM,GACzI/M,EAAKynB,oBAAoBf,GAIzB1mB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BirB,aACAW,oBAJ0B,WAe9BO,uBAAyB,SAACP,GACxBrnB,EAAK7D,SAAS,CACZkrB,2BAIJQ,eAAiB,SAAClB,GAChB3mB,EAAK7D,SAAS,CACZwqB,4FAlTEzrB,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,mKAK9CF,KAAKI,qBACCJ,KAAK4sB,wJAIX5sB,KAAKiB,SAAS,CACZ2qB,iBAAgB,+LAUIiB,iCAAa,MAC7BrB,EAAaxrB,KAAKJ,MAAM4rB,WAAaxrB,KAAKD,cAAc8R,MAAM7R,KAAKJ,MAAM4rB,YAAc,QAE1EA,EAAWsB,IAAI,6CACzB,aAGHC,EAAmB/sB,KAAKD,cAAcitB,qBAAqBxB,EAAWxrB,KAAKJ,MAAMmsB,kBAAkBrqB,UAErGurB,EAAmB,KACnBf,EAAqB,KACrBgB,EAAyB,MACzBltB,KAAKJ,MAAMwsB,sDAIHxC,QAAQC,IAAI,CACpB7pB,KAAKD,cAAcotB,sBAAsBntB,KAAKE,MAAMqa,QAAQwS,GAAiB,GAC7E/sB,KAAKD,cAAcqtB,0BAA0BptB,KAAKE,MAAMqa,QAAQwS,gDAJhEb,OACAgB,iBAKuBltB,KAAKD,cAAcstB,iBAAiBrtB,KAAKJ,MAAMiI,YAAY0M,KAAK8F,MAAM0S,GAAiB,EAAMG,WAAtHD,kDAEyBjtB,KAAKD,cAAcstB,iBAAiBrtB,KAAKJ,MAAMiI,YAAY0M,KAAK8F,MAAM0S,GAAiB,kBAAhHE,mBAC8BjtB,KAAKD,cAAcutB,6BAA3CC,SACAC,EAAoBhC,EAAWzqB,MAAMwsB,GAAiBviB,MAAMwgB,EAAWzqB,MAAMksB,EAAiBlsB,MAAM,KAAKD,KAAKd,KAAKJ,MAAM6rB,aAAezrB,KAAKD,cAAc8R,MAAM,IAAI7Q,IAAI,QAC/KkrB,EAAqB,IACFlsB,KAAKJ,MAAMmF,eAAiByoB,iBAG7CP,IACFA,EAAmBA,EAAiBlsB,MAAM,MAG5Cf,KAAKiB,SAAS,CACZgsB,mBACAf,qBACAgB,2BAIED,GAAoBJ,IACtBI,EAAmBA,EAAiBnsB,KAAK+rB,sBAGpCI,yLAGgB3sB,EAAUC,kFACjCP,KAAKI,cAEgBE,EAAUuH,YAAY0M,KAAK8F,QAAUra,KAAKE,MAAM2H,YAAY0M,KAAK8F,uCAE9Era,KAAK4sB,mBAGPa,EAA6BltB,EAAU6rB,sBAAwBpsB,KAAKJ,MAAMwsB,qBAC7CpsB,KAAKJ,MAAMusB,sBAAwB5rB,EAAU4rB,qBAC9CsB,IAChCztB,KAAK0tB,gBAGDC,EAAeptB,EAAUirB,aAAexrB,KAAKJ,MAAM4rB,WACnDoC,EAAqB5rB,WAAWzB,EAAUkrB,eAAiBzpB,WAAWhC,KAAKJ,MAAM6rB,aACjFoC,EAAqBntB,KAAKC,UAAUJ,EAAUsH,eAAiBnH,KAAKC,UAAUX,KAAKJ,MAAMiI,cAC3F8lB,GAAgBE,GAAsBD,IACxC5tB,KAAK8tB,oBAGsBvtB,EAAUwE,gBAAkB/E,KAAKJ,MAAMmF,eAElE/E,KAAK+tB,wKAwBP,GAAuC,OAAnC/tB,KAAKJ,MAAMusB,oBACb,OAAO,EAGT,IACIX,EADEwC,EAAqBhuB,KAAKD,cAAc8R,MAAM7R,KAAKJ,MAAMusB,qBAAqBnrB,IAAI,KAIxFwqB,EAAaxrB,KAAKJ,MAAMqsB,kBAAoBjsB,KAAKD,cAAc8R,MAAM7R,KAAKJ,MAAMqsB,mBAAmBlrB,MAAMitB,GAAsB,KAK/HhuB,KAAKusB,oBAAoBf,GAEzBxrB,KAAKiB,SAAS,CACZuqB,8DAImBzmB,GACrB/E,KAAKiB,SAAS,CACZ8D,sLAKIkpB,EAAcjuB,KAAKD,cAAcwkB,gBAAgB,CAAC,UAClD1c,EAAc7H,KAAKJ,MAAM0jB,gBAAgBtjB,KAAKJ,MAAMmF,eACpD+mB,EAAmBmC,EAAY3K,gBAAgBzb,EAAY0M,KAAK8F,OACtEra,KAAKiB,SAAS,CACZ4G,cACAikB,iTAKkDlC,QAAQC,IAAI,CAC9D7pB,KAAKD,cAAcmuB,uBACnBluB,KAAKD,cAAcouB,mEAFdpC,OAAkBC,gBASfpC,QAAQC,IAAI,CACpB7pB,KAAKD,cAAcutB,qBACnBttB,KAAKD,cAAcquB,qBAAqBpuB,KAAKE,MAAMqa,SACnDva,KAAKD,cAAcsuB,6BAA6BruB,KAAKE,MAAMqa,8CAN3DgT,OACAtB,OACAI,OAOIX,EAAgB,GAChB8B,EAAoBvB,EAAoBA,EAAkBlrB,MAAMwsB,GAAmBvtB,KAAKD,cAAc8R,MAAM,GAE5GyR,EAAkBtjB,KAAKD,cAAcuuB,0BACrCvpB,EAAgBtB,OAAOiC,KAAK4d,GAAiB,GAEnDtjB,KAAKiB,SAAS,CACZ8D,gBACA2mB,gBACA6B,kBACAjK,kBACAyI,oBACAC,oBACAC,oBACAuB,oBACAnB,8SAMGrsB,KAAKJ,MAAMqsB,4DACP,iBAGHsC,EAAiB,SAACtV,EAAGC,GACzB,IAAMsV,EAA4B,YAAdvV,EAAGM,OAGjBJ,EAAY,CAChBG,WAAYL,EAAGM,OACfH,cAAa,cACbC,YAAanY,EAAKhB,MAAM6E,cACxB0pB,WAAYvtB,EAAKtB,MAAMqsB,kBAAkBpnB,WAGvCqU,IACFC,EAAUG,WAAapY,EAAKnB,cAAcyZ,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUI,SACrBrY,EAAKnB,cAAc0Z,yBAAyBN,GAG9CjY,EAAKD,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAY,CACVE,OAAO,KACPH,SAAQ,MAI6B,oBAA9BpX,EAAKhB,MAAMquB,gBAAiCC,GACrDttB,EAAKhB,MAAMquB,eAAetV,IAIxByV,EAAwB,SAACzV,GAC7B,IAAMR,EAASQ,EAAGkB,gBAClBjZ,EAAKD,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL,CAERE,eAKAqF,EAAe9d,KAAKJ,MAAMosB,kBAAkB3Z,cACnBrS,KAAK8tB,kBAAkB9tB,KAAKJ,MAAM6rB,uBAA3DwB,SACAJ,EAAe7sB,KAAKD,cAAc8R,MAAM7R,KAAKJ,MAAM6rB,aAAazqB,IAAI,KACpEwqB,EAAaxrB,KAAKJ,MAAM4rB,WAAaxrB,KAAKD,cAAc8R,MAAM7R,KAAKJ,MAAM4rB,YAAc,KAEvFmD,EAAU3uB,KAAKD,cAAcitB,qBAAqBxB,EAAWxrB,KAAKJ,MAAMmsB,kBAAkBrqB,WAE5F1B,KAAKJ,MAAMwsB,yCACOpsB,KAAKJ,MAAMisB,mDAAyB7rB,KAAKD,cAAcotB,sBAAsBntB,KAAKE,MAAMqa,QAAQoU,GAAQ,GAAM,gEAAc3uB,KAAKD,cAAcqtB,0BAA0BptB,KAAKE,MAAMqa,QAAQoU,EAAQ9B,+BAAlN+B,OACNC,QAAQC,IAAI,mBAAmBH,EAAQvd,WAAWwd,GAClD5uB,KAAKE,MAAMka,0BAA0B0D,EAAc,mBAAoB,CAAC6Q,EAASC,EAAa5uB,KAAKJ,MAAMisB,kBAAmB,KAAM0C,EAAgBG,kCAE5IK,EAAa/uB,KAAKJ,MAAMksB,iBAAiBkD,gBAAgBC,oBACjCjvB,KAAKD,cAAcutB,6BAA3CC,SACA2B,EAAalvB,KAAKD,cAAcitB,qBAAqBxB,EAAWzqB,MAAMwsB,GAAiBviB,MAAMwgB,EAAWzqB,MAAMksB,EAAiBjsB,IAAI,OAAOhB,KAAKJ,MAAMiI,YAAYnG,UAKvKmtB,QAAQC,IAAI,4BAA4BH,EAASI,EAAYG,GAG7DlvB,KAAKE,MAAMka,0BAA0B0D,EAAc,4BAA6B,CAAC6Q,EAASI,EAAYG,EAAYlvB,KAAKJ,MAAMisB,kBAAmB,KAAM0C,EAAgBG,WAGxK1uB,KAAKiB,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL,CAERD,SAAQ,8PAMZtY,KAAKiB,SAAS,CACZsX,WAAY,CACVE,OAAO,KACPH,SAAQ,wJAkBZ,OAAuC,OAAnCtY,KAAKJ,MAAMusB,qBAGRnsB,KAAKD,cAAc8R,MAAM7R,KAAKJ,MAAMusB,qBAAqBnrB,IAAI,sCAgB7D,IAAAwb,EAAAxc,KAEDmvB,GAAgBnvB,KAAKJ,MAAM+rB,gBAAkB3rB,KAAKJ,MAAMqtB,iBACxDmC,EAAiBpvB,KAAKD,cAAcwkB,gBAAgB,CAAC,QAAQ,eAAe,UAElF,OACEvc,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,CAAC,EAAE,KACVsC,WAAY,UACZsE,cAAe,SACfrE,eAAgB,UAGb9D,KAAKJ,MAAMqsB,kBA0BRjsB,KAAKJ,MAAM2Y,WAAWD,QACxBtQ,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTkI,EAAE,EACF8J,GAAG,IAGLnT,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEE,cAAe,UAEfH,EAAA5G,EAAAC,cAACyZ,EAAA,EAAD,CACEC,KAAM/a,KAAKE,MAAM6a,KACjBG,KAAMlb,KAAKJ,MAAM2Y,WAAWE,OAC5BwC,WAAU,+BACVmD,kBAAmBpe,KAAKoe,kBAAkBlB,KAAKld,MAC/Cgb,SAAWhb,KAAKE,MAAM8a,SAAWhb,KAAKE,MAAM8a,SAAW,0BAK7DhT,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP4G,cAAe,UAEfH,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTkI,EAAE,EACFnJ,GAAG,IAGLF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEpE,WAAY,SACZsE,cAAe,UAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACElE,KAAM,QACNrB,MAAO,WACP2P,KAAM,eAERrK,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ/X,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,uGAQA8E,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJtX,WAAY,SACZsE,cAAe,OAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE8U,UAAU,EACVnU,MAAK,0BACLymB,QAASrvB,KAAKJ,MAAMwsB,oBACpBpP,SAAW,SAAAnE,GAAC,OAAI2D,EAAK8P,oBAAoBzT,EAAEmD,OAAOqT,YAEpDrnB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEqnB,UAAW,MACXC,QAAO,yCAAA9b,OAA2ChQ,OAAOiC,KAAK1F,KAAKJ,MAAM0jB,iBAAiBxS,KAAK,MAAxF,kEAEP9I,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACElE,KAAM,MACNrB,MAAO,YACP2P,KAAM,qBAObrS,KAAKJ,MAAMwsB,qBACVpkB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,EACJ3G,MAAO,GAGLvB,KAAKJ,MAAMiI,aACTG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,GAEPyG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,GADN,6BAKAF,EAAA5G,EAAAC,cAACgkB,EAAA,EAAD5hB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEgJ,GAAI,aACJsmB,aAAa,EACb3nB,YAAa7H,KAAKJ,MAAMiI,YACxB9C,cAAe/E,KAAKJ,MAAMmF,cAC1Bue,gBAAiBtjB,KAAKJ,MAAM0jB,gBAC5BtG,SAAUhd,KAAKyvB,uBAAuBvS,KAAKld,WAQvDA,KAAKJ,MAAMssB,qBAAuBlsB,KAAKJ,MAAM+rB,gBAC3C3jB,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTgS,GAAG,EACHjT,GAAG,EACHkB,GAAG,EACHC,GAAG,IAGLrB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEpE,WAAY,SACZsE,cAAe,UAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ/X,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,qBAQA8E,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ5Z,MAAO,EACPwO,UAAW,EACXxN,MAAO,CACLgmB,SAAS,QAEX1kB,WAAY,SACZC,eAAgB,UAGZL,OAAOiC,KAAK1F,KAAKJ,MAAMssB,oBAAoBnb,IAAK,SAAAsJ,GAC9C,IAAMgQ,EAAU7N,EAAK5c,MAAMssB,mBAAmB7R,GAC9C,OACErS,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,EACJuV,GAAI,EACJlc,MAAO,OACP4G,cAAe,MACfa,IAAG,gBAAAyK,OAAkB4G,GACrBvW,eAAgB,cAEhBkE,EAAA5G,EAAAC,cAACopB,EAAA,EAAD,CACEpQ,MAAOA,EACPxS,YAAa,CACXwS,MAAMA,GAERqQ,UAAW,CACTrY,KAAK,OACLnS,MAAM,CACJqI,GAAG,EACHhH,MAAM,CAAC,QAAQ,SACfiH,OAAO,CAAC,QAAQ,aAItBR,EAAA5G,EAAAC,cAACquB,GAAA,EAAD,CACE7U,GAAI,EACJzX,SAAU,CAAC,EAAE,GACbJ,WAAY,IACZmoB,aAAc,EACdzoB,MAAO,WACPitB,OAAQtF,EAAQjZ,mBAYpCpR,KAAKJ,MAAMgsB,iBAAmBuD,GAC5BnnB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,EACJ3G,MAAO,GAEPyG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEpE,WAAY,SACZsE,cAAe,OAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,6BAGAD,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEqnB,UAAW,MACXC,QAAO,yDAEPvnB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE4S,GAAI,EACJ9W,KAAM,MACNrB,MAAO,YACP2P,KAAM,kBAIZrK,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJtX,WAAY,SACZsE,cAAe,MACfrE,eAAgB,iBAGd,CAAC,GAAI,GAAI,EAAE,GAAGiN,IAAK,SAAA6e,GAAQ,OACzB5nB,EAAA5G,EAAAC,cAACwuB,GAAA,EAAD,CACE1mB,UAAW,CACTkI,EAAE,GAEJuJ,UAAW,CACTxX,SAAS,GAEX0sB,WAAYF,EACZ5mB,IAAG,YAAAyK,OAAcmc,GACjBG,YAAa,kBAAIvT,EAAKmQ,eAAeiD,IACrCjI,SAAUnL,EAAK5c,MAAM6rB,cAAgBzpB,WAAW4tB,SAQ9D5nB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,EACJ3G,MAAO,EACP4G,cAAe,UAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,EACJrE,WAAY,SACZsE,cAAe,MACfrE,eAAgB,YAGdqrB,GACEnnB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPyuB,SAAU,MACVnsB,WAAY,SACZsE,cAAe,OAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE7E,SAAU,EACVJ,WAAY,EACZE,UAAW,QACXX,MAAO,CACLI,WAAW,UAEbD,MAAQV,WAAWhC,KAAKJ,MAAMqtB,iBAAiBpoB,QAAQ,IAAI,EAAI7E,KAAKE,MAAM2C,MAAMoK,OAAOC,aAAaqM,OAAO0W,OAASjwB,KAAKE,MAAM2C,MAAMoK,OAAOC,aAAaqM,OAAOuO,WAGvG,IAAvD9lB,WAAWhC,KAAKJ,MAAMqtB,iBAAiBpoB,QAAQ,IAC7C,cADF,GAAA4O,OAEMzT,KAAKJ,MAAMqtB,iBAAiB3C,GAAG,GAAK,aAAe,UAFzD,KAAA7W,OAEuEzT,KAAKJ,MAAMqtB,iBAAiB7hB,MAAMvG,QAAQ,GAFjH,MAKJmD,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEqnB,UAAW,MACXC,QAAUvvB,KAAKJ,MAAMwsB,oBAAX,yCAAA3Y,OAA0EhQ,OAAOiC,KAAK1F,KAAKJ,MAAM0jB,iBAAiBxS,KAAK,MAAvH,iEAA8L9Q,KAAKJ,MAAMqtB,iBAAiB3C,GAAG,GAAK,uHAAyH,kHAErWtiB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE4S,GAAI,EACJ9W,KAAM,MACNrB,MAAO,YACP2P,KAAM,kBAIPrS,KAAKJ,MAAMwsB,qBACVpkB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE4S,GAAI,EACJnY,MAAO,YACPglB,WAAY,UACZhK,QAAS1d,KAAK4rB,gBAAgB1O,KAAKld,OAJrC,WAYVgI,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPyuB,SAAU,MACVnsB,WAAY,SACZsE,cAAe,MACfrE,eAAgB,YAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE7E,SAAU,EACVJ,WAAY,EACZN,MAAO,YACPQ,UAAW,QACXwkB,WAAY,YACZhK,QAAU,SAAC7E,GAAD,OAAO2D,EAAKkQ,uBAAuB,MAC7CnqB,MAAO,CACLytB,SAAS,OACT3I,SAAS,SACT1kB,WAAW,SACXutB,aAAa,aAGdlwB,KAAKJ,MAAMqsB,kBAAkBpnB,QAAQ7E,KAAKE,MAAMiD,SAAW,EAAI,GAdlE,IAcuEisB,KAI3EpnB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkoB,IAAK,EACL3d,KAAM,SACNuK,UAAU,EACVvU,OAAQ,QACRC,aAAc,EACdzF,WAAY,IACZ+M,UAAW,kBACXqgB,YAAW,gBACXpT,SAAUhd,KAAKysB,iBAAiBvP,KAAKld,MACrCqwB,OAAM,aAAA5c,OAAezT,KAAKE,MAAM2C,MAAMoK,OAAOqjB,SAC7C3rB,MAAiC,OAA1B3E,KAAKJ,MAAM4rB,WAAsBxrB,KAAKD,cAAc8R,MAAM7R,KAAKJ,MAAM4rB,YAAY3mB,UAAY,KAEtGmD,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJtX,WAAY,SACZsE,cAAe,MACfrE,eAAgB,iBAGd,CAAC,GAAG,GAAG,GAAG,KAAKiN,IAAK,SAAA+e,GAAU,OAC5B9nB,EAAA5G,EAAAC,cAACwuB,GAAA,EAAD,CACEC,WAAYA,EACZ9mB,IAAG,YAAAyK,OAAcqc,GACjBC,YAAa,kBAAIvT,EAAKkQ,uBAAuBoD,IAC7CnI,SAAUnL,EAAK5c,MAAMusB,sBAAwBvnB,SAASkrB,SAMhE9nB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEnE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC+Z,EAAA,EAAD,CACEC,YAAa,CACXF,GAAG,EACH5Z,MAAM,CAAC,EAAE,IACT+Z,SAAStb,KAAKJ,MAAM+rB,gBAEtBpQ,YAAavb,KAAKyN,OAAOyP,KAAKld,OANhC,YAlXJgI,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTkI,EAAE,EACF8J,GAAG,EACHX,UAAU,QACVjY,MAAM,CACJE,QAAQ,OACRoB,WAAW,SACXC,eAAe,YAInBkE,EAAA5G,EAAAC,cAACoZ,EAAA,EAAD,CACEC,UAAW,CACTvS,cAAc,OAEhBwS,YAAa,CACX5W,KAAK,QAEP6W,UAAW,CACTC,GAAG,GAELrL,KAAM,qCA/XExL,mCCsDXusB,8MArDbxwB,cAAgB,OAqBhBywB,MAAQ,WAEN1rB,EAAK/E,cAAc0Z,yBAAyB,CAC1CL,cAAe,QACfC,YAAa,UACbC,WAAYxU,EAAK5E,MAAMuwB,SAGzB,IAAMC,EAAIxlB,KAAKilB,IAAIzW,OAAOiX,WAAW,KAE/Bzf,GAAKwI,OAAOiX,WAAWD,GAAG,EAEhChX,OAAOkX,KAAP,yCAAAnd,OAAqD3O,EAAK5E,MAAM2wB,OAAQ,SAAxE,8CAAApd,OADU,IACV,UAAAA,OAAyIvC,EAAzI,WAAAuC,OAAoJid,EAApJ,YAAAjd,OAHU,kFA5BNzT,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,oDAK9CF,KAAKI,wDAILJ,KAAKI,yDAILJ,KAAKI,6CAkBE,IAAAc,EAAAlB,KACP,OACIgI,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEQ,aAAc,EACd+e,UAAW,UACXsJ,cAAe,QACfpT,QAAU,SAAA7E,GAAO3X,EAAKsvB,UAEtBxoB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAME,cAAe,MAAOtE,WAAY,SAAUC,eAAgB,UAChEkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAK8oB,UAAWC,KAAO5sB,cACvB4D,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAMvF,MAAO,QAASM,WAAY,EAAG6X,GAAI,GAAK7a,KAAKE,MAAMsP,KAAOxP,KAAKE,MAAMsP,KAAO,kBAjD7DxL,mCCyElBitB,8MApEblxB,cAAgB,OAqBhBoc,iDAAa,SAAAlF,EAAO9J,GAAP,OAAA3F,EAAApG,EAAAqG,KAAA,SAAA4P,GAAA,cAAAA,EAAA1P,KAAA0P,EAAAzP,MAAA,WACW9C,EAAK/E,cAAcmxB,mBAEvBC,UAAUC,OAAOC,OAAO7b,QAH/B,CAAA6B,EAAAzP,KAAA,eAAAyP,EAAAzP,KAAA,EAIH9C,EAAK/E,cAAc0Z,yBAAyB,CAChDL,cAAe,QACfC,YAAalM,EACbmM,WAAY,eAPL,OASTxU,EAAK5E,MAAMic,aATF9E,EAAAzP,KAAA,eAWT9C,EAAK5E,MAAMic,aAXF,wBAAA9E,EAAAG,SAAAP,EAAAjX,0IAnBPA,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,oDAK9CF,KAAKI,wDAILJ,KAAKI,yDAILJ,KAAKI,6CAkBE,IAAAc,EAAAlB,KACD6wB,EAAQnX,OAAO4X,OAAOtxB,KAAKE,MAAM2wB,OACjCU,EAAa,CAACzoB,OAAQ9I,KAAKE,MAAMsP,MACvC,OACExH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAOwU,OAAQzc,KAAKE,MAAMuc,QACxBzU,EAAA5G,EAAAC,cAACqb,EAAA,EAAD,CAAWC,UAAW3c,KAAKE,MAAMic,YAE7Bnc,KAAKE,MAAMsxB,iBACXxpB,EAAA5G,EAAAC,cAACowB,GAAArwB,EAAD,CACEmB,MAAO,CAAEqgB,SAAU,QAAQ8O,OAAS,MACpCC,KAAK,EACLC,SAAS,EACTrwB,MAAOmY,OAAOiX,WACdnoB,OAAQkR,OAAOmY,cAGnB7pB,EAAA5G,EAAAC,cAACqb,EAAA,EAAUE,OAAX,CAAkBC,MAAO7c,KAAKE,MAAM2c,MAAOgM,KAAM7oB,KAAKE,MAAM2oB,OAC5D7gB,EAAA5G,EAAAC,cAACqb,EAAA,EAAUI,KAAX,KACE9U,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAMuV,GAAI,EAAGjc,MAAO,EAAG4G,cAAe,SAAUsV,GAAI,QAClDzV,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAMvF,MAAO,YAAaQ,UAAW,SAAUE,SAAU,EAAG8E,GAAI,EAAGW,wBAAyB0oB,KAE9FvpB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAMC,GAAI,EAAGC,cAAe,SAAUtE,WAAY,SAAUC,eAAgB,UAC1EkE,EAAA5G,EAAAC,cAACywB,GAAD,CAAoBjB,MAAOA,EAAOrhB,KAAM,YAAaihB,OAAQ,eAC7DzoB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAMkT,GAAI,EAAGuC,QAAU,SAAA7E,GAAC,OAAI3X,EAAKib,WAAW,6BAA8BuL,WAAY,QAAtF,uCA9DW/J,IAAM3Z,qBCq/DhB+tB,8MA9+DbnyB,MAAQ,CACNoyB,QAAQ,GACRC,SAAS,IACTzG,WAAW,GACXjT,WAAW,GACX2Z,SAAS,KACTC,WAAU,EACV1G,YAAY,GACZ2G,YAAW,EACXjlB,OAAO,UACPklB,YAAW,EACXC,YAAY,KACZC,aAAY,EACZvT,cAAc,KACdwT,eAAc,EACdC,eAAc,EACdC,gBAAe,EACfC,gBAAe,EACfhH,gBAAe,EACfiH,gBAAe,EACfhH,iBAAgB,EAChBiH,iBAAgB,EAChBC,iBAAgB,EAChB3G,oBAAoB,GACpB4G,oBAAoB,GACpBC,kBAAiB,EACjBC,kBAAiB,EACjBhH,kBAAkB,KAClBiH,oBAAmB,EACnBC,oBAAoB,KACpBC,qBAAoB,EACpBC,qBAAoB,EACpBC,qBAAqB,KACrBC,yBAAwB,KAI1BxzB,cAAgB,OAmBhByzB,kBAAoB,SAACd,GACnB5tB,EAAK7D,SAAS,CACZyxB,sBAIJe,eAAiB,SAAClB,GAChBztB,EAAK7D,SAAS,CACZsxB,mBAIJmB,0BAA4B,SAAAL,GAC1BvuB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5B8yB,qBAAqB9yB,EAAU8yB,0BAInCM,oBAAsB,SAAAlB,GACpB3tB,EAAK7D,SAAS,CACZwxB,qBAIJmB,kBAAoB,SAAAV,GAClBpuB,EAAK7D,SAAS,CACZiyB,0BAIJW,mBAAqB,SAAAT,GACnBtuB,EAAK7D,SAAS,CACZmyB,2BAIJU,eAAiB,SAACzB,GAChBvtB,EAAK7D,SAAS,CACZoxB,kBAIJ0B,sBAAwB,SAAClB,GACvB/tB,EAAK7D,SAAS,CACZ4xB,uBAIJmB,8BAAgC,SAACT,GAC/BzuB,EAAK7D,SAAS,CACZsyB,+BAwBJU,WAAa,WACXnvB,EAAK7D,SAAS,CACZqxB,YAAa,UAIjB4B,eAAiB,SAAA5B,GACfxtB,EAAK7D,SAAS,CACZqxB,mBAgGJ6B,sDAAkB,SAAAld,EAAOmd,EAAgBC,GAAvB,IAAAC,EAAAC,EAAA,OAAA/sB,EAAApG,EAAAqG,KAAA,SAAA4P,GAAA,cAAAA,EAAA1P,KAAA0P,EAAAzP,MAAA,OACZ9C,EAAKlF,MAAMwzB,qBACPkB,EAAuBxvB,EAAK/E,cAAcwkB,gBAAgB,CAAC,QAAQ,oBACzEzf,EAAK/E,cAAcy0B,YAAY1vB,EAAK5E,MAAM6E,cAAcuvB,EAAqB3iB,QAAQyiB,EAAgBC,KAE/FE,EAAgBzvB,EAAKlF,MAAMmzB,oBAAoBjuB,EAAKlF,MAAMuN,UAC3CrI,EAAKlF,MAAM2zB,yBAA2BzuB,EAAK5E,MAAMu0B,SACpE3vB,EAAK/E,cAAcy0B,YAAY1vB,EAAK5E,MAAM6E,cAAcwvB,EAAc5iB,QAAQyiB,EAAgBC,GAE9FvvB,EAAK/E,cAAcy0B,YAAY1vB,EAAK5E,MAAM6E,cAAcD,EAAK5E,MAAM2H,YAAY0M,KAAK5C,QAAQyiB,EAAgBC,GAThG,wBAAAhd,EAAAG,SAAAP,EAAAjX,mEAclB00B,wCAAqB,SAAA9d,IAAA,IAAA4b,EAAA8B,EAAAC,EAAA,OAAA/sB,EAAApG,EAAAqG,KAAA,SAAAsP,GAAA,cAAAA,EAAApP,KAAAoP,EAAAnP,MAAA,UAEf4qB,GAAgB,GAEhB1tB,EAAKlF,MAAMwzB,oBAJI,CAAArc,EAAAnP,KAAA,eAKX0sB,EAAuBxvB,EAAK/E,cAAcwkB,gBAAgB,CAAC,QAAQ,oBALxDxN,EAAAnP,KAAA,EAMK9C,EAAK/E,cAAc20B,mBAAmB5vB,EAAK5E,MAAM6E,cAAcuvB,EAAqB3iB,QAAQ7M,EAAK5E,MAAMqa,SAN5G,OAMjBiY,EANiBzb,EAAA6B,KAAA7B,EAAAnP,KAAA,sBAQX2sB,EAAgBzvB,EAAKlF,MAAMmzB,oBAAoBjuB,EAAKlF,MAAMuN,UAC3CrI,EAAKlF,MAAM2zB,yBAA2BzuB,EAAK5E,MAAMu0B,UATrD,CAAA1d,EAAAnP,KAAA,gBAAAmP,EAAAnP,KAAA,GAUO9C,EAAK/E,cAAc20B,mBAAmB5vB,EAAK5E,MAAM6E,cAAcwvB,EAAc5iB,QAAQ7M,EAAK5E,MAAMqa,SAVvG,QAUfiY,EAVezb,EAAA6B,KAAA7B,EAAAnP,KAAA,wBAAAmP,EAAAnP,KAAA,GAYO9C,EAAK/E,cAAc20B,mBAAmB5vB,EAAK5E,MAAM6E,cAAcD,EAAK5E,MAAM2H,YAAY0M,KAAK5C,QAAQ7M,EAAK5E,MAAMqa,SAZrH,QAYfiY,EAZezb,EAAA6B,KAAA,eAAA7B,EAAAhP,OAAA,SAgBZyqB,GAhBY,yBAAAzb,EAAAS,SAAAZ,EAAA5W,WAmBrB20B,kCAAe,SAAA1vB,IAAA,IAAAutB,EAAA4B,EAAAC,EAAA,OAAA7sB,EAAApG,EAAAqG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAGe9C,EAAK4vB,qBAHpB,YAGPlC,EAHO9qB,EAAAkR,MAAA,CAAAlR,EAAAE,KAAA,eAAAF,EAAAK,OAAA,SAMJjD,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CACnCiyB,gBACAja,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL,CAERqc,QAAQ,CACNnc,OAAO,KACPH,SAAQ,SAZH,OAkBP8b,EAAkB,SAACnb,EAAGC,GAE1B,IAAMC,EAAY,CAChBC,cAAe,UACfC,YAAavU,EAAK5E,MAAM6E,cACxBuU,WAAYL,EAAGM,QAGbL,IACFC,EAAUG,WAAaxU,EAAK/E,cAAcyZ,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUI,SACrBzU,EAAK/E,cAAc0Z,yBAAyBN,GAG9CrU,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BiyB,cAA8B,YAAdvZ,EAAGM,OACnBhB,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL,CAERqc,QAAQ,CACNnc,OAAO,KACPH,SAAQ,SAMV+b,EAAyB,SAACpb,GAC9B,IAAMR,EAASQ,EAAGkB,gBAClBrV,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL,CAERqc,QAAQnxB,OAAAyW,EAAA,EAAAzW,CAAA,GACHlD,EAAUgY,WAAV,QADE,CAELE,iBAMR3T,EAAKqvB,gBAAgBC,EAAgBC,GAErCvvB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL,CAERqc,QAAQ,CACNnc,OAAO,KACPH,SAAQ,QAnED,wBAAA5Q,EAAA8P,SAAAvS,EAAAjF,WAyEf60B,mCAAgB,SAAAC,IAAA,IAAA7G,EAAAnC,EAAAiJ,EAAAzgB,EAAAmC,EAAA+b,EAAAG,EAAA3G,EAAAsI,EAAAtV,EAAAgU,EAAA/G,EAAAmG,EAAAD,EAAAW,EAAAM,EAAAR,EAAAM,EAAA9W,EAAA,OAAA5U,EAAApG,EAAAqG,KAAA,SAAAutB,GAAA,cAAAA,EAAArtB,KAAAqtB,EAAAptB,MAAA,cAEV9C,EAAKlF,MAAMqzB,kBACbnuB,EAAK7D,SAAS,CACZgyB,kBAAiB,IAIfhF,EAAcnpB,EAAK/E,cAAcwkB,gBAAgB,CAAC,UAClDuH,EAAmBhnB,EAAK/E,cAAcwkB,gBAAgB,CAAC,QAAQ,kBAAkBzf,EAAK5E,MAAM2H,YAAY0M,KAAK8F,QAC7G0a,EAAoB9G,EAAYzY,SAAWsW,GAAoBA,EAAiBtW,QAVxEwf,EAAAptB,KAAA,EAoBJgiB,QAAQC,IAAI,CACpB/kB,EAAK4vB,qBACL5vB,EAAK/E,cAAck1B,sBACnBnwB,EAAK/E,cAAcouB,uBACnBrpB,EAAK/E,cAAcm1B,0BACnBpwB,EAAK/E,cAAcqiB,iBAAiBtd,EAAK5E,MAAM2H,aAC/C/C,EAAK/E,cAAco1B,eAAerwB,EAAK5E,MAAM2H,YAAY/C,EAAK5E,MAAMqa,SACpEwa,EAAoBjwB,EAAK/E,cAAcquB,qBAAqBtpB,EAAK5E,MAAMqa,SAAW,OA3BtE,OAAAjG,EAAA0gB,EAAApc,KAAAnC,EAAAhT,OAAA2xB,EAAA,EAAA3xB,CAAA6Q,EAAA,GAaZke,EAbY/b,EAAA,GAcZkc,EAdYlc,EAAA,GAeZuV,EAfYvV,EAAA,GAgBZ6d,EAhBY7d,EAAA,GAiBZuI,EAjBYvI,EAAA,GAkBXuc,EAlBWvc,EAAA,GAkBXuc,iBACD/G,EAnBYxV,EAAA,GA8BR2b,EAAattB,EAAK5E,MAAMm1B,cAAgBvwB,EAAK/E,cAAc8R,MAAM/M,EAAK5E,MAAMm1B,cAAc/K,GAAG,GAC7F6H,EAAYrtB,EAAK5E,MAAMo1B,kBAAoBxwB,EAAK/E,cAAc8R,MAAM/M,EAAK5E,MAAMo1B,kBAAkBhL,GAAG,GAGpG8I,EADAN,EAAkBiC,GAAqB3C,EAGvCQ,EAAiBmC,GAAqB9I,GAAqBA,EAAkB3B,GAAG,GAChF4I,EAAqBN,GAErBxW,EAvCQ3Y,OAAAyW,EAAA,EAAAzW,CAAA,GAuCOqB,EAAKlF,QAGbwzB,sBAAwB2B,IACnC3Y,EAASgX,qBAAsB,GAGjChX,EAAS+V,UAAYA,EACrB/V,EAASgW,WAAaA,EACtBhW,EAAS4C,cAAgBA,EACzB5C,EAASoW,cAAgBA,EACzBpW,EAASuW,eAAiBA,EAC1BvW,EAASwW,eAAiBA,EAC1BxW,EAAS0W,gBAAkBA,EAC3B1W,EAAS4W,iBAAmBA,EAC5B5W,EAAS6P,kBAAoBA,EAC7B7P,EAAS4P,kBAAoBA,EAC7B5P,EAAS8W,mBAAqBA,EAC9B9W,EAASgX,oBAAsBA,EAC/BhX,EAASkY,qBAAuBA,EAEhClY,EAAS4V,QAAU,CACjBvkB,QAAO,EACPL,SAAQ,GAEVgP,EAAS7D,WAAa,CACpB9K,OAAO,CACLgL,OAAO,KACPH,SAAQ,GAEVlL,QAAQ,CACNqL,OAAO,KACPH,SAAQ,GAEVsc,QAAQ,CACNnc,OAAO,KACPH,SAAQ,GAEVid,MAAM,CACJ9c,OAAO,KACPH,SAAQ,IAGZ8D,EAASoP,WAAa,CACpB+J,MAAM,KACN9nB,OAAO,KACPL,QAAQ,MAEVgP,EAAS+P,oBAAsB,CAC7BoJ,MAAM,KACN9nB,OAAO,KACPL,QAAQ,MAGVgP,EAAS6W,kBAAmB,EAE5BnuB,EAAK7D,SAASmb,EAAS,WACrBtX,EAAK0wB,cACL1wB,EAAK2wB,YAjGO,yBAAAT,EAAAxd,SAAAsd,EAAA90B,WAqGhBoe,uCAAoB,SAAAsX,IAAA,OAAAluB,EAAApG,EAAAqG,KAAA,SAAAkuB,GAAA,cAAAA,EAAAhuB,KAAAguB,EAAA/tB,MAAA,OAClB9C,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL9U,OAAAmyB,EAAA,EAAAnyB,CAAA,CAERmxB,QAAQ,CACNnc,OAAO,KACPH,SAAQ,IAETxT,EAAKlF,MAAMuN,OAAQ,CAClBsL,OAAO,KACPH,SAAQ,QAVI,wBAAAqd,EAAAne,SAAAke,EAAA11B,WAgBpB61B,mCAAgB,SAAAC,IAAA,IAAAC,EAAAlD,EAAArH,EAAAwC,EAAA1V,EAAA0d,EAAAC,EAAAhI,EAAAiI,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAp3B,EAAAq3B,EAAA3I,EAAAG,EAAAyI,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAhwB,EAAApG,EAAAqG,KAAA,SAAAgwB,GAAA,cAAAA,EAAA9vB,KAAA8vB,EAAA7vB,MAAA,OAEVmuB,EAAqB,KACnBlD,EAAkB/tB,EAAKlF,MAAMizB,gBAC7BrH,EAAa1mB,EAAKlF,MAAM4rB,WAAW1mB,EAAKlF,MAAMuN,QAC9C6gB,EAAqBlpB,EAAK4yB,yBAE5Bpf,GAAU,EAPAmf,EAAAxtB,GASNnF,EAAKlF,MAAMuN,OATLsqB,EAAA7vB,KAUP,YAVO6vB,EAAAxtB,GAAA,EAsKP,WAtKOwtB,EAAAxtB,GAAA,uBAYNnF,EAAKlF,MAAM+rB,gBAAmBH,IAAc1mB,EAAK/E,cAAc8R,MAAM2Z,GAAYsB,IAAI,GAZ/E,CAAA2K,EAAA7vB,KAAA,gBAAA6vB,EAAA1vB,OAAA,UAaD,GAbC,WAgBLjD,EAAKlF,MAAM4yB,cAhBN,CAAAiF,EAAA7vB,KAAA,gBAAA6vB,EAAA1vB,OAAA,SAiBDjD,EAAK6vB,gBAjBJ,WAoBNgD,cACF7yB,EAAK/E,cAAc63B,gBAAgB,6BAA6B,GAGlE9yB,EAAK7D,SAAS,CACZ42B,kBAAmB/yB,EAAK5E,MAAMqa,QAC9Bud,WAAY,GACZC,aAAc,KAGV/B,EAAkB,SAAC/c,EAAGC,IAErBD,GAAMC,IACTD,EAAK,CACHM,OAAO,UAIX,IAAMyY,EAAwB,UAAd/Y,EAAGM,OACbiV,EAA4B,YAAdvV,EAAGM,OAEjBJ,EAAY,CAChBC,cAAe,UACfC,YAAavU,EAAK5E,MAAM6E,cACxBuU,WAAYL,EAAGM,OACfkV,WAAY7pB,SAAS4mB,IAGnBtS,IACFC,EAAUG,WAAaxU,EAAK/E,cAAcyZ,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUI,SACrBzU,EAAK/E,cAAc0Z,yBAAyBN,GAG9CrU,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL9U,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEPqB,EAAKlF,MAAMuN,OAAQ,CAClBsL,OAAO,KACPH,SAAQ,QAKVkW,EACF1pB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5B+xB,YAAY,QACZ9G,WAAW/nB,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUirB,WADL/nB,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEPqB,EAAKlF,MAAMuN,OAASrI,EAAK/E,cAAc8R,MAAM,QAGzC/M,EAAKlF,MAAM2zB,yBAA2BvB,GAC/CltB,EAAK7D,SAAS,CACZ+wB,QAAQvuB,OAAAmyB,EAAA,EAAAnyB,CAAA,GACLqB,EAAKlF,MAAMuN,QAAS,MAMvB8oB,EAAyB,SAAChd,GAC9B,IAAMR,EAASQ,EAAGkB,gBAClBrV,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL9U,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEPqB,EAAKlF,MAAMuN,OAFJ1J,OAAAyW,EAAA,EAAAzW,CAAA,GAGHlD,EAAUgY,WAAWzT,EAAKlF,MAAMuN,QAH7B,CAINsL,iBAMFwV,EAAcnpB,EAAK/E,cAAcwkB,gBAAgB,CAAC,YAC9B0J,EAAYzY,SAAW1Q,EAAK/E,cAAcwkB,gBAAgB,CAAC,QAAQ,kBAAkBzf,EAAK5E,MAAM2H,YAAY0M,KAAK8F,MAAM,eAGxHvV,EAAKlF,MAAMwzB,oBArG1B,CAAAqE,EAAA7vB,KAAA,gBAuGFsuB,EAAwBpxB,EAAK/E,cAAcwkB,gBAAgB,CAAC,QAAQ,iBACpE4R,EAAkBrxB,EAAK/E,cAAcitB,qBAAqBxB,EAAW0K,EAAsBx0B,UAxGzF+1B,EAAA7vB,KAAA,GA0Gc9C,EAAK/E,cAAci4B,gBAAgBlzB,EAAK5E,MAAM2H,YAAY0M,KAAK8F,MAAM8b,GA1GnF,eA0GFC,EA1GEqB,EAAA7e,KAAA6e,EAAA7vB,KAAA,GA2GkB9C,EAAK/E,cAAck4B,oBAAoB7B,GA3GzD,eA2GJC,EA3GIoB,EAAA7e,KA4GJ9T,EAAKlF,MAAM6rB,cAEb4K,GADAA,EAAgBvxB,EAAK/E,cAAc8R,MAAMwkB,IACXrrB,MAAMqrB,EAAct1B,MAAM+D,EAAK/E,cAAc8R,MAAM/M,EAAKlF,MAAM6rB,aAAazqB,IAAI,OAC7Gq1B,EAAgBvxB,EAAK/E,cAAcm4B,aAAa7B,IAG5CC,EAAgB,CAACF,EAAQC,GAlHvBoB,EAAA7vB,KAAA,GAoHmB9C,EAAK/E,cAAcqa,0BAA0BtV,EAAKlF,MAAM00B,qBAAqBjiB,KAAM,gBAAiBikB,EAAeN,EAAiBC,GApHvJ,QAoHRF,EApHQ0B,EAAA7e,KAAA6e,EAAA7vB,KAAA,oBAsHFuuB,EAAkBrxB,EAAK/E,cAAcitB,qBAAqBxB,EAAW1mB,EAAK5E,MAAM2H,YAAYnG,UAE5F80B,EAAiC1xB,EAAK/E,cAAcwkB,gBAAgB,CAAC,WAAW,UAAU,UAAU,4BAEtG+R,EAAgB,GAGdI,EAAwB5xB,EAAKlF,MAAMmzB,oBAAoBjuB,EAAKlF,MAAMuN,UACpEqpB,GAAkCE,GAAyB5xB,EAAK5E,MAAMu0B,UAAY3vB,EAAKlF,MAAM2zB,yBA9HzF,CAAAkE,EAAA7vB,KAAA,YA+HA+uB,EAAoB7xB,EAAKlF,MAAMmzB,oBAAoBjuB,EAAKlF,MAAMuN,QAAQgrB,SAC5E7B,EAAgB,CAACH,EAAiBrxB,EAAK5E,MAAM2H,YAAY0M,KAAK5C,UAE1D7M,EAAKlF,MAAM2zB,wBAlIT,CAAAkE,EAAA7vB,KAAA,gBAmIEivB,GAAoBD,EAAAD,EAAkByB,SAAQ1B,EAAsB2B,UAAhD3gB,MAAAkf,EAAAnzB,OAAA60B,EAAA,EAAA70B,CAA6D6yB,IAAeiC,YAnIlGd,EAAA7vB,KAAA,GAoIuB9C,EAAK/E,cAAcy4B,+BAA+B9B,EAAsBrkB,KAAMwkB,EAAmBb,EAAiBC,GApIzI,QAoIJF,EApII0B,EAAA7e,KAAA6e,EAAA7vB,KAAA,wBAAA6vB,EAAA7vB,KAAA,GAsIuB9C,EAAK/E,cAAcqa,0BAA0Bsc,EAAsBrkB,KAAMqkB,EAAsB2B,SAAU/B,EAAeN,EAAiBC,GAtIhK,QAsIJF,EAtII0B,EAAA7e,KAAA,QAAA6e,EAAA7vB,KAAA,oBA0IFkvB,GAAahyB,EAAKlF,MAAMyyB,YAAcvtB,EAAK/E,cAAcwkB,gBAAgB,CAAC,WAAW,UAAU,UAAU,eAC7GuS,EAAiE,qBAA9ChyB,EAAK5E,MAAM2H,YAAY4wB,mBAAqC3zB,EAAK5E,MAAM2H,YAAY4wB,mBAAqB3B,GA3IrH,CAAAW,EAAA7vB,KAAA,gBAAA6vB,EAAA7vB,KAAA,GAkJMgiB,QAAQC,IAAI,CACpB/kB,EAAK/E,cAAc24B,oBAAoB,eAAgB,iBACvD5zB,EAAK/E,cAAckqB,eAAe,OAAOnlB,EAAK5E,MAAM6E,cAAcD,EAAK5E,MAAM2H,YAAY/C,EAAK5E,MAAMqa,WApJlG,QAAAwc,EAAAU,EAAA7e,KAAAoe,EAAAvzB,OAAA2xB,EAAA,EAAA3xB,CAAAszB,EAAA,GAgJFE,EAhJED,EAAA,GAiJFn3B,EAjJEm3B,EAAA,GAuJAC,GAAiBp3B,IACbq3B,EAAc1L,EAAWxqB,IAAInB,GAAUkB,MAAM,KACnDk2B,EAAgBnyB,EAAK/E,cAAc8R,MAAMolB,GAAej2B,IAAI,KACxDk2B,EAAYjsB,IAAIgsB,EAAcl2B,MAAM,MACtC+1B,GAAY,IA3JZ,eAiKNR,EAAgB,CAACH,EAAiBW,EAAW,8CAjKvCW,EAAA7vB,KAAA,GAkKqB9C,EAAK/E,cAAcqa,0BAA0BtV,EAAK5E,MAAM2H,YAAY0M,KAAK8F,MAAO,gBAAiBic,EAAeN,EAAiBC,GAlKtJ,QAkKNF,EAlKM0B,EAAA7e,KAAA,eAAA6e,EAAA1vB,OAAA,yBAwKN8qB,EAxKM,CAAA4E,EAAA7vB,KAAA,gBAyKF2mB,EAAiB,SAACtV,EAAGC,GACzB,IAAMsV,EAA4B,YAAdvV,EAAGM,OAGjBJ,EAAY,CAChBC,cAAa,aACbC,YAAavU,EAAK5E,MAAM6E,cACxBuU,WAAYL,EAAGM,OACfkV,WAAY,GAGVvV,IACFC,EAAUG,WAAaxU,EAAK/E,cAAcyZ,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUI,SACrBzU,EAAK/E,cAAc0Z,yBAAyBN,GAG9CrU,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL9U,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEPqB,EAAKlF,MAAMuN,OAAQ,CAClBsL,OAAO,KACPH,SAAQ,QAKVkW,GACF1pB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BirB,WAAW/nB,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUirB,WADL/nB,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEPqB,EAAKlF,MAAMuN,OAASrI,EAAK/E,cAAc8R,MAAM,SAMhD6c,EAAwB,SAACzV,GAC7B,IAAMR,EAASQ,EAAGkB,gBAClBrV,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL9U,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEPqB,EAAKlF,MAAMuN,OAFJ1J,OAAAyW,EAAA,EAAAzW,CAAA,GAGHlD,EAAUgY,WAAWzT,EAAKlF,MAAMuN,QAH7B,CAINsL,iBAxNAgf,EAAA7vB,KAAA,GA8NmB9C,EAAK/E,cAAcqa,0BAA0BtV,EAAK5E,MAAM2H,YAAY0M,KAAK8F,MAAO,kBAAmB,CAAC,GAAIkU,EAAgBG,GA9N3I,QA8NRqH,EA9NQ0B,EAAA7e,KAAA6e,EAAA7vB,KAAA,qBAkOJ9C,EAAKlF,MAAM+rB,gBAAmBH,IAAc1mB,EAAK/E,cAAc8R,MAAM2Z,GAAYsB,IAAI,GAlOjF,CAAA2K,EAAA7vB,KAAA,gBAAA6vB,EAAA1vB,OAAA,UAmOC,GAnOD,WAsOFovB,EAAS,CACbxyB,MAAMG,EAAK/E,cAAc8R,MAAM2Z,IAG7B4L,EAAoB,MACpBpJ,EA3OI,CAAAyJ,EAAA7vB,KAAA,SA4ONwvB,EAAoBtyB,EAAK/E,cAAc8R,MAAM/M,EAAK5E,MAAMo1B,kBAAkBv0B,MAAMitB,GA5O1EyJ,EAAA7vB,KAAA,wBAAA6vB,EAAA7vB,KAAA,GA8OuB9C,EAAK/E,cAAc24B,oBAAoB5zB,EAAK5E,MAAM2H,YAAY0M,KAAK8F,MAAO,cA9OjG,QA8OAgd,EA9OAI,EAAA7e,KA+ONwe,EAAoBtyB,EAAK/E,cAAc8R,MAAM/M,EAAK/E,cAAcitB,qBAAqBxB,EAAW1mB,EAAK5E,MAAM2H,YAAYnG,WAAWV,IAAIq2B,GA/OhI,WAmPRD,EAAoBtyB,EAAK/E,cAAcitB,qBAAqBoK,EAAkB,IAnPtE,CAAAK,EAAA7vB,KAAA,gBAAA6vB,EAAA1vB,OAAA,UAsPC,GAtPD,eAyPFwmB,EAAiB,SAACtV,EAAGC,GACzB,IAAMsV,EAA4B,YAAdvV,EAAGM,OAGjBJ,EAAY,CAChBC,cAAa,iBACbC,YAAavU,EAAK5E,MAAM6E,cACxBuU,WAAYL,EAAGM,OACfkV,WAAY7pB,SAAS4mB,IAGnBtS,IACFC,EAAUG,WAAaxU,EAAK/E,cAAcyZ,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUI,SACrBzU,EAAK/E,cAAc0Z,yBAAyBN,GAG9CrU,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL9U,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEPqB,EAAKlF,MAAMuN,OAAQ,CAClBsL,OAAO,KACPH,SAAQ,QAKVkW,GACF1pB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BirB,WAAW/nB,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUirB,WADL/nB,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEPqB,EAAKlF,MAAMuN,OAASrI,EAAK/E,cAAc8R,MAAM,SAMhD6c,EAAwB,SAACzV,GAC7B,IAAMR,EAASQ,EAAGkB,gBAClBrV,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL9U,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEPqB,EAAKlF,MAAMuN,OAFJ1J,OAAAyW,EAAA,EAAAzW,CAAA,GAGHlD,EAAUgY,WAAWzT,EAAKlF,MAAMuN,QAH7B,CAINsL,iBAMJ+e,EAAe,CAACJ,GA9SZK,EAAA7vB,KAAA,GAiTmB9C,EAAK/E,cAAcqa,0BAA0BtV,EAAK5E,MAAM2H,YAAY0M,KAAK8F,MAAO,kBAAmBmd,EAAcjJ,EAAgBG,EAAuByI,GAjT3K,QAiTRpB,EAjTQ0B,EAAA7e,KAAA,eAAA6e,EAAA1vB,OAAA,4BAqTVuQ,GAAU,EArTAmf,EAAA1vB,OAAA,uBAyTa,IAAvBguB,GACFjxB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL9U,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEPqB,EAAKlF,MAAMuN,OAFJ1J,OAAAyW,EAAA,EAAAzW,CAAA,GAGHlD,EAAUgY,WAAWzT,EAAKlF,MAAMuN,QAH7B,CAINmL,iBA/TM,0BAAAmf,EAAAjgB,SAAAse,EAAA91B,WAsUhB2sB,eAAiB,SAAClB,GAChB3mB,EAAK7D,SAAS,CACZwqB,mBAIJG,gBAAkB,WAChB9mB,EAAK7D,SAAS,CACZ2qB,iBAAgB,OAIpB4J,YAAc,WACZ,IAAIroB,EAASrI,EAAKlF,MAAMuN,OAExB,OAAOA,GACL,IAAK,SACErI,EAAKlF,MAAMuyB,YACdhlB,EAAS,WAOXA,IAAWrI,EAAKlF,MAAMuN,OACxBrI,EAAK7D,SAAS,CACZkM,UACA,WACArI,EAAKynB,wBAGPznB,EAAKynB,yBAITA,oBAAsB,WAAiB,IAAhBC,EAAgB7U,UAAAhO,OAAA,QAAA2I,IAAAqF,UAAA,GAAAA,UAAA,GAAT,KAE5B,IAAK7S,EAAKlF,MAAMuN,OACd,OAAO,EAGJqf,IACHA,EAAS1nB,EAAKlF,MAAM4rB,WAAW1mB,EAAKlF,MAAMuN,SAG5C,IAAIwe,GAAiB,EAErB,OAAQ7mB,EAAKlF,MAAMuN,QACjB,IAAK,UACHwe,EAAiBA,GAAmBa,GAAUA,EAAOlC,GAAGxlB,EAAK5E,MAAMm1B,cACrE,MACA,IAAK,SACH1J,GAAkB7mB,EAAKlF,MAAMgzB,iBAAmB9tB,EAAKlF,MAAMizB,kBAAqBlH,GAAmBa,GAAUA,EAAOlC,GAAGxlB,EAAK5E,MAAMstB,oBAMtI1oB,EAAK7D,SAAS,CACZ0qB,sBAIJ+B,cAAgB,WACd,IAAK5oB,EAAKlF,MAAMuN,QAAgE,OAAtDrI,EAAKlF,MAAMusB,oBAAoBrnB,EAAKlF,MAAMuN,QAClE,OAAO,EAGT,IAAM6gB,EAAqBlpB,EAAK/E,cAAc8R,MAAM/M,EAAKlF,MAAMusB,oBAAoBrnB,EAAKlF,MAAMuN,SAASnM,IAAI,KACvGwrB,EAAS,KAEb,OAAO1nB,EAAKlF,MAAMuN,QAChB,IAAK,UACHqf,EAAS1nB,EAAK5E,MAAMm1B,aAAevwB,EAAK/E,cAAc8R,MAAM/M,EAAK5E,MAAMm1B,cAAct0B,MAAMitB,GAAsB,KACnH,MACA,IAAK,SACHxB,EAAS1nB,EAAK5E,MAAMstB,kBAAoB1oB,EAAK/E,cAAc8R,MAAM/M,EAAK5E,MAAMstB,mBAAmBzsB,MAAMitB,GAAsB,KAM/HlpB,EAAKynB,oBAAoBC,GAEzB1nB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BirB,WAAW/nB,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUirB,WADL/nB,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEPqB,EAAKlF,MAAMuN,OAASqf,UAK3BkL,uBAAyB,WACvB,OAA0D,OAAtD5yB,EAAKlF,MAAMusB,oBAAoBrnB,EAAKlF,MAAMuN,SAIvCrI,EAAK/E,cAAc8R,MAAM/M,EAAKlF,MAAMusB,oBAAoBrnB,EAAKlF,MAAMuN,SAASnM,IAAI,QAGzF0rB,uBAAyB,SAACoD,GACxB,IAAKhrB,EAAKlF,MAAMuN,OACd,OAAO,EAETrI,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5B4rB,oBAAoB1oB,OAAAyW,EAAA,EAAAzW,CAAA,GACflD,EAAU4rB,oBADI1oB,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEhBqB,EAAKlF,MAAMuN,OAAS2iB,UAK3BrD,iBAAmB,SAAC5T,GAClB,IAAK/T,EAAKlF,MAAMuN,OACd,OAAO,EAET,IAAMqf,EAAS3T,EAAEmD,OAAOrX,MAAMgF,SAAWgL,MAAMkE,EAAEmD,OAAOrX,OAASG,EAAK/E,cAAc8R,MAAMgH,EAAEmD,OAAOrX,OAASG,EAAK/E,cAAc8R,MAAM,GACrI/M,EAAKynB,oBAAoBC,GACzB1nB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5B4rB,oBAAoB1oB,OAAAyW,EAAA,EAAAzW,CAAA,GACflD,EAAU4rB,oBADI1oB,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEhBqB,EAAKlF,MAAMuN,OAAS,OAEvBqe,WAAW/nB,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUirB,WADL/nB,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEPqB,EAAKlF,MAAMuN,OAASqf,UAK3BmM,UAAY,SAACxrB,GACX,OAAQA,EAAOuE,eACb,IAAK,UAEL,MACA,IAAK,SACE5M,EAAKlF,MAAMuyB,WAAcrtB,EAAKlF,MAAMgzB,iBACvCzlB,EAAS,MAEb,MACA,QACEA,EAAS,KAIE,OAAXA,GACFrI,EAAK7D,SAAS,CACZkM,uFA33BAnN,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,mKAK9CF,KAAKI,qBACCJ,KAAK44B,ihBA8DLC,EAAU,CAAC,UAAU,UACrBzc,EAAW,CACf2W,oBAAoB,aAGhB/yB,KAAKD,cAAcyW,aAAaqiB,EAAhC,eAAAC,EAAAr1B,OAAAiT,EAAA,EAAAjT,CAAA+D,EAAApG,EAAAuV,KAAwC,SAAAoiB,EAAO5rB,GAAP,IAAAupB,EAAAsC,EAAAzE,EAAA,OAAA/sB,EAAApG,EAAAqG,KAAA,SAAAwxB,GAAA,cAAAA,EAAAtxB,KAAAsxB,EAAArxB,MAAA,UACtC8uB,EAAwBx1B,EAAKnB,cAAcwkB,gBAAgB,CAAC,WAAW,UAAUpX,EAAO,kBACxF6rB,EAAmBtC,GAAyBA,EAAsBlhB,QACxE4G,EAAS2W,oBAAoB5lB,GAAU6rB,EAAmBtC,EAAwB,MAC9EsC,EAJwC,CAAAC,EAAArxB,KAAA,gBAAAqxB,EAAArxB,KAAA,EAKd1G,EAAKhB,MAAMg5B,aAAaxC,EAAsBrkB,KAAKqkB,EAAsB/kB,QAAQ+kB,EAAsByC,KALzF,cAKpC5E,EALoC0E,EAAArgB,KAM1CwD,EAAS2W,oBAAoB5lB,GAAQgrB,SAAW5D,EAAc4D,SANpBc,EAAArxB,KAAA,GAOY1G,EAAKnB,cAAc20B,mBAAmBxzB,EAAKhB,MAAM6E,cAAc2xB,EAAsB/kB,QAAQzQ,EAAKhB,MAAMqa,SAPpH,QAO1C6B,EAAS2W,oBAAoB5lB,GAAQisB,SAPKH,EAAArgB,KAAA,yBAAAqgB,EAAAzhB,SAAAuhB,EAAA/4B,SAAxC,gBAAAq5B,GAAA,OAAAP,EAAAphB,MAAA1X,KAAA2X,YAAA,WAWN3X,KAAKiB,SAASmb,yQAgBUpc,KAAKD,cAAcu5B,aAAat5B,KAAKE,MAAM2H,yBAA7D0xB,WACgC,OAArBA,EAAUnyB,2BACnB6qB,EAAWjyB,KAAKD,cAAc8R,MAAM0nB,EAAUnyB,QAAQvC,QAAQ,GAEhEqtB,EAAW,MACXlyB,KAAKJ,MAAMkzB,iDACI9yB,KAAKD,cAAcy5B,sBAApCtH,YAGEA,EAAWA,EAASpxB,KAAKmxB,YAG7BjyB,KAAKiB,SAAS,CACZgxB,WACAC,mMAKmB5xB,EAAUC,sFACjCP,KAAKI,YAE2B,OAA5BJ,KAAKE,MAAMm1B,uDACN,aAGHtd,EAAezX,EAAUyE,gBAAkB/E,KAAKE,MAAM6E,cACtD00B,EAAsBn5B,EAAU+0B,eAAiBr1B,KAAKE,MAAMm1B,cAA4C,OAA5Br1B,KAAKE,MAAMm1B,cAEzFtd,IAAgB0hB,mCACZz5B,KAAK44B,mCACX54B,KAAK60B,mCACE,cAGH6E,EAAgB15B,KAAKJ,MAAMuN,SAAW5M,EAAU4M,OAChDwsB,EAA6B35B,KAAKJ,MAAMusB,oBAAoBnsB,KAAKJ,MAAMuN,UAAY5M,EAAU4rB,oBAAoBnsB,KAAKJ,MAAMuN,SAE9HusB,GAAiBC,IACnB35B,KAAK0tB,iBAGwBntB,EAAUsyB,kBAAoB7yB,KAAKJ,MAAMizB,iBAC1C6G,IAC5B15B,KAAKusB,sBAGDqN,EAAsBr5B,EAAU6yB,sBAAwBpzB,KAAKJ,MAAMwzB,sBACzC7yB,EAAUgzB,0BAA4BvzB,KAAKJ,MAAM2zB,2BAClDqG,oCACD55B,KAAK00B,6BAA3BlC,SACNxyB,KAAKiB,SAAS,CACZuxB,0BAIiBjyB,EAAUirB,WAAWxrB,KAAKJ,MAAMuN,UAAYnN,KAAKJ,MAAM4rB,WAAWxrB,KAAKJ,MAAMuN,SAEhGnN,KAAK65B,wSAKDrN,EAASxsB,KAAKJ,MAAM4rB,WAAWxrB,KAAKJ,MAAMuN,QAAUnN,KAAKD,cAAc8R,MAAM7R,KAAKJ,MAAM4rB,WAAWxrB,KAAKJ,MAAMuN,SAAW,QAEhHqf,EAAOM,IAAI,6CACjB,UAGHoJ,EAAwBl2B,KAAKD,cAAcwkB,gBAAgB,CAAC,QAAQ,iBAEpEwI,EAAmB/sB,KAAKD,cAAcitB,qBAAqBR,EAAO0J,EAAsBx0B,UACxF0a,EAAW,QAETpc,KAAKJ,MAAMuN,cACZ,mBAIA,0CAHHiP,EAAS+W,oBAAsB3G,YACOxsB,KAAKD,cAAcstB,iBAAiBrtB,KAAKE,MAAM2H,YAAY0M,KAAK8F,MAAM0S,GAAiB,kBAA7H3Q,EAASkX,qGAWbtzB,KAAKiB,SAASmb,uIAisBR,IAAAI,EAAAxc,KAEN,IAAKA,KAAKE,MAAM6E,gBAAkB/E,KAAKE,MAAM2H,YAC3C,OAAO,KAGT,IAAMiyB,EAAoB95B,KAAKE,MAAM2H,YAAYiyB,kBAC3CC,EAAmB/5B,KAAKD,cAAcwkB,gBAAgB,CAAC,aAAavkB,KAAKE,MAAMmhB,iBAAiB,qBAChG2Y,EAAiF,qBAA9Ch6B,KAAKE,MAAM2H,YAAY4wB,oBAAqCz4B,KAAKE,MAAM2H,YAAY4wB,mBACtHwB,EAA0Bj6B,KAAKD,cAAcwkB,gBAAgB,CAAC,WAAW,UAAU,UAAU,6BAA+ByV,EAE5HE,EAAwBl6B,KAAKD,cAAcwkB,gBAAgB,CAAC,WAAW,UAAU,kBAAkB,cAAgBuV,GAAqBC,EACxIlH,EAAkBqH,GAAyBl6B,KAAKJ,MAAMizB,iBAAyC,WAAtB7yB,KAAKJ,MAAMuN,OAEpFgtB,EAA4Bn6B,KAAKE,MAAMu0B,UAAYz0B,KAAKJ,MAAMmzB,oBAAoB/yB,KAAKJ,MAAMuN,QAC7FitB,EAAYD,GAA6Bn6B,KAAKJ,MAAM2zB,wBACpD8G,EAAqC,YAAtBr6B,KAAKJ,MAAMuN,OAAuBnN,KAAKE,MAAMm1B,aAAer1B,KAAKE,MAAMstB,kBACtF8M,EAAct6B,KAAKJ,MAAMozB,uBAAiE1gB,IAA7CtS,KAAKE,MAAM2H,YAAY0yB,UAAUhL,QAAwBvvB,KAAKE,MAAM2H,YAAY0yB,UAAUhL,QAAU,KAEjJtB,EAAcjuB,KAAKD,cAAcwkB,gBAAgB,CAAC,UAClDwQ,EAAoB9G,EAAYzY,SAAWxV,KAAKD,cAAcwkB,gBAAgB,CAAC,QAAQ,kBAAkBvkB,KAAKE,MAAM2H,YAAY0M,KAAK8F,MAAM,YAE3ImgB,EAAezF,GAAqB/0B,KAAKJ,MAAMwzB,qBAA6C,YAAtBpzB,KAAKJ,MAAMuN,OAEjFstB,EAA2C,YAAtBz6B,KAAKJ,MAAMuN,SAAyBnN,KAAKJ,MAAM+yB,iBAAmBoC,GAAqB/0B,KAAKJ,MAAM4yB,eAEvHkI,EAAkG,YAAtB16B,KAAKJ,MAAMuN,QAAwBnN,KAAKJ,MAAMwyB,YAAsC,WAAtBpyB,KAAKJ,MAAMuN,QAAuBnN,KAAKJ,MAAMuyB,WAAcU,EACrM8H,EAAmBF,GAAsB1F,GAAqB/0B,KAAKJ,MAAMqzB,oBAAsBjzB,KAAKJ,MAAMozB,kBAAoBhzB,KAAKJ,MAAM6yB,gBAAkBzyB,KAAKJ,MAAMkzB,iBAAyC,YAAtB9yB,KAAKJ,MAAMuN,OACpMytB,EAAkB7F,GAAqB/0B,KAAKJ,MAAMqzB,oBAAsBjzB,KAAKJ,MAAMozB,kBAAoBhzB,KAAKJ,MAAM6yB,gBAAkBzyB,KAAKJ,MAAMgzB,gBAAwC,WAAtB5yB,KAAKJ,MAAMuN,OAE5K0tB,GAAkBhI,GAAmB6H,EACrCnI,EAAcvyB,KAAKJ,MAAMqzB,oBAAsB0H,GAAoB36B,KAAKJ,MAAM2yB,eAAiBvyB,KAAKJ,MAAMwzB,qBAAuBpzB,KAAKJ,MAAM4yB,gBAAkBxyB,KAAKJ,MAAM+yB,kBAAoB3yB,KAAKJ,MAAMozB,kBAAoBhzB,KAAKJ,MAAM6yB,gBAAwC,YAAtBzyB,KAAKJ,MAAMuN,SAAyBnN,KAAKJ,MAAMwyB,WACxSM,EAAiB1yB,KAAKJ,MAAMuyB,aAAenyB,KAAKJ,MAAMszB,oBAAsBlzB,KAAKJ,MAAM8yB,gBAEvFoI,EAAoBN,GAAgBx6B,KAAKJ,MAAM0zB,sBAAwBtzB,KAAKJ,MAAMuzB,sBAAwBnzB,KAAKJ,MAAM+rB,eAErHoP,EAAsBN,GAAsBz6B,KAAKJ,MAAMwyB,YAAc6H,GAAiD,YAAtBj6B,KAAKJ,MAAMuN,OAC3G6tB,EAA6BL,GAAoBI,EAEjDE,EAAmBj7B,KAAKD,cAAcwkB,gBAAgB,CAAC,QAAQ,iBAC/D2W,EAAsBD,EAAiBzlB,SAAgG,qBAA9EylB,EAAiB/6B,MAAMojB,gBAAgBtjB,KAAKE,MAAM2H,YAAY0M,KAAK8F,OAC5H8gB,EAA6BF,EAAiBG,eAE9CC,EAAmBH,GAAuBC,IAA+Bn7B,KAAKE,MAAMo7B,iBAAyC,YAAtBt7B,KAAKJ,MAAMuN,OAExH,OACEnF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,CAAC,EAAE,KACVsC,WAAY,UACZsE,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,GAEPyG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAMC,GAAI,GAAV,sBAGAF,EAAA5G,EAAAC,cAACgkB,EAAA,EACKrlB,KAAKE,QAGb8H,EAAA5G,EAAAC,cAACk6B,EAAA,EAAD93B,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEs7B,kBAAmBlB,EACnBA,YAA6B,OAAhBA,EAAuB,GAAK,KACzC3G,oBAAqB3zB,KAAK2zB,oBAAoBzW,KAAKld,QAGhDA,KAAKE,MAAMqa,QAKZva,KAAKJ,MAAMqzB,iBACTjzB,KAAKJ,MAAMuN,OACTnF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAK1G,MAAO,GACVyG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJhT,cAAe,UAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAMC,GAAI,GAAV,sBAGAF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEpE,WAAY,SACZsE,cAAe,MACfrE,eAAgB,iBAEhBkE,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTkI,EAAE,EACF9P,MAAM,IACNwuB,YAAY,WACVvT,EAAKmc,UAAU,aAGnBrT,eAAe,EACfqC,SAAiC,YAAtB3nB,KAAKJ,MAAMuN,QAEtBnF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEuV,GAAI,EACJ3Z,WAAY,SACZsE,cAAe,MACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAACo6B,GAAA,EAAD,CACEC,YAAa,CACXvuB,OAAO,WAETud,UAAW,CACTrY,KAAK,OACLnS,MAAM,CACJqI,GAAG,MAITP,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE7E,SAAU,EACVJ,WAAY,GAFd,aAQJgF,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTkI,EAAE,EACF9P,MAAM,IACNwuB,YAAY,WACVvT,EAAKmc,UAAU,YAGnBrT,eAAe,EACfqC,SAAiC,WAAtB3nB,KAAKJ,MAAMuN,OACtBwuB,YAAc37B,KAAKJ,MAAMuyB,YAAcnyB,KAAKJ,MAAMgzB,gBAElD5qB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEuV,GAAI,EACJ3Z,WAAY,SACZsE,cAAe,MACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAACo6B,GAAA,EAAD,CACEC,YAAa,CACXvuB,OAAO,UAETud,UAAW,CACTrY,KAAK,OACLnS,MAAM,CACJqI,GAAG,MAITP,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE7E,SAAU,EACVJ,WAAY,GAFd,cAWNg4B,EACEhzB,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACT8c,GAAG,EACH5c,GAAG,EACH8R,GAAG,EACH1Y,QAAQ,OACRoB,WAAW,SACXsE,cAAc,SACdrE,eAAe,SACfkiB,GAAGhmB,KAAKJ,MAAMyzB,oBAAsB,EAAI,IAG1CrrB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZsE,cAAe,MACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE4S,GAAI,EACJ2M,UAAW,UACXE,WAAY,UACZhK,QAAS1d,KAAK0zB,2BAEZ1zB,KAAKJ,MAAMyzB,oBAAsB,OAAS,OAN9C,qBAQArrB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACElE,KAAM,QACNrB,MAAO,WACP2P,KAAMrS,KAAKJ,MAAMyzB,oBAAsB,cAAgB,mBAIzDrzB,KAAKJ,MAAMyzB,qBACTrrB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJhT,cAAe,UAGbwyB,GACE3yB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEpE,WAAY,SACZC,eAAgB,OAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE8U,UAAU,EACVzB,SAAUtb,KAAKJ,MAAMyyB,WACrBzpB,MAAK,4BACLymB,QAASrvB,KAAKJ,MAAMwzB,oBACpBpW,SAAW,SAAAnE,GAAC,OAAI2D,EAAKqX,mBAAmBhb,EAAEmD,OAAOqT,YAEnDrnB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEuf,UAAW,UACXE,WAAY,UACZhK,QAAU,SAAA7E,GAAC,OAAI2D,EAAKtc,MAAM07B,iBAAiB,kBAAkBpf,EAAKzc,cAAcwkB,gBAAgB,CAAC,WAAW,yBAH9G,gBAUJwW,GACE/yB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEpE,WAAY,SACZC,eAAgB,OAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE8U,UAAU,EACVnU,MAAK,qBACLymB,QAASrvB,KAAKJ,MAAMyyB,WACpB/W,SAAUtb,KAAKJ,MAAMwzB,oBACrBpW,SAAW,SAAAnE,GAAC,OAAI2D,EAAKsX,eAAejb,EAAEmD,OAAOqT,YAE/CrnB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEqnB,UAAW,SACXC,QAASvvB,KAAKD,cAAcwkB,gBAAgB,CAAC,WAAW,gBAExDvc,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACElE,KAAM,MACNrB,MAAO,YACP2P,KAAM,oBASxBrK,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP4G,cAAe,UAGbwyB,GACE3yB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP4G,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACE8yB,WAAW,EACX1yB,UAAW,CACTC,GAAG,EACHC,GAAG,EACH8R,GAAG,EACH1Y,QAAQ,OACRoB,WAAW,SACXsE,cAAc,SACdrE,eAAe,WAGjBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEO,OAAQ,QACRogB,IAAKqF,EAAYjQ,OAAO2K,QAE1B3gB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ9R,GAAI,EACJjG,SAAU,EACVV,MAAO,YACPQ,UAAW,UALb,kEAOkElD,KAAKJ,MAAMsyB,SAAWlyB,KAAKJ,MAAMsyB,SAASrtB,QAAQ,GAAK,IAPzH,KAQEmD,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE4S,GAAI,EACJ2M,UAAW,UACXE,WAAY,UACZhK,QAAU,SAAA7E,GAAC,OAAI2D,EAAKtc,MAAM07B,iBAAiB,kBAAkBpf,EAAKzc,cAAcwkB,gBAAgB,CAAC,WAAW,yBAJ9G,cASFvc,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ4B,UAAU,EACVnU,MAAK,mBACLymB,QAASrvB,KAAKJ,MAAMwzB,oBACpBpW,SAAW,SAAAnE,GAAC,OAAI2D,EAAKqX,mBAAmBhb,EAAEmD,OAAOqT,eAKnDrvB,KAAKJ,MAAM2yB,cAAgBvyB,KAAKJ,MAAMwzB,sBAAwBpzB,KAAKJ,MAAMwyB,YACzEpqB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE/E,UAAW,SACXwkB,WAAY,UACZhK,QAAU,SAAA7E,GAAC,OAAI2D,EAAKiX,gBAAe,KAHrC,+BAK+BzzB,KAAKE,MAAM6E,gBAOlDg2B,GACE/yB,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTC,GAAG,EACHC,GAAG,EACH8R,GAAG,EACH1Y,QAAQ,OACRoB,WAAW,SACXsE,cAAc,SACdrE,eAAe,WAGjBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACElE,KAAM,QACNrB,MAAO,WACP2P,KAAM,gBAERrK,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ9R,GAAI,EACJjG,SAAU,EACVV,MAAO,WACPQ,UAAW,UALb,+FAUF8E,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ4B,UAAU,EACVnU,MAAK,qBACLymB,QAASrvB,KAAKJ,MAAMyyB,WACpBrV,SAAW,SAAAnE,GAAC,OAAI2D,EAAKsX,eAAejb,EAAEmD,OAAOqT,cASxD8K,IAA8B5H,IAAgBvyB,KAAKJ,MAAM+yB,gBAC1D3qB,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTC,GAAG,EACHC,GAAG,EACHmU,GAAG,EACH/a,QAAQ,OACRoB,WAAW,SACXsE,cAAc,SACdrE,eAAe,WAIf9D,KAAKJ,MAAM2zB,yBAA2BvzB,KAAKJ,MAAMoyB,QAAQhyB,KAAKJ,MAAMuN,SAAWnN,KAAKJ,MAAMmzB,oBAAoB/yB,KAAKJ,MAAMuN,QAAQisB,SAC/HpxB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACElE,KAAM,QACNsO,KAAM,UACN3P,MAAO,aAETsF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ/X,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,6HAS2C,kBAA3ClD,KAAKD,cAAc+7B,qBAA2C97B,KAAKJ,MAAM2zB,wBAC3EvrB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACElE,KAAM,QACNsO,KAAM,UACN3P,MAAO,aAETsF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ/X,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,kGAUF8E,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ/X,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,yBAMyBlD,KAAKJ,MAAM2zB,wBAA0B,YAAc,WAN5E,QAM6FvzB,KAAKJ,MAAMuN,OANxG,KAMiHnF,EAAA5G,EAAAC,cAAA,WAE7GrB,KAAKJ,MAAM2zB,0BAA4BvzB,KAAKJ,MAAMmzB,oBAAoB/yB,KAAKJ,MAAMuN,QAAQisB,UAAzF,6DAAA3lB,OAAkKzT,KAAKJ,MAAMuN,OAA7K,8BAKRnF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ4B,UAAU,EACVsS,QAASrvB,KAAKJ,MAAM2zB,wBACpBvW,SAAW,SAAAnE,GAAC,OAAI2D,EAAKwX,8BAA8Bnb,EAAEmD,OAAOqT,UAC5DzmB,MAAK,GAAA6K,OAAKzT,KAAKD,cAAc+T,WAAW9T,KAAKJ,MAAMuN,QAA9C,6BAKTkuB,GACErzB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEoJ,EAAG,EACH8J,GAAI,EACJ5Z,MAAO,EACPkH,aAAc,EACd5E,WAAY,SACZsE,cAAe,MACfrE,eAAgB,SAChB4E,gBAAiB,gBACjB2nB,OAAM,aAAA5c,OAAezT,KAAKE,MAAM2C,MAAMoK,OAAO8uB,UAE7C/zB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE/E,UAAW,SACXwkB,WAAY,UACZsU,KAAI,sBAAAvoB,OAAwBwnB,EAAiB7S,MAAzC,KAAA3U,OAAkDzT,KAAKE,MAAM2H,YAAY0M,KAAK8F,QAHpF,uDAOArS,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE4S,GAAI,EACJ9W,KAAM,MACNrB,MAAO,UACP2P,KAAM,qBAKZuoB,GAAmB56B,KAAKJ,MAAMuyB,WAC5BnqB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP4G,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACE8yB,WAAW,EACX1yB,UAAW,CACTC,GAAG,EACHC,GAAG,EACH8R,GAAG,EACH1Y,QAAQ,OACRoB,WAAW,SACXsE,cAAc,SACdrE,eAAe,WAGjBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEO,OAAQ,QACRogB,IAAKqF,EAAYjQ,OAAO2K,QAE1B3gB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ9R,GAAI,EACJjG,SAAU,EACVV,MAAO,YACPQ,UAAW,UALb,0CAQE8E,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE4S,GAAI,EACJ2M,UAAW,UACXE,WAAY,UACZhK,QAAU,SAAA7E,GAAC,OAAI2D,EAAKtc,MAAM07B,iBAAiB,kBAAkBpf,EAAKzc,cAAcwkB,gBAAgB,CAAC,WAAW,yBAJ9G,cAUAvkB,KAAKJ,MAAMuyB,WACTnqB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ4B,UAAU,EACVnU,MAAK,oBACLymB,QAASrvB,KAAKJ,MAAMszB,mBACpBlW,SAAW,SAAAnE,GAAC,OAAI2D,EAAKoX,kBAAkB/a,EAAEmD,OAAOqT,cAMxDrvB,KAAKmyB,WACHnqB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE/E,UAAW,SACXwkB,WAAY,UACZhK,QAAU,SAAA7E,GAAC,OAAI2D,EAAKgX,mBAAkB,KAHxC,4BAK4BxzB,KAAKE,MAAM6E,gBAOxB,WAAtB/E,KAAKJ,MAAMuN,QAAuBnN,KAAKJ,MAAMof,eAAiB0T,GAC7D1qB,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTC,GAAG,EACHC,GAAG,EACH8R,GAAG,EACH1Y,QAAQ,OACRoB,WAAW,SACXsE,cAAc,SACdrE,eAAe,WAGjBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACElE,KAAM,QACNrB,MAAO,WACP2P,KAAM,oBAERrK,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEoB,GAAI,EACJjG,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,sCAQA8E,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEpE,WAAY,SACZsE,cAAe,OAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE7E,SAAU,EACVJ,WAAY,EACZN,MAAO,YACPQ,UAAW,SACXwkB,WAAY,aAEX1nB,KAAKJ,MAAMof,cAAcna,QAAQ,GAPpC,IAOyC7E,KAAKE,MAAM6E,eAEpDiD,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEqnB,UAAW,MACXC,QAASvvB,KAAKD,cAAcwkB,gBAAgB,CAAC,WAAW,iBAExDvc,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE4S,GAAI,EACJ9W,KAAM,MACNrB,MAAO,YACP2P,KAAM,oBAQK,WAAtBrS,KAAKJ,MAAMuN,QAAuB+sB,GAAyBxH,GAC1D1qB,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTC,GAAG,EACHC,GAAG,EACH8R,GAAG,EACH1Y,QAAQ,OACRoB,WAAW,SACXsE,cAAc,SACdrE,eAAe,WAGjBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACElE,KAAM,QACNrB,MAAO,WACP2P,KAAM,gBAERrK,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ9R,GAAI,EACJjG,SAAU,EACVV,MAAO,WACPQ,UAAW,UALb,qBAOqBlD,KAAKE,MAAM6E,cAPhC,wFAOqI/E,KAAKE,MAAM+7B,kBAAoBj8B,KAAKE,MAAM+7B,iBAAiB3R,GAAG,GAA9D,QAAA7W,OAA2EzT,KAAKE,MAAM+7B,iBAAiBp3B,QAAQ,GAA/G,KAAuH,KAP5P,MAUFmD,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ4B,UAAU,EACVsS,QAASrvB,KAAKJ,MAAMizB,gBACpBjqB,MAAK,gCACLoU,SAAW,SAAAnE,GAAC,OAAI2D,EAAKuX,sBAAsBlb,EAAEmD,OAAOqT,aAMzDrvB,KAAKJ,MAAM+yB,gBAAwC,YAAtB3yB,KAAKJ,MAAMuN,OACvCnF,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTkI,EAAE,EACF8J,GAAG,IAGLnT,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEpE,WAAY,SACZsE,cAAe,UAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACElE,KAAM,QACNsO,KAAM,UACN3P,MAAO,aAETsF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ/X,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,gBAMgBlD,KAAKE,MAAM6E,cAN3B,mGAUA/E,KAAKJ,MAAM4yB,eAAuC,YAAtBxyB,KAAKJ,MAAMuN,QA0DvColB,GAAemI,IAClB16B,KAAKJ,MAAM2Y,WAAWvY,KAAKJ,MAAMuN,QAAQmL,QA6PxCtQ,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJhT,cAAe,UAEfH,EAAA5G,EAAAC,cAACyZ,EAAA,EAAD,CACEC,KAAM/a,KAAKE,MAAM6a,KACjBqD,kBAAmBpe,KAAKoe,kBAAkBlB,KAAKld,MAC/Ckb,KAAMlb,KAAKJ,MAAM2Y,WAAWvY,KAAKJ,MAAMuN,QAAQsL,OAC/CwC,WAAU,cAAAxH,OAAgBzT,KAAKJ,MAAMuN,OAA3B,eACV6N,SAAQ,GAAAvH,OAAKzT,KAAKD,cAAc+T,WAAW9T,KAAKJ,MAAMuN,QAA9C,oBArQZnF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJhT,cAAe,UAGb0yB,GACE7yB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,EACJ3G,MAAO,EACP4G,cAAe,WAiCZkyB,GAAgBr6B,KAAKE,MAAMg8B,sBAC1Bl0B,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,EACJ3G,MAAO,GAGLvB,KAAKJ,MAAMgsB,iBAAmBkP,GAC5B9yB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,EACJ3G,MAAO,GAEPyG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEpE,WAAY,SACZsE,cAAe,OAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,6BAGAD,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEqnB,UAAW,MACXC,QAAO,yDAEPvnB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE4S,GAAI,EACJ9W,KAAM,MACNrB,MAAO,YACP2P,KAAM,kBAIZrK,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJtX,WAAY,SACZsE,cAAe,MACfrE,eAAgB,iBAGd,CAAC,GAAI,GAAI,EAAE,GAAGiN,IAAK,SAAA6e,GAAQ,OACzB5nB,EAAA5G,EAAAC,cAACwuB,GAAA,EAAD,CACE1mB,UAAW,CACTkI,EAAE,GAEJuJ,UAAW,CACTxX,SAAS,GAEX0sB,WAAYF,EACZ5mB,IAAG,YAAAyK,OAAcmc,GACjBG,YAAa,kBAAIvT,EAAKmQ,eAAeiD,IACrCjI,SAAUnL,EAAK5c,MAAM6rB,cAAgBzpB,WAAW4tB,SAQ9D5nB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZsE,cAAe,MACfrE,eAAgB,iBAGhBg3B,EACE9yB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPyuB,SAAU,MACVnsB,WAAY,SACZsE,cAAe,OAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE7E,SAAU,EACVJ,WAAY,EACZE,UAAW,QACXX,MAAO,CACLI,WAAW,UAEbD,MAAQ1C,KAAKJ,MAAM0zB,qBAAqBhJ,GAAG,GAAKtqB,KAAKE,MAAM2C,MAAMoK,OAAOC,aAAaqM,OAAO0W,OAASjwB,KAAKE,MAAM2C,MAAMoK,OAAOC,aAAaqM,OAAOuO,WAGzE,IAAtE9lB,WAAWhC,KAAKJ,MAAM0zB,qBAAqBvyB,MAAM,KAAK8D,QAAQ,IAC5D,cADF,GAAA4O,OAEMzT,KAAKJ,MAAM0zB,qBAAqBhJ,GAAG,GAAK,aAAe,UAF7D,KAAA7W,OAE2EzT,KAAKJ,MAAM0zB,qBAAqBvyB,MAAM,KAAKqK,MAAMvG,QAAQ,GAFpI,MAKJmD,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEqnB,UAAW,MACXC,QAASvvB,KAAKD,cAAcwkB,gBAAgB,CAAC,WAAW,wBAExDvc,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE4S,GAAI,EACJ9W,KAAM,MACNrB,MAAO,YACP2P,KAAM,iBAGVrK,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE4S,GAAI,EACJnY,MAAO,YACPglB,WAAY,UACZhK,QAAS1d,KAAK4rB,iBAJhB,WASA5rB,KAAKE,MAAMg8B,qBACbl0B,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEpE,WAAY,SACZsE,cAAe,OAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE7E,SAAU,EACVJ,WAAY,EACZN,MAAO,YACPQ,UAAW,QACXwkB,WAAY,aALd,oBAOoB1nB,KAAKE,MAAMg8B,oBAAoBn7B,MAAM,KAAK8D,QAAQ,GAPtE,KASAmD,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEqnB,UAAW,MACXC,QAASvvB,KAAKD,cAAcwkB,gBAAgB,CAAC,WAAW,oBAExDvc,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE4S,GAAI,EACJ9W,KAAM,MACNrB,MAAO,YACP2P,KAAM,kBAOdgoB,GACEryB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE7E,SAAU,EACVJ,WAAY,EACZN,MAAO,YACPQ,UAAW,QACXwkB,WAAY,YACZhK,QAAU,SAAC7E,GAAD,OAAO2D,EAAKkQ,uBAAuB,OAE5C2N,EAAax1B,QAAQ,GARxB,IAQ6B7E,KAAKE,MAAM6E,iBAQlDiD,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkoB,IAAK,EACL3d,KAAM,SACNuK,UAAU,EACVvU,OAAQ,QACRC,aAAc,EACdzF,WAAY,IACZ+tB,UAAWC,KAAO7sB,MAClBg4B,YAAa,aACbzzB,gBAAiB,SACjBqH,UAAW,kBACXqgB,YAAW,gBACXpT,SAAUhd,KAAKysB,iBAAiBvP,KAAKld,MACrCqwB,OAAM,aAAA5c,OAAezT,KAAKE,MAAM2C,MAAMoK,OAAOqjB,SAC7C3rB,MAAoD,OAA7C3E,KAAKJ,MAAM4rB,WAAWxrB,KAAKJ,MAAMuN,QAAmBnN,KAAKD,cAAc8R,MAAM7R,KAAKJ,MAAM4rB,WAAWxrB,KAAKJ,MAAMuN,SAAStI,UAAY,KAE5ImD,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJtX,WAAY,SACZsE,cAAe,MACfrE,eAAgB,iBAGd,CAAC,GAAG,GAAG,GAAG,KAAKiN,IAAK,SAAA+e,GAAU,OAC5B9nB,EAAA5G,EAAAC,cAACwuB,GAAA,EAAD,CACEC,WAAYA,EACZ9mB,IAAG,YAAAyK,OAAcqc,GACjBC,YAAa,kBAAIvT,EAAKkQ,uBAAuBoD,IAC7CnI,SAAUnL,EAAK5c,MAAMusB,oBAAoB3P,EAAK5c,MAAMuN,UAAYvI,SAASkrB,SASrF4K,GACE1yB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEnE,eAAgB,SAChBqX,GAAK0X,EAAkB,EAAI,GAE3B7qB,EAAA5G,EAAAC,cAAC+Z,EAAA,EAAD,CACEC,YAAa,CACX9Z,MAAM,OACN66B,SAAS,CAAC,EAAE,IACZ75B,MAAM,CACJoG,cAAc,cAEhB2S,SAAStb,KAAKJ,MAAM+rB,gBAEtBpQ,YAAavb,KAAKJ,MAAM+rB,eAAiB,KAAO3rB,KAAK61B,cAAc3Y,KAAKld,OAEvEA,KAAKJ,MAAMuN,OAAS0lB,EAAkB,cAAgB,OAjTnE7qB,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTkI,EAAE,EACF8J,GAAG,IAIHnb,KAAKJ,MAAM2Y,WAAX,SAAoCvY,KAAKJ,MAAM2Y,WAAX,QAAiCD,QACnEtQ,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEE,cAAe,UAEfH,EAAA5G,EAAAC,cAACyZ,EAAA,EAAD,CACEC,KAAM/a,KAAKE,MAAM6a,KACjBC,SAAQ,uBACRC,WAAU,gCACVC,KAAMlb,KAAKJ,MAAM2Y,WAAX,QAAiCE,OACvC2F,kBAAmBpe,KAAKoe,kBAAkBlB,KAAKld,SAInDgI,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEpE,WAAY,SACZsE,cAAe,UAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACElE,KAAM,QACNsO,KAAM,WACN3P,MAAO,aAETsF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ/X,SAAU,EACVV,MAAO,WACPQ,UAAW,UAGTlD,KAAKJ,MAAMwzB,oBAAX,MAAA3f,OACQzT,KAAKD,cAAc+T,WAAW9T,KAAKJ,MAAMuN,QADjD,UAAAsG,OACiEzT,KAAKE,MAAM6E,cAD5E,oEAEEq1B,EAAS,MAAA3mB,OACHzT,KAAKD,cAAc+T,WAAW9T,KAAKJ,MAAMuN,QADtC,UAAAsG,OACsDzT,KAAKE,MAAM6E,cADjE,yFAAA0O,OAGHzT,KAAKD,cAAc+T,WAAW9T,KAAKJ,MAAMuN,QAHtC,UAAAsG,OAGsDzT,KAAKE,MAAM6E,cAHjE,6DAMfiD,EAAA5G,EAAAC,cAAC+Z,EAAA,EAAD,CACEC,YAAa,CACXF,GAAG,EACH5Z,MAAM,CAAC,EAAE,KAEXga,YAAavb,KAAK20B,aAAazX,KAAKld,OALtC,cA2RZ,KAEJgI,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJhT,cAAe,UAEfH,EAAA5G,EAAAC,cAACoZ,EAAA,EAAD,CACEC,UAAW,CACTvS,cAAc,OAEhBwS,YAAa,CACX5W,KAAK,QAEP6W,UAAW,CACTC,GAAG,GAELrL,KAAM,2BA77BVxH,EAAA5G,EAAAC,cAACg7B,GAAA,EACKr8B,KAAKE,SA28BjB06B,GAAmB56B,KAAKJ,MAAMszB,oBAC5BlrB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ5Z,MAAO,GAEPyG,EAAA5G,EAAAC,cAACi7B,GACKt8B,KAAKE,QAMfqyB,GACEvqB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ5Z,MAAO,CAAC,EAAE,IACVsC,WAAY,UACZsE,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAACk7B,EAAA,EAAD94B,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEs8B,YAAY,EACZC,iBAAkB,GAClBC,SAAU18B,KAAKE,MAAM6E,kBAK7BiD,EAAA5G,EAAAC,cAACs7B,GAAD,CACEnL,iBAAiB,EACjB3I,KAAI,mBACJhM,MAAK,mBACLtC,QAASva,KAAKE,MAAMqa,QACpB4B,WAAYnc,KAAKi0B,WACjB5I,UAAWrrB,KAAKE,MAAM6E,cACtB0X,OAAmC,UAA3Bzc,KAAKJ,MAAM0yB,YACnB9iB,KAAI,+DAAAiE,OAAiEzT,KAAKJ,MAAMqyB,SAA5E,mCAAAxe,OAAsHzT,KAAKE,MAAM6E,cAAjI,cACJ8rB,MAAK,eAAApd,OAAiBzT,KAAKJ,MAAMqyB,SAA5B,gBAAAxe,OAAmDzT,KAAKE,MAAM6E,cAA9D,8BAAA0O,OAAwGzT,KAAKD,cAAcwkB,gBAAgB,CAAC,YAA5I,2DAx+DavgB,mCCyWb44B,8MA9Wbh9B,MAAQ,CACNi9B,SAAS,KACTr4B,UAAU,KACVF,WAAW,KACXknB,WAAW,IACXsR,cAAc,mBAIhB/8B,cAAgB,gFAGVC,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,4JAK9CF,KAAKI,kQAILJ,KAAK+8B,iMAGkBz8B,EAAUC,mEACjCP,KAAKI,YAEgBE,EAAUyE,gBAAkB/E,KAAKE,MAAM6E,eAE1D/E,KAAK+8B,6QAKU/8B,KAAKJ,MAAMi9B,8CAAkB78B,KAAKD,cAAci9B,YAAYh9B,KAAKE,MAAM2H,8CAAlFg1B,OACF78B,KAAKJ,MAAMi9B,WAAaA,GAC1B78B,KAAKiB,SAAS,CACZ47B,+BAGGA,wSAKgB78B,KAAKg9B,qBAkD5B,IAlDMH,SAEArQ,EAASxsB,KAAKD,cAAc8R,MAAM7R,KAAKJ,MAAM4rB,YAC7CyR,EAAezQ,EAAOzrB,MAAM87B,EAAS77B,IAAI,MAEzCk8B,EAAcl7B,WAAWi7B,EAAaj8B,IAAI,KAC1Cm8B,EAAgBn7B,WAAWi7B,EAAaj8B,IAAI,IAC5Co8B,EAAgBp7B,WAAWi7B,EAAaj8B,IAAI,IAC5Cq8B,EAAar7B,WAAWi7B,EAAaj8B,IAAI,IAEzCwD,EAAY,CAChB,CACE84B,KAAK,EAAE,GACP10B,MAAM,QACNjE,MAAMu4B,EACN1d,MAAM0d,EACNx6B,MAAM1C,KAAKD,cAAcwkB,gBAAgB,CAAC,QAAQ,SAASvkB,KAAKE,MAAM6E,cAAc,QAAQ,QAAQ+L,KAAK,KACzGysB,WAAW,OAAOv9B,KAAKD,cAAcwkB,gBAAgB,CAAC,QAAQ,SAASvkB,KAAKE,MAAM6E,cAAc,QAAQ,QAAQ+L,KAAK,KAAK,KAE5H,CACEwsB,KAAK,IACL10B,MAAM,WACNjE,MAAMw4B,EACNK,OAAOL,EACPz6B,MAAM1C,KAAKD,cAAcwkB,gBAAgB,CAAC,QAAQ,SAASvkB,KAAKE,MAAM6E,cAAc,QAAQ,QAAQ+L,KAAK,KACzG2sB,YAAY,OAAOz9B,KAAKD,cAAcwkB,gBAAgB,CAAC,QAAQ,SAASvkB,KAAKE,MAAM6E,cAAc,QAAQ,QAAQ+L,KAAK,KAAK,KAE7H,CACEwsB,KAAK,GACL10B,MAAM,WACNjE,MAAMy4B,EACNM,OAAON,EACP16B,MAAM1C,KAAKD,cAAcwkB,gBAAgB,CAAC,QAAQ,SAASvkB,KAAKE,MAAM6E,cAAc,QAAQ,QAAQ+L,KAAK,KACzG6sB,YAAY,OAAO39B,KAAKD,cAAcwkB,gBAAgB,CAAC,QAAQ,SAASvkB,KAAKE,MAAM6E,cAAc,QAAQ,QAAQ+L,KAAK,KAAK,KAE7H,CACEwsB,KAAK,EACL10B,MAAM,OACNg1B,KAAKP,EACL14B,MAAM04B,EACN36B,MAAM1C,KAAKD,cAAcwkB,gBAAgB,CAAC,QAAQ,SAASvkB,KAAKE,MAAM6E,cAAc,QAAQ,QAAQ+L,KAAK,KACzG+sB,UAAU,OAAO79B,KAAKD,cAAcwkB,gBAAgB,CAAC,QAAQ,SAASvkB,KAAKE,MAAM6E,cAAc,QAAQ,QAAQ+L,KAAK,KAAK,MAIzHgtB,EAA0B99B,KAAKD,cAAcwkB,gBAAgB,CAAC,QAAQ,SAASvkB,KAAKE,MAAM6E,cAAc,QAAQ,4BAE/F,EACfa,EAAYy3B,EADG,EAEfv3B,EAAc,CAAC,GACZY,EAAE,EAAEA,GAHQ,EAGQA,IACrBq3B,EAAar3B,EAAEd,EACrBE,EAAY2F,KAAKsyB,GAGbz5B,EAAa,CACjBoJ,QAAS,GACTM,SAAS,EACTtC,QAAS,QAETkC,eAAgB,GAChBC,gBAAiB,GACjBnI,KAAM,CAAC,QAAQ,SAAS,SAAS,QACjCuH,OAAQ,SAAA+wB,GAAA,IAAG90B,EAAH80B,EAAG90B,GAAH,OAAA80B,EAAOz0B,KAAe,GAAAkK,OAAIvK,EAAJ,WAC9BN,MAAO,SAAAkD,GAAC,OAAI5K,EAAKnB,cAAc2M,iBAAiBZ,EAAEnH,MAAM,EAAE,GAAG,IAAIzD,EAAKhB,MAAM6E,eAC5E4I,eAAgBmwB,EAA0B,CAAE5tB,KAAM,QAASC,UAAW,CAAE2tB,IAA8B,KACtGxY,eAAc,EACd1Z,SAAS,EACT9F,cAEAyG,SAAS,CACPlC,OAAQ,SAAAkB,GAAC,OAAIrK,EAAKnB,cAAc2M,iBAAiBnB,EAAE,EAAE,IACrDe,WAAWxG,EACXqG,OAAQ,OACRH,SAAU,EACVE,YAAa,EACbO,aAAc,EACdR,OAAQ,GACRI,eAAgB,UAElBN,WAAW,CACTE,OAAQ,GACRD,SAAS,EACTE,YAAa,GACbC,OAAQ,UAEVtJ,MAAM,CACJo7B,OAAO,CACLzuB,KAAK,CACHpM,SAAS,GACTJ,WAAW,IACXgK,KAAKnK,IAAMoK,OAAOlK,QAClBH,WAAYC,IAAMC,MAAM2M,YAG5B7C,KAAM,CACJ2C,MAAO,CACLC,KAAM,CACJpM,SAAS,GACTJ,WAAW,IACXgK,KAAKnK,IAAMoK,OAAOhB,OAClBrJ,WAAYC,IAAMC,MAAM2M,aAI9BC,KAAM,CACJC,KAAM,CACJpC,OAAQ,UAAWC,gBAAiB,SAI1C4C,OAAQpQ,KAAKE,MAAMiD,SAAW,CAAEkN,IAAK,EAAGC,MAAO,EAAGC,OAAQ,GAAIjH,KAAM,GAAM,CAAE+G,IAAK,GAAIC,MAAO,EAAGC,OAAQ,GAAIjH,KAAM,KAGnHtJ,KAAKiB,SAAS,CACZuD,YACAF,2JAIauU,GACf,IAAI2S,EAAa3S,EAAEmD,OAAOrX,MAAMgF,SAAWgL,MAAMkE,EAAEmD,OAAOrX,OAASuG,KAAKilB,IAAInwB,KAAKJ,MAAMk9B,cAAc96B,WAAW6W,EAAEmD,OAAOrX,QAAU,EACnI6mB,EAAaxrB,KAAKD,cAAc8R,MAAM2Z,GACtCxrB,KAAKiB,SAAS,CACZuqB,gDAIK,IAAAhP,EAAAxc,KAEP,IAAKA,KAAKE,MAAM6E,gBAAkB/E,KAAKE,MAAM2H,YAC3C,OAAO,KAGT,IACMq2B,EADmBl+B,KAAKD,cAAcwkB,gBAAgB,CAAC,YAAY,OAAO,aAClCvkB,KAAKD,cAAcwkB,gBAAgB,CAAC,YAAY,OAAO,YAErG,OACEvc,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTkI,EAAE,CAAC,EAAE,KAGPrJ,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP4G,cAAe,CAAC,SAAS,QAEzBH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,CAAC,EAAE,IACV4G,cAAe,SACfrE,eAAgB,cAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEpE,WAAY,SACZsE,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAACopB,EAAA,EAAD,CACEpQ,MAAOra,KAAKE,MAAM6E,cAClB2lB,UAAW,CACTrY,KAAK,OACLnS,MAAM,CACJgI,GAAG,EACHM,OAAO,YAIbR,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE7E,SAAU,EACVV,MAAO,WACPQ,UAAW,UAHb,oFAKqFlD,KAAKJ,MAAMi9B,SAAX,GAAAppB,OAAyBzT,KAAKJ,MAAMi9B,SAASh4B,QAAQ,GAArD,KAA6D,KAE9Iq5B,GACEl2B,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1F,MAAO,CACLE,QAAQ,cACR07B,cAAc,WAGhBn2B,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEqnB,UAAW,MACXC,QAASvvB,KAAKD,cAAcwkB,gBAAgB,CAAC,WAAW,aAExDvc,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE4S,GAAI,EACJxI,KAAM,OACNtO,KAAM,MACNrB,MAAO,kBAOrBsF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJhT,cAAe,UAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkoB,IAAK,EACL3d,KAAM,SACNuK,UAAU,EACVtU,aAAc,EACdzF,WAAY,IACZE,UAAW,SACXsF,OAAQ,CAAC,MAAM,SACf2zB,YAAa,aACbpsB,UAAW,kBACX5E,IAAKnL,KAAKJ,MAAMk9B,cAChBp0B,gBAAiB,cACjBsU,SAAUhd,KAAKysB,iBAAiBvP,KAAKld,MACrCqwB,OAAM,aAAA5c,OAAe5Q,IAAMoK,OAAOqjB,SAClCF,YAAW,UAAA3c,OAAYzT,KAAKE,MAAM6E,cAAcye,cAArC,WACX7e,MAAO3E,KAAKJ,MAAM4rB,aAAe7W,MAAM3U,KAAKJ,MAAM4rB,YAAcxrB,KAAKJ,MAAM4rB,WAAa,MAG5FxjB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJrX,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC+Z,EAAA,EAAD,CACEC,YAAa,CACX9Z,MAAM,CAAC,EAAE,KAEXga,YAAavb,KAAK+8B,UAAU7f,KAAKld,OAJnC,eAUJgI,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,CAAC,EAAE,GACP5Z,MAAO,CAAC,EAAE,IACV2H,GAAI,4BAGFlJ,KAAKE,MAAMiD,SACT6E,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP4G,cAAe,UAGY,OAAzBnI,KAAKJ,MAAM4E,WAAsBxE,KAAKJ,MAAM4E,UAAUuM,IAAI,SAACxF,EAAEsW,GAAH,OACxD7Z,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEmB,GAAI,EACJoU,GAAI,EACJjc,MAAO,EACP4G,cAAe,MACfa,IAAG,YAAAyK,OAAcoO,IAEjB7Z,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,IACPsC,WAAY,SACZC,eAAgB,cAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE7E,SAAU,EACVJ,WAAY,EACZN,MAAO,UAEN6I,EAAE3C,QAGPZ,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,IACPqhB,SAAU,WACV/e,WAAY,SACZ2W,UAAW,CAAC,OAAO,QACnB1W,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEypB,OAAQ,EACR9O,SAAU,WACV/e,WAAY,SACZsE,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE7E,SAAU,EACVJ,WAAY,EACZN,MAAO,WAEN8Z,EAAKzc,cAAc2M,iBAAiBnB,EAAE5G,MAAM,EAAE,GALjD,IAKsD6X,EAAKtc,MAAM6E,gBAGnEiD,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEqI,MAAO,EACP/O,MAAOgK,EAAE+xB,KACT1a,SAAU,WACVpa,OAAQ,CAAC,OAAO,QAChBC,aAAc,CAAC,gBAAgB,iBAC/BlG,MAAO,CAACyN,WAAU,gCAAAyD,OAAiClI,EAAE7I,MAAnC,iBAAA+Q,OAAwDlI,EAAE7I,MAA1D,qBAQ9BsF,EAAA5G,EAAAC,cAAC4W,EAAA,EAADxU,OAAAC,OAAA,CACE8O,KAAMhH,IACNhD,OAAQ,IACR0P,YAAY,GACRlY,KAAKJ,MAAM0E,WAJjB,CAKEiF,KAAMvJ,KAAKJ,MAAM4E,UACjB2T,SAAU,wCArWInU,aC2ajBo6B,8MAtabx+B,MAAQ,CACNy+B,UAAU,GACVhJ,aAAa,GACb7C,cAAc,GACdF,YAAY,KACZ2J,iBAAiB,GACjB3G,iBAAiB,GACjB9H,kBAAkB,GAClBsM,kBAAkB,GAClBwE,mBAAmB,GACnBpC,oBAAoB,GACpBjJ,kBAAiB,KAInBlzB,cAAgB,OAUhBk0B,WAAa,WACXnvB,EAAK7D,SAAS,CACZqxB,YAAa,UAIjB4B,eAAiB,SAAA5B,GACfxtB,EAAK7D,SAAS,CACZqxB,4FAfEtyB,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,yKAiB1CF,KAAKE,MAAMqa,+BACP6B,iBAAepc,KAAKJ,gBACpBI,KAAKD,cAAcyW,aAAa/S,OAAOiC,KAAK1F,KAAKE,MAAMojB,iBAAvD,eAAA0a,EAAAv6B,OAAAiT,EAAA,EAAAjT,CAAA+D,EAAApG,EAAAuV,KAAwE,SAAAM,EAAOoD,GAAP,IAAAxS,EAAA8hB,EAAAtnB,EAAA0R,EAAAmoB,EAAA7G,EAAAgJ,EAAAhH,EAAA/B,EAAA9C,EAAAyJ,EAAA,OAAAz0B,EAAApG,EAAAqG,KAAA,SAAA4P,GAAA,cAAAA,EAAA1P,KAAA0P,EAAAzP,MAAA,cACtEC,EAAc3G,EAAKhB,MAAMojB,gBAAgBjJ,IACzCsP,EAA0B,IACRtP,GAASxS,EAH2CwP,EAAAzP,KAAA,EAalEgiB,QAAQC,IAAI,CACpB3oB,EAAKnB,cAAcw+B,aAAa12B,GAChC3G,EAAKnB,cAAcy+B,gBAAgBnkB,EAAMnZ,EAAKhB,MAAMqa,SACpDrZ,EAAKnB,cAAc0+B,iBAAiB52B,EAAY3G,EAAKhB,MAAMqa,SAC3DrZ,EAAKnB,cAAc24B,oBAAoB7wB,EAAY0M,KAAK8F,MAAO,cAC/DnZ,EAAKnB,cAAcy+B,gBAAgB32B,EAAY0M,KAAK8F,MAAMnZ,EAAKhB,MAAMqa,SACrErZ,EAAKnB,cAAc20B,mBAAmBra,EAAMxS,EAAY0M,KAAK5C,QAAQzQ,EAAKhB,MAAMqa,SAChFrZ,EAAKnB,cAAc2+B,6BAA6Bx9B,EAAKhB,MAAMqa,QAAQoP,EAAwB,SApBjB,OAAAtnB,EAAAgV,EAAAuB,KAAA7E,EAAAtQ,OAAA2xB,EAAA,EAAA3xB,CAAApB,EAAA,GAM1E65B,EAN0EnoB,EAAA,GAO1EshB,EAP0EthB,EAAA,GAQ1EsqB,EAR0EtqB,EAAA,GAS1EsjB,EAT0EtjB,EAAA,GAU1EuhB,EAV0EvhB,EAAA,GAW1Eye,EAX0Eze,EAAA,GAY1EkoB,EAZ0EloB,EAAA,GAuB5EqI,EAASiiB,UAAUhkB,GAASgkB,EAC5BjiB,EAASiZ,aAAahb,GAASgb,EAC/BjZ,EAASoW,cAAcnY,GAASmY,EAChCpW,EAASkZ,iBAAiBjb,GAASib,EACnClZ,EAAS6f,iBAAiB5hB,GAAS4hB,EACnC7f,EAAS8f,oBAAoB7hB,GAAS6hB,EACtC9f,EAAS0d,kBAAkBzf,GAASxS,EAAYiyB,kBAChD1d,EAASoR,kBAAkBnT,GAASib,EAAmBp0B,EAAKnB,cAAc4K,iBAAiB2qB,EAAiBv0B,MAAMs2B,GAAgBxvB,EAAYnG,UAAYR,EAAKnB,cAAc8R,MAAM,GA9BvG,yBAAAwF,EAAAG,SAAAP,EAAAjX,SAAxE,gBAAA4X,GAAA,OAAAomB,EAAAtmB,MAAA1X,KAAA2X,YAAA,WAiCNyE,EAASkiB,mBAAqBt+B,KAAKD,cAAc4+B,kBAAkB3+B,KAAKE,MAAM2H,aAE9EuU,EAAS6W,kBAAmB,EAC5BjzB,KAAKiB,SAASmb,iQAKhBpc,KAAKI,qBACCJ,KAAK4+B,sMAGYt+B,EAAWC,yEAClCP,KAAKI,YACCy+B,EAAsBv+B,EAAU4M,cAAgBlN,KAAKE,MAAMgN,cAAgBzJ,OAAO4H,OAAO/K,EAAU4M,cAAc5B,OAAO,SAAA2N,GAAE,MAAiB,YAAZA,EAAGM,SAAqB5P,SAAWlG,OAAO4H,OAAOrL,KAAKE,MAAMgN,cAAc5B,OAAO,SAAA2N,GAAE,MAAiB,YAAZA,EAAGM,SAAqB5P,QAC9NrJ,EAAUia,UAAYva,KAAKE,MAAMqa,SAClCskB,IACpB7+B,KAAK4+B,uJAIA,IAAApiB,EAAAxc,KAED8+B,EAAe9+B,KAAKE,MAAMqa,SAAWva,KAAKJ,MAAM01B,iBAAiBt1B,KAAKE,MAAM6E,gBAAkB/E,KAAKD,cAAc8R,MAAM7R,KAAKJ,MAAM01B,iBAAiBt1B,KAAKE,MAAM6E,gBAAgBulB,GAAG,GAEvL,OACEtiB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,GAEPyG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP2G,GAAI,CAAC,EAAE,GACPrE,WAAY,SACZsE,cAAe,MACfrE,eAAgB,cAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,IAEPyG,EAAA5G,EAAAC,cAACyjB,EAAA,EAADrhB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEiD,SAAUnD,KAAKE,MAAMiD,SACrB8hB,KAAM,CAACjlB,KAAKE,MAAM6E,eAClBwW,YAAc,SAAA1C,GAAC,OAAI2D,EAAKtc,MAAM8kB,YAAYxI,EAAKtc,MAAMmhB,mBACrD7R,KAAMxP,KAAKD,cAAcwkB,gBAAgB,CAAC,aAAavkB,KAAKE,MAAMmhB,iBAAiB,cAGvFrZ,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,GACPuC,eAAgB,YAEhBkE,EAAA5G,EAAAC,cAAC09B,GAAA,EAADt7B,OAAAC,OAAA,CACEmlB,KAAM,OACF7oB,KAAKE,MAFX,CAGEsP,KAAM,YACN+L,YAAc,SAAA1C,GAAC,OAAI2D,EAAK0X,eAAe,aAI7ClsB,EAAA5G,EAAAC,cAAC0lB,EAAA,EAAD,CACE7e,GAAI,CAAC,EAAE,IADT,oBAKAF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,GAEPyG,EAAA5G,EAAAC,cAAC29B,GAADv7B,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEm+B,UAAWr+B,KAAKJ,MAAMy+B,UAAUr+B,KAAKE,MAAM6E,eAC3CswB,aAAcr1B,KAAKJ,MAAMy1B,aAAar1B,KAAKE,MAAM6E,eACjDytB,cAAexyB,KAAKJ,MAAM4yB,cAAcxyB,KAAKE,MAAM6E,eACnDk3B,iBAAkBj8B,KAAKJ,MAAMq8B,iBAAiBj8B,KAAKE,MAAM6E,eACzDuwB,iBAAkBt1B,KAAKJ,MAAM01B,iBAAiBt1B,KAAKE,MAAM6E,eACzDyoB,kBAAmBxtB,KAAKJ,MAAM4tB,kBAAkBxtB,KAAKE,MAAM6E,eAC3Dm3B,oBAAqBl8B,KAAKJ,MAAMs8B,oBAAoBl8B,KAAKE,MAAM6E,mBAIjE+5B,GACE92B,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,CAAC,EAAE,GACP3G,MAAO,EACP4G,cAAe,SACfe,GAAI,4BAEJlB,EAAA5G,EAAAC,cAAC0lB,EAAA,EAAD,CAAOvJ,GAAI,CAAC,EAAE,IAAd,kBACAxV,EAAA5G,EAAAC,cAAC49B,EAADx7B,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEm+B,UAAWr+B,KAAKJ,MAAMy+B,UAAUr+B,KAAKE,MAAM6E,mBAKjD+5B,GAAgB9+B,KAAKE,MAAMqa,UAAYva,KAAKJ,MAAMk6B,kBAAkB95B,KAAKE,MAAM6E,gBAAkBtB,OAAOiC,KAAK1F,KAAKJ,MAAM0+B,oBAAoB30B,OAAO,GACjJ3B,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP2H,GAAI,gBACJf,cAAe,UAEfH,EAAA5G,EAAAC,cAAC0lB,EAAA,EAAD,CAAOvJ,GAAI,CAAC,EAAE,IAAd,iBACAxV,EAAA5G,EAAAC,cAAC4lB,EAAA,EAADxjB,OAAAC,OAAA,CACEihB,cAAelhB,OAAOiC,KAAK1F,KAAKJ,MAAM0+B,oBACtCpX,KAAM,CACJ,CACErK,MAAM,QACN3c,MAAM,CACJqB,MAAM,CAAC,GAAK,MAEd4lB,OAAO,CACL,CACE9U,KAAK,OACLnS,MAAM,CACJqI,GAAG,EACHC,OAAO,CAAC,QAAQ,WAGpB,CACE6J,KAAK,eAIX,CACE+U,QAAO,EACPvK,MAAM,UACN3c,MAAM,CACJqB,MAAM,CAAC,IAAM,MAEf4lB,OAAO,CACL,CACE9U,KAAK,eACLnS,MAAM,CACJwB,SAAU1B,KAAKE,MAAMiD,SAAW,EAAI,MAK5C,CACE0Z,MAAM,aACNyK,KAAKtnB,KAAKD,cAAcwkB,gBAAgB,CAAC,WAAW,8BACpDrkB,MAAM,CACJqB,MAAM,CAAC,IAAK,IACZuC,eAAe,CAAC,SAAS,eAE3BqjB,OAAO,CACL,CACE9U,KAAK,oBACLnS,MAAM,CACJwB,SAAU1B,KAAKE,MAAMiD,SAAW,EAAI,MAK5C,CACE0Z,MAAM,eACNyK,KAAKtnB,KAAKD,cAAcwkB,gBAAgB,CAAC,WAAW,0BACpDrkB,MAAM,CACJqB,MAAM,CAAC,IAAK,KAEd4lB,OAAO,CACL,CACE9U,KAAK,wBACLnS,MAAM,CACJwB,SAAS,QA+Cf1B,KAAKE,MA7GX,CA8GEojB,gBAAiBtjB,KAAKJ,MAAM0+B,uBAKpCt+B,KAAKE,MAAMqa,SACTvS,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,CAAC,EAAE,GACP3G,MAAO,EACP4G,cAAe,SACfe,GAAI,gCAEJlB,EAAA5G,EAAAC,cAAC0lB,EAAA,EAAD,CAAOvJ,GAAI,CAAC,EAAE,IAAd,sBACAxV,EAAA5G,EAAAC,cAAC69B,GACKl/B,KAAKE,QAKfF,KAAKE,MAAMqa,SACTvS,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,CAAC,EAAE,GACP3G,MAAO,EACP4G,cAAe,SACfe,GAAI,0BAEJlB,EAAA5G,EAAAC,cAAC0lB,EAAA,EAAD,CAAOvJ,GAAI,CAAC,EAAE,IAAd,gBACAxV,EAAA5G,EAAAC,cAAC89B,GAAA,EAAD17B,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEykB,cAAe,CAAC3kB,KAAKE,MAAM6E,eAC3BmiB,KAAM,CACJ,CACErK,MAAO7c,KAAKE,MAAMiD,SAAW,GAAK,OAClCjD,MAAM,CACJqB,MAAM,CAAC,IAAK,MAEd4lB,OAAO,CACL,CACE9U,KAAK,OACLnS,MAAM,CACJqI,GAAG,CAAC,EAAE,KAGV,CACE8J,KAAK,OACL+U,QAAO,KAIb,CACEvK,MAAM,SACNuK,QAAO,EACPlnB,MAAM,CACJqB,MAAM,KAER4lB,OAAO,CACL,CACE9U,KAAK,YAIX,CACEwK,MAAM,OACN3c,MAAM,CACJqB,MAAM,CAAC,IAAK,MAEd4lB,OAAO,CACL,CACE9U,KAAK,UAIX,CACEwK,MAAM,SACN3c,MAAM,CACJqB,MAAM,CAAC,IAAK,KACZuC,eAAe,CAAC,SAAS,eAE3BqjB,OAAO,CACL,CACE9U,KAAK,aACLnS,MAAM,CACJqI,GAAG,CAAC,EAAE,KAGV,CACE6e,QAAO,EACP/U,KAAK,YAIX,CACEwK,MAAM,SACN3c,MAAM,CACJqB,MAAM,KAER4lB,OAAO,CACL,CACE9U,KAAK,YAIX,CACEwK,MAAM,QACN3c,MAAM,CACJqB,MAAM,CAAC,IAAK,IACZuC,eAAe,CAAC,SAAS,eAE3BqjB,OAAO,CACL,CACE9U,KAAK,YACLnS,MAAM,CACJqI,GAAG,CAAC,EAAE,GACNC,OAAO,CAAC,QAAQ,WAGpB,CACE4e,QAAO,EACP/U,KAAK,oBASnBrK,EAAA5G,EAAAC,cAACk7B,EAAA,EAAD94B,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEic,WAAYnc,KAAKi0B,WACjByI,SAAU18B,KAAKE,MAAM6E,cACrB0X,OAAmC,QAA3Bzc,KAAKJ,MAAM0yB,uBAjaLtuB,aC6wBTo7B,8MAhxBbx/B,MAAQ,CACN2Y,WAAW,CACTE,OAAO,KACPH,SAAQ,GAEVkT,WAAW,KACXC,YAAY,GACZ4T,gBAAgB,KAChB7R,kBAAkB,KAClB8R,kBAAkB,KAClBC,mBAAmB,KACnBC,oBAAmB,EACnBrT,oBAAoB,KACpBsT,2BAA0B,KAI5B1/B,cAAgB,OAsChB0sB,iBAAmB,SAAC5T,GAClB,IAAM2S,EAAa3S,EAAEmD,OAAOrX,MAAMgF,SAAWgL,MAAMkE,EAAEmD,OAAOrX,OAASG,EAAK/E,cAAc8R,MAAMgH,EAAEmD,OAAOrX,OAASG,EAAK/E,cAAc8R,MAAM,GACzI/M,EAAKynB,oBAAoBf,GAIzB1mB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BirB,aACAW,oBAJ0B,WAQ9BuB,cAAgB,WACd,GAAuC,OAAnC5oB,EAAKlF,MAAMusB,oBACb,OAAO,EAGT,IAAM6B,EAAqBlpB,EAAK/E,cAAc8R,MAAM/M,EAAKlF,MAAMusB,qBAAqBnrB,IAAI,KAClFwqB,EAAa1mB,EAAK5E,MAAMo1B,iBAAmBxwB,EAAK/E,cAAc8R,MAAM/M,EAAK5E,MAAMo1B,kBAAkBv0B,MAAMitB,GAAsB,KAEnIlpB,EAAKynB,oBAAoBf,GAEzB1mB,EAAK7D,SAAS,CACZuqB,kBAIJkM,uBAAyB,WACvB,OAAuC,OAAnC5yB,EAAKlF,MAAMusB,qBAGRrnB,EAAK/E,cAAc8R,MAAM/M,EAAKlF,MAAMusB,qBAAqBnrB,IAAI,QAGtE0rB,uBAAyB,SAACP,GACxBrnB,EAAK7D,SAAS,CACZkrB,2BAIJI,oBAAsB,WAAiB,IAAhBC,EAAgB7U,UAAAhO,OAAA,QAAA2I,IAAAqF,UAAA,GAAAA,UAAA,GAAT,KAEvB6U,IACHA,EAAS1nB,EAAKlF,MAAM4rB,YAGtB,IAAMG,GAAkBa,GAAUA,EAAOlC,GAAGxlB,EAAKlF,MAAM01B,kBAEvDxwB,EAAK7D,SAAS,CACZ0qB,sBAIJiJ,6BAAU,SAAA3d,IAAA,IAAAqoB,EAAAlL,EAAAC,EAAA,OAAA7sB,EAAApG,EAAAqG,KAAA,SAAA4P,GAAA,cAAAA,EAAA1P,KAAA0P,EAAAzP,MAAA,YACF03B,EAAoBx6B,EAAKlF,MAAM0/B,mBAD7B,CAAAjoB,EAAAzP,KAAA,eAAAyP,EAAAzP,KAAA,EAKkC9C,EAAK46B,iCALvC,OAAAroB,EAAAuB,KAmEJ9T,EAAK7D,SAAS,CACZw+B,2BAA0B,KA3DtBrL,EAAkB,SAACnb,EAAGC,GAE1B,IAAMC,EAAY,CAChBE,YAAa,UACbD,cAAe,eACfE,WAAYL,EAAKA,EAAGM,OAAS,MAGzBiV,EAAcvV,GAAoB,YAAdA,EAAGM,OAIzBL,IACFC,EAAUG,WAAaxU,EAAK/E,cAAcyZ,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUI,SACrBzU,EAAK/E,cAAc0Z,yBAAyBN,GAG9CrU,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5Bk/B,0BAA2BjR,EAC3BjW,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL,CAERE,OAAO,KACPH,SAAQ,OAI8B,oBAA/BxT,EAAK5E,MAAMk0B,iBAAkC5F,GACtD1pB,EAAK5E,MAAMk0B,gBAAgBnb,GAG7BnU,EAAKqwB,kBAGDd,EAAyB,SAACpb,GAC9B,IAAMR,EAASQ,EAAGkB,gBAClBrV,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL,CAERE,eAKN3T,EAAK/E,cAAcy0B,YAAY1vB,EAAK5E,MAAM6E,cAAcu6B,EAAkB3tB,QAAQyiB,EAAgBC,GAElGvvB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL,CAERE,OAAO,KACPH,SAAQ,IAEVmnB,2BAA0B,MAhExB,wBAAApoB,EAAAG,SAAAP,EAAAjX,WA0EVoN,6BAAU,SAAAwJ,IAAA,IAAA4U,EAAAwK,EAAAC,EAAAnY,EAAA6Q,EAAA2H,EAAA,OAAA9uB,EAAApG,EAAAqG,KAAA,SAAAsP,GAAA,cAAAA,EAAApP,KAAAoP,EAAAnP,MAAA,UAEF4jB,EAAa1mB,EAAKlF,MAAM4rB,WAAa1mB,EAAK/E,cAAc8R,MAAM/M,EAAKlF,MAAM4rB,YAAc,KAFrF,CAAAzU,EAAAnP,KAAA,eAAAmP,EAAAhP,OAAA,UAIC,GAJD,cAOFiuB,EAAkB,SAAC/c,EAAGC,GAC1B,IAAMsV,EAA4B,YAAdvV,EAAGM,OAGjBJ,EAAY,CAChBG,WAAYL,EAAGM,OACfH,cAAa,eACbC,YAAavU,EAAK5E,MAAM6E,cACxB0pB,WAAYjD,EAAW3mB,WAGrBqU,IACFC,EAAUG,WAAaxU,EAAK/E,cAAcyZ,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUI,SACrBzU,EAAK/E,cAAc0Z,yBAAyBN,GAG9CrU,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAY,CACVE,OAAO,KACPH,SAAQ,MAI8B,oBAA/BxT,EAAK5E,MAAM81B,iBAAkCxH,GACtD1pB,EAAK5E,MAAM81B,gBAAgB/c,IAIzBgd,EAAyB,SAAChd,GAC9B,IAAMR,EAASQ,EAAGkB,gBAClBrV,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL,CAERE,eAKAqF,EAAehZ,EAAKlF,MAAM0/B,kBAAkBjtB,KAC5Csc,EAAU7pB,EAAK/E,cAAcitB,qBAAqBxB,EAAW1mB,EAAK5E,MAAM2H,YAAYnG,UAlDlFqV,EAAAnP,KAAA,EAmDoB9C,EAAK66B,mBAAmBhR,GAnD5C,OAmDF2H,EAnDEvf,EAAA6B,KAqDR9T,EAAK5E,MAAMka,0BAA0B0D,EAAc,gBAAiBwY,EAAe,KAAMN,EAAiBC,GAE1GnxB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL,CAERD,SAAQ,OA1DJ,yBAAAvB,EAAAS,SAAAZ,EAAA5W,WA+DVoe,uCAAoB,SAAAnZ,IAAA,OAAAuC,EAAApG,EAAAqG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAClB9C,EAAK7D,SAAS,CACZsX,WAAY,CACVE,OAAO,KACPH,SAAQ,KAJM,wBAAA5Q,EAAA8P,SAAAvS,EAAAjF,WASpB2sB,eAAiB,SAAClB,GAChB3mB,EAAK7D,SAAS,CACZwqB,mBA4EJmU,gBAAkB,WAChB96B,EAAK8nB,eAGPiT,kBAAoB,WAClB/6B,EAAK7D,SAAS,CACZu+B,oBAAmB,gFA9TjBx/B,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,4JAK9CF,KAAKI,kRAICJ,KAAK4sB,iMAGYtsB,EAAUC,8EACjCP,KAAKI,YAECka,EAAiBha,EAAUia,UAAYva,KAAKE,MAAMqa,QAClDulB,EAA0Bx/B,EAAUg1B,mBAAqBt1B,KAAKE,MAAMo1B,kBACtEhb,IAAkBwlB,kCACd9/B,KAAK4sB,mBAGsB5sB,KAAKJ,MAAMusB,sBAAwB5rB,EAAU4rB,qBAE9EnsB,KAAK0tB,gBAGmB1tB,KAAKJ,MAAM4rB,aAAejrB,EAAUirB,YAE5DxrB,KAAK8tB,6MAiNgBiS,kFACjB/Q,EAAkB,GAClBlD,EAAmB9rB,KAAKD,cAAcwkB,gBAAgB,CAAC,QAAQ,kBAAkBvkB,KAAKE,MAAM6E,0DAGzF,cAGuB+mB,EAAiBkD,gBACrBgR,yCACJhgC,KAAKD,cAAci4B,gBAAgBh4B,KAAKE,MAAM6E,cAAcg7B,GAAU,iBAAtF3J,mBACoBp2B,KAAKD,cAAck4B,oBAAoB7B,WAA7DC,SAEAr2B,KAAKJ,MAAM6rB,cAEb4K,GADAA,EAAgBr2B,KAAKD,cAAc8R,MAAMwkB,IACXrrB,MAAMqrB,EAAct1B,MAAMf,KAAKD,cAAc8R,MAAM7R,KAAKJ,MAAM6rB,aAAazqB,IAAI,OAC7Gq1B,EAAgBr2B,KAAKD,cAAcm4B,aAAa7B,IAGlDrH,EAAgBvjB,KAAK2qB,GACrBpH,EAAgBvjB,KAAK4qB,oCAGhBrH,8QAIDxD,EAAaxrB,KAAKJ,MAAM4rB,WAAaxrB,KAAKD,cAAc8R,MAAM7R,KAAKJ,MAAM4rB,YAAc,4BAGvFyU,EAA6BzU,oCAEFxrB,KAAKD,cAAcmgC,kBAAkBlgC,KAAKE,MAAM2H,qBAAvEwvB,YAEJ4I,EAA6BA,EAA2Bl/B,MAAMs2B,4BAGhE4I,EAA6BjgC,KAAKD,cAAc8R,MAAM,kBAGlDsuB,EAA4BngC,KAAKD,cAAcitB,qBAAqBiT,EAA2BjgC,KAAKE,MAAM2H,YAAYnG,oBAChG1B,KAAKD,cAAcstB,iBAAiBrtB,KAAKE,MAAM2H,YAAY0M,KAAK8F,MAAM8lB,YAA9Fd,YAEFA,EAAkBA,EAAgBt+B,MAAM,MAG1Cf,KAAKiB,SAAS,CACZo+B,sSAMsBr/B,KAAKJ,MAAM0/B,uDAA2Bt/B,KAAKD,cAAcouB,sDAA7EmR,yCAESt/B,KAAKD,cAAc20B,mBAAmB10B,KAAKE,MAAM2H,YAAY0M,KAAK8F,MAAMilB,EAAkB3tB,QAAQ3R,KAAKE,MAAMqa,mFAErH,0QAMyBva,KAAKD,cAAcouB,qCAA7CmR,kBACkCt/B,KAAK0/B,wCAAvCD,SAENz/B,KAAKiB,SAAS,CACZq+B,oBACAG,iKAcK,IAAAv+B,EAAAlB,KAEP,IAAKA,KAAKE,MAAM6E,cACd,OAAO,KAIT,IAAMq7B,EAAiBpgC,KAAKJ,MAAM2/B,oBAAsBv/B,KAAKJ,MAAM2/B,mBAAmBjV,GAAG,GAEzF,OACEtiB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,CAAC,EAAE,KACVsC,WAAY,UACZsE,cAAe,SACfrE,eAAgB,UAGZ9D,KAAKE,MAAMo1B,kBAAoBt1B,KAAKE,MAAMo1B,iBAAiBhL,GAAG,IAC5DtiB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,GAEPyG,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTkI,EAAE,EACFhI,GAAG,CAAC,EAAE,KAGRrB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEpE,WAAY,SACZsE,cAAe,UAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZsE,cAAe,OAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACElE,KAAM,QACNsO,KAAOrS,KAAKJ,MAAM6/B,0BAA4B,WAAa,WAC3D/8B,MAAQ1C,KAAKJ,MAAM6/B,0BAA4Bz/B,KAAKE,MAAM2C,MAAMoK,OAAOC,aAAaqM,OAAOuO,UAAY,aAEzG9f,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE4S,GAAI,EACJzX,SAAU,EACVV,MAAO,WACPQ,UAAW,QAJb,+BASF8E,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ5Z,MAAO,EACPsC,WAAY,SACZsE,cAAe,OAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACElE,KAAM,QACNsO,KAAO+tB,EAAiB,WAAa,WACrC19B,MAAQ09B,EAAiBpgC,KAAKE,MAAM2C,MAAMoK,OAAOC,aAAaqM,OAAOuO,UAAY,aAEnF9f,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE4S,GAAI,EACJzX,SAAU,EACVV,MAAO,WACPQ,UAAW,QAJb,gBAMgBlD,KAAKE,MAAM2H,YAAY0M,KAAK8F,UAM/Cra,KAAKJ,MAAM6/B,0BAkDVz/B,KAAKJ,MAAM2Y,WAAWD,QACtBtQ,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJhT,cAAe,UAEfH,EAAA5G,EAAAC,cAACyZ,EAAA,EAAD,CACEC,KAAM/a,KAAKE,MAAM6a,KACjBC,SAAQ,uBACRE,KAAMlb,KAAKJ,MAAM2Y,WAAWE,OAC5BwC,WAAU,gCACVmD,kBAAmBpe,KAAKoe,kBAAkBlB,KAAKld,SAInDgI,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ5Z,MAAO,GAEPyG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEpE,WAAY,SACZsE,cAAe,OAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,6BAGAD,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEqnB,UAAW,MACXC,QAAO,yDAEPvnB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE4S,GAAI,EACJ9W,KAAM,MACNrB,MAAO,YACP2P,KAAM,kBAIZrK,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJtX,WAAY,SACZsE,cAAe,MACfrE,eAAgB,iBAGd,CAAC,GAAI,GAAI,EAAE,GAAGiN,IAAK,SAAA6e,GAAQ,OACzB5nB,EAAA5G,EAAAC,cAACwuB,GAAA,EAAD,CACE1mB,UAAW,CACTkI,EAAE,GAEJuJ,UAAW,CACTxX,SAAS,GAEX0sB,WAAYF,EACZ5mB,IAAG,YAAAyK,OAAcmc,GACjBG,YAAa,kBAAI7uB,EAAKyrB,eAAeiD,IACrCjI,SAAUzmB,EAAKtB,MAAM6rB,cAAgBzpB,WAAW4tB,QAKxD5nB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJjT,GAAI,EACJ3G,MAAO,EACP4G,cAAe,UAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,EACJrE,WAAY,SACZsE,cAAe,MACfrE,eAAgB9D,KAAKJ,MAAMy/B,gBAAkB,gBAAkB,YAG7Dr/B,KAAKJ,MAAMy/B,iBACTr3B,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPyuB,SAAU,MACVnsB,WAAY,SACZsE,cAAe,OAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE7E,SAAU,EACVJ,WAAY,EACZE,UAAW,QACXX,MAAO,CACLI,WAAW,UAEbD,MAAQV,WAAWhC,KAAKJ,MAAMy/B,gBAAgBx6B,QAAQ,IAAI,EAAI7E,KAAKE,MAAM2C,MAAMoK,OAAOC,aAAaqM,OAAO0W,OAASjwB,KAAKE,MAAM2C,MAAMoK,OAAOC,aAAaqM,OAAOuO,WAGvG,IAAtD9lB,WAAWhC,KAAKJ,MAAMy/B,gBAAgBx6B,QAAQ,IAC5C,cADF,GAAA4O,OAEMzT,KAAKJ,MAAMy/B,gBAAgB/U,GAAG,GAAK,aAAe,UAFxD,KAAA7W,OAEsEzT,KAAKJ,MAAMy/B,gBAAgBj0B,MAAMvG,QAAQ,GAF/G,MAKJmD,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEqnB,UAAW,MACXC,QAASvvB,KAAKJ,MAAMy/B,gBAAgB/U,GAAG,GAAK,uHAAyH,kHAErKtiB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE4S,GAAI,EACJ9W,KAAM,MACNrB,MAAO,YACP2P,KAAM,kBAOdrS,KAAKE,MAAMo1B,kBACTttB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPyuB,SAAU,MACVnsB,WAAY,SACZsE,cAAe,MACfrE,eAAgB,YAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE7E,SAAU,EACVJ,WAAY,EACZN,MAAO,YACPQ,UAAW,QACXwkB,WAAY,YACZhK,QAAU,SAAC7E,GAAD,OAAO3X,EAAKwrB,uBAAuB,MAC7CnqB,MAAO,CACLytB,SAAS,OACT3I,SAAS,SACT1kB,WAAW,SACXutB,aAAa,aAGdlwB,KAAKE,MAAMo1B,iBAAiBzwB,QAAQ7E,KAAKE,MAAMiD,SAAW,EAAI,GAdjE,IAcsEnD,KAAKE,MAAM6E,iBAMzFiD,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkoB,IAAK,EACL3d,KAAM,SACNuK,UAAU,EACVvU,OAAQ,QACRC,aAAc,EACdzF,WAAY,IACZ+M,UAAW,kBACXqgB,YAAW,gBACXpT,SAAUhd,KAAKysB,iBAAiBvP,KAAKld,MACrCqwB,OAAM,aAAA5c,OAAezT,KAAKE,MAAM2C,MAAMoK,OAAOqjB,SAC7C3rB,MAAiC,OAA1B3E,KAAKJ,MAAM4rB,WAAsBxrB,KAAKD,cAAc8R,MAAM7R,KAAKJ,MAAM4rB,YAAY3mB,UAAY,KAEtGmD,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJtX,WAAY,SACZsE,cAAe,MACfrE,eAAgB,iBAGd,CAAC,GAAG,GAAG,GAAG,KAAKiN,IAAK,SAAA+e,GAAU,OAC5B9nB,EAAA5G,EAAAC,cAACwuB,GAAA,EAAD,CACEC,WAAYA,EACZ9mB,IAAG,YAAAyK,OAAcqc,GACjBC,YAAa,kBAAI7uB,EAAKwrB,uBAAuBoD,IAC7CnI,SAAUzmB,EAAKtB,MAAMusB,sBAAwBvnB,SAASkrB,QAK9D9nB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJrX,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC+Z,EAAA,EAAD,CACEC,YAAa,CACXF,GAAG,EACH5Z,MAAM,CAAC,EAAE,IACT+Z,SAAStb,KAAKJ,MAAM+rB,gBAEtBpQ,YAAavb,KAAKoN,QAAQ8P,KAAKld,OANjC,cA7NNA,KAAKJ,MAAM2Y,WAAWD,QACpBtQ,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJhT,cAAe,UAEfH,EAAA5G,EAAAC,cAACyZ,EAAA,EAAD,CACEC,KAAM/a,KAAKE,MAAM6a,KACjBC,SAAQ,uBACRE,KAAMlb,KAAKJ,MAAM2Y,WAAWE,OAC5BwC,WAAU,gCACVmD,kBAAmBpe,KAAKoe,kBAAkBlB,KAAKld,SAInDgI,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTkI,EAAE,EACF8J,GAAG,IAGLnT,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEpE,WAAY,SACZsE,cAAe,UAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACElE,KAAM,QACNsO,KAAM,WACN3P,MAAO,aAETsF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ/X,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,mBAMmBlD,KAAKE,MAAM6E,cAN9B,oEAQAiD,EAAA5G,EAAAC,cAAC+Z,EAAA,EAAD,CACEC,YAAa,CACXF,GAAG,EACH5Z,MAAM,CAAC,EAAE,KAEXga,YAAavb,KAAK40B,QAAQ1X,KAAKld,OALjC,uBA7cDgE,mCCkbZq8B,8MAhbbzgC,MAAQ,CACN+b,UAAU,KACVnX,UAAU,KACVF,WAAW,KACXg8B,WAAW,KACX1V,YAAY,QAId7qB,cAAgB,gFAGVC,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,2JAK9CF,KAAKI,YACLJ,KAAKugC,qMAGkBjgC,EAAWC,gFAClCP,KAAKI,YAECogC,EAA4BlgC,EAAUmgC,qBAAuBzgC,KAAKE,MAAMugC,oBACzD//B,KAAKC,UAAUL,EAAUqkB,iBAAmBjkB,KAAKC,UAAUX,KAAKE,MAAMykB,gBACvE6b,IAClBxgC,KAAKiB,SAAS,CACZuD,UAAU,MACV,WACAtD,EAAK8W,sBAIa1X,EAAU6C,WAAanD,KAAKE,MAAMiD,UAEtDnD,KAAKugC,uVAMH5b,EAAgB3kB,KAAKE,MAAMykB,gBACRA,EAAchb,SACnCgb,EAAgBlhB,OAAOiC,KAAK1F,KAAKE,MAAMojB,2BAGlBtjB,KAAKD,cAAc2gC,YAAY1gC,KAAKE,MAAMqa,QAAQ,EAAE,SAASoK,UAA9Egc,SAEAn8B,EAAY,GACdo8B,EAAgB,GACdC,EAAe,GACjBC,EAAmB,KACnBzG,EAAer6B,KAAKD,cAAc8R,MAAM,GACtCka,EAAoB/rB,KAAKD,cAAcwkB,gBAAgB,CAAC,QAAQ,iBAElEoc,GAAYA,EAASh3B,QAEvBg3B,EAASn2B,QAAQ,SAACyO,EAAG4I,GAMnB,GAJKgf,EAAa5nB,EAAGiC,QACnB2lB,EAAa5nB,EAAGiC,MAAQ,KAGtB2lB,EAAa5nB,EAAGiC,MAAMkG,SAASnI,EAAG9L,QAAtC,CAIA2zB,EAAmBA,EAAmB51B,KAAKilB,IAAI2Q,EAAiBl8B,SAASqU,EAAG8nB,YAAcn8B,SAASqU,EAAG8nB,WAEtG,IAAMC,EAAcxkB,EAAKzc,cAAc8R,MAAMoH,EAAG+nB,aAEhD,OAAQ/nB,EAAG9L,QACT,IAAK,UACL,IAAK,aACL,IAAK,iBACL,IAAK,kBACHktB,EAAeA,EAAav5B,KAAKkgC,GACnC,MACA,IAAK,WACL,IAAK,cACL,IAAK,kBACL,IAAK,mBACH3G,EAAeA,EAAarvB,MAAMg2B,GAOlC3G,EAAa9iB,GAAG,KAClB8iB,EAAe7d,EAAKzc,cAAc8R,MAAM,IAG1C,IAAM1E,EAAS8L,EAAG9L,OACZkd,EAAUgQ,EACV0G,EAAYn8B,SAASqU,EAAG8nB,WACxBxT,EAAkB/Q,EAAKzc,cAAc4K,iBAAiBsO,EAAGsU,gBAAgBxB,EAAkBrqB,UAI5F6rB,EAAgB5Y,SAAY4Y,EAAgB5Y,UAC/CisB,EAAcn1B,KAAK,CACjB0B,SACAkd,UACA0W,YACAC,cACAzT,oBAGFsT,EAAa5nB,EAAGiC,MAAMzP,KAAK0B,OAM7BwO,EAAY,KACVslB,EAAcjhC,KAAKD,cAAcyQ,YAAY,IAAIoL,WAE/C5b,KAAKE,MAAMugC,0BACZ,iBAGA,kBAGA,mBAGA,2CARH9kB,EAAYslB,EAAYhlB,QAAQC,SAAS,EAAE,4CAG3CP,EAAYslB,EAAYhlB,QAAQC,SAAS,EAAE,6CAG3CP,EAAYslB,EAAYhlB,QAAQC,SAAS,EAAE,6CAG3CP,EAAYslB,EAAYhlB,QAAQC,SAAS,EAAE,6CAG3CP,EAAY,yCAIV5G,EAAO,GACTmsB,EAAe,GACfC,EAAgB,KAChBC,EAAgB,KAChBr7B,EAAgB,KACds7B,EAAyB,GACzBC,EAAwB,GAC1BC,EAAoBvhC,KAAKD,cAAc8R,MAAM,GAE3C2vB,EAAgB58B,UAAS,IAAIgX,MAAOxR,UAAU,KAAM,gBAEjCpK,KAAKD,cAAcuhB,gBAAgB7d,OAAO4H,OAAOrL,KAAKE,MAAMojB,iBAAiB,GAAG3R,SAAQ,EAAMmvB,EAAiB,MAAK,EAAM,cAA7IW,mIAIAC,EAAgB,GAChBC,EAAiB,GACrBZ,EAAY71B,KAAKilB,IAAIqR,EAAcT,GAC/Ba,EAAaplB,EAAKzc,cAAcyQ,YAAsB,IAAVuwB,GAG1Cc,EAAoBJ,EAAWn2B,OAAO,SAAA2N,GAAE,OAAKA,EAAG3S,WAAW66B,GAAiBloB,EAAG3S,WAAWy6B,KAG5Fe,EAAmBlB,EAAct1B,OAAO,SAAA2N,GAAE,OAAKA,EAAG8nB,WAAWA,KAAeI,GAAiBloB,EAAG8nB,UAAUI,MAExFx3B,4BAChBu3B,sBACFY,EAAmBZ,EACba,EAAiBt+B,OAAO4H,OAAOy2B,GAAkBvgB,MACjDpa,EAAiBnF,WAAW+/B,EAAe1X,SAE3C2X,EAAgBv+B,OAAO4H,OAAOw2B,GAAmBtgB,MACnDgM,EAAkB,MAClByU,oCACsBxlB,EAAKzc,cAAcutB,mBAAmB0U,EAAc9sB,qBAA5EqY,iBAIEpmB,EAAe,GAAK45B,EAAUD,GAAoBvT,IAEpDwU,EAAexU,gBAAkBA,EACjCuU,EAAmB,CAACC,4BAGtBD,EAAmB,CAAC,CAClBzX,QAAQ7N,EAAKzc,cAAc8R,MAAM,GACjC0b,gBAAgB/Q,EAAKzc,cAAc8R,MAAM,aAKzCowB,EAASx+B,OAAOC,OAAO,GAAGo+B,GAAkBvgB,MAC9C2gB,EAAgB1lB,EAAKzc,cAAc8R,MAAMowB,EAAO5X,SAAStpB,MAAMkhC,EAAO1U,iBAE1EoU,EAAe5V,EAAkB1R,OAASmC,EAAKzc,cAAc8R,MAAMowB,EAAO5X,SAC1EkX,EAAoBW,EAEpBR,EAAgBI,GAIE,OAAdnmB,GAAsBimB,EAAWjiB,cAAchE,MAE7CimB,EAAW7hB,QAAQ,IAAInE,KAAO,SAChCgmB,EAAaplB,EAAKzc,cAAcyQ,YAAY,IAAIoL,OAI5CumB,EAAgBP,EAAWv3B,OAAO,oBAGxC0K,EAAK6sB,EAAWv3B,OAAO,eAAiB,EAElC+3B,EAA0BpgC,WAAWA,WAAWu/B,EAAkB18B,QAAQ,KAEhFw8B,EAAuBc,GAAiBC,EACxCd,EAAsBa,GAAiBR,EAIvCP,EAAkC,OAAlBA,EAAyBgB,EAA0Bl3B,KAAKilB,IAAIiR,EAAcgB,GAC1Fr8B,EAAkC,OAAlBA,EAAyBq8B,EAA0Bl3B,KAAKC,IAAIpF,EAAcq8B,IAG5FjB,EAAgBJ,EAChBG,EAAeQ,oDAzERX,EAAUD,eAAiBC,GAAWS,6CAAtCT,oBAAoDA,GAAW/gC,KAAKE,MAAM4qB,yCAiInF,IArDMuX,EAAqB5+B,OAAOiC,KAAK27B,GAAwBtwB,IAAI,SAAAxK,GAAI,MAAK,CAC1E2K,EAAE3K,EACF4K,EAAEkwB,EAAuB96B,GACzB+7B,SAAShB,EAAsB/6B,MAG7BV,EAAY,EAChBw8B,EAAmB73B,QAAS,SAACyH,EAAK4P,GAChC,IAAMrY,EAAU0B,KAAKiK,MAAMtP,EAAUw8B,EAAmB14B,OAAO,KAC/D04B,EAAmBxgB,GAAOrY,QAAUA,EACpC3D,MAyBFrB,EAAUiH,KAAK,CACbvC,GAAG,MACHxG,MAAO,OAAQ1C,KAAKD,cAAcwkB,gBAAgB,CAAC,QAAQ,SAAS,MAAM,QAAQ,QAAQzT,KAAK,KAAK,IACpGvH,KAAK84B,IAGHE,EAAkB,EAClBx8B,EAAcq7B,EAAc,IAC9BmB,EAAkB,GAGhBx8B,IAAkBq7B,IACpBA,EAAgBl2B,KAAKC,IAAI,EAAEpF,EAAc,IAGtB,EACfH,GAAaG,EAAcq7B,GADZ,EAEft7B,EAAc,GACXY,EAAE,EAAEA,GAHQ,EAGQA,IACrBq3B,EAAa/7B,WAAWA,WAAWo/B,EAAe16B,EAAEd,GAAYf,QAAQ,IAC9EiB,EAAY2F,KAAKsyB,GAGS,GACtByE,EAAY/+B,OAAO4H,OAAO0J,GAAMpL,OAChC84B,EAAgBv3B,KAAKC,IAAI,EAAED,KAAKw3B,KAAKF,EAFf,KAItBl+B,EAAa,CACjBiO,OAAO,CACLC,KAAM,OACNnI,OAAQ,kBAEVsI,OAAO,CACLH,KAAM,SACNI,SAAS,EACTud,IAAKiR,EACLj2B,IAAKpF,GAEP0M,QAAQ,gBACRC,QAAQ,SAAA/N,GAAK,OAAI6X,EAAKzc,cAAcqC,YAAYuC,EAAM49B,IACtDx2B,WAAY/L,KAAKE,MAAMiD,SAAW,KAAO,CACvC8I,OAAQ,GACRD,SAAS,EACT3B,OAAQ,QACR6B,YAAa,GACbC,OAAQ,SACRC,aAAc,GACdC,eAAgB,SAChBC,WAAW,SAASm2B,EAAc,SAEpC38B,cACAgI,UAAU,EACVC,SAAQ,EACRxB,SAAUvM,KAAKE,MAAMiD,SAAW,KAAO,CACrC8I,OAAQ,GACRD,SAAU,EACVG,OAAQ,OACRD,YAAa,GACbO,aAAc,EACdL,cAAe,GACfE,WAAWxG,EACXuG,eAAgB,SAChBhC,OAAQ,SAAAkB,GAAC,OAAIiR,EAAKzc,cAAc2M,iBAAiBnB,EAAE,KAErDyC,SAAQ,EACRC,WAAW,IACX00B,YAAY,GACZx0B,YAAW,EACXC,aAAa,IACbE,aAAY,EACZJ,MAAM,YACNG,aAAY,EACZE,iBAAiB,EACjBtB,OAAO,SAAAnB,GAAC,OAAIA,EAAEpJ,OACd8L,mBAAmB,GACnBo0B,kBAAkBxB,EAClBnxB,WAAW,CAAEC,KAAM,QAASC,UAAW,IACvCtN,MAAM,CACJ+J,KAAM,CACJ2C,MAAO,CACLC,KAAM,CACJpM,SAAS,GACTJ,WAAW,IACXgK,KAAKnK,IAAMoK,OAAOhB,OAClBrJ,WAAYC,IAAMC,MAAM2M,aAI9BC,KAAM,CACJC,KAAM,CACJpC,OAAQ,UAAWC,gBAAiB,SAa1C4C,OAAQpQ,KAAKE,MAAMiD,SAAW,CAAEkN,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIjH,KAAM,IAAO,CAAE+G,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIjH,KAAM,IACrHwJ,aAAa,SAACC,GAAc,IAEpB9J,EADY8J,EAAVC,MACYC,OAAO,GAC3B,OACEjL,EAAA5G,EAAAC,cAACwhC,GAAA,EAAD,CACE55B,MAAOA,GAEPjB,EAAA5G,EAAAC,cAACyhC,GAAA,EAAD,CACEpgC,MAAOuG,EAAMvG,MACbkG,MAAOK,EAAMiK,QACbvO,MAAK,KAAA8O,OAAOxK,EAAMM,KAAK6J,cAGM,kBAAxBnK,EAAMM,KAAK+4B,UAAyB7+B,OAAOiC,KAAKuD,EAAMM,KAAK+4B,UAAU34B,OAAO,GACjFlG,OAAOiC,KAAKuD,EAAMM,KAAK+4B,UAAUvxB,IAAI,SAAAsJ,GACnC,GAAIA,IAAUpR,EAAMiK,QAClB,OAAO,KAET,IAAM6vB,EAAYvmB,EAAKzc,cAAcwkB,gBAAgB,CAAC,QAAQ,SAASlK,IACvE,GAAI0oB,EAAU,CACZ,IAAM1X,EAAY0X,EAAU1wB,KAAO0wB,EAAU1wB,KAAOgI,EAC9C3X,EAAQqgC,EAAUrgC,MAAMsgC,IACxB3Y,EAAUphB,EAAMM,KAAK+4B,SAASjoB,GAChC4oB,EAAmBzmB,EAAKzc,cAAcqC,YAAYioB,EAAQ,GAC9D,GAAIroB,WAAWqoB,IAAU,IACvB,OACEriB,EAAA5G,EAAAC,cAACyhC,GAAA,EAAD,CACEl6B,MAAOyiB,EACP3oB,MAAOA,EACPsG,IAAG,OAAAyK,OAAS4G,GACZ1V,MAAK,GAAA8O,OAAKwvB,KAKlB,OAAO,UAQnBjjC,KAAKiB,SAAS,CACZuD,YACAF,mJAKF,OACE0D,EAAA5G,EAAAC,cAAC4W,EAAA,EAADxU,OAAAC,OAAA,CACE8O,KAAMxI,IACNkO,YAAY,GACRlY,KAAKJ,MAAM0E,WAHjB,CAIEiF,KAAMvJ,KAAKJ,MAAM4E,UACjB2T,SAAUnY,KAAKE,MAAMiY,SACrB3P,OAAQxI,KAAKE,MAAM0qB,YACnBxS,eAAgBpY,KAAKE,MAAMkY,yBA3aApU,aCgdpBk/B,8MA9cbtjC,MAAQ,CACNujC,QAAQ,KACRna,iBAAiB,GACjBE,qBAAqB,QAIvBnpB,cAAgB,gFAGVC,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,4JAK9CF,KAAKI,kRAKCJ,KAAKD,cAAcqjC,6CAInBpjC,KAAKD,cAAcsjC,2MAuHF/iC,EAAUC,mEACjCP,KAAKI,kJAIL,OACE4H,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP4G,cAAe,UAGbnI,KAAKJ,MAAMopB,iBAAiBrf,OAAO,GACjC3B,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP2G,GAAI,CAAC,EAAE,GACPiT,GAAI,CAAC,EAAE,GACPtX,WAAY,SACZsE,cAAe,CAAC,SAAS,OACzBrE,eAAgB,iBAGd9D,KAAKJ,MAAMopB,iBAAiBjY,IAAI,SAACxF,EAAE7E,GAAH,OAC9BsB,EAAA5G,EAAAC,cAAC4G,EAAA,EAADxE,OAAAC,OAAA,GACM6H,EAAEmP,UADR,CAEEvS,cAAe,SACfa,IAAG,mBAAAyK,OAAqB/M,KAExBsB,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTC,GAAG,CAAC,EAAE,GACNlB,GAAG,CAAC,EAAE,KAGRF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,UAGdyH,EAAErL,MAAMwJ,SAAW6B,EAAErL,MAAMwJ,SACzB1B,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE2d,WAAY,EACZ5iB,WAAY,CAAC,EAAE,GACfN,MAAO,YACPE,WAAY,UACZQ,SAAU,CAAC,EAAE,SACbyF,wBAAyB,CAAEC,OAAQyC,EAAErL,MAAMyE,SAKjDqD,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJnY,WAAY,EACZI,SAAU,CAAC,EAAE,GACbV,MAAO,YAEN6I,EAAErL,MAAM2c,aAS3B7U,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTE,GAAG,EACHD,GAAG,IAGLpB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsZ,GAAI,CAAC,EAAE,GACP3R,GAAI,kBAEJlB,EAAA5G,EAAAC,cAACiiC,GAAD7/B,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEE0qB,YAAa,IACbzS,SAAU,iBACV2S,iBAAkB9qB,KAAKD,cAAcgrB,oBAAoB,MAAM,OAGnE/iB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP4G,cAAe,CAAC,SAAS,QAEzBH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,CAAC,EAAE,GACP3G,MAAO,CAAC,EAAE,IACVsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,cAEhBkE,EAAA5G,EAAAC,cAAC0lB,EAAA,EAAD,CACE7e,GAAI,EACJ9E,SAAU,CAAC,EAAE,GACb4nB,UAAWC,IAAQC,IAHrB,aAOAljB,EAAA5G,EAAAC,cAACopB,EAAA,EAADhnB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEma,MAAOra,KAAKE,MAAM6E,cAClB2lB,UAAW,CACTrY,KAAK,kBACLnS,MAAM,CACJwB,SAAS,EACTypB,aAAa,EACbnoB,WAAW,IACXI,SAAS,CAAC,QAAQ,SAClBV,MAAMG,IAAMoK,OAAOlK,QACnB2X,UAAU,CACR5W,eAAe,gBAMzBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,CAAC,EAAE,GACP3G,MAAO,CAAC,EAAE,IACVsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,cAEhBkE,EAAA5G,EAAAC,cAAC0lB,EAAA,EAAD,CACE7e,GAAI,EACJ9E,SAAU,CAAC,EAAE,GACb4nB,UAAWC,IAAQC,IAHrB,cAOAljB,EAAA5G,EAAAC,cAACopB,EAAA,EAADhnB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEma,MAAOra,KAAKE,MAAM6E,cAClB2lB,UAAW,CACTrY,KAAK,gCACLnS,MAAM,CACJwB,SAAS,EACTypB,aAAa,EACb5oB,MAAM,CACJS,WAAW,IACXN,MAAMG,IAAMoK,OAAOlK,QACnBK,SAAUpD,KAAKE,MAAMiD,SAAW,QAAU,SAE5CuX,UAAU,CACR5W,eAAe,eAKvBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP4Z,GAAI,QAEJnT,EAAA5G,EAAAC,cAACopB,EAAA,EAADhnB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEma,MAAOra,KAAKE,MAAM6E,cAClB2lB,UAAW,CACTrY,KAAK,oBACLnS,MAAM,CACJkD,SAAS,EACTJ,WAAW,EACXN,MAAM,WACNgY,UAAU,CACR5W,eAAe,iBAO3BkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,CAAC,EAAE,GACP3G,MAAO,CAAC,EAAE,IACVsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,cAEhBkE,EAAA5G,EAAAC,cAAC0lB,EAAA,EAAD,CACE7e,GAAI,EACJ9E,SAAU,CAAC,EAAE,GACb4nB,UAAWC,IAAQC,IAHrB,YAOAljB,EAAA5G,EAAAC,cAACopB,EAAA,EAADhnB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEma,MAAOra,KAAKE,MAAM6E,cAClB2lB,UAAW,CACTrY,KAAK,uBACLnS,MAAM,CACJwB,SAAS,EACTypB,aAAa,EACb5oB,MAAM,CACJS,WAAW,IACXI,SAASpD,KAAKE,MAAMiD,SAAW,QAAU,QACzCT,MAAMG,IAAMoK,OAAOlK,SAErB2X,UAAU,CACR5W,eAAe,gBA4CzBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,CAAC,EAAE,GACP3G,MAAO,CAAC,EAAE,IACVsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,cAEhBkE,EAAA5G,EAAAC,cAAC0lB,EAAA,EAAD,CACE7e,GAAI,EACJ9E,SAAU,CAAC,EAAE,GACb4nB,UAAWC,IAAQC,IAHrB,eAOAljB,EAAA5G,EAAAC,cAACopB,EAAA,EAADhnB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEma,MAAOra,KAAKE,MAAM6E,cAClB2lB,UAAW,CACTrY,KAAK,WACLnS,MAAM,CACJwB,SAAS,EACTsB,WAAW,IACXI,SAAS,CAAC,QAAQ,SAClBV,MAAMG,IAAMoK,OAAOlK,QACnB2X,UAAU,CACR5W,eAAe,gBAMzBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,CAAC,EAAE,GACP3G,MAAO,CAAC,EAAE,IACVsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,cAEhBkE,EAAA5G,EAAAC,cAAC0lB,EAAA,EAAD,CACE7e,GAAI,EACJ9E,SAAU,CAAC,EAAE,GACb4nB,UAAWC,IAAQC,IAHrB,gBAOAljB,EAAA5G,EAAAC,cAACopB,EAAA,EAADhnB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEma,MAAOra,KAAKE,MAAM6E,cAClB2lB,UAAW,CACTrY,KAAK,mBACLnS,MAAM,CACJwB,SAAS,EACTsB,WAAW,IACXI,SAAS,CAAC,QAAQ,SAClBV,MAAMG,IAAMoK,OAAOlK,QACnB2X,UAAU,CACR5W,eAAe,0BAncJE,aCyoClBo6B,8MAloCbx+B,MAAQ,CACN4rB,WAAW,GACXjT,WAAW,GACX8lB,UAAU,KACVlM,UAAU,KACVC,WAAW,KACXjlB,OAAO,UACPmlB,YAAY,KACZzqB,YAAY,KACZwtB,aAAa,KACb7C,cAAc,KACdztB,cAAc,KACdue,gBAAgB,GAChBigB,cAAc,KACdC,eAAe,KACf7X,gBAAe,EACf4B,gBAAgB,KAChB8R,gBAAgB,KAChB/J,iBAAiB,KACjBrI,iBAAiB,KACjBgP,iBAAiB,KACjBwH,iBAAiB,KACjB3X,iBAAiB,KACjBI,mBAAmB,GACnB4N,kBAAkB,KAClB7G,kBAAiB,EACjBlH,kBAAkB,KAClBC,kBAAkB,KAClBC,kBAAkB,KAClBuB,kBAAkB,KAClBrB,oBAAoB,GACpBuX,qBAAqB,GACrBxH,oBAAoB,KACpB9P,qBAAoB,EACpBkI,qBAAqB,QAIvBv0B,cAAgB,OAUhBk0B,WAAa,WACXnvB,EAAK7D,SAAS,CACZqxB,YAAa,UAIjB4B,eAAiB,SAAA5B,GACfxtB,EAAK7D,SAAS,CACZqxB,mBAIJhG,oBAAsB,SAACF,GACrBtnB,EAAK7D,SAAS,CACZmrB,2BAIJuX,gBAAkB,SAAC5+B,GACjB,IAAMkpB,EAAcnpB,EAAK/E,cAAcwkB,gBAAgB,CAAC,UACxDzf,EAAK5E,MAAM8kB,YAAX,GAAAvR,OAA0Bwa,EAAYjQ,OAAOoK,MAA7C,KAAA3U,OAAsD1O,OAQxD6+B,uDAAmB,SAAA3sB,EAAOlS,GAAP,IAAAue,EAAAogB,EAAA5X,EAAAjkB,EAAA,OAAAL,EAAApG,EAAAqG,KAAA,SAAA4P,GAAA,cAAAA,EAAA1P,KAAA0P,EAAAzP,MAAA,OACX0b,EAAkBxe,EAAK/E,cAAcuuB,0BACrCoV,EAAuB5+B,EAAK/E,cAAcwkB,gBAAgB,CAAC,QAAQ,oBACnEuH,EAAmB4X,EAAqB3+B,GACxC8C,EAAcyb,EAAgBwI,EAAiB+X,WACrD/+B,EAAK7D,SAAS,CACZ4G,cACA9C,gBACAue,kBACAwI,qBATe,wBAAAzU,EAAAG,SAAAP,EAAAjX,iEAanB4+B,oCAAiB,SAAAhoB,IAAA,IAAA8sB,EAAA3+B,EAAAqX,EAAAkH,EAAAwI,EAAAjkB,EAAAkM,EAAAM,EAAAovB,EAAA1X,EAAAC,EAAAsI,EAAAhgB,EAAAmC,EAAA,OAAAjP,EAAApG,EAAAqG,KAAA,SAAAsP,GAAA,cAAAA,EAAApP,KAAAoP,EAAAnP,MAAA,UAET87B,EAAuB5+B,EAAK/E,cAAcwkB,gBAAgB,CAAC,QAAQ,oBACzEzf,EAAK7D,SAAS,CACZyiC,2BAGI3+B,EAAgBD,EAAKg/B,qBAEN/+B,IAAkBD,EAAK5E,MAAM6jC,UAAUC,OAT7C,CAAAjtB,EAAAnP,KAAA,gBAUb9C,EAAK6+B,gBAAgB5+B,GAVRgS,EAAAnP,KAAA,EAWA9C,EAAK8+B,iBAAiB7+B,GAXtB,cAAAgS,EAAAhP,OAAA,SAAAgP,EAAA6B,MAAA,WAYJ7T,IAAkBD,EAAKlF,MAAMmF,cAZzB,CAAAgS,EAAAnP,KAAA,gBAAAmP,EAAAnP,KAAA,GAaP9C,EAAK8+B,iBAAiB7+B,GAbf,eAgBTqX,EAhBS3Y,OAAAyW,EAAA,EAAAzW,CAAA,GAgBMqB,EAAKlF,OAEpB0jB,EAAkBxe,EAAK/E,cAAcuuB,0BAEvClS,EAASrX,gBAAkBA,IAC7BqX,EAASrX,cAAgBA,GAGrB+mB,EAAmB4X,EAAqB3+B,GACxC8C,EAAcyb,EAAgBwI,EAAiB+X,WAzBtC9sB,EAAAnP,KAAA,GAgCLgiB,QAAQC,IAAI,CACpB/kB,EAAK/E,cAAckkC,sBACnBn/B,EAAK/E,cAAcmuB,uBACnBppB,EAAK/E,cAAcouB,uBACnBrpB,EAAK/E,cAAcm1B,4BApCN,WAAAnhB,EAAAgD,EAAA6B,KAAAvE,EAAA5Q,OAAA2xB,EAAA,EAAA3xB,CAAAsQ,EAAA,GA4Bb0vB,EA5BapvB,EAAA,GA6Bb0X,EA7Ba1X,EAAA,GA8Bb2X,EA9Ba3X,EAAA,GA+BbigB,EA/BajgB,EAAA,GAuCf+H,EAASqnB,iBAAmBA,EAC5BrnB,EAAS2P,kBAAoBA,EAC7B3P,EAAS4P,kBAAoBA,EAC7B5P,EAASkY,qBAAuBA,EAEhClY,EAASkH,gBAAkBA,EAIK,GACRve,GAAiB8C,EAEzCuU,EAASvU,YAAcA,EACvBuU,EAAS0P,iBAAmBA,GAExBhnB,EAAK5E,MAAMqa,QAtDA,CAAAxD,EAAAnP,KAAA,gBAAAmP,EAAAnP,KAAA,GA+DHgiB,QAAQC,IAAI,CACpB/kB,EAAK/E,cAAcutB,qBACnBxoB,EAAK/E,cAAcquB,uBACnBtpB,EAAK/E,cAAcw+B,aAAa12B,GAChC/C,EAAK/E,cAAc0+B,iBAAiB52B,EAAY/C,EAAK5E,MAAMqa,SAC3DzV,EAAK/E,cAAcy+B,gBAAgBz5B,EAAcD,EAAK5E,MAAMqa,SAC5DzV,EAAK/E,cAAcy+B,gBAAgB32B,EAAY0M,KAAK8F,MAAMvV,EAAK5E,MAAMqa,SACrEzV,EAAK/E,cAAc20B,mBAAmB3vB,EAAcuvB,EAAqB3iB,QAAQ7M,EAAK5E,MAAMqa,WAtEjF,QAAAjG,EAAAyC,EAAA6B,KAAAnC,EAAAhT,OAAA2xB,EAAA,EAAA3xB,CAAA6Q,EAAA,GAwDX8H,EAASmR,gBAxDE9W,EAAA,GAyDX2F,EAAS6P,kBAzDExV,EAAA,GA0DX2F,EAAS8f,oBA1DEzlB,EAAA,GA2DX2F,EAASiiB,UA3DE5nB,EAAA,GA4DX2F,EAASiZ,aA5DE5e,EAAA,GA6DX2F,EAASkZ,iBA7DE7e,EAAA,GA8DX2F,EAASoW,cA9DE/b,EAAA,GA0Eb2F,EAAS7D,WAAa,CACpB9K,OAAO,CACLgL,OAAO,KACPH,SAAQ,GAEVlL,QAAQ,CACNqL,OAAO,KACPH,SAAQ,GAEVsc,QAAQ,CACNnc,OAAO,KACPH,SAAQ,IAGZ8D,EAASoP,WAAa,CACpB/d,OAAO,KACPL,QAAQ,MAEVgP,EAAS+P,oBAAsB,CAC7B1e,OAAO,KACPL,QAAQ,MAGVgP,EAAS6W,kBAAmB,EAC5B7W,EAASonB,eAAiBpnB,EAASiZ,aACnCjZ,EAASmnB,cAAgBnnB,EAASoR,kBAClCpR,EAAS0d,kBAAoBjyB,EAAYiyB,kBACzC1d,EAAS+V,UAAY/V,EAAS6P,mBAAqB7P,EAAS6P,kBAAkB3B,GAAG,GACjFlO,EAASgW,WAAahW,EAASkZ,kBAAoBlZ,EAASkZ,iBAAiBhL,GAAG,GAChFlO,EAASoR,kBAAoBpR,EAAS6P,kBAAoB7P,EAAS6P,kBAAkBlrB,MAAMqb,EAASmR,iBAAmBzoB,EAAK/E,cAAc8R,MAAM,GAvGnI,QA0Gf/M,EAAK7D,SAASmb,GA1GC,yBAAArF,EAAAS,SAAAZ,EAAA5W,WAwKjBkkC,yCAAsB,SAAAj/B,IAAA,IAAAmX,EAAAvU,EAAA,OAAAL,EAAApG,EAAAqG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACdwU,EAAW,GADG1U,EAAAuC,GAEZnF,EAAKlF,MAAMuN,OAFCzF,EAAAE,KAGb,YAHaF,EAAAuC,GAAA,EAMb,WANavC,EAAAuC,GAAA,yBAIhBnF,EAAK85B,iBAJWl3B,EAAAK,OAAA,0BAQVF,EAAc/C,EAAK/E,cAAcwkB,gBAAgB,CAAC,QAAQ,iBAChEnI,EAASsnB,qBAAuB,GAChCtnB,EAAS0P,iBAAmBjkB,EAC5BuU,EAASrX,cAAgB8C,EAAYwS,MACrC+B,EAASsnB,qBAAqB77B,EAAYwS,OAASxS,EAZnCH,EAAAK,OAAA,2BAAAL,EAAAK,OAAA,oBAkBpBjD,EAAK7D,SAASmb,GAlBM,yBAAA1U,EAAA8P,SAAAvS,EAAAjF,WAqBtB03B,uBAAyB,WACvB,OAA0D,OAAtD5yB,EAAKlF,MAAMusB,oBAAoBrnB,EAAKlF,MAAMuN,SAGvCrI,EAAK/E,cAAc8R,MAAM/M,EAAKlF,MAAMusB,oBAAoBrnB,EAAKlF,MAAMuN,SAASnM,IAAI,QAGzF0rB,uBAAyB,SAACoD,GACxB,IAAKhrB,EAAKlF,MAAMuN,OACd,OAAO,EAETrI,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5B4rB,oBAAoB1oB,OAAAyW,EAAA,EAAAzW,CAAA,GACflD,EAAU4rB,oBADI1oB,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEhBqB,EAAKlF,MAAMuN,OAAS2iB,UAK3BpC,cAAgB,WACd,IAAK5oB,EAAKlF,MAAMuN,QAAgE,OAAtDrI,EAAKlF,MAAMusB,oBAAoBrnB,EAAKlF,MAAMuN,QAClE,OAAO,EAGT,IAAM6gB,EAAqBlpB,EAAK/E,cAAc8R,MAAM/M,EAAKlF,MAAMusB,oBAAoBrnB,EAAKlF,MAAMuN,SAASnM,IAAI,KACvGwrB,EAAS,KAEb,OAAO1nB,EAAKlF,MAAMuN,QAChB,IAAK,UACHqf,EAAS1nB,EAAKlF,MAAMy1B,aAAevwB,EAAK/E,cAAc8R,MAAM/M,EAAKlF,MAAMy1B,cAAct0B,MAAMitB,GAAsB,KACnH,MACA,IAAK,SAEDxB,EADE1nB,EAAKlF,MAAMwsB,oBACJtnB,EAAKlF,MAAMqsB,kBAAoBnnB,EAAK/E,cAAc8R,MAAM/M,EAAKlF,MAAMqsB,mBAAmBlrB,MAAMitB,GAAsB,KAElHlpB,EAAKlF,MAAM4tB,kBAAoB1oB,EAAK/E,cAAc8R,MAAM/M,EAAKlF,MAAM4tB,mBAAmBzsB,MAAMitB,GAAsB,KAOjIlpB,EAAKynB,oBAAoBC,GAEzB1nB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BirB,WAAW/nB,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUirB,WADL/nB,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEPqB,EAAKlF,MAAMuN,OAASqf,UAK3BC,iBAAmB,SAAC5T,GAClB,IAAK/T,EAAKlF,MAAMuN,OACd,OAAO,EAGT,IAAMqf,EAAS3T,EAAEmD,OAAOrX,MAAMgF,SAAWgL,MAAMkE,EAAEmD,OAAOrX,OAASG,EAAK/E,cAAc8R,MAAMgH,EAAEmD,OAAOrX,OAASG,EAAK/E,cAAc8R,MAAM,GACrI/M,EAAKynB,oBAAoBC,GAEzB1nB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5B4rB,oBAAoB1oB,OAAAyW,EAAA,EAAAzW,CAAA,GACflD,EAAU4rB,oBADI1oB,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEhBqB,EAAKlF,MAAMuN,OAAS,OAEvBqe,WAAW/nB,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUirB,WADL/nB,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEPqB,EAAKlF,MAAMuN,OAASqf,UAK3BD,oBAAsB,WAAiB,IAAhBC,EAAgB7U,UAAAhO,OAAA,QAAA2I,IAAAqF,UAAA,GAAAA,UAAA,GAAT,KAE5B,IAAK7S,EAAKlF,MAAMuN,OACd,OAAO,EAGJqf,IACHA,EAAS1nB,EAAKlF,MAAM4rB,WAAW1mB,EAAKlF,MAAMuN,SAG5C,IAAIwe,GAAiB,EAErB,OAAQ7mB,EAAKlF,MAAMuN,QACjB,IAAK,UACHwe,EAAiBA,GAAmBa,GAAUA,EAAOlC,GAAGxlB,EAAKlF,MAAMy1B,cACrE,MACA,IAAK,SAED1J,EADE7mB,EAAKlF,MAAMwsB,qBACKtnB,EAAKlF,MAAMuyB,WAAcxG,GAAmBa,GAAUA,EAAOlC,GAAGxlB,EAAKlF,MAAMqsB,oBAE3EnnB,EAAKlF,MAAMuyB,WAAcxG,GAAmBa,GAAUA,EAAOlC,GAAGxlB,EAAKlF,MAAM4tB,mBAOnG1oB,EAAK7D,SAAS,CACZ0qB,sBAIJvN,uCAAoB,SAAA0W,IAAA,OAAAttB,EAAApG,EAAAqG,KAAA,SAAAutB,GAAA,cAAAA,EAAArtB,KAAAqtB,EAAAptB,MAAA,OAClB9C,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL9U,OAAAmyB,EAAA,EAAAnyB,CAAA,CAERmxB,QAAQ,CACNnc,OAAO,KACPH,SAAQ,IAETxT,EAAKlF,MAAMuN,OAAQ,CAClBsL,OAAO,KACPH,SAAQ,QAVI,wBAAA0c,EAAAxd,SAAAsd,EAAA90B,WAgBpB20B,kCAAe,SAAAe,IAAA,IAAAlD,EAAA4B,EAAAC,EAAA,OAAA7sB,EAAApG,EAAAqG,KAAA,SAAAkuB,GAAA,cAAAA,EAAAhuB,KAAAguB,EAAA/tB,MAAA,YAGP4qB,EAAgB1tB,EAAKlF,MAAM4yB,eAHpB,CAAAmD,EAAA/tB,KAAA,eAAA+tB,EAAA5tB,OAAA,SAMJjD,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CACnCiyB,gBACAja,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL,CAERqc,QAAQ,CACNnc,OAAO,KACPH,SAAQ,SAZH,OAkBP8b,EAAkB,SAACnb,EAAGC,GAE1B,IAAMC,EAAY,CAChBC,cAAe,UACfC,YAAavU,EAAKlF,MAAMmF,cACxBuU,WAAYL,EAAGM,QAGbL,IACFC,EAAUG,WAAaxU,EAAK/E,cAAcyZ,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUI,SACrBzU,EAAK/E,cAAc0Z,yBAAyBN,GAG9CrU,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BiyB,cAA8B,YAAdvZ,EAAGM,OACnBhB,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL,CAERqc,QAAQ,CACNnc,OAAO,KACPH,SAAQ,SAMV+b,EAAyB,SAACpb,GAC9B,IAAMR,EAASQ,EAAGkB,gBAClBrV,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL,CAERqc,QAAQnxB,OAAAyW,EAAA,EAAAzW,CAAA,GACHlD,EAAUgY,WAAV,QADE,CAELE,iBAMR3T,EAAK/E,cAAcy0B,YAAY1vB,EAAKlF,MAAMmF,cAAcD,EAAKlF,MAAM00B,qBAAqB3iB,QAAQyiB,EAAgBC,GAEhHvvB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL,CAERqc,QAAQ,CACNnc,OAAO,KACPH,SAAQ,QAnED,wBAAAqd,EAAAne,SAAAke,EAAA11B,WAyEf61B,mCAAgB,SAAAC,IAAA,IAAAC,EAAAvK,EAAAwC,EAAA1V,EAAA6d,EAAAH,EAAAC,EAAAG,EAAAC,EAAAC,EAAA6N,EAAA5W,EAAAgB,EAAAG,EAAAC,EAAAC,EAAA9Q,EAAA,OAAAtW,EAAApG,EAAAqG,KAAA,SAAAgwB,GAAA,cAAAA,EAAA9vB,KAAA8vB,EAAA7vB,MAAA,OAEVmuB,EAAqB,KACnBvK,EAAa1mB,EAAKlF,MAAM4rB,WAAW1mB,EAAKlF,MAAMuN,QAC9C6gB,EAAqBlpB,EAAK4yB,yBAE5Bpf,GAAU,EANAmf,EAAAxtB,GAQNnF,EAAKlF,MAAMuN,OARLsqB,EAAA7vB,KAUP,YAVO6vB,EAAAxtB,GAAA,EA4FP,WA5FOwtB,EAAAxtB,GAAA,uBAYNnF,EAAKlF,MAAM+rB,gBAAmBH,IAAc1mB,EAAK/E,cAAc8R,MAAM2Z,GAAYsB,IAAI,GAZ/E,CAAA2K,EAAA7vB,KAAA,eAAA6vB,EAAA1vB,OAAA,UAaD,GAbC,cAgBJouB,EAAkBrxB,EAAK/E,cAAcitB,qBAAqBxB,EAAW1mB,EAAKlF,MAAMmsB,kBAAkBrqB,UAElGs0B,EAAkB,SAAC/c,EAAGC,IAErBD,GAAMC,IACTD,EAAK,CACHM,OAAO,UAIX,IAAMyY,EAAwB,UAAd/Y,EAAGM,OACbiV,EAA4B,YAAdvV,EAAGM,OAEjBJ,EAAY,CAChBC,cAAe,UACfC,YAAavU,EAAKlF,MAAMmF,cACxBuU,WAAYL,EAAGM,OACfkV,WAAY7pB,SAAS4mB,IAGnBtS,IACFC,EAAUG,WAAaxU,EAAK/E,cAAcyZ,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUI,SACrBzU,EAAK/E,cAAc0Z,yBAAyBN,GAG9CrU,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL9U,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEPqB,EAAKlF,MAAMuN,OAAQ,CAClBsL,OAAO,KACPH,SAAQ,QAKVkW,EACF1pB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5B+xB,YAAY,QACZ9G,WAAW/nB,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUirB,WADL/nB,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEPqB,EAAKlF,MAAMuN,OAASrI,EAAK/E,cAAc8R,MAAM,QAGzC/M,EAAKlF,MAAM2zB,yBAA2BvB,GAC/CltB,EAAK7D,SAAS,CACZ+wB,QAAQvuB,OAAAmyB,EAAA,EAAAnyB,CAAA,GACLqB,EAAKlF,MAAMuN,QAAS,MAMvB8oB,EAAyB,SAAChd,GAC9B,IAAMR,EAASQ,EAAGkB,gBAClBrV,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL9U,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEPqB,EAAKlF,MAAMuN,OAFJ1J,OAAAyW,EAAA,EAAAzW,CAAA,GAGHlD,EAAUgY,WAAWzT,EAAKlF,MAAMuN,QAH7B,CAINsL,iBA/EEgf,EAAA7vB,KAAA,GAqFY9C,EAAK/E,cAAci4B,gBAAgBlzB,EAAKlF,MAAMiI,YAAY0M,KAAK8F,MAAM8b,GArFjF,eAqFJC,EArFIqB,EAAA7e,KAAA6e,EAAA7vB,KAAA,GAsFkB9C,EAAK/E,cAAc24B,oBAAoB5zB,EAAKlF,MAAMosB,kBAAkB3Z,KAAK,oBAAoB,CAAC+jB,GAAQ,IAtFxH,eAsFJC,EAtFIoB,EAAA7e,KAuFJ0d,EAAgB,CAACF,EAAQC,GAvFrBoB,EAAA7vB,KAAA,GA0FiB9C,EAAK5E,MAAMka,0BAA0BtV,EAAKlF,MAAM00B,qBAAqBjiB,KAAM,gBAAiBikB,EAAe,KAAMN,EAAiBC,GA1FnJ,eA0FVF,EA1FU0B,EAAA7e,KAAA6e,EAAA1vB,OAAA,wBA8FNjD,EAAKlF,MAAM+rB,gBAAmBH,IAAc1mB,EAAK/E,cAAc8R,MAAM2Z,GAAYsB,IAAI,GA9F/E,CAAA2K,EAAA7vB,KAAA,gBAAA6vB,EAAA1vB,OAAA,UA+FD,GA/FC,WAkGNo8B,EAAsB,MACtBnW,EAnGM,CAAAyJ,EAAA7vB,KAAA,SAoGRu8B,EAAsBr/B,EAAK/E,cAAc8R,MAAM/M,EAAKlF,MAAMqsB,mBAAmBlrB,MAAMitB,GApG3EyJ,EAAA7vB,KAAA,oBAsGRu8B,EAAsBr/B,EAAK/E,cAAc8R,MAAM/M,EAAK/E,cAAcitB,qBAAqBxB,EAAW1mB,EAAKlF,MAAMmsB,kBAAkBrqB,WAC1HoD,EAAKlF,MAAMwsB,oBAvGR,CAAAqL,EAAA7vB,KAAA,gBAAA6vB,EAAA7vB,KAAA,GAwGwB9C,EAAK/E,cAAcutB,qBAxG3C,QAwGAC,EAxGAkK,EAAA7e,KAyGNurB,EAAsBA,EAAoBnjC,IAAIusB,GAzGxC,WA6GL4W,EA7GK,CAAA1M,EAAA7vB,KAAA,gBAAA6vB,EAAA1vB,OAAA,UA8GD,GA9GC,eAiHJwmB,EAAiB,SAACtV,EAAGC,GACzB,IAAMsV,EAA4B,YAAdvV,EAAGM,OAGjBJ,EAAY,CAChBG,WAAYL,EAAGM,OACfH,cAAa,cACbC,YAAavU,EAAKlF,MAAMmF,cACxB0pB,WAAY0V,EAAoBt/B,WAG9BqU,IACFC,EAAUG,WAAaxU,EAAK/E,cAAcyZ,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUI,SACrBzU,EAAK/E,cAAc0Z,yBAAyBN,GAG9CrU,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL9U,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEPqB,EAAKlF,MAAMuN,OAAQ,CAClBsL,OAAO,KACPH,SAAQ,QAKVkW,GACF1pB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BirB,WAAW/nB,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUirB,WADL/nB,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEPqB,EAAKlF,MAAMuN,OAASrI,EAAK/E,cAAc8R,MAAM,SAMhD6c,EAAwB,SAACzV,GAC7B,IAAMR,EAASQ,EAAGkB,gBAClBrV,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL9U,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEPqB,EAAKlF,MAAMuN,OAFJ1J,OAAAyW,EAAA,EAAAzW,CAAA,GAGHlD,EAAUgY,WAAWzT,EAAKlF,MAAMuN,QAH7B,CAINsL,iBAMFkW,EAAU7pB,EAAK/E,cAAcitB,qBAAqBmX,EAAoBr/B,EAAKlF,MAAMmsB,kBAAkBrqB,UAAU0P,WAtKzGqmB,EAAA7vB,KAAA,GAuKc9C,EAAK/E,cAAci4B,gBAAgBlzB,EAAKlF,MAAMiI,YAAY0M,KAAK8F,MAAM,GAvKnF,WAuKNuU,EAvKM6I,EAAA7e,KAyKJkF,EAAehZ,EAAKlF,MAAM00B,qBAAqBjiB,MACjDvN,EAAKlF,MAAMwsB,oBA1KL,CAAAqL,EAAA7vB,KAAA,SA2KRinB,QAAQC,IAAI,6BAA6BhqB,EAAK/E,cAAc8R,MAAM2Z,GAAYpa,WAAWud,EAAQvd,WAAWwd,GAC5G9pB,EAAK5E,MAAMka,0BAA0B0D,EAAc,6BAA8B,CAAC8Q,EAAaD,GAAU,KAAMJ,EAAgBG,GA5KvH+I,EAAA7vB,KAAA,wBAAA6vB,EAAA7vB,KAAA,GA8KY9C,EAAK/E,cAAci4B,gBAAgBlzB,EAAKlF,MAAMiI,YAAY0M,KAAK8F,MAAMsU,GA9KjF,QA8KRC,EA9KQ6I,EAAA7e,KA+KRiW,QAAQC,IAAI,mBAAmBhqB,EAAK/E,cAAc8R,MAAM2Z,GAAYpa,WAAWud,EAAQvd,WAAWwd,GAClG9pB,EAAK5E,MAAMka,0BAA0B0D,EAAc,mBAAoB,CAAC6Q,EAASC,GAAc,KAAML,EAAgBG,GAhL7G,eAAA+I,EAAA1vB,OAAA,2BAoLVuQ,GAAU,EApLAmf,EAAA1vB,OAAA,qBA0La,IAAvBguB,GACFjxB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BgY,WAAW9U,OAAAyW,EAAA,EAAAzW,CAAA,GACNlD,EAAUgY,WADL9U,OAAAmyB,EAAA,EAAAnyB,CAAA,GAEPqB,EAAKlF,MAAMuN,OAFJ1J,OAAAyW,EAAA,EAAAzW,CAAA,GAGHlD,EAAUgY,WAAWzT,EAAKlF,MAAMuN,QAH7B,CAINmL,iBAhMM,yBAAAmf,EAAAjgB,SAAAse,EAAA91B,WAuMhB24B,UAAY,SAACxrB,GACX,OAAQA,EAAOuE,eACb,IAAK,UAEL,MACA,IAAK,SACE5M,EAAKlF,MAAMuyB,YACdhlB,EAAS,MAEb,MACA,QACEA,EAAS,KAIE,OAAXA,GACFrI,EAAK7D,SAAS,CACZkM,uFAtoBAnN,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,kDA4B9C,IAAMwjC,EAAuB1jC,KAAKD,cAAcwkB,gBAAgB,CAAC,QAAQ,oBACzE,OAAOvkB,KAAKE,MAAM6jC,UAAUC,QAAUN,EAAqB1jC,KAAKE,MAAM6jC,UAAUC,QAAUhkC,KAAKE,MAAM6jC,UAAUC,OAASvgC,OAAOiC,KAAKg+B,GAAsB,+JA8H1J1jC,KAAKI,qBACCJ,KAAK4+B,qRAILpS,EAASxsB,KAAKJ,MAAM4rB,WAAWxrB,KAAKJ,MAAMuN,QAAUnN,KAAKD,cAAc8R,MAAM7R,KAAKJ,MAAM4rB,WAAWxrB,KAAKJ,MAAMuN,SAAW,QAEhHqf,EAAOM,IAAI,6CACjB,UAGHC,EAAmB/sB,KAAKD,cAAcitB,qBAAqBR,EAAOxsB,KAAKJ,MAAMmsB,kBAAkBrqB,UAC/F0a,EAAW,QAETpc,KAAKJ,MAAMuN,cACZ,mBAIA,0CAHHiP,EAASonB,eAAiBhX,YACOxsB,KAAKD,cAAcstB,iBAAiBrtB,KAAKJ,MAAMiI,YAAY0M,KAAK8F,MAAM0S,GAAiB,kBAAxH3Q,EAASijB,2DAGTjjB,EAASmnB,cAAgB/W,YACSxsB,KAAKD,cAAcstB,iBAAiBrtB,KAAKJ,MAAMiI,YAAY0M,KAAK8F,MAAM0S,GAAiB,kBAAzH3Q,EAAS6Q,yFAObjtB,KAAKiB,SAASmb,yLAGS9b,EAAWC,sFAClCP,KAAKI,YACCka,EAAiBha,EAAUia,UAAYva,KAAKE,MAAMqa,QAClDxC,EAAezX,EAAUyjC,UAAUC,SAAWhkC,KAAKE,MAAM6jC,UAAUC,OACnEnF,EAAsBv+B,EAAU4M,cAAgBlN,KAAKE,MAAMgN,cAAgBzJ,OAAO4H,OAAO/K,EAAU4M,cAAc5B,OAAO,SAAA2N,GAAE,MAAiB,YAAZA,EAAGM,SAAqB5P,SAAWlG,OAAO4H,OAAOrL,KAAKE,MAAMgN,cAAc5B,OAAO,SAAA2N,GAAE,MAAiB,YAAZA,EAAGM,SAAqB5P,SAEjP2Q,GAAkBukB,GAAuB9mB,mCACrC/X,KAAK4+B,wBAGPlF,EAAgB15B,KAAKJ,MAAMuN,SAAW5M,EAAU4M,OAChDsgB,EAA6BztB,KAAKJ,MAAMwsB,sBAAwB7rB,EAAU6rB,oBAC1EuN,EAA6B35B,KAAKJ,MAAMusB,oBAAoBnsB,KAAKJ,MAAMuN,UAAY5M,EAAU4rB,oBAAoBnsB,KAAKJ,MAAMuN,SAC9HusB,GAAiBC,GAA8BlM,IACjDztB,KAAK0tB,gBAGHgM,GACF15B,KAAKkkC,sBAGc3jC,EAAUirB,WAAWxrB,KAAKJ,MAAMuN,UAAYnN,KAAKJ,MAAM4rB,WAAWxrB,KAAKJ,MAAMuN,SAEhGnN,KAAK8tB,2JAubD,IAAA5sB,EAAAlB,KAEA8+B,EAAe9+B,KAAKE,MAAMqa,SAAWva,KAAKJ,MAAMqsB,mBAAqBjsB,KAAKD,cAAc8R,MAAM7R,KAAKJ,MAAMqsB,mBAAmB3B,GAAG,GAGrI,OACEtiB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,GAEPyG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP2G,GAAI,CAAC,EAAE,GACPrE,WAAY,SACZsE,cAAe,MACfrE,eAAgB,cAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,IAGLyG,EAAA5G,EAAAC,cAACyjB,EAAA,EAADrhB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEiD,SAAUnD,KAAKE,MAAMiD,SACrB8hB,KAAM,CAAC,QAAQjlB,KAAKJ,MAAMmF,eAC1BwW,YAAc,SAAA1C,GAAC,OAAI3X,EAAKhB,MAAM8kB,YAAY,SAC1CxV,KAAMxP,KAAKD,cAAcwkB,gBAAgB,CAAC,aAAa,OAAO,eAKtEvc,EAAA5G,EAAAC,cAAC0lB,EAAA,EAAD,CACE7e,GAAI,CAAC,EAAE,IADT,cAKAF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,GAEPyG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZsE,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,CAAC,EAAE,KACVsC,WAAY,UACZsE,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,GAEPyG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,GADN,sBAKAF,EAAA5G,EAAAC,cAACgkB,EAAA,EAAD5hB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEgJ,GAAI,aACJ8T,SAAUhd,KAAK2jC,gBACf5+B,cAAe/E,KAAKJ,MAAMmF,cAC1B8C,YAAa7H,KAAKJ,MAAMksB,iBACxB0D,YAAmC,YAAtBxvB,KAAKJ,MAAMuN,OACxBmW,gBAAiBtjB,KAAKJ,MAAM8jC,yBAGhC17B,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,GAIHyG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJhT,cAAe,UAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,GADN,sBAKAF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEpE,WAAY,SACZsE,cAAe,MACfrE,eAAgB,iBAEhBkE,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTkI,EAAE,CAAC,EAAE,GACL9P,MAAM,IACNwuB,YAAY,WACV7uB,EAAKy3B,UAAU,aAGnBrT,eAAe,EACfqC,SAAiC,YAAtB3nB,KAAKJ,MAAMuN,QAEtBnF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEuV,GAAI,EACJ3Z,WAAY,SACZsE,cAAe,MACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAACo6B,GAAA,EAAD,CACEC,YAAa,CACXvuB,OAAO,WAETud,UAAW,CACTrY,KAAK,OACLnS,MAAM,CACJqI,GAAG,CAAC,EAAE,OAIZP,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE7E,SAAU,EACVJ,WAAY,GAFd,aAQJgF,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTkI,EAAE,CAAC,EAAE,GACL9P,MAAM,IACNwuB,YAAY,WACV7uB,EAAKy3B,UAAU,YAGnBrT,eAAe,EACfqW,YAAc37B,KAAKJ,MAAMuyB,UACzBxK,SAAiC,WAAtB3nB,KAAKJ,MAAMuN,QAEtBnF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEuV,GAAI,EACJ3Z,WAAY,SACZsE,cAAe,MACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAACo6B,GAAA,EAAD,CACEC,YAAa,CACXvuB,OAAO,UAETud,UAAW,CACTrY,KAAK,OACLnS,MAAM,CACJqI,GAAG,CAAC,EAAE,OAIZP,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE7E,SAAU,EACVJ,WAAY,GAFd,gBAiChBgF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP4Z,GAAKnb,KAAKE,MAAMqa,QAAU,EAAI,GAGR,YAAtBva,KAAKJ,MAAMuN,OACTnF,EAAA5G,EAAAC,cAAC+iC,GAAD3gC,OAAAC,OAAA,GACM1D,KAAKE,MACLF,KAAKJ,QAEa,WAAtBI,KAAKJ,MAAMuN,QACbnF,EAAA5G,EAAAC,cAACi7B,GAAD74B,OAAAC,OAAA,GACM1D,KAAKE,MACLF,KAAKJ,WAQjBk/B,GACE92B,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,CAAC,EAAE,GACP3G,MAAO,EACP4G,cAAe,SACfe,GAAI,4BAEJlB,EAAA5G,EAAAC,cAAC0lB,EAAA,EAAD,CAAOvJ,GAAI,CAAC,EAAE,IAAd,kBACAxV,EAAA5G,EAAAC,cAACgjC,GAAD5gC,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEm+B,UAAWr+B,KAAKJ,MAAMy+B,UACtBx2B,YAAa7H,KAAKJ,MAAMiI,YACxB9C,cAAe/E,KAAKJ,MAAMmF,cAC1Bue,gBAAiBtjB,KAAKJ,MAAM0jB,gBAC5BqB,cAAelhB,OAAOiC,KAAK1F,KAAKJ,MAAM0jB,qBAyH9CtjB,KAAKE,MAAMqa,SACTvS,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,CAAC,EAAE,GACP3G,MAAO,EACP4G,cAAe,SACfe,GAAI,0BAEJlB,EAAA5G,EAAAC,cAAC0lB,EAAA,EAAD,CAAOvJ,GAAI,CAAC,EAAE,IAAd,gBACAxV,EAAA5G,EAAAC,cAAC89B,GAAA,EAAD17B,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEojB,gBAAiBtjB,KAAKJ,MAAM0jB,gBAC5BqB,cAAelhB,OAAOiC,KAAK1F,KAAKJ,MAAM0jB,iBACtCghB,eAAgB,CAAC,UAAU,WAAW,aAAa,cAAc,kBAAkB,mBAAmB,iBAAiB,mBACvHpd,KAAM,CACJ,CACErK,MAAO7c,KAAKE,MAAMiD,SAAW,GAAK,OAClCjD,MAAM,CACJqB,MAAM,CAAC,IAAK,MAEd4lB,OAAO,CACL,CACE9U,KAAK,OACLnS,MAAM,CACJqI,GAAG,CAAC,EAAE,KAGV,CACE8J,KAAK,OACL+U,QAAO,KAIb,CACEvK,MAAM,SACNuK,QAAO,EACPlnB,MAAM,CACJqB,MAAM,KAER4lB,OAAO,CACL,CACE9U,KAAK,YAIX,CACEwK,MAAM,OACN3c,MAAM,CACJqB,MAAM,CAAC,IAAK,MAEd4lB,OAAO,CACL,CACE9U,KAAK,UAIX,CACEwK,MAAM,SACN3c,MAAM,CACJqB,MAAM,CAAC,IAAK,KACZuC,eAAe,CAAC,SAAS,eAE3BqjB,OAAO,CACL,CACE9U,KAAK,aACLnS,MAAM,CACJqI,GAAG,CAAC,EAAE,KAGV,CACE6e,QAAO,EACP/U,KAAK,YAIX,CACEwK,MAAM,SACN3c,MAAM,CACJqB,MAAM,KAER4lB,OAAO,CACL,CACE9U,KAAK,YAIX,CACEwK,MAAM,QACN3c,MAAM,CACJqB,MAAM,CAAC,IAAK,IACZuC,eAAe,CAAC,SAAS,eAE3BqjB,OAAO,CACL,CACE9U,KAAK,YACLnS,MAAM,CACJqI,GAAG,CAAC,EAAE,GACNC,OAAO,CAAC,QAAQ,WAGpB,CACE4e,QAAO,EACP/U,KAAK,oBASnBrK,EAAA5G,EAAAC,cAACk7B,EAAA,EAAD94B,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEic,WAAYnc,KAAKi0B,WACjByI,SAAU18B,KAAKJ,MAAMmF,cACrB0X,OAAmC,QAA3Bzc,KAAKJ,MAAM0yB,uBA7nCLtuB,oFCkOTugC,eAnNb,SAAAA,EAAYrkC,GAAO,IAAA4E,EAAA,OAAArB,OAAA+gC,EAAA,EAAA/gC,CAAAzD,KAAAukC,IACjBz/B,EAAArB,OAAAghC,EAAA,EAAAhhC,CAAAzD,KAAAyD,OAAAihC,EAAA,EAAAjhC,CAAA8gC,GAAAI,KAAA3kC,KAAME,KAVRN,MAAQ,CACNglC,MAAM,KACN1rB,OAAM,EACN2rB,YAAW,EACXC,aAAY,GAKKhgC,EAFnB/E,cAAgB,KAEG+E,EAOnBgX,mBAPmBrY,OAAAiT,EAAA,EAAAjT,CAAA+D,EAAApG,EAAAuV,KAOE,SAAAM,IAAA,OAAAzP,EAAApG,EAAAqG,KAAA,SAAA4P,GAAA,cAAAA,EAAA1P,KAAA0P,EAAAzP,MAAA,OACnB9C,EAAK/E,cAAcE,SAAS6E,EAAK5E,OADd,wBAAAmX,EAAAG,SAAAP,EAAAjX,SAPF8E,EAWnBigC,aAAe,WAAoB,IAAnBC,IAAmBrtB,UAAAhO,OAAA,QAAA2I,IAAAqF,UAAA,KAAAA,UAAA,GAC3BstB,EAAiBngC,EAAK/E,cAAc+7B,oBACpCoJ,EAAW,CACfvzB,QAAS7M,EAAK5E,MAAMqa,QACpB4qB,SAAUF,GAGRD,GAAkC,OAArBlgC,EAAKlF,MAAMglC,QAC1BM,EAASN,MAAQ9/B,EAAKlF,MAAMglC,OAG9B9/B,EAAK/E,cAAcqlC,qBAAqBF,IAtBvBpgC,EAyEnBqX,WAzEmB1Y,OAAAiT,EAAA,EAAAjT,CAAA+D,EAAApG,EAAAuV,KAyEN,SAAAC,IAAA,IAAAuF,EAAA,OAAA3U,EAAApG,EAAAqG,KAAA,SAAAsP,GAAA,cAAAA,EAAApP,KAAAoP,EAAAnP,MAAA,OAELuU,EAAa,WACjBrX,EAAK5E,MAAMic,cAGb,IAEErX,EAAKigC,cAAa,GAGdn7B,IAAcunB,UAAUC,OAAOC,OAAO7b,SACxC1Q,EAAK/E,cAAc0Z,yBAAyB,CAC1CL,cAAe,KACfC,YAAa,yBACbC,WAAY,gBACZ6C,GAGFkpB,WAAWlpB,EAAW,MAEtBA,IAEF,MAAOmpB,GACPnpB,IAxBS,wBAAApF,EAAAS,SAAAZ,EAAA5W,SAvEX8E,EAAK/E,cAAgB,IAAII,IAAcD,GACvC4E,EAAKygC,aAAezgC,EAAKygC,aAAaroB,KAAlBzZ,OAAA+hC,GAAA,EAAA/hC,QAAA+hC,GAAA,EAAA/hC,CAAAqB,KACpBA,EAAK2gC,iBAAmB3gC,EAAK2gC,iBAAiBvoB,KAAtBzZ,OAAA+hC,GAAA,EAAA/hC,QAAA+hC,GAAA,EAAA/hC,CAAAqB,KAJPA,4EAyBN+T,GAAG,IAAA3X,EAAAlB,KAGd,GAFA6Y,EAAEG,kBAEGhZ,KAAKJ,MAAMglC,MACd,OAAO,EAGT,IAAM9rB,EAAW,WACf5X,EAAKD,SAAS,CACZ6jC,aAAY,EACZD,YAAW,IAEbnrB,OAAO2rB,WAAWnkC,EAAKhB,MAAMic,WAAW,OAsB1C,GAnBAnc,KAAK+kC,eAGL/kC,KAAKD,cAAc0Z,yBAAyB,CAC1CL,cAAe,KACfC,YAAa,aACbC,WAAY,iBAGdosB,KAAMC,KAAK/7B,IAAcg8B,uBAAuBC,SAAU,CACxDjB,MAAS5kC,KAAKJ,MAAMglC,QACnBkB,KAAK,SAAAzlB,GACNvH,MAEDitB,MAAM,SAAAT,GACLxsB,MAIE6e,aAAa,CACf,IAAMqO,EAAgBhmC,KAAKE,MAAMqa,QAAQ7I,cACrCu0B,EAAYtO,aAAauO,QAAQ,aAAexlC,KAAKylC,MAAMxO,aAAauO,QAAQ,cAAgB,KAChGD,GAAaA,EAAUD,KAAmBC,EAAUD,GAAeI,WACrEH,EAAUD,GAAeI,UAAW,EACpCpmC,KAAKD,cAAc63B,gBAAgB,YAAYl3B,KAAKC,UAAUslC,KAIlEjmC,KAAKiB,SAAS,CACZ6jC,aAAY,6CAgCCjsB,GACXA,GAAKA,EAAEmD,SACThc,KAAKiB,SAAS,CAAE2jC,MAAO/rB,EAAEmD,OAAOrX,QAChCkU,EAAEmD,OAAOqqB,WAAWC,UAAUzmB,IAAI,mDAKpC,OACE7X,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAOwU,OAAQzc,KAAKE,MAAMuc,QAEtBzc,KAAKJ,MAAMilC,WACT78B,EAAA5G,EAAAC,cAACqb,EAAA,EAAD,CACEC,UAAW3c,KAAKmc,YAEhBnU,EAAA5G,EAAAC,cAACqb,EAAA,EAAUE,OAAX,CAAkBC,MAAO,WAAYgM,KAAI,oBACzC7gB,EAAA5G,EAAAC,cAACqb,EAAA,EAAUI,KAAX,KACE9U,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAM1G,MAAO,EAAG4G,cAAe,SAAUD,GAAI,GAC3CF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAMvF,MAAO,YAAaQ,UAAW,SAAUE,SAAU,EAAGoa,GAAI,GAAhE,2BAGAxV,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEuV,GAAI,EACJjc,MAAO,OACPkH,aAAc,EACdiV,QAAS1d,KAAKmc,YAJhB,YAYNnU,EAAA5G,EAAAC,cAACqb,EAAA,EAAD,CAAWC,UAAW3c,KAAKmc,YACzBnU,EAAA5G,EAAAC,cAACqb,EAAA,EAAUE,OAAX,CAAkBC,MAAO,mBAAoBgM,KAAI,4BAEjD7gB,EAAA5G,EAAAC,cAACqb,EAAA,EAAUI,KAAX,KACE9U,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAMs+B,SAAUvmC,KAAKulC,cACnBv9B,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAM1G,MAAO,EAAG4G,cAAe,SAAUD,GAAI,GAC3CF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAMvF,MAAO,WAAYQ,UAAW,OAAQE,SAAU,EAAGoa,GAAI,GAA7D,8CAIFxV,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAM1G,MAAO,EAAG4G,cAAe,SAAUgT,GAAI,GAC3CnT,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAMuV,GAAI,EAAGrV,cAAe,MAAOtE,WAAY,UAC7CmE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEoK,KAAM,cACN3P,MAAOuK,KAAOu5B,MACdziC,KAAM,OAERiE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAMvF,MAAO,YAAaQ,UAAW,OAAQE,SAAU,EAAGJ,WAAY,EAAGwa,GAAI,EAAG3C,GAAI,GAApF,wBAIF7S,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAMuV,GAAI,EAAGrV,cAAe,OAC1BH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEoK,KAAM,cACN3P,MAAOuK,KAAOu5B,MACdziC,KAAM,OAERiE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAMvF,MAAO,YAAaQ,UAAW,OAAQE,SAAU,EAAGJ,WAAY,EAAGwa,GAAI,EAAG3C,GAAI,GAApF,2BAIF7S,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAMuV,GAAI,EAAGrV,cAAe,OAC1BH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEoK,KAAM,cACN3P,MAAOuK,KAAOu5B,MACdziC,KAAM,OAERiE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAMvF,MAAO,YAAaQ,UAAW,OAAQE,SAAU,EAAGJ,WAAY,EAAGwa,GAAI,EAAG3C,GAAI,GAApF,mBAIF7S,EAAA5G,EAAAC,cAAC4G,EAAA,EAAKw+B,MAAN,CAAYllC,MAAO,EAAGqH,MAAO,IAC3BZ,EAAA5G,EAAAC,cAAC4G,EAAA,EAAKy+B,MAAN,CACEl0B,KAAK,QACLH,KAAK,QACL9Q,MAAO,EACPolC,QAAS,OACTtW,OAAQ,EACRhnB,GAAI,EACJD,GAAI,EACJhG,SAAU,EACVF,UAAW,CAAC,SAAS,QACrBktB,YAAa,oBACbpT,SAAUhd,KAAKylC,iBACf1oB,UAAQ,KAGZ/U,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAMC,GAAI,EAAGC,cAAe,SAAUtE,WAAY,SAAUC,eAAgB,UAC1EkE,EAAA5G,EAAAC,cAACulC,GAAA,EAAD,CACEC,WAAY,SACZC,UAAW9mC,KAAKJ,MAAMklC,YACtBzpB,YAAa,CAAC0V,UAAUgW,KAAcC,eAAezlC,MAAM,OAAOiR,KAAK,YAGzExK,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CAAMkT,GAAI,EAAGuC,QAAS1d,KAAKmc,WAAYuL,WAAY,QAAnD,wCAjNK/J,IAAM3Z,sBCwLlBijC,eAjLb,SAAAA,EAAY/mC,GAAO,IAAA4E,EAAA,OAAArB,OAAA+gC,EAAA,EAAA/gC,CAAAzD,KAAAinC,IACjBniC,EAAArB,OAAAghC,EAAA,EAAAhhC,CAAAzD,KAAAyD,OAAAihC,EAAA,EAAAjhC,CAAAwjC,GAAAtC,KAAA3kC,KAAME,KAfRN,MAAQ,CACNsnC,eAAc,GAaGpiC,EATnB/E,cAAgB,KASG+E,EAKnBgX,mBALmBrY,OAAAiT,EAAA,EAAAjT,CAAA+D,EAAApG,EAAAuV,KAKE,SAAAM,IAAA,OAAAzP,EAAApG,EAAAqG,KAAA,SAAA4P,GAAA,cAAAA,EAAA1P,KAAA0P,EAAAzP,MAAA,OACnB9C,EAAK1E,YADc,wBAAAiX,EAAAG,SAAAP,EAAAjX,SALF8E,EASnBqX,WATmB1Y,OAAAiT,EAAA,EAAAjT,CAAA+D,EAAApG,EAAAuV,KASN,SAAAC,IAAA,OAAApP,EAAApG,EAAAqG,KAAA,SAAAsP,GAAA,cAAAA,EAAApP,KAAAoP,EAAAnP,MAAA,WACa9C,EAAK/E,cAAcwkB,gBAAgB,CAAC,gBAAgB,YAAY,SAAS,SAAS,YAD/F,CAAAxN,EAAAnP,KAAA,eAAAmP,EAAAnP,KAAA,EAIH9C,EAAK/E,cAAc0Z,yBAAyB,CAChDL,cAAe,KACfC,YAAa,2BACbC,WAAY,iBAPL,OASTxU,EAAK5E,MAAMic,aATFpF,EAAAnP,KAAA,eAWT9C,EAAK5E,MAAMic,aAXF,wBAAApF,EAAAS,SAAAZ,EAAA5W,SATM8E,EAwBnBqiC,oBAAsB,SAACD,GAEjBA,EACFpiC,EAAK/E,cAAc63B,gBAAgB,uBAAuB,QAE1D9yB,EAAK/E,cAAcqnC,iBAAiB,wBAGtCtiC,EAAK7D,SAAS,CACZimC,mBAjCepiC,EAqCnBuiC,QAAU,WACR,IAAMC,EAAsBxiC,EAAK/E,cAAcwkB,gBAAgB,CAAC,QAAQ,iBAAiB,UACzFzf,EAAK5E,MAAM8kB,YAAY,SAASsiB,GAChCxiC,EAAK5E,MAAMic,cAtCXrX,EAAK1E,YAFY0E,2EAPb9E,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,yDA+CvC,IAAAgB,EAAAlB,KAEDunC,EAAa,CACjBvkC,WAAW,EACXI,SAAS,CAAC,EAAE,GACZV,MAAM,WACNgY,UAAU,CACR5W,eAAe,eAInB,OACEkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEwU,OAAQzc,KAAKE,MAAMuc,QAEnBzU,EAAA5G,EAAAC,cAACqb,EAAA,EAAD,CACEsT,SAAU,CAAC,QAAQ,SACnBrT,UAAW3c,KAAKE,MAAMic,YAEtBnU,EAAA5G,EAAAC,cAACqb,EAAA,EAAUE,OAAX,CACE4qB,WAAY,OACZ3qB,MAAO,kBACPgM,KAAI,uBAGN7gB,EAAA5G,EAAAC,cAACqb,EAAA,EAAUI,KAAX,KACE9U,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,EACJ3G,MAAO,EACP4G,cAAe,UAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEuV,GAAI,EACJpa,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,0GASF8E,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP4G,cAAe,UAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEuV,GAAI,EACJ3Z,WAAY,SACZsE,cAAe,UAGbnI,KAAKE,MAAMunC,yBAA2BhkC,OAAOiC,KAAK1F,KAAKE,MAAMunC,yBAAyB12B,IAAK,SAAAsJ,GAAK,OAC9FrS,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,EACJrE,WAAY,SACZsE,cAAe,MACfa,IAAG,SAAAyK,OAAW4G,GACdvW,eAAgB,iBAEhBkE,EAAA5G,EAAAC,cAACopB,EAAA,EAAD,CACEpQ,MAAOA,EACPqQ,UAAW,CACTrY,KAAK,OACLnS,MAAM,CACJqI,GAAG,EACHC,OAAO,UAGXX,YAAa3G,EAAKhB,MAAMunC,wBAAwBptB,GAAOxS,cAEzDG,EAAA5G,EAAAC,cAACquB,GAAA,EAADjsB,OAAAC,OAAA,CACE6E,GAAI,GACAg/B,EAFN,CAGEG,aAAc,EACd/X,OAAQzuB,EAAKhB,MAAMunC,wBAAwBptB,GAAOgQ,WAEpDriB,EAAA5G,EAAAC,cAACopB,EAAA,EAAD,CACEpQ,MAAOA,EACPqQ,UAAW,CACTrY,KAAK,YACLnS,MAAMqnC,GAER1/B,YAAa3G,EAAKhB,MAAMunC,wBAAwBptB,GAAOxS,iBAK/DG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,EACJ9E,SAAU,EACVV,MAAO,MACPM,WAAY,IACZE,UAAW,UALb,wJAUF8E,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,EACJrE,WAAY,SACZsE,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAACulC,GAAA,EAAD,CACEC,WAAY,UACZtrB,YAAavb,KAAKqnC,QAClBP,UAAW9mC,KAAKJ,MAAMklC,YACtBzpB,YAAa,CACX9Z,MAAM,CAAC,OAAO,OACdwvB,UAAUgW,KAAcC,kBAS5Bh/B,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ4B,UAAU,EACVra,MAAO,WACP2sB,QAASrvB,KAAKJ,MAAMsnC,cACpBt+B,MAAK,8BACLoU,SAAW,SAAAnE,GAAC,OAAI3X,EAAKimC,oBAAoBtuB,EAAEmD,OAAOqT,wBAtLzC1R,IAAM3Z,WCqdlB2jC,eArcb,SAAAA,EAAYznC,GAAO,IAAA4E,EAAA,OAAArB,OAAA+gC,EAAA,EAAA/gC,CAAAzD,KAAA2nC,IACjB7iC,EAAArB,OAAAghC,EAAA,EAAAhhC,CAAAzD,KAAAyD,OAAAihC,EAAA,EAAAjhC,CAAAkkC,GAAAhD,KAAA3kC,KAAME,KAfRN,MAAQ,CACNsnC,eAAc,GAaGpiC,EATnB/E,cAAgB,KASG+E,EAKnBgX,mBALmBrY,OAAAiT,EAAA,EAAAjT,CAAA+D,EAAApG,EAAAuV,KAKE,SAAAM,IAAA,OAAAzP,EAAApG,EAAAqG,KAAA,SAAA4P,GAAA,cAAAA,EAAA1P,KAAA0P,EAAAzP,MAAA,OACnB9C,EAAK1E,YADc,wBAAAiX,EAAAG,SAAAP,EAAAjX,SALF8E,EASnBqX,WATmB1Y,OAAAiT,EAAA,EAAAjT,CAAA+D,EAAApG,EAAAuV,KASN,SAAAC,IAAA,OAAApP,EAAApG,EAAAqG,KAAA,SAAAsP,GAAA,cAAAA,EAAApP,KAAAoP,EAAAnP,MAAA,WACa9C,EAAK/E,cAAcwkB,gBAAgB,CAAC,gBAAgB,YAAY,SAAS,SAAS,YAD/F,CAAAxN,EAAAnP,KAAA,eAAAmP,EAAAnP,KAAA,EAIH9C,EAAK/E,cAAc0Z,yBAAyB,CAChDL,cAAe,KACfC,YAAa,sBACbC,WAAY,iBAPL,OASTxU,EAAK5E,MAAMic,aATFpF,EAAAnP,KAAA,eAWT9C,EAAK5E,MAAMic,aAXF,wBAAApF,EAAAS,SAAAZ,EAAA5W,SATM8E,EAwBnBqiC,oBAAsB,SAACD,GAEjBA,EACFpiC,EAAK/E,cAAc63B,gBAAgB,uBAAuB,QAE1D9yB,EAAK/E,cAAcqnC,iBAAiB,wBAGtCtiC,EAAK7D,SAAS,CACZimC,mBAjCepiC,EAqCnBuiC,QArCmB,eAAAtzB,EAAAtQ,OAAAiT,EAAA,EAAAjT,CAAA+D,EAAApG,EAAAuV,KAqCT,SAAA1R,EAAOoV,GAAP,IAAAiI,EAAAslB,EAAAjwB,UAAA,OAAAnQ,EAAApG,EAAAqG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WAAa0a,EAAbslB,EAAAj+B,OAAA,QAAA2I,IAAAs1B,EAAA,GAAAA,EAAA,GAAsB,QAG5BtlB,EAAWxd,EAAK5E,MAAMmhB,mBAGAvc,EAAK/E,cAAcwkB,gBAAgB,CAAC,gBAAgB,YAAY,SAAS,SAAS,YANlG,CAAA7c,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EASA9C,EAAK/E,cAAc0Z,yBAAyB,CAChDL,cAAe,eACfC,YAAa,UACbC,WAAU,GAAA7F,OAAK3O,EAAK5E,MAAMmhB,iBAAhB,KAAA5N,OAAoC4G,KAZ1C,OAcNvV,EAAK5E,MAAM8kB,YAAX,GAAAvR,OAA0B6O,EAA1B,KAAA7O,OAAsC4G,IACtCvV,EAAK5E,MAAMic,aAfLzU,EAAAE,KAAA,iBAiBN9C,EAAK5E,MAAM8kB,YAAX,GAAAvR,OAA0B6O,EAA1B,KAAA7O,OAAsC4G,IACtCvV,EAAK5E,MAAMic,aAlBL,yBAAAzU,EAAA8P,SAAAvS,EAAAjF,SArCS,gBAAA4X,GAAA,OAAA7D,EAAA2D,MAAA1X,KAAA2X,YAAA,GAAA7S,EA2DnB+iC,QA3DmB,eAAAxzB,EAAA5Q,OAAAiT,EAAA,EAAAjT,CAAA+D,EAAApG,EAAAuV,KA2DT,SAAAme,EAAOza,GAAP,IAAAytB,EAAA,OAAAtgC,EAAApG,EAAAqG,KAAA,SAAAutB,GAAA,cAAAA,EAAArtB,KAAAqtB,EAAAptB,MAAA,UACFkgC,EAAchjC,EAAK/E,cAAcwkB,gBAAgB,CAAC,QAAQ,oBACxCzf,EAAK/E,cAAcwkB,gBAAgB,CAAC,gBAAgB,YAAY,SAAS,SAAS,YAFlG,CAAAyQ,EAAAptB,KAAA,eAAAotB,EAAAptB,KAAA,EAKA9C,EAAK/E,cAAc0Z,yBAAyB,CAChDL,cAAe,eACfC,YAAa,UACbC,WAAU,GAAA7F,OAAK3O,EAAK5E,MAAMmhB,iBAAhB,KAAA5N,OAAoC4G,KAR1C,OAUNvV,EAAK5E,MAAM8kB,YAAX,SAAAvR,OAAgCq0B,EAAY1f,MAA5C,KAAA3U,OAAqD4G,IACrDvV,EAAK5E,MAAMic,aAXL6Y,EAAAptB,KAAA,gBAaN9C,EAAK5E,MAAM8kB,YAAX,SAAAvR,OAAgCq0B,EAAY1f,MAA5C,KAAA3U,OAAqD4G,IACrDvV,EAAK5E,MAAMic,aAdL,yBAAA6Y,EAAAxd,SAAAsd,EAAA90B,SA3DS,gBAAAyX,GAAA,OAAApD,EAAAqD,MAAA1X,KAAA2X,YAAA,GAEjB7S,EAAK1E,YAFY0E,2EAPb9E,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,yDAiFvC,IAAAgB,EAAAlB,KAEP,IAAKA,KAAKE,MAAMO,sBAAwBT,KAAKE,MAAMojB,gBACjD,OAAO,KAGT,IAAMikB,EAAa,CACjBvkC,WAAW,EACXI,SAAS,CAAC,EAAE,GACZV,MAAM,WACNgY,UAAU,CACR5W,eAAe,eAInB,OACEkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEwU,OAAQzc,KAAKE,MAAMuc,QAEnBzU,EAAA5G,EAAAC,cAACqb,EAAA,EAAD,CACEsT,SAAU,CAAC,QAAQ,SACnBrT,UAAW3c,KAAKE,MAAMic,YAEtBnU,EAAA5G,EAAAC,cAACqb,EAAA,EAAUE,OAAX,CACEiM,KAAI,qBACJhM,MAAO,oBACP2qB,WAAY,CAAC,OAAO,UAGtBx/B,EAAA5G,EAAAC,cAACqb,EAAA,EAAUI,KAAX,KACE9U,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEC,GAAI,EACJ3G,MAAO,EACP4G,cAAe,UAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEuV,GAAI,EACJpa,SAAU,CAAC,EAAE,GACbV,MAAO,WACPQ,UAAW,UAJb,wHASF8E,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP4G,cAAe,UAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,CAAC,EAAE,GACPtX,WAAY,SACZsE,cAAe,OAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE7E,SAAU,CAAC,EAAE,GACb7B,MAAO,CAAC,GAAI,KACZyB,WAAY,CAAC,EAAE,GACfN,MAAO,aAGL1C,KAAKE,MAAMiD,SAAW,QAAU,qBAIjCnD,KAAKE,MAAMiD,UACV6E,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,IACPyB,WAAY,CAAC,EAAE,GACfN,MAAO,YACPoB,eAAgB,UAJlB,YAWD9D,KAAKE,MAAMiD,UACV6E,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,IACPyB,WAAY,CAAC,EAAE,GACfN,MAAO,YACPoB,eAAgB,UAJlB,WAUJkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE7E,SAAU,CAAC,EAAE,GACbJ,WAAY,CAAC,EAAE,GACfzB,MAAO,CAAC,IAAK,KACbmB,MAAO,YACPoB,eAAgB,UAGd9D,KAAKE,MAAMiD,SAAW,MAAQ,WAGlC6E,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,CAAC,IAAK,QAKjByG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZsE,cAAe,UAGbnI,KAAKE,MAAM6nC,iBAAmBtkC,OAAOiC,KAAK1F,KAAKE,MAAM6nC,iBAAiBh3B,IAAK,SAAAi3B,GACzE,IAAM3tB,EAAQnZ,EAAKhB,MAAM6nC,gBAAgBC,GAAU3tB,MAC7CiI,EAAWphB,EAAKhB,MAAM6nC,gBAAgBC,GAAU1lB,SAChDza,EAAc3G,EAAKhB,MAAM6nC,gBAAgBC,GAAUngC,YACnDwiB,EAAUnpB,EAAKhB,MAAM6nC,gBAAgBC,GAAUC,4BACrD,OACEjgC,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ5Z,MAAO,EACPsC,WAAY,SACZsE,cAAe,MACfa,IAAG,SAAAyK,OAAWu0B,GACdlkC,eAAgB,iBAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,CAAC,GAAI,KACZsC,WAAY,SACZsE,cAAe,OAEfH,EAAA5G,EAAAC,cAACopB,EAAA,EAAD,CACEC,UAAW,CACTrY,KAAK,OACLnS,MAAM,CACJqI,GAAG,EACHC,OAAO,CAAC,QAAQ,WAGpBX,YAAaA,EACbwS,MAAOxS,EAAY0M,KAAK8F,QAE1BrS,EAAA5G,EAAAC,cAACopB,EAAA,EAAD,CACEC,UAAW,CACTrY,KAAK,YACLnS,MAAMqnC,GAER1/B,YAAaA,EACbwS,MAAOxS,EAAY0M,KAAK8F,UAIzBnZ,EAAKhB,MAAMiD,UACV6E,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,IACPsC,WAAY,SACZC,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAACquB,GAAA,EAADjsB,OAAAC,OAAA,GACM6jC,EADN,CAEEG,aAAc,EACd/X,OAAQtF,EACR3P,UAAW,CACT5W,eAAe,eAOtB5C,EAAKhB,MAAMiD,UACV6E,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,IACPsC,WAAY,SACZC,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAACopB,EAAA,EAADhnB,OAAAC,OAAA,GACMxC,EAAKhB,MADX,CAEEwqB,UAAW,CACTrY,KAAK,SACLnS,MAAMqnC,GAERltB,MAAOA,EACPxS,YAAaA,MAKrBG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,CAAC,IAAK,KACbsC,WAAY,SACZC,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAACopB,EAAA,EAADhnB,OAAAC,OAAA,GACMxC,EAAKhB,MADX,CAEEwqB,UAAW,CACTrY,KAAK,MACLnS,MAAMqnC,GAERltB,MAAOA,EACPxS,YAAaA,MAGjBG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,CAAC,IAAK,KACbsC,WAAY,SACZC,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC+Z,EAAA,EAAD,CACEG,YAAc,SAAA1C,GAAC,OAAI3X,EAAKmmC,QAAQhtB,EAAMiI,IACtCjH,YAAa,CACXtX,KAAK,QACLxC,MAAM,OACNwvB,UAAUgW,KAAcC,iBAL5B,gBAgBZh/B,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPsC,WAAY,SACZsE,cAAe,UAGbnI,KAAKE,MAAMgoC,wBAA0BzkC,OAAOiC,KAAK1F,KAAKE,MAAMgoC,wBAAwBn3B,IAAK,SAAAsJ,GACvF,IAAMxS,EAAc3G,EAAKhB,MAAMgoC,uBAAuB7tB,GAAOxS,YAE7D,IAAKA,EACH,OAAO,KAGT,IAAMwiB,EAAUnpB,EAAKhB,MAAMgoC,uBAAuB7tB,GAAOgQ,QACrD8d,EAAiB,KAOrB,OAJEA,EADEtgC,EAAYpH,sBAAwBS,EAAKhB,MAAMojB,gBAAgBzb,EAAYg8B,WAC5D3iC,EAAKhB,MAAMO,oBAAoBoH,EAAYpH,oBAAoB,IAAIoH,EAAYg8B,WAE/E3iC,EAAKhB,MAAMojB,gBAAgBzb,EAAYg8B,WAGxD77B,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ5Z,MAAO,EACPsC,WAAY,SACZsE,cAAe,MACfa,IAAG,SAAAyK,OAAW4G,GACdvW,eAAgB,iBAEhBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,IACPsC,WAAY,SACZsE,cAAe,OAEfH,EAAA5G,EAAAC,cAACopB,EAAA,EAAD,CACEC,UAAW,CACTrY,KAAK,OACLnS,MAAM,CACJqI,GAAG,EACHC,OAAO,UAGXX,YAAaA,EACbwS,MAAOA,IAETrS,EAAA5G,EAAAC,cAACopB,EAAA,EAAD,CACEC,UAAW,CACTrY,KAAK,YACLnS,MAAMqnC,GAER1/B,YAAaA,EACbwS,MAAOA,KAGXrS,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,IACPsC,WAAY,SACZC,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAACquB,GAAA,EAADjsB,OAAAC,OAAA,GACM6jC,EADN,CAEEG,aAAc,EACd/X,OAAQtF,EACR3P,UAAW,CACT5W,eAAe,cAIrBkE,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,IACPsC,WAAY,SACZC,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAACopB,EAAA,EAADhnB,OAAAC,OAAA,GACMxC,EAAKhB,MADX,CAEEwqB,UAAW,CACTrY,KAAK,SACLnS,MAAMqnC,GAERltB,MAAO8tB,EAAe9tB,MACtBxS,YAAasgC,MAGjBngC,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,IACPsC,WAAY,SACZC,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAACopB,EAAA,EAADhnB,OAAAC,OAAA,GACMxC,EAAKhB,MADX,CAEEwqB,UAAW,CACTrY,KAAK,MACLnS,MAAMqnC,GAERltB,MAAO8tB,EAAe9tB,MACtBxS,YAAasgC,MAGjBngC,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,IACPsC,WAAY,SACZC,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC+Z,EAAA,EAAD,CACEG,YAAc,SAAA1C,GAAC,OAAI3X,EAAK2mC,QAAQxtB,IAChCgB,YAAa,CACXtX,KAAK,QACLxC,MAAM,OACNwvB,UAAUgW,KAAcC,iBAL5B,gBAgBZh/B,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEuV,GAAI,EACJ3Z,WAAY,SACZsE,cAAe,SACfrE,eAAgB,UAEhBkE,EAAA5G,EAAAC,cAAC+Z,EAAA,EAAD,CACEG,YAAavb,KAAKmc,WAClBd,YAAa,CACXjY,SAAS,CAAC,EAAE,GACZ7B,MAAM,CAAC,OAAO,SAJlB,iBAUEyG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ4B,UAAU,EACVra,MAAO,WACP2sB,QAASrvB,KAAKJ,MAAMsnC,cACpBt+B,MAAK,8BACLoU,SAAW,SAAAnE,GAAC,OAAI3X,EAAKimC,oBAAoBtuB,EAAEmD,OAAOqT,wBAzc3C1R,IAAM3Z,sBCU3BokC,8MACJxoC,MAAQ,CACNyoC,KAAK,GACLC,UAAU,KACVC,WAAW,KACXjW,YAAY,KACZkW,aAAa,KACbC,cAAc,KACdC,eAAe,KACfvgB,gBAAgB,KAChB4f,gBAAgB,KAChBY,iBAAgB,EAChB1gB,mBAAmB,KACnBigB,uBAAuB,KACvBT,wBAAwB,QAG1BmB,UAAY,OAGZ7oC,cAAgB,OA2FhBk0B,WAAa,WACXnvB,EAAK7D,SAAS,CACZqxB,YAAa,UAIjBsJ,iBAAmB,SAACiN,EAAWC,GAE7BhkC,EAAK/E,cAAc0Z,yBAAyB,CAC1CL,cAAe,KACfC,YAAawvB,EACbvvB,WAAY,iBAGdxU,EAAK7D,SAAS,CACZ4nC,aACAC,gBACA,WACAhkC,EAAKovB,eAAe,gBAIxBA,eAAiB,SAAC5B,GAChBxtB,EAAK7D,SAAS,CACZqxB,mBA6TJyW,4BAAS,SAAA9xB,IAAA,OAAAzP,EAAApG,EAAAqG,KAAA,SAAA4P,GAAA,cAAAA,EAAA1P,KAAA0P,EAAAzP,MAAA,cACP9C,EAAK5E,MAAM8oC,aAAa,SAAS,UAD1B3xB,EAAAzP,KAAA,EAED9C,EAAK5E,MAAM2jB,SAAS,UAFnB,wBAAAxM,EAAAG,SAAAP,EAAAjX,oFA9aHA,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,OAG9CwZ,OAAO3Z,cAAgBC,KAAKD,8KAItBuoC,EAAYtoC,KAAKD,cAAcwkB,gBAAgB,CAAC,YAAY,cAC5DoC,EAAa3mB,KAAKD,cAAcwkB,gBAAgB,CAAC,eACjD8jB,EAAO5kC,OAAOiC,KAAKihB,GAAYrb,OAAQ,SAAA29B,GAAC,OAAOtiB,EAAWsiB,GAAGC,aAAen4B,IAAI,SAAAuR,GAAQ,MAAK,CAC/FkG,QAAQ,GACR9lB,MAAM,OACNymC,UAAS,EACT/gB,MAAMkgB,EAAU,IAAIhmB,EACpB1Z,MAAM+d,EAAWrE,GAAUzF,MAC3B8L,MAAMhC,EAAWrE,GAAUuG,KAC3BugB,QAAQziB,EAAWrE,GAAU5f,MAC7BsoB,UAAUrE,EAAWrE,GAAU0I,UAC/Bqe,cAAc1iB,EAAWrE,GAAUgnB,aACnCC,kBAAkB5iB,EAAWrE,GAAUknB,qBAKrCvb,EAAcjuB,KAAKD,cAAcwkB,gBAAgB,CAAC,WAGxC/O,UACRi0B,EAAchmC,OAAOC,OAAO,CAChC8kB,QAAQ,GACR2gB,UAAS,EACTne,UAAU0e,IACVzb,EAAYjQ,QAEdqqB,EAAK58B,KAAKg+B,IAIZpB,EAAK58B,KACH,CACEod,KAAK,YACLjgB,MAAM,QACNwgC,QAAQ,UACR1mC,MAAM,YACNsoB,UAAUzM,EACV4qB,UAAS,EACT/gB,MAAM,mBACNI,QAAQ,KAKZ6f,EAAK58B,KACH,CACEod,KAAK,QACLjgB,MAAM,QACNlG,MAAM,YACNsoB,UAAUjD,EACVohB,UAAS,EACT/gB,MAAM,mBACNghB,QAAQppC,KAAKE,MAAM2C,MAAMoK,OAAO8uB,QAChCvT,QAAQ/kB,OAAO4H,OAAOrL,KAAKD,cAAcwkB,gBAAgB,CAAC,WAAWjZ,OAAQ,SAAAq+B,GAAC,OAAKA,EAAEn0B,YAKzF6yB,EAAK58B,KACH,CACE+c,QAAQ,GACRK,KAAK,QACLzB,QAAO,EACPxe,MAAM,QACNugC,UAAS,EACTne,UAAU,KACVtoB,MAAM,YACN0mC,QAAQ,UACRQ,gBAAe,EACfxhB,MAAMpoB,KAAKD,cAAcwkB,gBAAgB,CAAC,yBAIxCvkB,KAAKiB,SAAS,CAClBonC,gSAiCerqB,EAAahe,KAAKE,MAA3BkjB,MAASpF,OAEXsqB,EAAYtoC,KAAKD,cAAcwkB,gBAAgB,CAAC,YAAY,cAC9DikB,EAAeF,EAEfG,EAAgB,KAChB1jC,EAAgB,KAChB2jC,EAAiB,KACjBrnB,EAAmB,KAGnBrD,EAAO6rB,UACTnB,EAAiB1qB,EAAO6rB,QAClB7F,EAAShmB,EAAOgmB,OAChB8F,EAAS9rB,EAAO8rB,OAEhBC,EAAsBtmC,OAAOiC,KAAK1F,KAAKE,MAAMO,qBAAqB2gB,SAASsnB,EAAeh3B,eAC1Fs4B,EAAqBhG,GAAUvgC,OAAOiC,KAAK1F,KAAKE,MAAMO,qBAAqB2gB,SAAS4iB,EAAOtyB,eAE7Fq4B,GAAuBC,GAEzBxB,GAAgB,KADhBnnB,EAAmB0oB,EAAsBrB,EAAiB1E,GAIpDiG,EAAkBjG,GAAUvgC,OAAOiC,KAAK1F,KAAKE,MAAMO,oBAAoB4gB,IAAmBD,SAAS4iB,EAAOxgB,eAC1G0mB,EAAkBJ,GAAUrmC,OAAOiC,KAAK1F,KAAKE,MAAMO,oBAAoB4gB,IAAmBD,SAAS0oB,EAAOtmB,gBAC5GymB,GAAmBC,KACrBnlC,EAAgBklC,EAAkBjG,EAAOxgB,cAAgBsmB,EAAOtmB,cAChEglB,GAAgB,IAAIzjC,EAEhBglC,IACFtB,EAAgBrK,OAIpBoK,GAAgB,IAAIxqB,EAAO6rB,QAEvB7rB,EAAOgmB,QAAUhmB,EAAOgmB,OAAOr6B,SACjC6+B,GAAgB,IAAIxqB,EAAOgmB,UAS3BqE,EAAOroC,KAAKJ,MAAMyoC,KAEpBlgB,EAAkB,KAClBF,EAAqB,KAEzBogB,EAAK79B,QAAQ,SAAA2/B,GACXA,EAAEhB,UAAW,EACb,IAAMiB,EAAe9B,EAAU,IAAItqB,EAAO6rB,QACtCrB,EAAa92B,gBAAkBy4B,EAAE/hB,MAAM1W,gBAAoBy4B,EAAE3hB,QAAQ7e,QAAUwgC,EAAE/hB,MAAM1W,gBAAkB04B,EAAa14B,eACxHy4B,EAAEhB,UAAW,EACS,OAAlBV,IACFA,EAAgB0B,EAAEnf,YAEXmf,EAAE3hB,QAAQ7e,QACnBwgC,EAAE3hB,QAAQhe,QAAQ,SAAA6/B,GAChBA,EAAKlB,UAAW,GACEgB,EAAE/hB,MAAM,IAAIiiB,EAAKjiB,OACrB1W,gBAAkB82B,EAAa92B,gBAC3Cy4B,EAAEhB,UAAW,EACbkB,EAAKlB,UAAW,EAGM,OAAlBV,IAEAA,EADE4B,EAAKrf,UACSqf,EAAKrf,UAELmf,EAAEnf,YAMpBqf,EAAKlB,WACPlhB,EAAqBoiB,KAOvBF,EAAEhB,WACJhhB,EAAkBgiB,KAOjB1B,4CACIzoC,KAAKglB,YAAY,KAAI,6BAIxBhlB,KAAKE,MAAMqiB,iBAAiBlB,EAAiBtc,4BAE7C/E,KAAKiB,SAAS,CAClBonC,OACArqB,SACAsqB,YACAE,eACAC,gBACAC,iBACAvgB,kBACAF,yKAKEjoB,KAAK4oC,WACPlvB,OAAO4wB,aAAatqC,KAAK4oC,uKAM3B5oC,KAAKE,MAAMqqC,kBAAkB,aAE7BvqC,KAAKI,qBACCJ,KAAKwqC,kBACXxqC,KAAK6iB,iRAKL7iB,KAAK4oC,UAAYlvB,OAAO2rB,WAAW,WAC5BnkC,EAAKhB,MAAMuqC,oBAAuBvpC,EAAKhB,MAAMM,sBAChDU,EAAKD,SAAS,CACZ0nC,iBAAgB,KAGpB,KAEG3oC,KAAKE,MAAM6a,8CACP/a,KAAKE,MAAM2jB,sBACR7jB,KAAKE,MAAMuqC,4DACdzqC,KAAKE,MAAMwqC,yBACR1qC,KAAKE,MAAMM,+DACdR,KAAKE,MAAMyqC,sCAGpB3qC,KAAKI,sBACCJ,KAAKwqC,mBACXxqC,KAAK6iB,aACL7iB,KAAK4qC,oMAGkBtqC,EAAUC,6FAEjCP,KAAKI,YAECyqC,EAAavqC,EAAU8iB,MAAMpF,OAC7BA,EAAShe,KAAKE,MAAMkjB,MAAMpF,OAE5Btd,KAAKC,UAAUkqC,KAAgBnqC,KAAKC,UAAUqd,mCAC1Che,KAAKiB,SAAS,CAClBwnC,cAAc,MACb,WACDjsB,EAAKqG,sBAIHvI,EAAiBha,EAAUia,UAAYva,KAAKE,MAAMqa,QAClD4J,EAAkBnkB,KAAKE,MAAMmhB,kBAAoB/gB,EAAU+gB,mBAAqBrhB,KAAKE,MAAMmhB,iBAC3FopB,EAAqBzqC,KAAKE,MAAMuqC,oBAAsBnqC,EAAUmqC,qBAAuBzqC,KAAKE,MAAMuqC,mBAClGjqC,EAAuBR,KAAKE,MAAMM,sBAAwBF,EAAUE,uBAAyBR,KAAKE,MAAMM,sBAE1G8Z,GAAkBmwB,GAAsBjqC,GAAwB2jB,IAClEnkB,KAAK4qC,sQAMH5qC,KAAKE,MAAM6E,eAAkB/E,KAAKE,MAAMuqC,oBAAuBzqC,KAAKE,MAAMM,sBAAyBR,KAAKE,MAAMO,qBAAwBT,KAAKE,MAAMojB,yDAC5I,6BAGHtjB,KAAK8qC,8CACL9qC,KAAK+qC,2CACL/qC,KAAKgrC,qSAKLC,EAA2F,OAAxEjrC,KAAKD,cAAcmrC,cAAc,wBAAuB,EAAM,OACnFlrC,KAAKE,MAAM6E,eAAkBkmC,GAAqBjrC,KAAKE,MAAMojB,yDACxD,6BAGqBtjB,KAAKD,cAAcorC,mCAA3CpD,kBAC+B/nC,KAAKD,cAAcqrC,2BAA2B,kBAA7ElD,WAIDH,GAAmBtkC,OAAOiC,KAAKqiC,GAAiBp+B,OAAO,GAAOu+B,GAA0BzkC,OAAOiC,KAAKwiC,GAAwBv+B,OAAO,uBAClH,sBACA3J,KAAKJ,MAAM0yB,oCAC7BtyB,KAAKiB,SAAS,CACZqxB,YAHgB,UAIhByV,kBACAG,6CALgB,4CAYf,kRAIFloC,KAAKE,MAAMqa,SAAYva,KAAKE,MAAMuqC,oBAAuBzqC,KAAKE,MAAMM,8DAChE,iBAILR,KAAKE,MAAMqa,SAAsC,OAA3Bva,KAAKJ,MAAM0yB,gCAC/B+Y,GAAgB,GAEdC,EAAoBtrC,KAAKD,cAAcwkB,gBAAgB,CAAC,SAAS,aAEjD/O,SAAWmiB,eAGzB4T,GAAW,IAAI3vB,MAAOxR,UACtB47B,EAAgBhmC,KAAKE,MAAMqa,QAAQ7I,eACrCu0B,EAAYtO,aAAauO,QAAQ,aAAexlC,KAAKylC,MAAMxO,aAAauO,QAAQ,cAAgB,IAGrFF,GAOHC,EAAUD,GAAeI,WAC7BoF,EAAW5mC,SAASqhC,EAAUD,GAAewF,UAEnDH,GAD2BE,EAASC,GAAU,KACXF,EAAkBG,YATrDxF,EAAUD,GAAiB,CACzBI,UAAW,EACXoF,SAAWD,GAEbF,GAAgB,GAQdA,IACFpF,EAAUD,GAAewF,SAAWD,EACpCvrC,KAAKD,cAAc63B,gBAAgB,YAAYl3B,KAAKC,UAAUslC,MAI5D3T,EAAc+Y,EAAgB,UAAYrrC,KAAKJ,MAAM0yB,YACvDtyB,KAAKJ,MAAM0yB,cAAgBA,0BAC7BtyB,KAAKiB,SAAS,CACZqxB,kCAGKA,oCAIJ,yRAKFtyB,KAAKE,MAAMqa,SAAYva,KAAKE,MAAMuqC,oBAAuBzqC,KAAKE,MAAMM,8DAChE,gBAIHkrC,EAAsB1rC,KAAKD,cAAcwkB,gBAAgB,CAAC,SAAS,UAAU,YAC7EonB,EAA2F,OAAxE3rC,KAAKD,cAAcmrC,cAAc,wBAAuB,EAAM,MAExD,OAA3BlrC,KAAKJ,MAAM0yB,cAAwBoZ,IAAuBC,GAAqB3rC,KAAKJ,MAAM6nC,yDACtDznC,KAAKD,cAAcqrC,2CAAnD3D,SACAnV,EAAcmV,GAA2BhkC,OAAOiC,KAAK+hC,GAAyB99B,OAAO,EAAI,UAAY,KACrGyS,EAAW,CACfkW,cACAmV,2BAEFznC,KAAKiB,SAASmb,qBACPkW,oCAGF,6IAGGuX,GAAyB,IAAjB+B,IAAiBj0B,UAAAhO,OAAA,QAAA2I,IAAAqF,UAAA,KAAAA,UAAA,GAG/Bi0B,IACF/B,EAAUA,EAAQgC,QAAQ7rC,KAAKJ,MAAM0oC,UAAW,IAAI,KAGtD,IAAMwD,EAAWF,EAAc5rC,KAAKJ,MAAM0oC,UAAW,IAAMuB,EAAUA,EACrEnwB,OAAOqyB,SAAS7wB,KAAK4wB,EAGrB9rC,KAAKD,cAAc0Z,yBAAyB,CAC1CL,cAAe,KACfC,YAAa,cACbC,WAAYwyB,IAGdpyB,OAAOsyB,SAAS,EAAG,uCAQTjnC,GAEV,GADAA,EAAgBA,EAAcye,cAC1B/f,OAAOiC,KAAK1F,KAAKE,MAAMojB,iBAAiBlC,SAASrc,GAAe,CAClE,IAAMknC,EAAa,GAGfjsC,KAAKJ,MAAM8oC,eAAeh3B,gBAAkB1R,KAAKE,MAAMmhB,iBAAiB3P,eAC1Eu6B,EAAWxgC,KAAKzL,KAAKJ,MAAM8oC,gBAI7BuD,EAAWxgC,KAAKzL,KAAKE,MAAMmhB,kBAG3B4qB,EAAWxgC,KAAK1G,GAEhB/E,KAAKglB,YAAYinB,EAAWn7B,KAAK,mDAIjBy3B,GAClBvoC,KAAKiB,SAAS,CACZsnC,WAAWA,EAAWvsB,0CAKxB,IAAMkwB,EAAgBlsC,KAAKJ,MAAM6oC,cAAgBzoC,KAAKJ,MAAM6oC,cAAgB,KAC5E,OACEzgC,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,OACPqhB,SAAU,QACVza,cAAe,MACfO,gBAAiB,CAAC,cAAc,SAEhCF,OAAQ,CAAEkR,OAAOmY,YAAY,GAAI,KAAK,UAEtC7pB,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEsI,OAAQ,EACRmhB,OAAQ,MACRnwB,MAAO,CAAC,EAAE,EAAE,GACZ4G,cAAe,SACfya,SAAU,CAAC,QAAQ,aAEnB5a,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEoJ,EAAG,CAAC,EAAE,GACNgf,OAAQ,EACR9uB,MAAO,CAAC,QAAQ,QAChBiH,OAAQ,CAAC,OAAO,SAChBE,gBAAiB,SACjByzB,YAAan8B,KAAKE,MAAM2C,MAAMoK,OAAOk/B,gBACrCC,YAAW,aAAA34B,OAAezT,KAAKE,MAAM2C,MAAMoK,OAAOk/B,kBAElDnkC,EAAA5G,EAAAC,cAACgrC,EAAA,EAAD5oC,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEmoC,KAAMroC,KAAKJ,MAAMyoC,UAIvBrgC,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEmB,GAAI,EACJlB,GAAI,EACJmB,GAAI,CAAC,EAAE,GACP9H,MAAO,CAAC,EAAE,EAAE,GACZgB,MAAO,CACL+pC,UAAU,SACVC,UAAU,UAEZ/jC,OAAQ,CAAC,OAAO,QAChBL,cAAe,UACfO,gBAAiB,eAGd1I,KAAKE,MAAMuqC,oBAAuBzqC,KAAKE,MAAMM,sBAAyB0rC,EAiErElkC,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACP4G,cAAe,UAEfH,EAAA5G,EAAAC,cAACmrC,GAAA,EAAD/oC,OAAAC,OAAA,CACE6kC,WAAYvoC,KAAKJ,MAAM2oC,WACvBvjB,YAAahlB,KAAKglB,YAAY9H,KAAKld,OAC/BA,KAAKE,QAGTgsC,GACElkC,EAAA5G,EAAAC,cAAC6qC,EAADzoC,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEkjB,MAAO,CAAEpF,OAAO,IAChB+lB,UAAW/jC,KAAKJ,MAAMoe,OACtBwE,YAAaxiB,KAAKwiB,YAAYtF,KAAKld,MACnCglB,YAAahlB,KAAKglB,YAAY9H,KAAKld,MACnCmoB,gBAAiBnoB,KAAKJ,MAAMuoB,gBAC5BF,mBAAoBjoB,KAAKJ,MAAMqoB,mBAC/B2T,iBAAkB57B,KAAK47B,iBAAiB1e,KAAKld,UAnFrDgI,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACE1G,MAAO,EACPiZ,UAAW,OACX3W,WAAY,SACZsE,cAAe,SACfrE,eAAgB,UAGb9D,KAAKJ,MAAM+oC,gBAiBV3gC,EAAA5G,EAAAC,cAAC0H,EAAA,EAAD,CACEI,UAAW,CACTkI,EAAE,EACF8J,GAAG,EACH5Z,MAAM,CAAC,EAAE,OAGXyG,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEpE,WAAY,SACZsE,cAAe,UAEfH,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACElE,KAAM,QACNsO,KAAM,UACN3P,MAAO,aAETsF,EAAA5G,EAAAC,cAAC4G,EAAA,EAAD,CACEkT,GAAI,EACJ/X,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,qCAMoC8E,EAAA5G,EAAAC,cAAA,WANpC,yDAQA2G,EAAA5G,EAAAC,cAAC+Z,EAAA,EAAD,CACEC,YAAa,CACXF,GAAG,EACH5Z,MAAM,CAAC,EAAE,KAEXga,YAAavb,KAAK+oC,OAAO7rB,KAAKld,OALhC,YAxCJgI,EAAA5G,EAAAC,cAACoZ,EAAA,EAAD,CACEG,UAAW,CACT6J,SAAS,EACTzhB,WAAW,GAEb2X,YAAa,CACXzS,GAAG,EACHnE,KAAK,QAEP2W,UAAW,CACT8C,GAAG,EACHrV,cAAc,UAEhBqH,KAAQxP,KAAKE,MAAMuqC,mBAA+CzqC,KAAKE,MAAMM,qBAAgD,oBAAzB,uBAA5D,yBAoEtDwH,EAAA5G,EAAAC,cAACorC,GAADhpC,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEic,WAAYnc,KAAKi0B,WACjBjP,YAAahlB,KAAKglB,YAAY9H,KAAKld,MACnC+nC,gBAAiB/nC,KAAKJ,MAAMmoC,gBAC5BtrB,OAAmC,YAA3Bzc,KAAKJ,MAAM0yB,YACnB4V,uBAAwBloC,KAAKJ,MAAMsoC,0BAErClgC,EAAA5G,EAAAC,cAACqrC,GAADjpC,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEic,WAAYnc,KAAKi0B,WACjBjP,YAAahlB,KAAKglB,YAAY9H,KAAKld,MACnCyc,OAAmC,YAA3Bzc,KAAKJ,MAAM0yB,YACnBmV,wBAAyBznC,KAAKJ,MAAM6nC,2BAEtCz/B,EAAA5G,EAAAC,cAACsrC,GAAA,EAAD,CACExwB,WAAYnc,KAAKi0B,WACjBpX,MAAO7c,KAAKJ,MAAMipC,WAClB+D,QAAS5sC,KAAKJ,MAAMkpC,aACpBrsB,OAAmC,YAA3Bzc,KAAKJ,MAAM0yB,cAGrBtqB,EAAA5G,EAAAC,cAACwrC,GAAD,CACE1wB,WAAYnc,KAAKi0B,WACjB1Z,QAASva,KAAKE,MAAMqa,QACpBuyB,SAAU9sC,KAAKE,MAAM4sC,SACrBC,QAAS/sC,KAAKE,MAAM6sC,QAAQC,QAC5B3hB,UAAWrrB,KAAKE,MAAM6E,cACtBkoC,aAAcjtC,KAAKE,MAAM+sC,aACzBC,cAAeltC,KAAKE,MAAM6E,cAC1B0X,OAAmC,YAA3Bzc,KAAKJ,MAAM0yB,sBA3oBLtuB,aAkpBTokC","file":"static/js/3.b3816346.chunk.js","sourcesContent":["import Title from '../Title/Title';\nimport CountUp from 'react-countup';\nimport React, { Component } from 'react';\nimport { Box, Flex, Text, Loader } from \"rimble-ui\";\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass AssetsUnderManagement extends Component {\n\n  state = {\n    totalAUM:null,\n    totalAUMEndOfYear:null\n  }\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.loadTotalAUM();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const availableStrategiesChanged = !prevProps.availableStrategies && JSON.stringify(prevProps.availableStrategies) !== JSON.stringify(this.props.availableStrategies);\n    if (availableStrategiesChanged || contractsInitialized){\n      this.loadTotalAUM();\n    }\n  }\n\n  async loadTotalAUM(){\n\n    if (!this.props.availableStrategies || !this.props.contractsInitialized){\n      return true;\n    }\n\n    const {\n      avgAPY,\n      totalAUM\n    } = await this.functionsUtil.getAggregatedStats();\n\n    const totalAUMEndOfYear = totalAUM.plus(totalAUM.times(avgAPY.div(100)));\n\n    this.setState({\n      totalAUM,\n      totalAUMEndOfYear\n    });\n  }\n\n  render() {\n    return this.state.totalAUM ? (\n      <Box\n        width={1}\n      >\n        <CountUp\n          delay={0}\n          decimals={4}\n          decimal={'.'}\n          separator={''}\n          useEasing={false}\n          duration={31536000}\n          start={parseFloat(this.state.totalAUM)}\n          end={parseFloat(this.state.totalAUMEndOfYear)}\n          formattingFn={ n => '$ '+this.functionsUtil.formatMoney(n,4) }\n        >\n          {({ countUpRef, start }) => (\n            <span\n              style={ this.props.counterStyle ? this.props.counterStyle : {\n                display:'block',\n                color:'dark-gray',\n                whiteSpace:'nowrap',\n                fontFamily:this.props.theme.fonts.counter,\n                fontWeight:this.props.theme.fontWeights[5],\n                textAlign: this.props.isMobile ? 'center' : 'right',\n                fontSize: this.props.isMobile ? '1.6em' : this.props.theme.fontSizes[6]\n              }}\n              ref={countUpRef}\n            />\n          )}\n        </CountUp>\n        {\n          (typeof this.props.subtitle === 'undefined' || this.props.subtitle) && (\n            <Title\n              fontWeight={3}\n              fontSize={[2,2]}\n              color={'cellTitle'}\n              textAlign={['center','right']}\n              {...this.props.subtitleProps}\n            >\n              {\n                this.props.subtitle ? this.props.subtitle : (\n                  <Text.span fontWeight={'inherit'} color={'inherit'} fontSize={'inherit'}>Assets Under Management <Text.span color={'cellTitle'} fontWeight={3} fontSize={'70%'}>(V3 + V4)</Text.span></Text.span>\n                )\n              }\n            </Title>\n          )\n        }\n      </Box>\n    ) : (\n      <Flex\n        alignItems={'center'}\n        justifyContent={'center'}\n      >\n        <Loader size=\"30px\" />\n      </Flex>\n    );\n  }\n}\n\nexport default AssetsUnderManagement;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"DepositRedeem_input__28jp2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"twitterIcon\":\"TwitterShareButton_twitterIcon__2QCmn\"};","import moment from 'moment';\nimport theme from '../theme';\nimport { Bar } from '@nivo/bar';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\nimport { Flex, Text, Box } from 'rimble-ui';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass StatsChart extends Component {\n  state = {\n    chartProps:{},\n    chartType:null,\n    chartData:null,\n    chartWidth:null\n  };\n\n  async componentDidMount() {\n    this.setState({\n      chartData:null,\n      chartType:null,\n      chartProps:null,\n    });\n    this.loadUtils();\n    this.loadApiData();\n  }\n\n  async componentDidUpdate(prevProps) {\n    const showAdvancedChanged = prevProps.showAdvanced !== this.props.showAdvanced;\n    const apiResultsChanged = prevProps.apiResults !== this.props.apiResults;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    if (apiResultsChanged || showAdvancedChanged || tokenChanged){\n      this.componentDidMount();\n    }\n  }\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  parseAum = value => {\n    return (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.tokenConfig || !this.props.selectedToken || !this.props.chartMode || !this.props.apiResults){\n      return false;\n    }\n\n    const CustomTooltipRow = props => (\n      <Flex\n        mb={2}\n        width={1}\n        alignItems={'center'}\n        flexDirection={'row'}\n      >\n        <Flex\n          pr={2}\n          style={{\n            flexBasis:'0',\n            flex:'1 1 0px'\n          }}\n          alignItems={'center'}\n          justifyContent={'flex-start'}\n        > \n          {\n            props.color && \n            <Box\n              mr={2}\n              width={'10px'}\n              height={'10px'}\n              borderRadius={'50%'}\n              backgroundColor={props.color}\n            >\n            </Box>\n          }\n          <Text\n            fontSize={1}\n            fontWeight={2}\n            textAlign={'left'}\n            color={'dark-gray'}\n            style={{\n              textTransform:'capitalize'\n            }}\n          >\n            {props.label}\n          </Text>\n        </Flex>\n        <Flex\n          style={{\n            flexBasis:'0',\n            flex:'1 1 0px'\n          }}\n          alignItems={'center'}\n          justifyContent={'flex-end'}\n        >\n          <Text\n            fontSize={1}\n            fontWeight={3}\n            color={'cellText'}\n            textAlign={'right'}\n            style={{\n              whiteSpace:'nowrap'\n            }}\n            dangerouslySetInnerHTML={{\n              __html: props.value\n            }}\n          >\n          </Text>\n        </Flex>\n      </Flex>\n    );\n\n    const CustomTooltip = props => {\n      return (\n        <DashboardCard\n          key={props.point.id}\n          cardProps={{\n            py:2,\n            px:3,\n            width:1,\n            left: props.point.data.itemPos>50 ? '-110%' : '0'\n          }}\n        >\n          <Flex\n            width={1}\n            flexDirection={'column'}\n          >\n            {\n              props.point.data.xFormatted && \n                <Text\n                  mb={2}\n                  fontSize={1}\n                  fontWeight={3}\n                  color={'cellText'}\n                  textAlign={'left'}\n                >\n                  {props.point.data.xFormatted}\n                </Text>\n            }\n            {props.children}\n          </Flex>\n        </DashboardCard>\n      );\n    };\n\n    const maxGridLines = 4;\n    const apiResults = this.props.apiResults;\n    const apiResults_unfiltered = this.props.apiResults_unfiltered;\n    const totalItems = apiResults.length;\n    const protocols = Object.assign([],this.props.tokenConfig.protocols);\n    // const compoundProtocol = this.props.tokenConfig.protocols.find( p => (p.name === 'compound'));\n\n    const versionInfo = globalConfigs.stats.versions[this.props.idleVersion];\n\n    let keys = {};\n    let tempData = {};\n    let gridYStep = 0;\n    let itemIndex = 0;\n    let chartData = [];\n    let chartProps = {};\n    let chartType = Line;\n    let gridYValues = [];\n    let maxChartValue = 0;\n    let axisBottomIndex = 0;\n    let idleChartData = null;\n    let firstIdleBlock = null;\n\n    switch (this.props.chartMode){\n      case 'VOL':\n        let divergingData = {};\n\n        const startTimestamp = parseInt(apiResults_unfiltered[0].timestamp);\n        const endTimestamp = parseInt(moment()._d.getTime()/1000);\n\n        for (let timestamp=startTimestamp;timestamp<=endTimestamp;timestamp+=86400){\n          const date = moment(timestamp*1000).format(\"YYYY/MM/DD\");\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n        }\n\n        let lastRow = null;\n        apiResults_unfiltered.forEach(row => {\n          const date = moment(row.timestamp*1000).format(\"YYYY/MM/DD\");\n          const idleTokens = this.functionsUtil.fixTokenDecimals(row.idleSupply,18);\n\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp:row.timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n\n          if (lastRow){\n            const idleTokensPrev = this.functionsUtil.fixTokenDecimals(lastRow.idleSupply,18);\n            const idleTokensDiff = !idleTokens.eq(idleTokensPrev);\n            if (idleTokensDiff){\n              const diff = idleTokens.minus(idleTokensPrev);\n              // Deposits\n              if (diff.gte(0)){\n                divergingData[date].deposits+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,divergingData[date].deposits);\n              } else {\n                divergingData[date].redeems+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,Math.abs(divergingData[date].deposits));\n              }\n            }\n\n          } else {\n            divergingData[date].deposits+=parseFloat(idleTokens);\n          }\n\n          lastRow = row;\n        });\n\n        chartData = Object.values(divergingData).filter(v => {\n          return (!this.props.startTimestamp || v.timestamp>=this.props.startTimestamp) && (!this.props.endTimestamp || v.timestamp<=this.props.endTimestamp);\n        });\n\n        let maxRange = 0;\n        chartData.forEach(v => {\n          maxRange = Math.max(maxRange,Math.abs(v.deposits),Math.abs(v.redeems));\n        })\n\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          indexBy: 'date',\n          enableLabel: false,\n          minValue:-maxRange,\n          maxValue:maxRange,\n          label: d => {\n            return Math.abs(d.value);\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days',\n          },\n          axisLeft: null,\n          axisRight: {\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:8,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(Math.abs(v),0)\n          },\n          markers: [\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { strokeOpacity: 0 },\n              textStyle: { fill: theme.colors.transactions.action.deposit },\n              legend: 'deposits',\n              legendPosition: 'top-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { stroke: theme.colors['dark-gray'], strokeDasharray: '5 3' },\n              textStyle: { fill: theme.colors.transactions.action.redeem },\n              legend: 'redeems',\n              legendPosition: 'bottom-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n          ],\n          keys:['deposits','redeems'],\n          padding:0.4,\n          colors:[theme.colors.transactions.action.deposit, theme.colors.transactions.action.redeem],\n          labelTextColor: 'inherit:darker(1.4)',\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 80 : 100,\n              itemHeight: 18,\n              translateX: 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            },\n            tooltip:{\n              container:{\n                boxShadow:null,\n                background:null\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 50, bottom: 45, left: 50 } : { top: 20, right: 70, bottom: 70, left: 50 },\n          tooltip:(data) => {\n            const xFormatted = this.functionsUtil.strToMoment(data.indexValue).format('MMM DD');\n            const point = {\n              id:data.id,\n              data:{\n                xFormatted\n              }\n            };\n            const depositFormatted = this.functionsUtil.abbreviateNumber(data.data.deposits,2)+' '+this.props.selectedToken;\n            const redeemFormatted = this.functionsUtil.abbreviateNumber(data.data.redeems,2)+' '+this.props.selectedToken;\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                <CustomTooltipRow\n                  label={'Deposits'}\n                  color={theme.colors.deposit}\n                  value={depositFormatted}\n                />\n                <CustomTooltipRow\n                  label={'Redeem'}\n                  color={theme.colors.redeem}\n                  value={redeemFormatted}\n                />\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      /*\n      case 'AUM_ALL':\n        await this.functionsUtil.asyncForEach(Object.keys(availableTokens[globalConfigs.network.requiredNetwork]),async (tokenName,i) => {\n          const tokenConfig = availableTokens[globalConfigs.network.requiredNetwork][tokenName];\n          const tokenDataApi = await this.props.getTokenData(tokenConfig.address);\n          chartData.push({\n            id:tokenName,\n            color: tokenConfig.color,\n            data: tokenDataApi.map((d,i) => {\n              const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n              const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,tokenConfig.decimals);\n              const aum = idleTokens.times(idlePrice);\n              return {\n                x: moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\"),\n                y: parseInt(aum.toString())\n              };\n            })\n          });\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken,\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v),\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            legendPosition: 'middle'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            format: '%b %d',\n            tickValues: this.props.isMobile ? 'every 4 days' : 'every 3 days',\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 36,\n            legendPosition: 'middle'\n          },\n          enableArea:false,\n          curve:\"linear\",\n          enableSlices:'x',\n          enableGridX:true,\n          enableGridY:false,\n          colors:d => d.color,\n          pointSize:0,\n          pointColor:{ from: 'color', modifiers: []},\n          pointBorderWidth:1,\n          pointLabel:\"y\",\n          pointLabelYOffset:-12,\n          useMesh:true,\n          animate:false,\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 60, bottom: 40, left: 60 },\n        };\n      break;\n      */\n      case 'AUM':\n\n        maxChartValue = 0;\n\n        chartData.push({\n          id:'AUM',\n          color: 'hsl('+globalConfigs.stats.tokens[this.props.selectedToken].color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n            const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n            const aum = idleTokens.times(idlePrice);\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(aum.toString());\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x,y };\n          })\n        });\n\n        // Add allocation\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          apiResults.map((d,i) => {\n            return d.protocolsData.filter((protocolAllocation,x) => {\n                return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            })\n            .map((protocolAllocation,z) => {\n              const protocolPaused = this.functionsUtil.BNify(protocolAllocation.rate).eq(0);\n              if (!protocolPaused){\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals));\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                let foundItem = chartData[0].data.filter(item => { return item.x === x });\n                if (foundItem){\n                  foundItem = foundItem[0];\n                  const pos = chartData[0].data.indexOf(foundItem);\n                  if (!foundItem.allocations){\n                    foundItem.allocations = {};\n                  }\n                  foundItem.allocations[p.name] = y;\n                  chartData[0].data[pos] = foundItem;\n                }\n              }\n              return undefined;\n            })[0]\n          }).filter((v) => { return v !== undefined; } )\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:v => this.functionsUtil.formatMoney(v,v<1 ? 3 :0),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:true,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            if (typeof point === 'object' && typeof point.data === 'object'){\n              return (\n                <CustomTooltip\n                  point={point}\n                >\n                  <CustomTooltipRow\n                    label={point.serieId}\n                    color={point.serieColor}\n                    value={point.data.yFormatted}\n                  />\n                  {\n                    point.data.allocations && typeof point.data.allocations === 'object' &&\n                      Object.keys(point.data.allocations).map(protocolName => {\n                        const protocolColor = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n                        const protocolAllocation = point.data.allocations[protocolName];\n                        const protocolAllocationFormatted = this.functionsUtil.formatMoney(protocolAllocation,protocolAllocation<1 ? 3 : 0);\n                        const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                        return (\n                          <CustomTooltipRow\n                            label={protocolName}\n                            color={protocolColor}\n                            key={`${point.id}_${protocolName}`}\n                            value={`${protocolAllocationFormatted} (${protocolAllocationPerc})`}\n                          />\n                        );\n                      })\n                  }\n                </CustomTooltip>\n              );\n              /*\n              return (\n                <div\n                    key={point.id}\n                    style={{\n                      background: 'white',\n                      color: 'inherit',\n                      fontSize: 'inherit',\n                      borderRadius: '2px',\n                      boxShadow: 'rgba(0, 0, 0, 0.25) 0px 1px 2px',\n                      padding: '5px 9px'\n                    }}\n                >\n                  <div>\n                    <table style={{width:'100%',borderCollapse:'collapse'}}>\n                      <tbody>\n                        <tr>\n                          <td style={{padding:'3px 5px'}}>\n                            <span style={{display:'block', width: '12px', height: '12px', background: point.serieColor}}></span>\n                          </td>\n                          <td style={{padding:'3px 5px'}}>{point.serieId}</td>\n                          <td style={{padding:'3px 5px'}}><strong>{point.data.yFormatted}</strong></td>\n                        </tr>\n                        {\n                          point.data.allocations && typeof point.data.allocations === 'object' &&\n                            Object.keys(point.data.allocations).map(protocolName => {\n                              const protocolColor = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n                              const protocolAllocation = this.functionsUtil.formatMoney(point.data.allocations[protocolName],0);\n                              const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                              return (\n                                <tr key={`${point.id}_${protocolName}`}>\n                                  <td style={{padding:'3px 5px'}}>\n                                    <span style={{display:'block', width: '12px', height: '12px', background: protocolColor}}></span>\n                                  </td>\n                                  <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{protocolName}</td>\n                                  <td style={{padding:'3px 5px'}}><strong>{protocolAllocation}</strong> ({protocolAllocationPerc})</td>\n                                </tr>\n                              );\n                            })\n                        }\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              );\n              */\n            }\n\n            return null;\n          }\n        };\n      break;\n      case 'ALL':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\");\n\n          let row = {\n            date\n          };\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const foundProtocol = this.props.tokenConfig.protocols.find((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() });\n            if (foundProtocol){\n              const protocolName = this.functionsUtil.capitalize(foundProtocol.name);\n              if (!protocolPaused){\n                let allocation = parseFloat(this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals));\n                keys[protocolName] = 1;\n                row[protocolName] = allocation;\n                row[`${protocolName}Color`] = 'hsl('+globalConfigs.stats.protocols[protocolName.toLowerCase()].color.hsl.join(',')+')';\n                // console.log(protocolName,this.functionsUtil.BNify(protocolData.allocation).toString(),this.props.tokenConfig.decimals,allocation);\n                maxChartValue = Math.max(maxChartValue,allocation);\n              } else {\n                row[protocolName] = 0;\n              }\n            }\n          });\n\n\n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n            orient: 'left',\n            tickSize: 0,\n            tickPadding: 10,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            tickValues:gridYValues,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickSize: 0,\n            tickPadding: 10,\n            orient: 'bottom-left',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize:this.props.isMobile ? 12 : 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize:this.props.isMobile ? 12 : 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 60 },\n          tooltip:({ id, value, color }) => {\n            const allocation = this.functionsUtil.formatMoney(value,0);\n            return (\n              <table style={{width:'100%',borderCollapse:'collapse'}}>\n                <tbody>\n                  <tr>\n                    <td style={{padding:'3px 5px'}}>\n                      <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                    </td>\n                    <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                    <td style={{padding:'3px 5px'}}><strong>{allocation} {this.props.selectedToken}</strong></td>\n                  </tr>\n                </tbody>\n              </table>\n            )\n          }\n        }\n      break;\n      case 'ALL_PERC':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\")\n          let row = {\n            date:moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\")\n          };\n          if (tempData[date]){\n            row = tempData[date];\n          }\n\n          const totalAllocation = d.protocolsData.reduce((accumulator,protocolAllocation) => {\n            const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n            return this.functionsUtil.BNify(accumulator).plus(allocation);\n          },0);\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const protocolName = this.props.tokenConfig.protocols.filter((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() })[0].name;\n            if (!protocolPaused){\n              const allocation = this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals);\n              const allocationPerc = parseFloat(allocation.div(totalAllocation).times(100));\n              keys[protocolName] = 1;\n              row[protocolName] = allocationPerc;\n              row[`${protocolName}Color`] = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n            } else if (typeof row[protocolName] !== undefined) {\n              row[protocolName] = 0;\n            } \n          });\n          \n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          data: chartData,\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 40, bottom: 40, left: 60 },\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => parseInt(v)+'%'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            orient: 'bottom',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          tooltip:({ id, value, color }) => {\n            const allocation = parseInt(value)===100 ? this.functionsUtil.formatMoney(value,0) : this.functionsUtil.formatMoney(value,2);\n            return (\n              <table style={{width:'100%',borderCollapse:'collapse'}}>\n                <tbody>\n                  <tr>\n                    <td style={{padding:'3px 5px'}}>\n                      <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                    </td>\n                    <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                    <td style={{padding:'3px 5px'}}><strong>{allocation}%</strong></td>\n                  </tr>\n                </tbody>\n              </table>\n            )\n          }\n        }\n      break;\n      case 'APR':\n\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n          chartData.push({\n            id:p.name,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                const protocolPaused = this.functionsUtil.BNify(protocolAllocation.rate).eq(0);\n                if (!protocolPaused){\n                  const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                  const y = parseFloat(this.functionsUtil.fixTokenDecimals(protocolAllocation.rate,18));\n\n                  maxChartValue = Math.max(maxChartValue,y);\n\n                  return { x, y };\n                }\n                return undefined;\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(this.functionsUtil.fixTokenDecimals(d.idleRate,18));\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x, y };\n          })\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(2)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    // const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'SCORE':\n\n        let prevValue = 0;\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n\n          chartData.push({\n            id:p.name,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(protocolAllocation.defiScore);\n\n                y = isNaN(y) || !y ? prevValue : y;\n                prevValue = y;\n                maxChartValue = Math.max(maxChartValue,y);\n\n                return { x, y };\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            let y = parseFloat(d.idleScore);\n            y = isNaN(y) || !y ? prevValue : y;\n            prevValue = y;\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x, y };\n          })\n        });\n\n        // debugger;\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(1),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE_V4':\n\n        itemIndex = 0;\n        maxChartValue = 0;\n        // let prevApy = null;\n        let prevApr = null;\n        let prevData = null;\n        let startBalance = this.functionsUtil.BNify(1);\n        let currentBalance = this.functionsUtil.BNify(1);\n        let avgApy = this.functionsUtil.BNify(0);\n\n        // console.log('PRICE_V4',apiResults);\n\n        idleChartData = apiResults.map((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const apr = this.functionsUtil.fixTokenDecimals(d.idleRate,18).div(100);\n          // const apy = this.functionsUtil.apr2apy(apr);\n          \n          avgApy = avgApy.plus(apr.times(100));\n\n          if (prevApr){\n            const days = (d.timestamp-prevData.timestamp)/86400;\n            // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n            const earnings = currentBalance.times(prevApr.times(days).div(365));\n            currentBalance = currentBalance.plus(earnings);\n\n            const earning = currentBalance.div(startBalance).minus(1).times(100);\n            y = parseFloat(earning);\n\n            // apy = earning.times(365).div(totDays).toFixed(2);\n            apy = avgApy.div(i+1).toFixed(2);\n          }\n\n          prevData = d;\n          // prevApy = apy;\n          prevApr = apr;\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          return { x, y, apy, blocknumber, itemPos };\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        protocols.forEach( p => {\n\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          // prevApy = null;\n          prevApr = null;\n          prevData = null;\n          let baseProfit = 0;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n          avgApy = this.functionsUtil.BNify(0);\n          startBalance = this.functionsUtil.BNify(1);\n          currentBalance = this.functionsUtil.BNify(1);\n\n          apiResults.forEach( (d,i) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              const protocolRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n                if (protocolData[field]){\n                  return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(protocolData[field]));\n                }\n                return this.functionsUtil.BNify(acc);\n              },0) : this.functionsUtil.BNify(protocolData[rateField]);\n\n              const protocolPaused = protocolRate.eq(0);\n              if (!protocolPaused){\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null){\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => (d1.blocknumber>=firstProtocolBlock) );\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                    }\n                  }\n                }\n\n                let rowData = {};\n\n                let y = 0;\n                let apy = 0;\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                const apr = this.functionsUtil.fixTokenDecimals(protocolRate,18).div(100);\n\n                avgApy = avgApy.plus(apr.times(100));\n                // const apy = this.functionsUtil.apr2apy(apr);\n\n                if (prevData){\n                  const days = (d.timestamp-prevData.timestamp)/86400;\n                  // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n                  const earnings = currentBalance.times(prevApr.times(days).div(365));\n                  currentBalance = currentBalance.plus(earnings);\n\n                  const earning = currentBalance.div(startBalance).minus(1).times(100);\n                  y = parseFloat(earning)+baseProfit;\n\n                  apy = avgApy.div(i+1).toFixed(2);\n                }\n\n                prevData = d;\n                prevApr = apr;\n\n                if (firstIdleBlock === null){\n                  firstIdleBlock = parseInt(d.blocknumber);\n                }\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n                // const blocknumber = d.blocknumber;\n\n                itemIndex++;\n\n                rowData = {\n                  x,\n                  y,\n                  apy,\n                  itemPos\n                };\n\n                itemIndex++;\n                chartRow.data.push(rowData);\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: idleChartData\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              itemWidth: this.props.isMobile ? 70 : 100,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE':\n        // let prevTokenPrice = null;\n        maxChartValue = 0;\n        let firstTokenPrice = null;\n\n        idleChartData = apiResults.map((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          let days = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const tokenPrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n\n          if (!firstTokenPrice){\n            firstTokenPrice = tokenPrice;\n          } else {\n            y = parseFloat(tokenPrice.div(firstTokenPrice).minus(1).times(100));\n\n            days = (d.timestamp-apiResults[0].timestamp)/86400;\n            const earning = tokenPrice.div(firstTokenPrice).minus(1).times(100);\n            apy = earning.times(365).div(days).toFixed(2);\n\n            // console.log(firstTokenPrice.toString(),tokenPrice.toString(),earning.toString(),days,y,apy);\n          }\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          return { x, y, apy, blocknumber, itemPos };\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        await this.functionsUtil.asyncForEach(protocols,async (p) => {\n\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          let baseProfit = 0;\n          firstTokenPrice = null;\n          let lastRowData = null;\n          let lastTokenPrice = null;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n\n          await this.functionsUtil.asyncForEach(apiResults,async (d) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData && protocolData[rateField]){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              const protocolPaused = this.functionsUtil.BNify(protocolData[rateField]).eq(0);\n              if (!protocolPaused){\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null){\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => {\n                      return d1.blocknumber>=firstProtocolBlock;\n                    });\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                    }\n                  }\n                }\n\n                let rowData = {};\n                let tokenExchangeRate = protocolData.price;\n                let tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n                // Take data from\n                if (protocolInfo && protocolInfo.data && protocolInfo.data[p.address.toLowerCase()] && protocolInfo.data[p.address.toLowerCase()][d.blocknumber]){\n                  tokenExchangeRate = this.functionsUtil.BNify(globalConfigs.stats.protocols[p.name].data[p.address.toLowerCase()][d.blocknumber]);\n                  tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                }/* else if (p.name === 'aave'){\n                  // Token holders (aDAI = 0xc025c03e10f656d3ee76685d53d236824d8ef3da , aUSDC = 0xd2c734fbd8f5d1c809185e014016dd4097e94711)\n                  let aaveTokenBalance = await this.functionsUtil.genericContractCall(p.token,'balanceOf',['0xd2c734fbd8f5d1c809185e014016dd4097e94711'],{},d.blocknumber);\n                  if (aaveTokenBalance){\n                    if (!Object.values(aave_data).length){\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(1,p.decimals);\n                      aave_data[d.blocknumber] = aaveTokenBalance.toString();\n                    } else {\n                      const firstBalance = Object.values(aave_data)[0];\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(this.functionsUtil.BNify(aaveTokenBalance).div(this.functionsUtil.BNify(firstBalance)).toFixed(p.decimals),p.decimals);\n                      aave_data[d.blocknumber] = tokenExchangeRate.toString();\n                    }\n                  }\n                }\n                */\n\n                let y = baseProfit;\n                let apy = 0;\n\n                if (!firstTokenPrice){\n                  firstTokenPrice = tokenPriceFixed;\n                } else {\n                  if (tokenPriceFixed.lt(lastTokenPrice)){\n                    firstTokenPrice = tokenPriceFixed;\n                    const lastYDiff = chartRow.data[chartRow.data.length-1].y-chartRow.data[chartRow.data.length-2].y;\n                    y = lastRowData.y+lastYDiff;\n                    baseProfit = y;\n                  } else {\n                    y += parseFloat(tokenPriceFixed.div(firstTokenPrice).minus(1).times(100));\n                  }\n\n                  const days = (d.timestamp-apiResults[0].timestamp)/86400;\n                  const earning = tokenPriceFixed.div(firstTokenPrice).minus(1).times(100);\n                  apy = earning.times(365).div(days).toFixed(2);\n                }\n\n                y = Math.max(0,y);\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n\n                rowData = {\n                  x,\n                  y,\n                  apy,\n                  itemPos\n                };\n\n                itemIndex++;\n                lastRowData = rowData;\n                chartRow.data.push(rowData);\n                lastTokenPrice = tokenPriceFixed;\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: idleChartData\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              itemWidth: this.props.isMobile ? 70 : 100,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      chartType,\n      chartProps,\n      chartData\n    });\n  }\n\n  render() {\n    return(\n      <GenericChart\n        showLoader={true}\n        {...this.state.chartProps}\n        height={this.props.height}\n        type={this.state.chartType}\n        data={this.state.chartData}\n        width={this.state.chartWidth}\n        isMobile={this.props.isMobile}\n        parentId={this.props.parentId}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default StatsChart;","import { Flex, Text } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass Rebalance extends Component {\n\n  state = {\n    loading:true,\n    processing:{\n      rebalance:{\n        txHash:null,\n        loading:false\n      },\n    },\n    shouldRebalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.checkRebalance();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged || accountChanged){\n      this.checkRebalance();\n    }\n  }\n\n  checkRebalance = async () => {\n    this.setState({\n      loading:true,\n    });\n\n    const shouldRebalance = await this.functionsUtil.checkRebalance(this.props.tokenConfig);\n\n    this.setState({\n      loading:false,\n      shouldRebalance\n    });\n  }\n\n  rebalance = async (e) => {\n    e.preventDefault();\n\n    const callback = (tx,error) => {\n\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Rebalance',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      let txDenied = false;\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      if (tx.status === 'success'){\n        // Toast message\n        window.toastProvider.addMessage(`Rebalance completed`, {\n          secondaryMessage: `Now the pool is balanced!`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"success\",\n        });\n\n      } else if (!txDenied){\n        window.toastProvider.addMessage(`Rebalance error`, {\n          secondaryMessage: `The rebalance has failed, try again...`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"failure\",\n        });\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          rebalance:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n\n      this.checkRebalance();\n    }\n\n    const callback_receipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            rebalance:{\n              ...prevState.processing.rebalance,\n              txHash\n            }\n          }\n        })\n      );\n    };\n\n    this.props.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'rebalance', [], null , callback, callback_receipt);\n\n    this.setState({\n      processing:{\n        rebalance:{\n          txHash:null,\n          loading:true\n        }\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Flex\n        px={3}\n        width={1}\n        minHeight={'100px'}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n      {\n        this.state.loading ? (\n          <FlexLoader\n            flexProps={{\n              flexDirection:'row'\n            }}\n            loaderProps={{\n              size:'30px'\n            }}\n            textProps={{\n              ml:2\n            }}\n            text={'Checking rebalance...'}\n          />\n        ) : (\n          this.state.processing.rebalance.loading ? (\n            <TxProgressBar web3={this.props.web3} waitText={`Rebalance estimated in`} endMessage={`Finalizing rebalance request...`} hash={this.state.processing.rebalance.txHash} />\n          ) : (\n            <Flex\n              width={1}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                mt={0}\n                mb={3}\n                textAlign={'center'}\n              >\n                {this.state.shouldRebalance ? 'Rebalance the entire pool. All users will bless you.' : 'The pool is already balanced.'}\n              </Text>\n              <RoundButton\n                buttonProps={{\n                  width:'auto',\n                  disabled:!this.state.shouldRebalance\n                }}\n                handleClick={e => this.rebalance(e)}\n              >\n                Rebalance\n              </RoundButton>\n            </Flex>\n          )\n        )\n      }\n      </Flex>\n    )\n  }\n}\n\nexport default Rebalance;","import React from \"react\";\nimport {\n  Modal,\n  Button,\n  Flex,\n  Field,\n  Select\n} from \"rimble-ui\";\nimport moment from 'moment';\nimport ModalCard from './ModalCard';\nimport 'react-date-range/dist/styles.css';\nimport { DateRange } from 'react-date-range';\nimport 'react-date-range/dist/theme/default.css';\n\nclass DateRangeModal extends React.Component {\n\n  state = {\n    quickSelection:'',\n    ranges:{\n      startDate: this.props.startDate ? this.props.startDate : new Date(),\n      endDate: this.props.endDate ? this.props.endDate : new Date(),\n      key: 'selection'\n    }\n  }\n\n  handleSelect(ranges){\n    this.setState({\n      quickSelection:'',\n      ranges:ranges.selection\n    });\n  }\n\n  handleQuickSelect(e){\n    let startDate = null;\n    let endDate = moment(new Date());\n    const quickSelection = e.target.value;\n\n    switch (quickSelection){\n      case 'day':\n        startDate = endDate.clone().subtract(1,'day');\n      break;\n      case 'week':\n        startDate = endDate.clone().subtract(1,'week');\n      break;\n      case 'weeks':\n        startDate = endDate.clone().subtract(2,'week');\n      break;\n      case 'month':\n        startDate = endDate.clone().subtract(1,'month');\n      break;\n      default:\n        startDate = null;\n        endDate = null;\n      break;\n    }\n\n    if (startDate && endDate){\n      startDate = startDate._d;\n      endDate = endDate._d;\n\n      const ranges = {\n        startDate,\n        endDate,\n        key:'selection'\n      };\n\n      this.setState({\n        ranges,\n        quickSelection\n      }, () => {\n        this.closeModal();\n      });\n    }\n  }\n\n  componentDidUpdate = (prevProps) => {\n    if (prevProps.startDate !== this.props.startDate || prevProps.endDate !== this.props.endDate){\n      this.setState({\n        ranges:{\n          startDate: this.props.startDate ? this.props.startDate : new Date(),\n          endDate: this.props.endDate ? this.props.endDate : new Date(),\n          key: 'selection'\n        }\n      });\n    }\n  }\n\n  closeModal(){\n    const newState = this.props.handleSelect(this.state.ranges,this.state.quickSelection);\n    const ranges = {\n      startDate:newState.startTimestampObj ? newState.startTimestampObj._d : new Date(),\n      endDate:newState.endTimestampObj ? newState.endTimestampObj._d : new Date(),\n      key: 'selection'\n    };\n    this.setState({\n      ranges\n    });\n    this.props.closeModal();\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          <ModalCard.Header title={'Select Date Range'}>\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex width={1} flexDirection={'column'} alignItems={'center'}>\n              <Field label=\"Quick Date Selection\" style={{display:'flex',width:'100%',alignItems:'stretch',justifyContent:'center'}}>\n                <Select\n                  style={{\n                    color:'#7d888d',\n                    fontSize:'14px',\n                    height:'2.5em',\n                    boxShadow:'none'\n                  }}\n                  width={'100%'}\n                  required={true}\n                  onChange={this.handleQuickSelect.bind(this)}\n                  value={this.state.quickSelection}\n                  options={[\n                    { value: '', label: \"Select an option\" },\n                    { value: \"day\", label: \"Last day\" },\n                    { value: \"week\", label: \"Last week\" },\n                    { value: \"weeks\", label: \"Last 2 weeks\" },\n                    { value: \"month\", label: \"Last month\" }\n                  ]}\n                />\n              </Field>\n              <DateRange\n                ranges={[this.state.ranges]}\n                minDate={this.props.minDate}\n                maxDate={this.props.maxDate}\n                onChange={this.handleSelect.bind(this)}\n              />\n            </Flex>\n          </ModalCard.Body>\n          <ModalCard.Footer>\n            <Flex px={[2,0]} flexDirection={['column', 'row']} width={1} justifyContent={'center'}>\n              <Button\n                borderRadius={4}\n                my={2}\n                mx={[0, 2]}\n                size={this.props.isMobile ? 'small' : 'medium'}\n                onClick={ e => this.closeModal(e) }\n              >\n              APPLY\n              </Button>\n            </Flex>\n          </ModalCard.Footer>\n        </ModalCard>\n      </Modal>\n    );\n  }\n\n}\n\nexport default DateRangeModal;","import { Flex } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass ExecuteTransaction extends Component {\n\n  state = {\n    txStatus:null,\n    processing:{\n      txHash:null,\n      loading:false\n    }\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  execute(){\n\n    const callback = (tx,error) => {\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Transaction',\n        eventLabel: this.props.methodName,\n        eventAction: this.props.contractName\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      const txSucceeded = tx.status === 'success';\n      if (txSucceeded){\n        if (typeof this.props.callback === 'function'){\n          this.props.callback();\n        }\n      }\n\n      this.setState({\n        txStatus:tx.status,\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      });\n    };\n\n    const callbackReceipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        txStatus:'processing',\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    this.functionsUtil.contractMethodSendWrapper(this.props.contractName,this.props.methodName,this.props.params,callback,callbackReceipt);\n\n    this.setState((prevState) => ({\n      txStatus:'loading',\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  render() {\n    const ExecuteComponent = this.props.Component;\n    return (\n      <Flex\n        {...this.props.parentProps}\n      >\n        {\n          this.state.txStatus === 'success' && this.props.children ?\n            this.props.children\n          : this.state.processing && this.state.processing.loading ? (\n            <TxProgressBar\n              web3={this.props.web3}\n              {...this.props.progressBarProps}\n              hash={this.state.processing.txHash}\n              waitText={`${this.props.action} estimated in`}\n              cancelTransaction={this.cancelTransaction.bind(this)}\n              endMessage={`Finalizing ${this.props.action} request...`}\n            />\n          ) : (\n            <ExecuteComponent\n              onClick={this.execute.bind(this)}\n              {...this.props.componentProps}\n            >\n              {this.props.componentProps.value}\n            </ExecuteComponent>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default ExecuteTransaction;\n","import moment from 'moment';\nimport Title from '../Title/Title';\nimport StatsChart from './StatsChart';\nimport React, { Component } from 'react';\nimport Rebalance from '../Rebalance/Rebalance';\nimport StatsCard from '../StatsCard/StatsCard';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport GenericSelector from '../GenericSelector/GenericSelector';\nimport RoundIconButton from '../RoundIconButton/RoundIconButton';\nimport VariationNumber from '../VariationNumber/VariationNumber';\nimport AllocationChart from '../AllocationChart/AllocationChart';\nimport DateRangeModal from '../utilities/components/DateRangeModal';\nimport { Flex, Text, Heading, Box, Icon, Button, Link } from 'rimble-ui';\nimport ExecuteTransaction from '../ExecuteTransaction/ExecuteTransaction';\nimport AssetsUnderManagement from '../AssetsUnderManagement/AssetsUnderManagement';\n\nclass Stats extends Component {\n  state = {\n    aum:null,\n    apr:null,\n    days:'-',\n    delta:null,\n    earning:null,\n    minDate:null,\n    maxDate:null,\n    carouselMax:1,\n    rebalances:'-',\n    buttonGroups:[],\n    apiResults:null,\n    carouselIndex:0,\n    idleVersion:null,\n    statsVersions:{},\n    minStartTime:null,\n    endTimestamp:null,\n    showAdvanced:true,\n    govTokensPool:null,\n    unlentBalance:null,\n    quickSelection:null,\n    startTimestamp:null,\n    endTimestampObj:null,\n    shouldRebalance:null,\n    carouselOffsetLeft:0,\n    startTimestampObj:null,\n    showRefreshIdleSpeed:false,\n    apiResults_unfiltered:null,\n    dateRangeModalOpened:false\n  };\n\n  quickSelections = {\n    day:'Last day',\n    week:'Last week',\n    weeks:'Last 2 weeks',\n    month:'Last month'\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount() {\n    this.loadUtils();\n    await this.loadParams();\n  }\n\n  componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  showRefreshIdleSpeed(){\n    this.setState({\n      showRefreshIdleSpeed:true\n    });\n  }\n\n  getLatestAvailableVersion(){\n    const statsVersions = globalConfigs.stats.versions;\n    let latestVersion = null;\n    Object.keys(statsVersions).forEach( version => {\n      const versionInfo = statsVersions[version];\n      if (versionInfo.enabledStrategies.includes(this.props.selectedStrategy)){\n        latestVersion = version;\n      }\n    });\n\n    return latestVersion;\n  }\n\n  getVersionInfo(version){\n    if (!version){\n      version = this.state.idleVersion;\n    }\n\n    if (!globalConfigs.stats.versions[version]){\n      return null;\n    }\n\n    const versionInfo = Object.assign({},globalConfigs.stats.versions[version]);\n\n    if (versionInfo.strategiesParams && versionInfo.strategiesParams[this.props.selectedStrategy]){\n      const versionInfoExtra = versionInfo.strategiesParams[this.props.selectedStrategy];\n      Object.keys(versionInfoExtra).forEach( param => {\n        versionInfo[param] = versionInfoExtra[param];\n      });\n    }\n\n    return versionInfo;\n  }\n\n  async loadParams() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    const newState = {};\n    const { match: { params } } = this.props;\n\n    const currentNetworkAvailableTokens = Object.keys(this.props.availableTokens);\n\n    if (!!params.customToken && currentNetworkAvailableTokens.indexOf(params.customToken.toUpperCase()) !== -1 ){\n      newState.selectedToken = params.customToken.toUpperCase();\n    } else {\n      newState.selectedToken = this.props.selectedToken.toUpperCase();\n    }\n\n    newState.tokenConfig = this.props.availableTokens[newState.selectedToken];\n    newState.minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp,'YYYY-MM-DD');\n    newState.maxEndDate = moment();\n\n    newState.endTimestampObj = moment(moment().format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    newState.latestVersion = this.getLatestAvailableVersion();\n    newState.idleVersion = this.state.idleVersion === null ? newState.latestVersion : this.state.idleVersion;\n\n    const versionInfo = this.getVersionInfo(newState.idleVersion);\n\n    // console.log('loadParams',newState.latestVersion,newState.idleVersion,versionInfo);\n\n    if (newState.idleVersion && versionInfo.endTimestamp){\n      const newEndTimestampObj = moment(moment(versionInfo.endTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.endTimestampObj.isAfter(newEndTimestampObj)){\n        newState.endTimestampObj = newEndTimestampObj;\n        newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n      }\n\n      if (!newState.maxEndDate || newState.maxEndDate.isAfter(newEndTimestampObj)){\n        newState.maxEndDate = newEndTimestampObj;\n      }\n    }\n\n    newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n\n    // Set start date\n    newState.startTimestampObj = newState.endTimestampObj.clone().subtract(1,'month');\n    newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n\n    if (newState.idleVersion && versionInfo.startTimestamp){\n      const newStartTimestampObj = moment(moment(versionInfo.startTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.startTimestampObj.isBefore(newStartTimestampObj)){\n        newState.startTimestampObj = newStartTimestampObj;\n        newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n      }\n\n      if (newState.minStartTime.isBefore(newStartTimestampObj)){\n        newState.minStartTime = newStartTimestampObj;\n      }\n    }\n\n    newState.minDate = newState.minStartTime._d;\n    newState.maxDate = newState.maxEndDate._d;\n\n    if (newState !== this.state){\n      await this.setStateSafe(newState);\n    }\n  }\n\n  setDateRange = (ranges,quickSelection=null) => {\n\n    const minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp);\n\n    let startTimestampObj = moment(ranges.startDate).isSameOrAfter(minStartTime) ? moment(ranges.startDate) : minStartTime;\n    let endTimestampObj = moment(ranges.endDate);\n\n    if (startTimestampObj.isSame(endTimestampObj)){\n      endTimestampObj.add(1,'day');\n    }\n\n    endTimestampObj = moment(endTimestampObj.format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    if (startTimestampObj.isBefore(this.state.minStartTime)){\n      startTimestampObj = this.state.minStartTime;\n    }\n\n    if (endTimestampObj.isAfter(this.state.maxEndDate)){\n      endTimestampObj = this.state.maxEndDate;\n    }\n\n    const startTimestamp = parseInt(startTimestampObj._d.getTime()/1000);\n    const endTimestamp = parseInt(endTimestampObj._d.getTime()/1000);\n\n    const newState = {\n      minStartTime,\n      endTimestamp,\n      quickSelection,\n      startTimestamp,\n      endTimestampObj,\n      startTimestampObj\n    };\n\n    this.setStateSafe(newState);\n\n    return newState;\n  }\n\n  toggleAdvancedCharts = (e) => {\n    e.preventDefault();\n    this.setStateSafe({\n      showAdvanced:!this.state.showAdvanced\n    });\n  }\n\n  setDateRangeModal = (dateRangeModalOpened) => {\n    if (dateRangeModalOpened !== this.state.dateRangeModalOpened){\n      this.setStateSafe({\n        dateRangeModalOpened\n      });\n    }\n  }\n\n  async componentDidMount() {\n\n    if (!this.props.web3){\n      this.props.initWeb3();\n      return false;\n    }\n\n    const style = document.createElement('style');\n    style.id = 'crisp-custom-style';\n    style.type = 'text/css';\n    style.innerHTML = `\n    .crisp-client{\n      display:none !important;\n    }`;\n    document.body.appendChild(style);\n\n    this.loadUtils();\n    await this.loadParams();\n    this.loadApiData();\n    this.loadCarousel();\n  }\n\n  loadCarousel(){\n    const carouselMax = this.props.isMobile ? 3 : 2;\n    this.setStateSafe({\n      carouselMax\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const strategyChanged = prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    const dateChanged = prevState.startTimestamp !== this.state.startTimestamp || prevState.endTimestamp !== this.state.endTimestamp;\n    const versionChanged = prevState.idleVersion !== this.state.idleVersion;\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n\n    if (mobileChanged){\n      this.loadCarousel();\n    }\n\n    if (contractsInitialized || tokenChanged || strategyChanged || versionChanged){\n      // console.log('componentDidUpdate',this.props.selectedStrategy,this.props.selectedToken);\n      await this.componentDidMount();\n    } else if (dateChanged){\n      this.loadApiData();\n    }\n  }\n\n  filterTokenData = (apiResults) => {\n    return apiResults.filter((r,i) => {\n      return (!this.state.startTimestamp || r.timestamp >= this.state.startTimestamp) && (!this.state.endTimestamp || r.timestamp <= this.state.endTimestamp);\n    });\n  }\n\n  setIdleVersion = idleVersion => {\n    this.setStateSafe({\n      idleVersion\n    });\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    // Get COMP APR\n    // const compAPR = await this.functionsUtil.getCompAPR(this.props.tokenConfig);\n    // console.log('compAPR',compAPR.toString());\n\n    const startTimestamp = this.state.minDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.minDate).format('DD/MM/YYYY 00:00:00'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n    const endTimestamp = this.state.maxDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.maxDate).format('DD/MM/YYYY 23:59:59'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n\n    const isRisk = ['v3','v4'].includes(this.state.idleVersion) && this.props.selectedStrategy === 'risk';\n    let apiResults_unfiltered = await this.functionsUtil.getTokenApiData(this.props.tokenConfig.address,isRisk,startTimestamp,endTimestamp,true,7200);\n\n    const apiResults = this.filterTokenData(apiResults_unfiltered);\n\n    // console.log('loadApiData',startTimestamp,endTimestamp,new Date(startTimestamp*1000),new Date(endTimestamp*1000),apiResults,apiResults_unfiltered);\n\n    if (!apiResults || !apiResults_unfiltered || !apiResults.length || !apiResults_unfiltered.length){\n      return false;\n    }\n\n    const firstResult = apiResults[0];\n    const lastResult = Object.values(apiResults).pop();\n\n    window.moment = moment;\n\n    let days = (lastResult.timestamp-firstResult.timestamp)/86400;\n    if (days === 0){\n      days = 1;\n    }\n\n    let apr = null;\n    let delta = 'N/A';\n\n    const idleTokens = this.functionsUtil.fixTokenDecimals(lastResult.idleSupply,18);\n    const firstIdlePrice = this.functionsUtil.fixTokenDecimals(firstResult.idlePrice,this.props.tokenConfig.decimals);\n    const lastIdlePrice = this.functionsUtil.fixTokenDecimals(lastResult.idlePrice,this.props.tokenConfig.decimals);\n\n    // Calculate AUM\n    let aum = idleTokens.times(lastIdlePrice);\n    // Convert Token balance\n    aum = await this.functionsUtil.convertTokenBalance(aum,this.props.selectedToken,this.props.tokenConfig,isRisk);\n\n    const compoundInfo = this.props.tokenConfig.protocols.filter((p) => { return p.name === 'compound' })[0];\n    const firstCompoundData = compoundInfo ? firstResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n    const lastCompoundData = compoundInfo ? lastResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n\n    if (this.state.idleVersion === 'v4') {\n\n      apr = apiResults.reduce( (sum,r) => {\n        const idleRate = this.functionsUtil.fixTokenDecimals(r.idleRate,18);\n        return this.functionsUtil.BNify(sum).plus(idleRate);\n      },0);\n\n      // Calculate average\n      apr = apr.div(apiResults.length);\n\n      if (compoundInfo){\n        const compoundWithCOMPInfo = globalConfigs.stats.protocols.compoundWithCOMP;\n        const rateField = compoundWithCOMPInfo.rateField ? compoundWithCOMPInfo.rateField : 'rate';\n\n        let compoundAvgApr = apiResults.reduce( (sum,r) => {\n\n          const compoundData = r.protocolsData.find((pData,x) => {\n            return pData.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase()\n          });\n\n          let compoundRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n            if (compoundData[field]){\n              return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(compoundData[field]));\n            }\n            return this.functionsUtil.BNify(acc);\n          },0) : this.functionsUtil.BNify(compoundData[rateField]);\n\n          compoundRate = this.functionsUtil.fixTokenDecimals(compoundRate,18);\n\n          return this.functionsUtil.BNify(sum).plus(compoundRate);\n        },0);\n\n        // Calculate average\n        compoundAvgApr = compoundAvgApr.div(apiResults.length);\n\n        // compoundAvgApr = this.functionsUtil.apr2apy(compoundAvgApr.div(100)).times(100);\n        // apr = this.functionsUtil.apr2apy(apr.div(100)).times(100);\n\n        delta = apr.minus(compoundAvgApr);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n\n      apr = apr.toFixed(2);\n\n    } else {\n      const earning = lastIdlePrice.div(firstIdlePrice).minus(1).times(100);\n      apr = earning.times(365).div(days).toFixed(2);\n      if (firstCompoundData && lastCompoundData){\n        const firstCompoundPrice = this.functionsUtil.fixTokenDecimals(firstCompoundData.price,this.props.tokenConfig.decimals);\n        const lastCompoundPrice = this.functionsUtil.fixTokenDecimals(lastCompoundData.price,this.props.tokenConfig.decimals);\n        const compoundApr = lastCompoundPrice.div(firstCompoundPrice).minus(1).times(100);\n        delta = earning.minus(compoundApr).times(365).div(days);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n    }\n\n    // Count rebalances\n    let rebalances = 0;\n    apiResults.forEach((row,index) => {\n      if (index){\n        const prevRow = apiResults[index-1];\n\n        const totalAllocation = row.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        const prevTotalAllocation = prevRow.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        let hasRebalanced = false;\n        row.protocolsData.forEach( p => {\n          if (hasRebalanced){\n            return;\n          }\n          const prevP = prevRow.protocolsData.find( prevP => (prevP.protocolAddr.toLowerCase() === p.protocolAddr.toLowerCase()) );\n          const allocation = this.functionsUtil.fixTokenDecimals(p.allocation,this.props.tokenConfig.decimals);\n          const prevAllocation = this.functionsUtil.fixTokenDecimals(prevP.allocation,this.props.tokenConfig.decimals);\n          const allocationPerc = parseInt(parseFloat(allocation.div(totalAllocation).times(100)));\n          const prevAllocationPerc = parseInt(parseFloat(prevAllocation.div(prevTotalAllocation).times(100)));\n          if (allocationPerc!==prevAllocationPerc){\n            rebalances++;\n            hasRebalanced = true;\n          }\n        });\n      }\n    });\n\n    // Add gov tokens balance to AUM\n    const govTokensPool = await this.functionsUtil.getGovTokenPool(null,null,'DAI');\n    if (govTokensPool){\n      aum = aum.plus(govTokensPool);\n    }\n\n    // Format AUM\n    aum = this.functionsUtil.formatMoney(parseFloat(aum));\n\n    let unlentBalance = await this.functionsUtil.getUnlentBalance(this.props.tokenConfig);\n    if (unlentBalance){\n      unlentBalance = this.functionsUtil.formatMoney(parseFloat(unlentBalance));\n    }\n\n    this.setStateSafe({\n      aum,\n      apr,\n      days,\n      delta,\n      apiResults,\n      rebalances,\n      govTokensPool,\n      unlentBalance,\n      apiResults_unfiltered\n    });\n  }\n\n  selectToken = async (strategy,token) => {\n    await this.props.setStrategyToken(strategy,token);\n    this.props.changeToken(token);\n  }\n\n  handleCarousel = action => {\n    let carouselIndex = this.state.carouselIndex;\n    if (action==='next' && carouselIndex<this.state.carouselMax){\n      carouselIndex++;\n    } else if (action==='back' && carouselIndex>0){\n      carouselIndex--;\n    }\n\n    const $element = window.jQuery(`#carousel-cursor > div:eq(${carouselIndex})`);\n    const carouselOffsetLeft = -parseFloat($element.position().left)+'px';\n\n    this.setStateSafe({\n      carouselIndex,\n      carouselOffsetLeft\n    });\n  }\n\n  render() {\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const apyLong = this.functionsUtil.getGlobalConfig(['messages','apyLong']);\n\n    if (!this.props.availableStrategies){\n      return (\n        <FlexLoader\n          textProps={{\n            textSize:4,\n            fontWeight:2\n          }}\n          loaderProps={{\n            mb:3,\n            size:'40px'\n          }}\n          flexProps={{\n            minHeight:'50vh',\n            flexDirection:'column'\n          }}\n          text={'Loading assets...'}\n        />\n      );\n    }\n\n    if (!this.props.selectedToken){\n      const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n      const enabledTokens = [];\n      const statsTokens = this.functionsUtil.getGlobalConfig(['stats','tokens']);\n      const statsProtocols = this.functionsUtil.getGlobalConfig(['stats','protocols']);\n      Object.keys(statsTokens).forEach(token => {\n        const tokenInfo = statsTokens[token];\n        if (tokenInfo.enabled){\n          enabledTokens.push(token);\n        }\n      });\n      return (\n        <Flex\n          mb={3}\n          width={1}\n          flexDirection={'column'}\n        >\n          <AssetsUnderManagement\n            {...this.props}\n          />\n          {\n            Object.keys(strategies).map(strategy => {\n              const strategyInfo = strategies[strategy];\n              const availableTokens = this.props.availableStrategies[strategy];\n              if (!availableTokens){\n                return false;\n              }\n              return (\n                <Box\n                  mb={2}\n                  width={1}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                  key={`strategy-container-${strategy}`}\n                >\n                  <Title\n                    mt={3}\n                    mb={[3,4]}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'baseline'}\n                      justifyContent={'center'}\n                    >\n                      {strategyInfo.title}\n                      {\n                        strategyInfo.titlePostfix &&\n                          <Text\n                            ml={2}\n                            fontWeight={3}\n                            fontSize={[2,4]}\n                            color={'dark-gray'}\n                          >\n                            {strategyInfo.titlePostfix}\n                          </Text>\n                      }\n                    </Flex>\n                  </Title>\n                  <AssetsList\n                    enabledTokens={enabledTokens}\n                    handleClick={(props) => this.selectToken(strategy,props.token)}\n                    cols={[\n                      {\n                        title:'CURRENCY',\n                        props:{\n                          width:[0.26,0.15]\n                        },\n                        fields:[\n                          {\n                            name:'icon',\n                            props:{\n                              mr:2,\n                              height:['1.4em','2.3em']\n                            }\n                          },\n                          {\n                            name:'tokenName'\n                          }\n                        ]\n                      },\n                      {\n                        title:'POOL',\n                        props:{\n                          width:[0.22,0.14],\n                        },\n                        fields:[\n                          {\n                            name:'allocationChart',\n                            mobile:false,\n                            parentProps:{\n                              width:0.3\n                            },\n                            style:{\n                              overflow:'visible'\n                            },\n                            showLoader:false,\n                          },\n                          {\n                            name:'pool',\n                            props:{\n                              ml:1\n                            },\n                            parentProps:{\n                              width:[1,0.7]\n                            }\n                          }\n                        ]\n                      },\n                      {\n                        title:'APY',\n                        desc:apyLong,\n                        props:{\n                          width: [0.29,0.14],\n                        },\n                        parentProps:{\n                          flexDirection:'column',\n                          alignItems:'flex-start',\n                        },\n                        fields:[\n                          {\n                            name:'apy',\n                            showTooltip:true\n                          },\n                          {\n                            name:'idleDistribution',\n                            showLoader:false,\n                            props:{\n                              decimals:this.props.isMobile ? 1 : 2,\n                              fontSize:this.props.isMobile ? '9px' : 0\n                            }\n                          },\n                        ]\n                      },\n                      {\n                        title:'RISK SCORE',\n                        desc:this.functionsUtil.getGlobalConfig(['messages','riskScore']),\n                        mobile:false,\n                        props:{\n                          width:[0.27,0.16],\n                        },\n                        fields:[\n                          {\n                            name:'score'\n                          }\n                        ]\n                      },\n                      {\n                        title:'APR LAST WEEK',\n                        mobile:false,\n                        props:{\n                          width: 0.25,\n                        },\n                        parentProps:{\n                          width:1,\n                          pr:[2,4]\n                        },\n                        fields:[\n                          {\n                            name:'aprChart',\n                          }\n                        ]\n                      },\n                      {\n                        title:'',\n                        props:{\n                          width:[0.23,0.16],\n                        },\n                        parentProps:{\n                          width:1\n                        },\n                        fields:[\n                          {\n                            name:'button',\n                            label:this.props.isMobile ? 'View' : 'View stats',\n                            props:{\n                              width:1,\n                              fontSize:3,\n                              fontWeight:3,\n                              height:'45px',\n                              borderRadius:4,\n                              boxShadow:null,\n                              mainColor:'redeem',\n                              size: this.props.isMobile ? 'small' : 'medium',\n                              handleClick:(props) => this.selectToken(strategy,props.token)\n                            }\n                          }\n                        ]\n                      }\n                    ]}\n                    {...this.props}\n                    selectedStrategy={strategy}\n                    availableTokens={availableTokens}\n                  />\n                  {\n                    !this.props.isMobile &&\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'flex-end'}\n                      >\n                        {\n                          Object.values(statsProtocols).filter( p => (p.legend) ).map( (p,index) => (\n                            <Flex\n                              mr={3}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              key={`legend_${index}`}\n                            >\n                              <Box\n                                mr={1}\n                                width={'10px'}\n                                height={'10px'}\n                                borderRadius={'50%'}\n                                backgroundColor={`rgb(${p.color.rgb.join(',')})`}\n                              >\n                              </Box>\n                              <Text.span\n                                fontSize={1}\n                                color={'cellText'}\n                              >\n                                {p.label}\n                              </Text.span>\n                            </Flex>\n                          ))\n                        }\n                      </Flex>\n                  }\n                </Box>\n              );\n            })\n          }\n          {\n            idleTokenEnabled && !this.state.showRefreshIdleSpeed ? (\n              <Flex\n                mb={4}\n                width={1}\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <Link\n                  hoverColor={'primary'}\n                  onClick={this.showRefreshIdleSpeed.bind(this)}\n                >\n                  Refresh Idle Speed\n                </Link>\n              </Flex>\n            ) : idleTokenEnabled && this.state.showRefreshIdleSpeed &&\n              <DashboardCard\n                cardProps={{\n                  p:2,\n                  mb:4,\n                  width:1,\n                  mt:[2,3],\n                }}\n                isActive={true}\n                isInteractive={false}\n              >\n                <Flex\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  <Text\n                    fontWeight={500}\n                    color={'flashColor'}\n                    textAlign={'center'}\n                    fontSize={[1,'15px']}\n                  >\n                    By executing this transaction you can adjust the IDLE distribution speed among the pools.\n                  </Text>\n                  <ExecuteTransaction\n                    action={'Refresh'}\n                    Component={Button}\n                    parentProps={{\n                      mt:1\n                    }}\n                    componentProps={{\n                      size:'small',\n                      mainColor:'blue',\n                      value:'REFRESH IDLE SPEED'\n                    }}\n                    params={[]}\n                    contractName={'IdleController'}\n                    methodName={'refreshIdleSpeeds'}\n                    {...this.props}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'center'}\n                      justifyContent={'center'}\n                    >\n                      <Icon\n                        mr={1}\n                        name={'Done'}\n                        size={'1.4em'}\n                        color={this.props.theme.colors.transactions.status.completed}\n                      />\n                      <Text\n                        fontWeight={500}\n                        fontSize={'15px'}\n                        color={'copyColor'}\n                        textAlign={'center'}\n                      >\n                        Idle Speed Refreshed\n                      </Text>\n                    </Flex>\n                  </ExecuteTransaction>\n                </Flex>\n              </DashboardCard>\n          }\n        </Flex>\n      );\n    } else {\n      const versionsOptions = Object.keys(globalConfigs.stats.versions).filter( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return versionInfo.enabledTokens.includes(this.props.selectedToken) && versionInfo.enabledStrategies.includes(this.props.selectedStrategy);\n      }).map( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return {\n          value:version,\n          label:versionInfo.label\n        }\n      });\n\n      const versionInfo = this.getVersionInfo(this.state.idleVersion);\n\n      let performanceTooltip = null;\n      if (this.state.idleVersion && versionInfo){\n        const showPerformanceTooltip = this.functionsUtil.getGlobalConfig(['stats','versions',this.state.idleVersion,'showPerformanceTooltip']);\n        performanceTooltip = showPerformanceTooltip ? this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'performanceTooltip']) : null;\n      }\n\n      const versionDefaultValue = versionsOptions.find( v => (v.value === this.state.idleVersion) );\n\n      return (\n        <Flex\n          p={0}\n          width={1}\n          flexDirection={'column'}\n        >\n          {\n          /*\n          }\n          <Flex position={['absolute','relative']} left={0} px={[3,0]} zIndex={10} width={1} flexDirection={'row'} mb={[0,3]}>\n            <Flex alignItems={'center'} width={[2/3,1/2]}>\n              <RouterLink to=\"/\">\n                <Image src=\"images/logo-gradient.svg\"\n                  height={['35px','48px']}\n                  position={'relative'} />\n              </RouterLink>\n              <Heading.h3 color={'dark-gray'} textAlign={'left'} fontWeight={3} lineHeight={'initial'} fontSize={[4,5]} ml={[1,2]}>\n                <Text.span fontSize={'80%'}>|</Text.span> Stats\n              </Heading.h3>\n            </Flex>\n            <Flex flexDirection={'row'} width={[1/3,1/2]} justifyContent={'flex-end'} alignItems={'center'}>\n              {\n                this.state.buttonGroups && \n                  this.props.isMobile ? (\n                    <ButtonGroup\n                      isMobile={this.props.isMobile}\n                      components={ this.state.buttonGroups.reduce((components,array) => components.concat(array),[]) }\n                      theme={'light'}\n                    />\n                  ) :\n                  this.state.buttonGroups.map((buttonGroup,i) => (\n                    <ButtonGroup\n                      key={`buttonGroup_${i}`}\n                      isMobile={this.props.isMobile}\n                      components={buttonGroup}\n                      theme={'light'}\n                    />\n                  ))\n              }\n            </Flex>\n          </Flex>\n          */\n          }\n          <Box\n            mb={[3,4]}\n          >\n            <Flex\n              flexDirection={['column','row']}\n            >\n              <Flex\n                width={[1,0.4]}\n              >\n                <Breadcrumb\n                  {...this.props}\n                  showPathMobile={true}\n                  text={'ASSETS OVERVIEW'}\n                  isMobile={this.props.isMobile}\n                  handleClick={ e => this.props.goToSection('stats') }\n                  path={[this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])]}\n                />\n              </Flex>\n              <Flex\n                mt={[3,0]}\n                width={[1,0.6]}\n                flexDirection={['column','row']}\n                justifyContent={['center','space-between']}\n              >\n                <Flex\n                  width={[1,0.26]}\n                  flexDirection={'column'}\n                >\n                  <GenericSelector\n                    innerProps={{\n                      p:1,\n                      height:['100%','46px'],\n                    }}\n                    name={'idle-version'}\n                    options={versionsOptions}\n                    defaultValue={versionDefaultValue}\n                    onChange={ v => this.setIdleVersion(v) }\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.3]}\n                  flexDirection={'column'}\n                >\n                  <AssetSelector\n                    innerProps={{\n                      p:1\n                    }}\n                    {...this.props}\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.39]}\n                  flexDirection={'column'}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:1,\n                      display:'flex',\n                      alignItems:'center',\n                      height:['46px','100%'],\n                      justifyContent:'center'\n                    }}\n                    isInteractive={true}\n                    handleClick={ e => this.setDateRangeModal(true) }\n                  >\n                    <Text\n                      fontWeight={3}\n                      color={'copyColor'}\n                    >\n                    {\n                      this.state.quickSelection\n                      ?\n                        this.quickSelections[this.state.quickSelection]\n                      : this.state.startTimestampObj && this.state.endTimestampObj &&\n                        `${this.state.startTimestampObj.format('DD/MM/YY')} - ${this.state.endTimestampObj.format('DD/MM/YY')}`\n                    }\n                    </Text>\n                  </DashboardCard>\n                </Flex>\n              </Flex>\n            </Flex>\n          </Box>\n\n          {\n            this.state.idleVersion && (versionInfo.startTimestamp>parseInt(new Date().getTime()/1000)) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Idle Stats {this.state.idleVersion} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : (\n              <Box\n                width={1}\n              >\n                <Box\n                  mt={[3,0]}\n                  mb={[3,4]}\n                >\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    justifyContent={'center'}\n                    flexDirection={['column','row']}\n                  >\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        value={this.state.aum}\n                        title={'Asset Under Management'}\n                        label={ this.state.unlentBalance ? `Unlent funds: ${this.state.unlentBalance} ${this.props.selectedToken}` : this.props.selectedToken }\n                        labelTooltip={ this.state.unlentBalance ? this.functionsUtil.getGlobalConfig(['messages','cheapRedeem']) : null}\n                      />\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Avg APY'}\n                        label={'Annualized'}\n                      >\n                        <Flex\n                          width={1}\n                          alignItems={'center'}\n                          flexDirection={['column','row']}\n                        >\n                          <VariationNumber\n                            direction={'up'}\n                            iconPos={'right'}\n                            iconSize={'1.8em'}\n                            justifyContent={'flex-start'}\n                            width={1}\n                            >\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                              fontSize={[4,5]}\n                            >\n                              {this.state.apr}\n                              <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                            </Text>\n                          </VariationNumber>\n                        </Flex>\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Overperformance on Compound'}\n                        label={'Annualized'}\n                      >\n                        {\n                          this.state.delta && !isNaN(this.state.delta) ? (\n                            <VariationNumber\n                              direction={'up'}\n                              iconPos={'right'}\n                              iconSize={'1.8em'}\n                              justifyContent={'flex-start'}\n                              >\n                              <Text\n                                lineHeight={1}\n                                fontSize={[4,5]}\n                                fontWeight={[3,4]}\n                                color={'statValue'}\n                              >\n                                {this.state.delta}\n                                <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                              </Text>\n                            </VariationNumber>\n                          ) : (\n                            <Text\n                              lineHeight={1}\n                              fontSize={[4,5]}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                            >\n                              {this.state.delta}\n                            </Text>\n                          )\n                        }\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        label={' '}\n                        title={'Rebalances'}\n                        value={this.state.rebalances.toString()}\n                      />\n                    </Flex>\n                    {\n                    /*\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Current APR</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.currApr}\n                            <Text.span color={'copyColor'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Days Live</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.days}\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    */\n                    }\n                  </Flex>\n                </Box>\n\n                <DashboardCard\n                  title={'Historical Performance'}\n                  description={performanceTooltip}\n                  cardProps={{\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex id='chart-PRICE' width={1} mb={3}>\n                    <StatsChart\n                      height={ 350 }\n                      {...this.state}\n                      parentId={'chart-PRICE'}\n                      isMobile={this.props.isMobile}\n                      contracts={this.props.contracts}\n                      apiResults={this.state.apiResults}\n                      idleVersion={this.state.idleVersion}\n                      apiResults_unfiltered={this.state.apiResults_unfiltered}\n                      chartMode={this.state.idleVersion === this.state.latestVersion ? 'PRICE_V4' : 'PRICE'}\n                    />\n                  </Flex>\n                </DashboardCard>\n\n                <DashboardCard\n                  cardProps={{\n                    pb:3,\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex\n                    flexDirection={['column','row']}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      this.state.idleVersion === this.state.latestVersion && \n                      <Flex\n                        pt={2}\n                        width={[1,1/3]}\n                        id={'allocation-chart'}\n                        flexDirection={'column'}\n                        alignItems={'flex-start'}\n                        justifyContent={'flex-start'}\n                      >\n                        <AllocationChart\n                          height={310}\n                          {...this.props}\n                          parentId={'allocation-chart'}\n                        />\n                        <Rebalance\n                          {...this.props}\n                        />\n                      </Flex>\n                    }\n                    <Flex\n                      mb={[0,3]}\n                      id={'chart-ALL'}\n                      pl={[0,this.state.idleVersion === this.state.latestVersion ? 0 : 3]}\n                      width={[1, this.state.idleVersion === this.state.latestVersion ? 2/3 : 1]}\n                    >\n                      <Flex alignItems={'flex-start'} justifyContent={'flex-start'} flexDirection={'column'} width={1}>\n                        <Heading.h4\n                          mb={2}\n                          ml={3}\n                          mt={[3,4]}\n                          fontWeight={4}\n                          fontSize={[2,3]}\n                          textAlign={'left'}\n                          color={'dark-gray'}\n                          lineHeight={'initial'}\n                        >\n                          Allocations over time\n                        </Heading.h4>\n                        <StatsChart\n                          height={350}\n                          {...this.state}\n                          chartMode={'ALL'}\n                          parentId={'chart-ALL'}\n                          isMobile={this.props.isMobile}\n                          contracts={this.props.contracts}\n                          apiResults={this.state.apiResults}\n                          idleVersion={this.state.idleVersion}\n                          apiResults_unfiltered={this.state.apiResults_unfiltered}\n                        />\n                      </Flex>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n\n                <Flex\n                  position={'relative'}\n                >\n                  <Flex\n                    width={1}\n                    id={'carousel-container'}\n                    justifyContent={'flex-end'}\n                  >\n                    <RoundIconButton\n                      buttonProps={{\n                        mr:3\n                      }}\n                      iconName={'ArrowBack'}\n                      disabled={this.state.carouselIndex === 0}\n                      handleClick={ e => this.handleCarousel('back') }\n                    />\n                    <RoundIconButton\n                      iconName={'ArrowForward'}\n                      handleClick={ e => this.handleCarousel('next') }\n                      disabled={this.state.carouselIndex === this.state.carouselMax}\n                    />\n                  </Flex>\n                  <Flex\n                    mt={5}\n                    height={'400px'}\n                    position={'absolute'}\n                    id={'carousel-cursor'}\n                    width={['444%','200%']}\n                    justifyContent={'flex-start'}\n                    left={this.state.carouselOffsetLeft}\n                    style={{\n                      transition:'left 0.3s ease-in-out'\n                    }}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        id='chart-AUM'\n                      >\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            ml={3}\n                            mt={3}\n                            mb={2}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Asset Under Management\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'AUM'}\n                            parentId={'chart-AUM'}\n                            isMobile={this.props.isMobile}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-APR' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            APRs\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'APR'}\n                            parentId={'chart-APR'}\n                            isMobile={this.props.isMobile}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                      title={'Risk Score'}\n                      description={'Idle Risk Score is a weighted average of the underlying protocols risks assessed by DeFi Score'}\n                      titleParentProps={{\n                        ml:16,\n                        mt:16\n                      }}\n                    >\n                      <Flex id='chart-SCORE' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'SCORE'}\n                            parentId={'chart-SCORE'}\n                            isMobile={this.props.isMobile}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-VOL' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Volume\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'VOL'}\n                            parentId={'chart-VOL'}\n                            isMobile={this.props.isMobile}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                </Flex>\n              </Box>\n            )\n          }\n\n          <DateRangeModal\n            minDate={this.state.minDate}\n            maxDate={this.state.maxDate}\n            handleSelect={this.setDateRange}\n            isOpen={this.state.dateRangeModalOpened}\n            closeModal={e => this.setDateRangeModal(false)}\n            startDate={this.state.startTimestampObj ? this.state.startTimestampObj._d : null}\n            endDate={this.state.endTimestampObj ? this.state.endTimestampObj._d : null}\n          />\n        </Flex>\n      );\n    }\n  }\n}\n\nexport default Stats;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport { Flex, Icon, Text, Box, Image } from \"rimble-ui\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass Utils extends Component {\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    const SubComponent = this.props.selectedSubsection && this.props.selectedSubsection.subComponent ? this.props.selectedSubsection.subComponent : null;\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.props.selectedSubsection ? (\n            <Box\n              width={1}\n            >\n              <Flex\n                width={1}\n              >\n                <Breadcrumb\n                  {...this.props}\n                  showPathMobile={true}\n                  isMobile={this.props.isMobile}\n                  path={[this.props.selectedSubsection.label]}\n                  text={this.props.selectedSection.label.toUpperCase()}\n                  handleClick={ e => this.props.goToSection(this.props.selectedSection.route) }\n                />\n              </Flex>\n              <Flex\n                my={[2,3]}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <Title\n                  mb={2}\n                >\n                  {this.props.selectedSubsection.label}\n                </Title>\n                <Text\n                  textAlign={'center'}\n                >\n                  {this.props.selectedSubsection.desc}\n                </Text>\n              </Flex>\n              <SubComponent\n                {...this.props}\n                {...this.props.selectedSubsection.directProps}\n                toolProps={this.props.selectedSubsection.props}\n              />\n            </Box>\n          ) : (\n            <Flex\n              my={[2,3]}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Title\n                mb={3}\n              >\n                Tools\n              </Title>\n              <Flex\n                width={1}\n                style={{\n                  flexWrap:'wrap'\n                }}\n              >\n              {\n                this.props.selectedSection.submenu.map( (tool,toolIndex) => (\n                  <DashboardCard\n                    isInteractive={true}\n                    key={`tool_${toolIndex}`}\n                    cardProps={{\n                      p:[3,4],\n                      mb:[3,3],\n                      mr:[0,'2%'],\n                      style:{\n                        flex: this.props.isMobile ? '1 1 100%' : '0 0 31%'\n                      },\n                      alignItems:'center',\n                      flexDirection:'column',\n                      justifyContent:'center'\n                    }}\n                    handleClick={ e => this.props.goToSection(this.props.selectedSection.route+'/'+tool.route) }\n                  >\n                    <Text\n                      fontSize={[3,4]}\n                      textAlign={'center'}\n                    >\n                      {tool.label}\n                    </Text>\n                    <Flex\n                      justifyContent={'center'}\n                    >\n                      {\n                        tool.image ? (\n                          <Image\n                            my={[0,2]}\n                            height={'2.2em'}\n                            src={tool.image}\n                          />\n                        ) : tool.icon && (\n                          <Icon\n                            my={[0,2]}\n                            size={'3em'}\n                            name={tool.icon}\n                          />\n                        )\n                      }\n                    </Flex>\n                    <Text\n                      fontSize={[2,2]}\n                      textAlign={'center'}\n                    >\n                      {tool.desc}\n                    </Text>\n                  </DashboardCard>\n                ) )\n              }\n              </Flex>\n            </Flex>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default Utils;\n","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Flex, Heading, Text } from \"rimble-ui\";\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport PortfolioEquity from '../PortfolioEquity/PortfolioEquity';\n\nclass FundsOverview extends Component {\n\n  state = {\n    govTokensAprs:null,\n    aggregatedValues:[],\n    govTokensTotalApr:null,\n    govTokensUserBalance:null,\n    govTokensDistribution:null,\n    govTokensTotalBalance:null,\n    govTokensTotalAprTooltip:null,\n    idleTokenUserDistribution:null,\n    govTokensDistributionTooltip:null,\n    govTokensTotalBalanceTooltip:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  idleGovToken = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    this.idleGovToken = this.functionsUtil.getIdleGovToken();\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const [\n      govTokensAprs,\n      idleTokenUserDistribution,\n      govTokensUserBalance,\n      avgAPY,\n      days\n    ] = await Promise.all([\n      this.functionsUtil.getGovTokensAprs(this.props.selectedToken,this.props.tokenConfig),\n      this.idleGovToken.getUserDistribution(this.props.account,govTokenAvailableTokens,true),\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null),\n      this.functionsUtil.loadAssetField('avgAPY',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    const govTokensTotalBalance = govTokensUserBalance ? Object.values(govTokensUserBalance).reduce( (totBalance,govTokenBalance) => {\n      return totBalance.plus(this.functionsUtil.BNify(govTokenBalance));\n    },this.functionsUtil.BNify(0)) : null;\n\n    const govTokensTotalBalanceTooltip = govTokensUserBalance ? Object.keys(govTokensUserBalance).map( govToken => {\n      const balance = govTokensUserBalance[govToken];\n      if (balance.gt(0)){\n        return `+${balance.toFixed(2)} ${govToken}`;\n      } else {\n        return null;\n      }\n    }).filter(v => (v !== null)) : null;\n\n    // console.log(govTokensTotalBalance,govTokensUserBalance,govTokensTotalBalanceTooltip);\n\n    const govTokensTotalApr = govTokensAprs ? Object.values(govTokensAprs).reduce( (totApr,govTokenApr) => {\n      return totApr.plus(this.functionsUtil.BNify(govTokenApr));\n    },this.functionsUtil.BNify(0)) : null;\n\n    const govTokensTotalAprTooltip = govTokensAprs ? Object.keys(govTokensAprs).map( govToken => {\n      const apr = govTokensAprs[govToken];\n      if (apr.gt(0)){\n        return `${govToken}: ${apr.toFixed(2)}%`;\n      }\n      return null;\n    }).filter(v => (v !== null)) : null;\n\n    /*\n    const govTokensDistributionTooltip = govTokensUserDistribution ? Object.keys(govTokensUserDistribution).map( govToken => {\n      const speed = govTokensUserDistribution[govToken];\n      if (speed.gt(0)){\n        const distributionFrequency = this.functionsUtil.getGlobalConfig(['govTokens',govToken,'distributionFrequency']);\n        return `+${speed.toFixed(4)} ${govToken}/${distributionFrequency}`;\n      }\n      return null;\n    }).filter(v => (v !== null)) : null;\n    */\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '-') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    this.setState({\n      govTokensAprs,\n      aggregatedValues,\n      govTokensTotalApr,\n      govTokensUserBalance,\n      govTokensTotalBalance,\n      govTokensTotalAprTooltip,\n      idleTokenUserDistribution,\n      govTokensTotalBalanceTooltip\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Text\n                          mt={2}\n                          fontWeight={2}\n                          fontSize={[1,2]}\n                          color={'cellText'}\n                        >\n                          {v.props.title}\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquity\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              chartToken={this.props.selectedToken}\n              enabledTokens={[this.props.selectedToken]}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLent',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:this.props.theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPerc',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.govTokensTotalBalanceTooltip && this.state.govTokensTotalBalanceTooltip.length>0 && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      this.state.govTokensTotalBalanceTooltip.map((govTokenBalance,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          mt={govTokenIndex ? 1 : 0}\n                          key={`govToken_${govTokenIndex}`}\n                        >\n                          {govTokenBalance}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                )/* : this.state.govTokensUserBalance && Object.keys(this.state.govTokensUserBalance).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + ${this.state.govTokensTotalBalance.toFixed(4)}\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalBalanceTooltip.join(' / ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Fees\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'feesCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'apy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.idleTokenUserDistribution && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      mt={1}\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      {this.state.idleTokenUserDistribution.toFixed(4)} {this.idleGovToken.tokenName}/{this.idleGovToken.tokenConfig.distributionFrequency}\n                    </Text>\n                  </Flex>\n                )\n                /*\n                this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length===1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      Object.keys(this.state.govTokensAprs).map((govToken,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          ml={govTokenIndex ? 2 : 0}\n                          key={`govToken_${govToken}`}\n                        >\n                          {this.state.govTokensAprs[govToken].toFixed(2)}% {govToken}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                ) : this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + {this.state.govTokensTotalApr.toFixed(2)}%\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalAprTooltip.join('; ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Risk Score\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'score',\n                  props:{\n                    decimals:1,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverview;","import React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Icon, Checkbox, Box, Link, Input, Tooltip } from \"rimble-ui\";\n\nclass CurveRedeem extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    tokenConfig:null,\n    unevenAmounts:null,\n    selectedToken:null,\n    availableTokens:null,\n    buttonDisabled:false,\n    showMaxSlippage:false,\n    redeemUnderlying:true,\n    curveTokenConfig:null,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    curveTokensAmounts:null,\n    fastBalanceSelector:null,\n    redeemUnevenAmounts:false,\n    curveRedeemableIdleTokens:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.initToken();\n  }\n\n  showMaxSlippage(){\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  async calculateSlippage(max_slippage=null){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (!inputValue || inputValue.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    let withdrawSlippage = null;\n    let curveTokensAmounts = null;\n    let curveIdleTokensAmounts = null;\n    if (this.state.redeemUnevenAmounts){\n      [\n        curveTokensAmounts,\n        curveIdleTokensAmounts\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokensAmounts(this.props.account,normalizedAmount,true),\n        this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,normalizedAmount)\n      ]);\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false,curveIdleTokensAmounts);\n    } else {\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false);\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const redeemableBalance = inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.times(100).plus(this.state.maxSlippage || this.functionsUtil.BNify(0)).div(100)));\n      curveTokensAmounts = {};\n      curveTokensAmounts[this.state.selectedToken] = redeemableBalance;\n    }\n\n    if (withdrawSlippage){\n      withdrawSlippage = withdrawSlippage.times(100);\n    }\n\n    this.setState({\n      withdrawSlippage,\n      curveTokensAmounts,\n      curveIdleTokensAmounts\n    });\n\n    // Add max slippage but don't save in state\n    if (withdrawSlippage && max_slippage){\n      withdrawSlippage = withdrawSlippage.plus(max_slippage);\n    }\n\n    return withdrawSlippage;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.tokenConfig.idle.token !== this.props.tokenConfig.idle.token;\n    if (tokenChanged){\n      await this.initToken();\n    }\n\n    const redeemUnevenAmountsChanged = prevState.redeemUnevenAmounts !== this.state.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    const inputChanged = prevState.inputValue !== this.state.inputValue;\n    const maxSlippageChanged = parseFloat(prevState.maxSlippage) !== parseFloat(this.state.maxSlippage);\n    const tokenConfigChanged = JSON.stringify(prevState.tokenConfig) !== JSON.stringify(this.state.tokenConfig);\n    if (inputChanged || tokenConfigChanged || maxSlippageChanged){\n      this.calculateSlippage();\n    }\n\n    const selectedTokenChanged = prevState.selectedToken !== this.state.selectedToken;\n    if (selectedTokenChanged){\n      this.loadSelectedTokenConfig();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    let buttonDisabled = false;\n\n    // if (this.state.redeemUnevenAmounts){\n      buttonDisabled = !amount || amount.gt(this.state.curveTokenBalance);\n    // } else {\n      // buttonDisabled = !amount || amount.gt(this.state.redeemableBalance);\n    // }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    let inputValue = null;\n\n    // if (this.state.redeemUnevenAmounts){\n    inputValue = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n    // } else {\n      // inputValue = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n    // }\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  selectDestinationToken(selectedToken){\n    this.setState({\n      selectedToken\n    });\n  }\n\n  async loadSelectedTokenConfig(){\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const tokenConfig = this.state.availableTokens[this.state.selectedToken];\n    const curveTokenConfig = curveConfig.availableTokens[tokenConfig.idle.token];\n    this.setState({\n      tokenConfig,\n      curveTokenConfig\n    });\n  }\n\n  async initToken(){\n    const [curvePoolContract,curveSwapContract] = await Promise.all([\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract()\n    ]);\n\n    const [\n      curveTokenPrice,\n      curveTokenBalance,\n      curveRedeemableIdleTokens,\n    ] = await Promise.all([\n      this.functionsUtil.getCurveTokenPrice(),\n      this.functionsUtil.getCurveTokenBalance(this.props.account),\n      this.functionsUtil.getCurveRedeemableIdleTokens(this.props.account)\n    ]);\n\n    const unevenAmounts = [];\n    const redeemableBalance = curveTokenBalance ? curveTokenBalance.times(curveTokenPrice) : this.functionsUtil.BNify(0);\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();;\n    const selectedToken = Object.keys(availableTokens)[0];\n\n    this.setState({\n      selectedToken,\n      unevenAmounts,\n      curveTokenPrice,\n      availableTokens,\n      curvePoolContract,\n      curveSwapContract,\n      curveTokenBalance,\n      redeemableBalance,\n      curveRedeemableIdleTokens\n    });\n  }\n\n  async redeem(){\n\n    if (!this.state.curveTokenBalance){\n      return false;\n    }\n\n    const callbackRedeem = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveRedeem`,\n        eventAction: this.props.selectedToken,\n        eventValue: this.state.curveTokenBalance.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackRedeem === 'function' && txSucceeded){\n        this.props.callbackRedeem(tx);\n      }\n    };\n\n    const callbackReceiptRedeem = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.curveSwapContract.name;\n    const withdrawSlippage = await this.calculateSlippage(this.state.maxSlippage);\n    const max_slippage = this.functionsUtil.BNify(this.state.maxSlippage).div(100);\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    // const curveTokenBalance = this.functionsUtil.normalizeTokenAmount(this.state.curveTokenBalance,this.state.curvePoolContract.decimals);\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    if (this.state.redeemUnevenAmounts){\n      const min_amounts = this.state.redeemUnderlying ? await this.functionsUtil.getCurveTokensAmounts(this.props.account,_amount,false,true) : await this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,_amount,max_slippage);\n      console.log('remove_liquidity',_amount.toString(),min_amounts);\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    } else {\n      const coin_index = this.state.curveTokenConfig.migrationParams.coinIndex;\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.div(100))),this.state.tokenConfig.decimals);\n      // const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.minus(inputValue.times(withdrawSlippage.div(100))),this.state.curveTokenConfig.decimals);\n      // let _token_amount = await this.functionsUtil.getCurveTokenAmount(amounts,false);\n      // _token_amount = this.functionsUtil.BNify(_token_amount).isGreaterThan(curveTokenBalance) ? curveTokenBalance : this.functionsUtil.BNify(_token_amount);\n\n      console.log('remove_liquidity_one_coin',_amount, coin_index, min_amount);\n\n      // debugger;\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_one_coin', [_amount, coin_index, min_amount, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    }\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  getFastBalanceSelector(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n\n  render() {\n\n    const showSlippage = !this.state.buttonDisabled && this.state.withdrawSlippage;\n    const curveTokenName = this.functionsUtil.getGlobalConfig(['curve','poolContract','token']);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          {\n            !this.state.curveTokenBalance ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3,\n                  minHeight:'195px',\n                  style:{\n                    display:'flex',\n                    alignItems:'center',\n                    justifyContent:'center'\n                  }\n                }}\n              >\n                <FlexLoader\n                  flexProps={{\n                    flexDirection:'row'\n                  }}\n                  loaderProps={{\n                    size:'30px'\n                  }}\n                  textProps={{\n                    ml:2\n                  }}\n                  text={'Checking Curve Pool...'}\n                />\n              </DashboardCard>\n            ) : this.state.processing.loading ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3\n                }}\n              >\n                <Flex\n                  flexDirection={'column'}\n                >\n                  <TxProgressBar\n                    web3={this.props.web3}\n                    hash={this.state.processing.txHash}\n                    endMessage={`Finalizing redeem request...`}\n                    cancelTransaction={this.cancelTransaction.bind(this)}\n                    waitText={ this.props.waitText ? this.props.waitText : 'Redeem estimated in'}\n                  />\n                </Flex>\n              </DashboardCard>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    mb:2\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'1.8em'}\n                      color={'cellText'}\n                      name={'FileUpload'}\n                    />\n                    <Text\n                      mt={1}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Withdraw from the Curve Pool in a specific token or in uneven amounts of tokens (with no slippage).\n                    </Text>\n                    <Flex\n                      mt={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                    >\n                      <Checkbox\n                        required={false}\n                        label={`Redeem with no slippage`}\n                        checked={this.state.redeemUnevenAmounts}\n                        onChange={ e => this.toggleUnevenAmounts(e.target.checked) }\n                      />\n                      <Tooltip\n                        placement={'top'}\n                        message={`You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.`}\n                      >\n                        <Icon\n                          size={'1em'}\n                          color={'cellTitle'}\n                          name={\"InfoOutline\"}\n                        />\n                      </Tooltip>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n                {\n                  !this.state.redeemUnevenAmounts/* && (!this.props.selectedToken || (this.state.showMaxSlippage && showSlippage))*/ && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      {\n                        this.state.tokenConfig && \n                          <Box\n                            width={1}\n                          >\n                            <Text\n                              mb={1}\n                            >\n                              Select destination token:\n                            </Text>\n                            <AssetSelector\n                              {...this.props}\n                              id={'token-from'}\n                              showBalance={false}\n                              tokenConfig={this.state.tokenConfig}\n                              selectedToken={this.state.selectedToken}\n                              availableTokens={this.state.availableTokens}\n                              onChange={this.selectDestinationToken.bind(this)}\n                            />\n                          </Box>\n                      }\n                    </Box>\n                  )\n                }\n                {\n                  this.state.curveTokensAmounts && !this.state.buttonDisabled && (\n                    <DashboardCard\n                      cardProps={{\n                        mt:1,\n                        mb:2,\n                        py:2,\n                        px:1\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Text\n                          mt={1}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          You will receive:\n                        </Text>\n                        <Flex\n                          mt={2}\n                          width={1}\n                          boxShadow={0}\n                          style={{\n                            flexWrap:'wrap'\n                          }}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                          >\n                            {\n                              Object.keys(this.state.curveTokensAmounts).map( token => {\n                                const balance = this.state.curveTokensAmounts[token];\n                                return (\n                                  <Flex\n                                    mb={1}\n                                    mx={1}\n                                    width={'auto'}\n                                    flexDirection={'row'}\n                                    key={`tokenBalance_${token}`}\n                                    justifyContent={'flex-start'}\n                                  >\n                                    <AssetField\n                                      token={token}\n                                      tokenConfig={{\n                                        token:token\n                                      }}\n                                      fieldInfo={{\n                                        name:'icon',\n                                        props:{\n                                          mr:1,\n                                          width:['1.4em','1.6em'],\n                                          height:['1.4em','1.6em']\n                                        }\n                                      }}\n                                    />\n                                    <SmartNumber\n                                      ml={1}\n                                      fontSize={[0,1]}\n                                      fontWeight={500}\n                                      maxPrecision={4}\n                                      color={'cellText'}\n                                      number={balance.toString()}\n                                    />\n                                  </Flex>\n                                );\n                            })\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n                {\n                  this.state.showMaxSlippage && showSlippage && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Text>\n                          Choose max slippage:\n                        </Text>\n                        <Tooltip\n                          placement={'top'}\n                          message={`Max additional slippage on top of the one shown below`}\n                        >\n                          <Icon\n                            ml={1}\n                            size={'1em'}\n                            color={'cellTitle'}\n                            name={\"InfoOutline\"}\n                          />\n                        </Tooltip>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        {\n                          [0.2,0.5,1,5].map( slippage => (\n                            <FastBalanceSelector\n                              cardProps={{\n                                p:1\n                              }}\n                              textProps={{\n                                fontSize:1\n                              }}\n                              percentage={slippage}\n                              key={`selector_${slippage}`}\n                              onMouseDown={()=>this.setMaxSlippage(slippage)}\n                              isActive={this.state.maxSlippage === parseFloat(slippage)}\n                            />\n                          ))\n                        }\n                      </Flex>\n                    </Box>\n                  )\n                }\n                <Flex\n                  mb={3}\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  <Flex\n                    mb={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'flex-end'}\n                  >\n                    {\n                      showSlippage && (\n                        <Flex\n                          width={1}\n                          maxWidth={'40%'}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            textAlign={'right'}\n                            style={{\n                              whiteSpace:'nowrap'\n                            }}\n                            color={ parseFloat(this.state.withdrawSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                          >\n                            {\n                              parseFloat(this.state.withdrawSlippage.toFixed(3)) === 0 ?\n                                'No Slippage'\n                              : `${ this.state.withdrawSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.withdrawSlippage.abs().toFixed(3)}%`\n                            }\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={ this.state.redeemUnevenAmounts ? `You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.` : this.state.withdrawSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                          {\n                            !this.state.redeemUnevenAmounts &&\n                              <Link\n                                ml={1}\n                                color={'copyColor'}\n                                hoverColor={'primary'}\n                                onClick={this.showMaxSlippage.bind(this)}\n                              >\n                                change\n                              </Link>\n                          }\n                        </Flex>\n                      )\n                    }\n                    <Flex\n                      width={1}\n                      maxWidth={'60%'}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      justifyContent={'flex-end'}\n                    >\n                      <Link\n                        fontSize={1}\n                        fontWeight={3}\n                        color={'dark-gray'}\n                        textAlign={'right'}\n                        hoverColor={'copyColor'}\n                        onClick={ (e) => this.setFastBalanceSelector(100) }\n                        style={{\n                          maxWidth:'100%',\n                          overflow:'hidden',\n                          whiteSpace:'nowrap',\n                          textOverflow:'ellipsis'\n                        }}\n                      >\n                        {this.state.curveTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {curveTokenName}\n                      </Link>\n                    </Flex>\n                  </Flex>\n                  <Input\n                    min={0}\n                    type={\"number\"}\n                    required={true}\n                    height={'3.4em'}\n                    borderRadius={2}\n                    fontWeight={500}\n                    boxShadow={'none !important'}\n                    placeholder={`Insert amount`}\n                    onChange={this.changeInputValue.bind(this)}\n                    border={`1px solid ${this.props.theme.colors.divider}`}\n                    value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                  />\n                  <Flex\n                    mt={2}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      [25,50,75,100].map( percentage => (\n                        <FastBalanceSelector\n                          percentage={percentage}\n                          key={`selector_${percentage}`}\n                          onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                          isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                        />\n                      ))\n                    }\n                  </Flex>\n                </Flex>\n                <Flex\n                  justifyContent={'center'}\n                >\n                  <RoundButton\n                    buttonProps={{\n                      mt:2,\n                      width:[1,1/2],\n                      disabled:this.state.buttonDisabled\n                    }}\n                    handleClick={this.redeem.bind(this)}\n                  >\n                    Redeem\n                  </RoundButton>\n                </Flex>\n              </Flex>\n            )\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveRedeem;","import React, { Component } from 'react';\nimport {\n  Button,\n  Flex,\n  Box,\n  Text\n} from \"rimble-ui\";\nimport styles from './TwitterShareButton.module.scss';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass TwitterShareButton extends Component {\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate() {\n    this.loadUtils();\n  }\n\n  share = () => {\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'Share',\n      eventAction: 'twitter',\n      eventLabel: this.props.parent\n    });\n\n    const w = Math.min(window.innerWidth,600);\n    const h = 350;\n    const x = (window.innerWidth-w)/2;\n    const y = 150;\n    window.open(`https://twitter.com/intent/tweet?text=${this.props.tweet}`,\"_blank\",`toolbar=yes,scrollbars=no,resizable=no,top=${y},left=${x},width=${w},height=${h}`);\n  }\n\n  render() {\n    return (\n        <Button\n          borderRadius={1}\n          mainColor={'#2aa6f2'}\n          contrastColor={'white'}\n          onClick={ e => { this.share() } }\n        >\n          <Flex flexDirection={'row'} alignItems={'center'} justifyContent={'center'}>\n            <Box className={styles.twitterIcon} />\n            <Text color={'white'} fontWeight={3} ml={2}>{ this.props.text ? this.props.text : 'Tweet' }</Text>\n          </Flex>\n        </Button>\n    );\n  }\n}\n\nexport default TwitterShareButton;\n","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Link,\n  Flex\n} from \"rimble-ui\";\nimport ModalCard from './ModalCard';\nimport TwitterShareButton from '../../TwitterShareButton/TwitterShareButton.js';\nimport Confetti from 'react-confetti/dist/react-confetti';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass ShareModal extends React.Component {\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate() {\n    this.loadUtils();\n  }\n\n  closeModal = async (action) => {\n    const globalConfigs = this.functionsUtil.getGlobalConfigs();\n    // Send Google Analytics event\n    if (globalConfigs.analytics.google.events.enabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'Share',\n        eventAction: action,\n        eventLabel: 'ShareModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n    const tweet = window.escape(this.props.tweet);\n    const customText = {__html: this.props.text};\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          {\n            this.props.confettiEnabled &&\n            <Confetti\n              style={{ position: 'fixed','zIndex':9999 }}\n              run={true}\n              recycle={true}\n              width={window.innerWidth}\n              height={window.innerHeight}\n            />\n          }\n          <ModalCard.Header title={this.props.title} icon={this.props.icon}></ModalCard.Header>\n          <ModalCard.Body>\n            <Flex my={3} width={1} flexDirection={'column'} mx={'auto'}>\n              <Text color={'dark-gray'} textAlign={'center'} fontSize={3} mb={2} dangerouslySetInnerHTML={customText}></Text>\n            </Flex>\n            <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n              <TwitterShareButton tweet={tweet} text={'Share now'} parent={'ShareModal'} />\n              <Link mt={2} onClick={ e => this.closeModal('continue_without_sharing') } hoverColor={'blue'}>continue without sharing</Link>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default ShareModal;","import Migrate from '../Migrate/Migrate';\nimport React, { Component } from 'react';\nimport styles from './DepositRedeem.module.scss';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport ConnectBox from '../ConnectBox/ConnectBox';\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport ShareModal from '../utilities/components/ShareModal';\nimport TransactionField from '../TransactionField/TransactionField';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Input, Box, Icon, Link, Checkbox, Tooltip, Image } from \"rimble-ui\";\n\nclass DepositRedeem extends Component {\n\n  state = {\n    txError:{},\n    tokenAPY:'-',\n    inputValue:{},\n    processing:{},\n    curveAPY:null,\n    canRedeem:false,\n    maxSlippage:0.2,\n    canDeposit:false,\n    action:'deposit',\n    directMint:false,\n    activeModal:null,\n    showBuyFlow:false,\n    unlentBalance:null,\n    tokenApproved:false,\n    skipMigration:false,\n    showRedeemFlow:false,\n    contractPaused:false,\n    buttonDisabled:false,\n    canRedeemCurve:false,\n    showMaxSlippage:false,\n    redeemGovTokens:false,\n    canDepositCurve:false,\n    fastBalanceSelector:{},\n    actionProxyContract:{},\n    migrationEnabled:false,\n    componentMounted:false,\n    curveTokenBalance:null,\n    redeemCurveEnabled:false,\n    depositCurveBalance:null,\n    depositCurveEnabled:true,\n    showAdvancedOptions:false,\n    depositCurveSlippage:null,\n    metaTransactionsEnabled:true\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadProxyContracts();\n  }\n\n  async componentDidMount(){\n\n  }\n\n  setShowRedeemFlow = (showRedeemFlow) => {\n    this.setState({\n      showRedeemFlow\n    });\n  }\n\n  setShowBuyFlow = (showBuyFlow) => {\n    this.setState({\n      showBuyFlow\n    });\n  }\n\n  toggleShowAdvancedOptions = showAdvancedOptions => {\n    this.setState((prevState) => ({\n      showAdvancedOptions:!prevState.showAdvancedOptions\n    }));\n  }\n\n  toggleSkipMigration = skipMigration => {\n    this.setState({\n      skipMigration\n    });\n  }\n\n  toggleRedeemCurve = redeemCurveEnabled => {\n    this.setState({\n      redeemCurveEnabled\n    });\n  }\n\n  toggleDepositCurve = depositCurveEnabled => {\n    this.setState({\n      depositCurveEnabled\n    });\n  }\n\n  toggleSkipMint = (directMint) => {\n    this.setState({\n      directMint\n    });\n  }\n\n  toggleRedeemGovTokens = (redeemGovTokens) => {\n    this.setState({\n      redeemGovTokens\n    });\n  }\n\n  toggleMetaTransactionsEnabled = (metaTransactionsEnabled) => {\n    this.setState({\n      metaTransactionsEnabled\n    });\n  }\n\n  async loadProxyContracts(){\n    const actions = ['deposit','redeem'];\n    const newState = {\n      actionProxyContract:{}\n    };\n\n    await this.functionsUtil.asyncForEach(actions,async (action) => {\n      const mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'proxyContract']);\n      const hasProxyContract = mintProxyContractInfo && mintProxyContractInfo.enabled;\n      newState.actionProxyContract[action] = hasProxyContract ? mintProxyContractInfo : null;\n      if (hasProxyContract){\n        const proxyContract = await this.props.initContract(mintProxyContractInfo.name,mintProxyContractInfo.address,mintProxyContractInfo.abi);\n        newState.actionProxyContract[action].contract = proxyContract.contract;\n        newState.actionProxyContract[action].approved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,mintProxyContractInfo.address,this.props.account);\n      }\n    });\n\n    this.setState(newState);\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadAPY(){\n    const tokenAprs = await this.functionsUtil.getTokenAprs(this.props.tokenConfig);\n    if (tokenAprs && tokenAprs.avgApy !== null){\n      const tokenAPY = this.functionsUtil.BNify(tokenAprs.avgApy).toFixed(2);\n\n      let curveAPY = null;\n      if (this.state.canDepositCurve){\n        curveAPY = await this.functionsUtil.getCurveAPY();\n        // console.log('curveAPY',curveAPY);\n        if (curveAPY){\n          curveAPY = curveAPY.plus(tokenAPY);\n        }\n      }\n      this.setState({\n        tokenAPY,\n        curveAPY\n      });\n    }\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    if (this.props.tokenBalance === null){\n      return false;\n    }\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const tokenBalanceChanged = prevProps.tokenBalance !== this.props.tokenBalance && this.props.tokenBalance !== null;\n\n    if (tokenChanged || tokenBalanceChanged){\n      await this.loadProxyContracts();\n      this.loadTokenInfo();\n      return false;\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n\n    if (actionChanged || fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const redeemGovTokensChanged = prevState.redeemGovTokens !== this.state.redeemGovTokens;\n    if (redeemGovTokensChanged || actionChanged){\n      this.checkButtonDisabled();\n    }\n\n    const depositCurveChanged = prevState.depositCurveEnabled !== this.state.depositCurveEnabled;\n    const metaTransactionsChanged = prevState.metaTransactionsEnabled !== this.state.metaTransactionsEnabled;\n    if (metaTransactionsChanged || depositCurveChanged){\n      const tokenApproved = await this.checkTokenApproved();\n      this.setState({\n        tokenApproved\n      });\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateCurveSlippage();\n    }\n  }\n\n  async calculateCurveSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,curvePoolContractInfo.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositCurveBalance = amount;\n        newState.depositCurveSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      case 'redeem':\n        // newState.redeemBalance = amount;\n        // newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateCurveSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  approveContract = async (callbackApprove,callbackReceiptApprove) => {\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      this.functionsUtil.enableERC20(this.props.selectedToken,curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n    } else {\n      const proxyContract = this.state.actionProxyContract[this.state.action];\n      if (proxyContract && this.state.metaTransactionsEnabled && this.props.biconomy){\n        this.functionsUtil.enableERC20(this.props.selectedToken,proxyContract.address,callbackApprove,callbackReceiptApprove);\n      } else {\n        this.functionsUtil.enableERC20(this.props.selectedToken,this.props.tokenConfig.idle.address,callbackApprove,callbackReceiptApprove);\n      }\n    }\n  }\n\n  checkTokenApproved = async () => {\n\n    let tokenApproved = false;\n\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,curveDepositContract.address,this.props.account);\n    } else {\n      const proxyContract = this.state.actionProxyContract[this.state.action];\n      if (proxyContract && this.state.metaTransactionsEnabled && this.props.biconomy){\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,proxyContract.address,this.props.account);\n      } else {\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,this.props.tokenConfig.idle.address,this.props.account);\n      }\n    }\n\n    return tokenApproved;\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = await this.checkTokenApproved();\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.approveContract(callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  loadTokenInfo = async () => {\n\n    if (this.state.componentMounted){\n      this.setState({\n        componentMounted:false\n      });\n    }\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token]);\n    const curveTokenEnabled = curveConfig.enabled && curveTokenConfig && curveTokenConfig.enabled;\n\n    const [\n      tokenApproved,\n      contractPaused,\n      curveSwapContract,\n      curveDepositContract,\n      unlentBalance,\n      {migrationEnabled},\n      curveTokenBalance,\n    ] = await Promise.all([\n      this.checkTokenApproved(),\n      this.functionsUtil.checkContractPaused(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract(),\n      this.functionsUtil.getUnlentBalance(this.props.tokenConfig),\n      this.functionsUtil.checkMigration(this.props.tokenConfig,this.props.account),\n      curveTokenEnabled ? this.functionsUtil.getCurveTokenBalance(this.props.account) : null\n    ]);\n\n    const canDeposit = this.props.tokenBalance && this.functionsUtil.BNify(this.props.tokenBalance).gt(0);\n    const canRedeem = this.props.idleTokenBalance && this.functionsUtil.BNify(this.props.idleTokenBalance).gt(0);\n\n    const canDepositCurve = curveTokenEnabled && canDeposit;\n    const depositCurveEnabled = canDepositCurve;\n\n    const canRedeemCurve = curveTokenEnabled && curveTokenBalance && curveTokenBalance.gt(0);\n    const redeemCurveEnabled = canRedeemCurve;\n\n    const newState = {...this.state};\n\n    // Check curve deposit enabled\n    if (newState.depositCurveEnabled && !curveTokenEnabled){\n      newState.depositCurveEnabled = false;\n    }\n    \n    newState.canRedeem = canRedeem;\n    newState.canDeposit = canDeposit;\n    newState.unlentBalance = unlentBalance;\n    newState.tokenApproved = tokenApproved;\n    newState.contractPaused = contractPaused;\n    newState.canRedeemCurve = canRedeemCurve;\n    newState.canDepositCurve = canDepositCurve;\n    newState.migrationEnabled = migrationEnabled;\n    newState.curveTokenBalance = curveTokenBalance;\n    newState.curveSwapContract = curveSwapContract;\n    newState.redeemCurveEnabled = redeemCurveEnabled;\n    newState.depositCurveEnabled = depositCurveEnabled;\n    newState.curveDepositContract = curveDepositContract;\n\n    newState.txError = {\n      redeem:false,\n      deposit:false\n    };\n    newState.processing = {\n      redeem:{\n        txHash:null,\n        loading:false\n      },\n      deposit:{\n        txHash:null,\n        loading:false\n      },\n      approve:{\n        txHash:null,\n        loading:false\n      },\n      boost:{\n        txHash:null,\n        loading:false\n      }\n    };\n    newState.inputValue = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n    newState.fastBalanceSelector = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n\n    newState.componentMounted = true;\n\n    this.setState(newState,() => {\n      this.checkAction();\n      this.loadAPY();\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const redeemGovTokens = this.state.redeemGovTokens;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    let loading = true;\n\n    switch (this.state.action){\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        if (!this.state.tokenApproved){\n          return this.approveToken();\n        }\n\n        if (localStorage){\n          this.functionsUtil.setLocalStorage('redirectToFundsAfterLogged',0);\n        }\n\n        this.setState({\n          lendingProcessing: this.props.account,\n          lendAmount: '',\n          genericError: '',\n        });\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.props.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if (this.state.metaTransactionsEnabled && txError){\n            this.setState({\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n        const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n        // Handle Curve Deposit\n        if (curveTokenEnabled && this.state.depositCurveEnabled){\n\n          const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,curvePoolContractInfo.decimals);\n\n          const amounts = await this.functionsUtil.getCurveAmounts(this.props.tokenConfig.idle.token,tokensToDeposit);\n          let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n          if (this.state.maxSlippage){\n            minMintAmount = this.functionsUtil.BNify(minMintAmount);\n            minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n            minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n          }\n          \n          const depositParams = [amounts,minMintAmount];\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, callbackDeposit, callbackReceiptDeposit);\n        } else {\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n\n          const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']);\n          // const gasLimitDeposit = this.functionsUtil.BNify(1000000);\n          let depositParams = [];\n\n          // Use Proxy Contract if enabled\n          const mintProxyContractInfo = this.state.actionProxyContract[this.state.action];\n          if (depositMetaTransactionsEnabled && mintProxyContractInfo && this.props.biconomy && this.state.metaTransactionsEnabled){\n            const mintProxyContract = this.state.actionProxyContract[this.state.action].contract;\n            depositParams = [tokensToDeposit, this.props.tokenConfig.idle.address];\n            // console.log('mintProxyContract',mintProxyContractInfo.function,depositParams);\n            if (this.state.metaTransactionsEnabled){\n              const functionSignature = mintProxyContract.methods[mintProxyContractInfo.function](...depositParams).encodeABI();\n              contractSendResult = await this.functionsUtil.sendBiconomyTxWithPersonalSign(mintProxyContractInfo.name, functionSignature, callbackDeposit, callbackReceiptDeposit);\n            } else {\n              contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n            }\n          // Use main contract if no proxy contract exists\n          } else {\n            let _skipMint = !this.state.directMint && this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMint']);\n            _skipMint = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : _skipMint;\n\n            // Mint if someone mint over X amount\n            if (_skipMint){\n              let [\n                maxUnlentPerc,\n                totalAUM\n              ] = await Promise.all([\n                this.functionsUtil.genericContractCall('idleDAIYield', 'maxUnlentPerc'),\n                this.functionsUtil.loadAssetField('pool',this.props.selectedToken,this.props.tokenConfig,this.props.account)\n              ]);\n\n              if (maxUnlentPerc && totalAUM){\n                const depositPerc = inputValue.div(totalAUM).times(100);\n                maxUnlentPerc = this.functionsUtil.BNify(maxUnlentPerc).div(1e3);\n                if (depositPerc.gte(maxUnlentPerc.times(2))){\n                  _skipMint = false;\n                }\n                // console.log(maxUnlentPerc.toFixed(5),inputValue.toFixed(5),totalAUM.toFixed(5),depositPerc.toFixed(5),depositPerc.gte(maxUnlentPerc.times(2)),_skipMint);\n              }\n            }\n\n            depositParams = [tokensToDeposit, _skipMint, '0x0000000000000000000000000000000000000000'];\n            contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'mintIdleToken', depositParams, callbackDeposit, callbackReceiptDeposit);\n          }\n        }\n      break;\n      case 'redeem':\n\n        if (redeemGovTokens){\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_gov`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: 0\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', [0], callbackRedeem, callbackReceiptRedeem);\n          \n        } else {\n\n          if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n            return false;\n          }\n\n          const txData = {\n            value:this.functionsUtil.BNify(inputValue)\n          };\n\n          let idleTokenToRedeem = null;\n          if (selectedPercentage){\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage);\n          } else {\n            const idleTokenPrice = await this.functionsUtil.genericContractCall(this.props.tokenConfig.idle.token, 'tokenPrice');\n            idleTokenToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals)).div(idleTokenPrice);\n          }\n\n          // Normalize number\n          idleTokenToRedeem = this.functionsUtil.normalizeTokenAmount(idleTokenToRedeem,18);\n\n          if (!idleTokenToRedeem){\n            return false;\n          }\n\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_partial`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: parseInt(inputValue)\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          let redeemParams = [idleTokenToRedeem];\n          // console.log(redeemParams,idleTokenToRedeem);\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', redeemParams, callbackRedeem, callbackReceiptRedeem, txData);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    if (contractSendResult !== false){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  showMaxSlippage = () => {\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  checkAction = () => {\n    let action = this.state.action;\n\n    switch(action){\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = 'deposit';\n        }\n      break;\n      default:\n      break;\n    }\n\n    if (action !== this.state.action){\n      this.setState({\n        action\n      },() => {\n        this.checkButtonDisabled();\n      });\n    } else {\n      this.checkButtonDisabled();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.props.tokenBalance));\n      break;\n      case 'redeem':\n        buttonDisabled = !this.state.canRedeemCurve && !this.state.redeemGovTokens && ( buttonDisabled || (amount && amount.gt(this.props.redeemableBalance)) );\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.props.tokenBalance ? this.functionsUtil.BNify(this.props.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        amount = this.props.redeemableBalance ? this.functionsUtil.BNify(this.props.redeemableBalance).times(selectedPercentage) : null;\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  changeInputValue = (e) => {\n    if (!this.state.action){\n      return false;\n    }\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem && !this.state.canRedeemCurve){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const govTokensDisabled = this.props.tokenConfig.govTokensDisabled;\n    const govTokensEnabled = this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'govTokensEnabled']);\n    const skipMintForDepositEnabled = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : true;\n    const skipMintCheckboxEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMintCheckboxEnabled']) && skipMintForDepositEnabled;\n\n    const redeemGovTokenEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','redeemGovTokens','enabled']) && !govTokensDisabled && govTokensEnabled;\n    const redeemGovTokens = redeemGovTokenEnabled && this.state.redeemGovTokens && this.state.action === 'redeem';\n\n    const metaTransactionsAvailable = this.props.biconomy && this.state.actionProxyContract[this.state.action];\n    const useMetaTx = metaTransactionsAvailable && this.state.metaTransactionsEnabled;\n    const totalBalance = this.state.action === 'deposit' ? this.props.tokenBalance : this.props.redeemableBalance;\n    const migrateText = this.state.migrationEnabled && this.props.tokenConfig.migration.message !== undefined ? this.props.tokenConfig.migration.message : null;\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n    const depositCurve = curveTokenEnabled && this.state.depositCurveEnabled && this.state.action === 'deposit';\n\n    const showDepositOptions = this.state.action === 'deposit' && !this.state.contractPaused && (curveTokenEnabled || this.state.tokenApproved);\n\n    const canPerformAction = /*!depositCurve && !this.state.redeemCurveEnabled && */((this.state.action === 'deposit' && this.state.canDeposit) || (this.state.action === 'redeem' && this.state.canRedeem) || redeemGovTokens);\n    const showDepositCurve = showDepositOptions && curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canDepositCurve && this.state.action === 'deposit';\n    const showRedeemCurve = curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canRedeemCurve && this.state.action === 'redeem';\n\n    const showActionFlow = !redeemGovTokens && canPerformAction;\n    const showBuyFlow = this.state.componentMounted && (!showDepositCurve || this.state.showBuyFlow) && !this.state.depositCurveEnabled && this.state.tokenApproved && !this.state.contractPaused && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.action === 'deposit' && !this.state.canDeposit;\n    const showRedeemFlow = this.state.canRedeem && (!this.state.redeemCurveEnabled || this.state.showRedeemFlow);\n\n    const showCurveSlippage = depositCurve && this.state.depositCurveSlippage && this.state.depositCurveBalance && !this.state.buttonDisabled;\n\n    const showRebalanceOption = showDepositOptions && this.state.canDeposit && skipMintCheckboxEnabled && this.state.action === 'deposit';\n    const showAdvancedDepositOptions = showDepositCurve || showRebalanceOption;\n\n    const batchDepositInfo = this.functionsUtil.getGlobalConfig(['tools','batchDeposit']);\n    const batchDepositEnabled = batchDepositInfo.enabled && typeof batchDepositInfo.props.availableTokens[this.props.tokenConfig.idle.token] !== 'undefined';\n    const batchDepositDepositEnabled = batchDepositInfo.depositEnabled;\n\n    const showBatchDeposit = batchDepositEnabled && batchDepositDepositEnabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          <Box\n            width={1}\n          >\n            <Text mb={1}>\n              Select your asset:\n            </Text>\n            <AssetSelector\n              {...this.props}\n            />\n          </Box>\n          <Migrate\n            {...this.props}\n            migrateTextBefore={migrateText}\n            migrateText={migrateText !== null ? '' : null}\n            toggleSkipMigration={this.toggleSkipMigration.bind(this)}\n          >\n            {\n              !this.props.account ? (\n                <ConnectBox\n                  {...this.props}\n                />\n              ) :\n              this.state.componentMounted ? (\n                this.state.action ? (\n                  <Box width={1}>\n                    <Flex\n                      mt={2}\n                      flexDirection={'column'}\n                    >\n                      <Text mb={2}>\n                        Choose the action:\n                      </Text>\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('deposit');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'deposit' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'deposit'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:3\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Deposit\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('redeem');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'redeem' }\n                          isDisabled={ !this.state.canRedeem && !this.state.canRedeemCurve }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'redeem'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:3\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Redeem\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </Flex>\n                    {\n                      showAdvancedDepositOptions ? (\n                        <DashboardCard\n                          cardProps={{\n                            pt:2,\n                            px:2,\n                            mt:3,\n                            display:'flex',\n                            alignItems:'center',\n                            flexDirection:'column',\n                            justifyContent:'center',\n                            pb:this.state.showAdvancedOptions ? 3 : 2,\n                          }}\n                        >\n                          <Flex\n                            width={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <Link\n                              ml={1}\n                              mainColor={'primary'}\n                              hoverColor={'primary'}\n                              onClick={this.toggleShowAdvancedOptions}\n                            >\n                              { this.state.showAdvancedOptions ? 'Hide' : 'Show' } advanced options\n                            </Link>\n                            <Icon\n                              size={'1.8em'}\n                              color={'cellText'}\n                              name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                            />\n                          </Flex>\n                          {\n                            this.state.showAdvancedOptions &&\n                              <Flex\n                                mt={1}\n                                flexDirection={'column'}\n                              >\n                                {\n                                  showDepositCurve && \n                                    <Flex\n                                      alignItems={'center'}\n                                      justifyContent={'row'}\n                                    >\n                                      <Checkbox\n                                        required={false}\n                                        disabled={this.state.directMint}\n                                        label={`Deposit in the Curve Pool`}\n                                        checked={this.state.depositCurveEnabled}\n                                        onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                      />\n                                      <Link\n                                        mainColor={'primary'}\n                                        hoverColor={'primary'}\n                                        onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                      >\n                                        (read more)\n                                      </Link>\n                                    </Flex>\n                                }\n                                {\n                                  showRebalanceOption && \n                                    <Flex\n                                      alignItems={'center'}\n                                      justifyContent={'row'}\n                                    >\n                                      <Checkbox\n                                        required={false}\n                                        label={`Rebalance the pool`}\n                                        checked={this.state.directMint}\n                                        disabled={this.state.depositCurveEnabled}\n                                        onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                      />\n                                      <Tooltip\n                                        placement={'bottom'}\n                                        message={this.functionsUtil.getGlobalConfig(['messages','directMint'])}\n                                      >\n                                        <Icon\n                                          size={'1em'}\n                                          color={'cellTitle'}\n                                          name={\"InfoOutline\"}\n                                        />\n                                      </Tooltip>\n                                    </Flex>\n                                }\n                              </Flex>\n                          }\n                        </DashboardCard>\n                      ) : (\n                        <Flex\n                          width={1}\n                          flexDirection={'column'}\n                        >\n                          {\n                            showDepositCurve && (\n                              <Flex\n                                width={1}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <DashboardCard\n                                  isRainbow={true}\n                                  cardProps={{\n                                    py:3,\n                                    px:2,\n                                    mt:3,\n                                    display:'flex',\n                                    alignItems:'center',\n                                    flexDirection:'column',\n                                    justifyContent:'center',\n                                  }}\n                                >\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <Image\n                                      height={'1.8em'}\n                                      src={curveConfig.params.image}\n                                    />\n                                    <Text\n                                      mt={2}\n                                      px={2}\n                                      fontSize={1}\n                                      color={'dark-gray'}\n                                      textAlign={'center'}\n                                    >\n                                      Deposit your tokens in the Curve Pool and boost your APY up to {this.state.curveAPY ? this.state.curveAPY.toFixed(2) : '-'}%.\n                                      <Link\n                                        ml={1}\n                                        mainColor={'primary'}\n                                        hoverColor={'primary'}\n                                        onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                      >\n                                        Read More\n                                      </Link>\n                                    </Text>\n                                    <Checkbox\n                                      mt={2}\n                                      required={false}\n                                      label={`Deposit in Curve`}\n                                      checked={this.state.depositCurveEnabled}\n                                      onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                    />\n                                  </Flex>\n                                </DashboardCard>\n                                {\n                                  (!this.state.showBuyFlow && !this.state.depositCurveEnabled && !this.state.canDeposit) &&\n                                    <Link\n                                      textAlign={'center'}\n                                      hoverColor={'primary'}\n                                      onClick={ e => this.setShowBuyFlow(true) }\n                                    >\n                                      I just want to deposit more {this.props.selectedToken}\n                                    </Link>\n                                }\n                              </Flex>\n                            )\n                          }\n                          {\n                            showRebalanceOption && (\n                              <DashboardCard\n                                cardProps={{\n                                  py:3,\n                                  px:2,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    color={'cellText'}\n                                    name={'InfoOutline'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    px={2}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    By checking this flag you can rebalance the pool and help all users gain an additional APR\n                                  </Text>\n                                </Flex>\n                                <Checkbox\n                                  mt={2}\n                                  required={false}\n                                  label={`Rebalance the pool`}\n                                  checked={this.state.directMint}\n                                  onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                />\n                              </DashboardCard>\n                            )\n                          }\n                        </Flex>\n                      )\n                    }\n                    {\n                      (metaTransactionsAvailable && !showBuyFlow && !this.state.contractPaused) && \n                      <DashboardCard\n                        cardProps={{\n                          py:3,\n                          px:2,\n                          my:3,\n                          display:'flex',\n                          alignItems:'center',\n                          flexDirection:'column',\n                          justifyContent:'center',\n                        }}\n                      >\n                        {\n                          this.state.metaTransactionsEnabled && this.state.txError[this.state.action] && this.state.actionProxyContract[this.state.action].approved ? (\n                            <Flex\n                              width={1}\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <Icon\n                                size={'1.8em'}\n                                name={'Warning'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={1}\n                                fontSize={1}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                Seems like you are having some trouble with Meta-Transactions... Disable them by unchecking the box below and try again!\n                              </Text>\n                            </Flex>\n                          ) : this.functionsUtil.getWalletProvider() === 'WalletConnect' && this.state.metaTransactionsEnabled ? (\n                            <Flex\n                              width={1}\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <Icon\n                                size={'1.8em'}\n                                name={'Warning'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={1}\n                                fontSize={1}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                Please disable Meta-Transactions if you are using Argent Wallet to avoid failed transactions!\n                              </Text>\n                            </Flex>\n                          ) : (\n                            <Text\n                              mt={1}\n                              fontSize={1}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              Meta-Transactions are {this.state.metaTransactionsEnabled ? 'available' : 'disabled'} for {this.state.action}s!<br />\n                              {\n                                this.state.metaTransactionsEnabled && !this.state.actionProxyContract[this.state.action].approved && `Please either enable the Smart-Contract to enjoy gas-less ${this.state.action} or just disable meta-tx.`\n                              }\n                            </Text>\n                          )\n                        }\n                        <Checkbox\n                          mt={2}\n                          required={false}\n                          checked={this.state.metaTransactionsEnabled}\n                          onChange={ e => this.toggleMetaTransactionsEnabled(e.target.checked) }\n                          label={`${this.functionsUtil.capitalize(this.state.action)} with Meta-Transaction`}\n                        />\n                      </DashboardCard>\n                    }\n                    {\n                      showBatchDeposit &&\n                        <Flex\n                          p={2}\n                          mt={3}\n                          width={1}\n                          borderRadius={2}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'center'}\n                          backgroundColor={'DashboardCard'}\n                          border={`1px solid ${this.props.theme.colors.primary}`}\n                        >\n                          <Link\n                            textAlign={'center'}\n                            hoverColor={'primary'}\n                            href={`/#/dashboard/tools/${batchDepositInfo.route}/${this.props.tokenConfig.idle.token}`}\n                          >\n                            Gas fees too high? Save gas with our Batch Deposit!\n                          </Link>\n                          <Icon\n                            ml={1}\n                            size={'1em'}\n                            color={'primary'}\n                            name={'LocalGasStation'}\n                          />\n                        </Flex>\n                    }\n                    {\n                      showRedeemCurve && this.state.canRedeem && (\n                        <Flex\n                          width={1}\n                          flexDirection={'column'}\n                          justifyContent={'center'}\n                        >\n                          <DashboardCard\n                            isRainbow={true}\n                            cardProps={{\n                              py:3,\n                              px:2,\n                              mt:3,\n                              display:'flex',\n                              alignItems:'center',\n                              flexDirection:'column',\n                              justifyContent:'center',\n                            }}\n                          >\n                            <Flex\n                              width={1}\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <Image\n                                height={'1.8em'}\n                                src={curveConfig.params.image}\n                              />\n                              <Text\n                                mt={2}\n                                px={2}\n                                fontSize={1}\n                                color={'dark-gray'}\n                                textAlign={'center'}\n                              >\n                                Redeem your tokens from the Curve Pool.\n                                <Link\n                                  ml={1}\n                                  mainColor={'primary'}\n                                  hoverColor={'primary'}\n                                  onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                >\n                                  Read More\n                                </Link>\n                              </Text>\n                              {\n                                this.state.canRedeem &&\n                                  <Checkbox\n                                    mt={2}\n                                    required={false}\n                                    label={`Redeem from Curve`}\n                                    checked={this.state.redeemCurveEnabled}\n                                    onChange={ e => this.toggleRedeemCurve(e.target.checked) }\n                                  />\n                              }\n                            </Flex>\n                          </DashboardCard>\n                          {\n                            this.canRedeem &&\n                              <Link\n                                textAlign={'center'}\n                                hoverColor={'primary'}\n                                onClick={ e => this.setShowRedeemFlow(true) }\n                              >\n                                I just want to redeem my {this.props.selectedToken}\n                              </Link>\n                          }\n                        </Flex>\n                      )\n                    }\n                    {\n                      (this.state.action === 'redeem' && this.state.unlentBalance && showRedeemFlow) &&\n                        <DashboardCard\n                          cardProps={{\n                            py:2,\n                            px:2,\n                            mt:3,\n                            display:'flex',\n                            alignItems:'center',\n                            flexDirection:'column',\n                            justifyContent:'center',\n                          }}\n                        >\n                          <Flex\n                            width={1}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Icon\n                              size={'1.8em'}\n                              color={'cellText'}\n                              name={'LocalGasStation'}\n                            />\n                            <Text\n                              px={2}\n                              fontSize={1}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              Available balance for Cheap Redeem\n                            </Text>\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                            >\n                              <Text\n                                fontSize={1}\n                                fontWeight={3}\n                                color={'dark-gray'}\n                                textAlign={'center'}\n                                hoverColor={'copyColor'}\n                              >\n                                {this.state.unlentBalance.toFixed(4)} {this.props.selectedToken}\n                              </Text>\n                              <Tooltip\n                                placement={'top'}\n                                message={this.functionsUtil.getGlobalConfig(['messages','cheapRedeem'])}\n                              >\n                                <Icon\n                                  ml={1}\n                                  size={'1em'}\n                                  color={'cellTitle'}\n                                  name={\"InfoOutline\"}\n                                />\n                              </Tooltip>\n                            </Flex>\n                          </Flex>\n                        </DashboardCard>\n                    }\n                    {\n                      (this.state.action === 'redeem' && redeemGovTokenEnabled && showRedeemFlow) && (\n                        <DashboardCard\n                          cardProps={{\n                            py:3,\n                            px:2,\n                            mt:3,\n                            display:'flex',\n                            alignItems:'center',\n                            flexDirection:'column',\n                            justifyContent:'center',\n                          }}\n                        >\n                          <Flex\n                            width={1}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Icon\n                              size={'1.8em'}\n                              color={'cellText'}\n                              name={'InfoOutline'}\n                            />\n                            <Text\n                              mt={1}\n                              px={2}\n                              fontSize={1}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              By redeeming your {this.props.selectedToken} you will automatically get also the proportional amount of governance tokens accrued{ this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~ $${this.props.govTokensBalance.toFixed(2)})` : null }.\n                            </Text>\n                          </Flex>\n                          <Checkbox\n                            mt={2}\n                            required={false}\n                            checked={this.state.redeemGovTokens}\n                            label={`Redeem governance tokens only`}\n                            onChange={ e => this.toggleRedeemGovTokens(e.target.checked) }\n                          />\n                        </DashboardCard>\n                      )\n                    }\n                    {\n                      (this.state.contractPaused && this.state.action === 'deposit') ? (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'1.8em'}\n                              name={'Warning'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={1}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              Deposits for {this.props.selectedToken} are temporarily unavailable due to Smart-Contract maintenance. Redeems are always available.\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      ) : (!this.state.tokenApproved && this.state.action === 'deposit') ? (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3\n                          }}\n                        >\n                          {\n                            this.state.processing['approve'] && this.state.processing['approve'].loading ? (\n                              <Flex\n                                flexDirection={'column'}\n                              >\n                                <TxProgressBar\n                                  web3={this.props.web3}\n                                  waitText={`Approve estimated in`}\n                                  endMessage={`Finalizing approve request...`}\n                                  hash={this.state.processing['approve'].txHash}\n                                  cancelTransaction={this.cancelTransaction.bind(this)}\n                                />\n                              </Flex>\n                            ) : (\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'LockOpen'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={3}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  {\n                                    this.state.depositCurveEnabled ? \n                                      `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.`\n                                    : useMetaTx ?\n                                      `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle using Meta-Transaction you need to approve our Smart-Contract first.`\n                                    :\n                                      `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle you need to approve our Smart-Contract first.`\n                                  }\n                                </Text>\n                                <RoundButton\n                                  buttonProps={{\n                                    mt:3,\n                                    width:[1,1/2]\n                                  }}\n                                  handleClick={this.approveToken.bind(this)}\n                                >\n                                  Approve\n                                </RoundButton>\n                              </Flex>\n                            )\n                          }\n                        </DashboardCard>\n                      ) : (!showBuyFlow && canPerformAction) && (\n                        !this.state.processing[this.state.action].loading ? (\n                          <Flex\n                            mt={2}\n                            flexDirection={'column'}\n                          >\n                            {\n                              showActionFlow && (\n                                <Flex\n                                  mb={3}\n                                  width={1}\n                                  flexDirection={'column'}\n                                >\n                                  {\n                                    /*\n                                    showCurveSlippage &&\n                                      <DashboardCard\n                                        cardProps={{\n                                          p:3,\n                                          mb:2\n                                        }}\n                                      >\n                                        <Flex\n                                          alignItems={'center'}\n                                          flexDirection={'column'}\n                                        >\n                                          <Icon\n                                            size={'1.8em'}\n                                            color={'cellText'}\n                                            name={'FileUpload'}\n                                          />\n                                          <Text\n                                            mt={2}\n                                            fontSize={2}\n                                            color={'cellText'}\n                                            textAlign={'center'}\n                                          >\n                                            You can deposit {this.state.depositCurveBalance.toFixed(4)} {this.props.selectedToken} in the Curve Pool{ this.state.depositCurveSlippage ? (this.state.depositCurveSlippage.gt(0) ? ` with ${this.state.depositCurveSlippage.times(100).toFixed(2)}% of slippage` : ` with ${Math.abs(parseFloat(this.state.depositCurveSlippage.times(100).toFixed(2)))}% of bonus`) : '' }.\n                                          </Text>\n                                        </Flex>\n                                      </DashboardCard>\n                                    */\n                                  }\n                                  {\n                                    (totalBalance || this.props.tokenFeesPercentage) && (\n                                      <Box\n                                        mb={1}\n                                        width={1}\n                                      >\n                                        {\n                                          this.state.showMaxSlippage && showCurveSlippage && (\n                                            <Box\n                                              mb={2}\n                                              width={1}\n                                            >\n                                              <Flex\n                                                alignItems={'center'}\n                                                flexDirection={'row'}\n                                              >\n                                                <Text>\n                                                  Choose max slippage:\n                                                </Text>\n                                                <Tooltip\n                                                  placement={'top'}\n                                                  message={`Max additional slippage on top of the one shown below`}\n                                                >\n                                                  <Icon\n                                                    ml={1}\n                                                    size={'1em'}\n                                                    color={'cellTitle'}\n                                                    name={\"InfoOutline\"}\n                                                  />\n                                                </Tooltip>\n                                              </Flex>\n                                              <Flex\n                                                mt={2}\n                                                alignItems={'center'}\n                                                flexDirection={'row'}\n                                                justifyContent={'space-between'}\n                                              >\n                                                {\n                                                  [0.2,0.5,1,5].map( slippage => (\n                                                    <FastBalanceSelector\n                                                      cardProps={{\n                                                        p:1\n                                                      }}\n                                                      textProps={{\n                                                        fontSize:1\n                                                      }}\n                                                      percentage={slippage}\n                                                      key={`selector_${slippage}`}\n                                                      onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                                      isActive={this.state.maxSlippage === parseFloat(slippage)}\n                                                    />\n                                                  ))\n                                                }\n                                              </Flex>\n                                            </Box>\n                                          )\n                                        }\n                                        <Flex\n                                          width={1}\n                                          alignItems={'center'}\n                                          flexDirection={'row'}\n                                          justifyContent={'space-between'}\n                                        >\n                                        {\n                                          showCurveSlippage ? (\n                                            <Flex\n                                              width={1}\n                                              maxWidth={'50%'}\n                                              alignItems={'center'}\n                                              flexDirection={'row'}\n                                            >\n                                              <Text\n                                                fontSize={1}\n                                                fontWeight={3}\n                                                textAlign={'right'}\n                                                style={{\n                                                  whiteSpace:'nowrap'\n                                                }}\n                                                color={ this.state.depositCurveSlippage.gt(0) ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                              >\n                                                {\n                                                  parseFloat(this.state.depositCurveSlippage.times(100).toFixed(2)) === 0 ?\n                                                    'No Slippage'\n                                                  : `${ this.state.depositCurveSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositCurveSlippage.times(100).abs().toFixed(2)}%`\n                                                }\n                                              </Text>\n                                              <Tooltip\n                                                placement={'top'}\n                                                message={this.functionsUtil.getGlobalConfig(['messages','curveBonusSlippage'])}\n                                              >\n                                                <Icon\n                                                  ml={1}\n                                                  size={'1em'}\n                                                  color={'cellTitle'}\n                                                  name={\"InfoOutline\"}\n                                                />\n                                              </Tooltip>\n                                              <Link\n                                                ml={1}\n                                                color={'copyColor'}\n                                                hoverColor={'primary'}\n                                                onClick={this.showMaxSlippage}\n                                              >\n                                                change\n                                              </Link>\n                                            </Flex>\n                                          ) : this.props.tokenFeesPercentage && (\n                                            <Flex\n                                              alignItems={'center'}\n                                              flexDirection={'row'}\n                                            >\n                                              <Text\n                                                fontSize={1}\n                                                fontWeight={3}\n                                                color={'dark-gray'}\n                                                textAlign={'right'}\n                                                hoverColor={'copyColor'}\n                                              >\n                                                Performance fee: {this.props.tokenFeesPercentage.times(100).toFixed(2)}%\n                                              </Text>\n                                              <Tooltip\n                                                placement={'top'}\n                                                message={this.functionsUtil.getGlobalConfig(['messages','performanceFee'])}\n                                              >\n                                                <Icon\n                                                  ml={1}\n                                                  size={'1em'}\n                                                  color={'cellTitle'}\n                                                  name={\"InfoOutline\"}\n                                                />\n                                              </Tooltip>\n                                            </Flex>\n                                          )\n                                        }\n                                        {\n                                          totalBalance && (\n                                            <Link\n                                              fontSize={1}\n                                              fontWeight={3}\n                                              color={'dark-gray'}\n                                              textAlign={'right'}\n                                              hoverColor={'copyColor'}\n                                              onClick={ (e) => this.setFastBalanceSelector(100) }\n                                            >\n                                              {totalBalance.toFixed(6)} {this.props.selectedToken}\n                                            </Link>\n                                          )\n                                        }\n                                        </Flex>\n                                      </Box>\n                                    )\n                                  }\n                                  <Input\n                                    min={0}\n                                    type={\"number\"}\n                                    required={true}\n                                    height={'3.4em'}\n                                    borderRadius={2}\n                                    fontWeight={500}\n                                    className={styles.input}\n                                    borderColor={'cardBorder'}\n                                    backgroundColor={'cardBg'}\n                                    boxShadow={'none !important'}\n                                    placeholder={`Insert amount`}\n                                    onChange={this.changeInputValue.bind(this)}\n                                    border={`1px solid ${this.props.theme.colors.divider}`}\n                                    value={this.state.inputValue[this.state.action] !== null ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]).toFixed() : ''}\n                                  />\n                                  <Flex\n                                    mt={2}\n                                    alignItems={'center'}\n                                    flexDirection={'row'}\n                                    justifyContent={'space-between'}\n                                  >\n                                    {\n                                      [25,50,75,100].map( percentage => (\n                                        <FastBalanceSelector\n                                          percentage={percentage}\n                                          key={`selector_${percentage}`}\n                                          onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                          isActive={this.state.fastBalanceSelector[this.state.action] === parseInt(percentage)}\n                                        />\n                                      ))\n                                    }\n                                  </Flex>\n                                </Flex>\n                              )\n                            }\n                            {\n                              canPerformAction && \n                                <Flex\n                                  justifyContent={'center'}\n                                  mt={ redeemGovTokens ? 2 : 0 }\n                                >\n                                  <RoundButton\n                                    buttonProps={{\n                                      width:'auto',\n                                      minWidth:[1,1/2],\n                                      style:{\n                                        textTransform:'capitalize'\n                                      },\n                                      disabled:this.state.buttonDisabled\n                                    }}\n                                    handleClick={this.state.buttonDisabled ? null : this.executeAction.bind(this) }\n                                  >\n                                    {this.state.action}{ redeemGovTokens ? ' Gov Tokens' : '' /*(depositCurve ? ' in Curve' : '')*/ }\n                                  </RoundButton>\n                                </Flex>\n                            }\n                          </Flex>\n                        ) : (\n                          <Flex\n                            mt={4}\n                            flexDirection={'column'}\n                          >\n                            <TxProgressBar\n                              web3={this.props.web3}\n                              cancelTransaction={this.cancelTransaction.bind(this)}\n                              hash={this.state.processing[this.state.action].txHash}\n                              endMessage={`Finalizing ${this.state.action} request...`}\n                              waitText={`${this.functionsUtil.capitalize(this.state.action)} estimated in`}\n                            />\n                          </Flex>\n                        )\n                      )\n                    }\n                  </Box>\n                ) : null\n              ) : (\n                <Flex\n                  mt={4}\n                  flexDirection={'column'}\n                >\n                  <FlexLoader\n                    flexProps={{\n                      flexDirection:'row'\n                    }}\n                    loaderProps={{\n                      size:'30px'\n                    }}\n                    textProps={{\n                      ml:2\n                    }}\n                    text={'Loading asset info...'}\n                  />\n                </Flex>\n              )\n            }\n          </Migrate>\n        </Flex>\n        {\n          /*\n          showDepositCurve && this.state.depositCurveEnabled ? (\n            <CurveDeposit\n              {...this.props}\n            />\n          ) :\n          */\n          showRedeemCurve && this.state.redeemCurveEnabled && (\n            <Box\n              mt={3}\n              width={1}\n            >\n              <CurveRedeem\n                {...this.props}\n              />\n            </Box>\n          )\n        }\n        {\n          showBuyFlow &&\n            <Flex\n              mt={3}\n              width={[1,0.5]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <BuyModal\n                {...this.props}\n                showInline={true}\n                availableMethods={[]}\n                buyToken={this.props.selectedToken}\n              />\n            </Flex>\n        }\n\n        <ShareModal\n          confettiEnabled={true}\n          icon={`images/medal.svg`}\n          title={`Congratulations!`}\n          account={this.props.account}\n          closeModal={this.resetModal}\n          tokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'share'}\n          text={`You have successfully deposited in Idle!<br />Enjoy <strong>${this.state.tokenAPY}% APY</strong> on your <strong>${this.props.selectedToken}</strong>!`}\n          tweet={`I'm earning ${this.state.tokenAPY}% APY on my ${this.props.selectedToken} with @idlefinance! Go to ${this.functionsUtil.getGlobalConfig(['baseURL'])} and start earning now from your idle tokens!`}\n        />\n\n      </Flex>\n    );\n  }\n}\n\nexport default DepositRedeem;\n","import theme from '../theme';\nimport { Bar } from '@nivo/bar';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Text, Input, Icon, Tooltip } from \"rimble-ui\";\n\nclass EstimatedEarnings extends Component {\n\n  state = {\n    tokenApy:null,\n    chartData:null,\n    chartProps:null,\n    inputValue:1000,\n    maxInputValue:999999999999999\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    this.loadChart();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged){\n      this.loadChart();\n    }\n  }\n\n  async getTokenApy(){\n    const tokenApy = this.state.tokenApy || await this.functionsUtil.getTokenApy(this.props.tokenConfig);\n    if (this.state.tokenApy !== tokenApy){\n      this.setState({\n        tokenApy\n      });\n    }\n    return tokenApy;\n  }\n\n  async loadChart(){\n\n    const tokenApy = await this.getTokenApy();\n\n    const amount = this.functionsUtil.BNify(this.state.inputValue);\n    const earningsYear = amount.times(tokenApy.div(100));\n\n    const amountMonth = parseFloat(earningsYear.div(12));\n    const amount3Months = parseFloat(earningsYear.div(4));\n    const amount6Months = parseFloat(earningsYear.div(2));\n    const amountYear = parseFloat(earningsYear.div(1));\n\n    const chartData = [\n      {\n        perc:1/12,\n        label:'MONTH',\n        value:amountMonth,\n        month:amountMonth,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        monthColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:3/12,\n        label:'3 MONTHS',\n        value:amount3Months,\n        month3:amount3Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month3Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:6/12,\n        label:'6 MONTHS',\n        value:amount6Months,\n        month6:amount6Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month6Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:1,\n        label:'YEAR',\n        year:amountYear,\n        value:amountYear,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        yearColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      }\n    ];\n\n    let labelTextColorModifiers = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'chart','labelTextColorModifiers']);\n\n    const maxGridLines = 4;\n    const gridYStep = amountYear/maxGridLines;\n    const gridYValues = [0];\n    for (let i=1;i<=maxGridLines;i++){\n      const gridYValue = i*gridYStep;\n      gridYValues.push(gridYValue);\n    }\n\n    const chartProps = {\n      padding: 0.2,\n      animate: false,\n      indexBy: 'label',\n      // enableLabel: false,\n      labelSkipWidth: 16,\n      labelSkipHeight: 16,\n      keys: ['month','month3','month6','year'],\n      colors: ({ id, data }) => data[`${id}Color`],\n      label: d => this.functionsUtil.abbreviateNumber(d.value,2,4)+' '+this.props.selectedToken,\n      labelTextColor: labelTextColorModifiers ? { from: 'color', modifiers: [ labelTextColorModifiers ] } : null,\n      isInteractive:false,\n      minValue:0,\n      gridYValues,\n      // maxValue:amountYear,\n      axisLeft:{\n        format: v => this.functionsUtil.abbreviateNumber(v,1,3),\n        tickValues:gridYValues,\n        orient: 'left',\n        tickSize: 0,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendPosition: 'middle'\n      },\n      axisBottom:{\n        legend: '',\n        tickSize:0,\n        tickPadding: 15,\n        orient: 'bottom',\n      },\n      theme:{\n        labels:{\n          text:{\n            fontSize:15,\n            fontWeight:600,\n            fill:theme.colors.counter,\n            fontFamily: theme.fonts.sansSerif\n          }\n        },\n        axis: {\n          ticks: {\n            text: {\n              fontSize:14,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '9 5'\n          }\n        },\n      },\n      margin: this.props.isMobile ? { top: 0, right: 0, bottom: 30, left: 0 } : { top: 10, right: 0, bottom: 50, left: 65 }\n    }\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  changeInputValue(e){\n    let inputValue = e.target.value.length && !isNaN(e.target.value) ? Math.min(this.state.maxInputValue,parseFloat(e.target.value)) : 0;\n    inputValue = this.functionsUtil.BNify(inputValue);\n    this.setState({\n      inputValue\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const showAPYDisclaimer = idleTokenEnabled && this.functionsUtil.getGlobalConfig(['govTokens','IDLE','showAPR']);\n\n    return (\n      <DashboardCard\n        cardProps={{\n          p:[3,4]\n        }}\n      >\n        <Flex\n          width={1}\n          flexDirection={['column','row']}\n        >\n          <Flex\n            width={[1,0.3]}\n            flexDirection={'column'}\n            justifyContent={'flex-start'}\n          >\n            <Flex\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <AssetField\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'icon',\n                  props:{\n                    mb:2,\n                    height:'2.5em'\n                  }\n                }}\n              />\n              <Text\n                fontSize={2}\n                color={'cellText'}\n                textAlign={'center'}\n              >\n                Set the amount and see your estimated earnings on time based on the current APY: { this.state.tokenApy ? `${this.state.tokenApy.toFixed(2)}%` : null}\n                {\n                  showAPYDisclaimer && \n                    <Flex\n                      style={{\n                        display:'inline-flex',\n                        verticalAlign:'middle'\n                      }}\n                    >\n                      <Tooltip\n                        placement={'top'}\n                        message={this.functionsUtil.getGlobalConfig(['messages','apyLong'])}\n                      >\n                        <Icon\n                          ml={1}\n                          name={\"Info\"}\n                          size={'1em'}\n                          color={'cellTitle'}\n                        />\n                      </Tooltip>\n                    </Flex>\n                }\n              </Text>\n            </Flex>\n            <Flex\n              mt={3}\n              flexDirection={'column'}\n            >\n              <Input\n                min={0}\n                type={\"number\"}\n                required={true}\n                borderRadius={2}\n                fontWeight={500}\n                textAlign={'center'}\n                height={['3em','3.4em']}\n                borderColor={'cardBorder'}\n                boxShadow={'none !important'}\n                max={this.state.maxInputValue}\n                backgroundColor={'cardBgHover'}\n                onChange={this.changeInputValue.bind(this)}\n                border={`1px solid ${theme.colors.divider}`}\n                placeholder={`Insert ${this.props.selectedToken.toUpperCase()} amount`}\n                value={this.state.inputValue && !isNaN(this.state.inputValue) ? this.state.inputValue : ''}\n              />\n            </Flex>\n            <Flex\n              mt={3}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                buttonProps={{\n                  width:[1,1/2],\n                }}\n                handleClick={this.loadChart.bind(this)}\n              >\n                CALCULATE\n              </RoundButton>\n            </Flex>\n          </Flex>\n          <Flex\n            mt={[3,0]}\n            width={[1,0.7]}\n            id={'estimated-earnings-chart'}\n          >\n            {\n              this.props.isMobile ? (\n                <Flex\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  {\n                    this.state.chartData !== null && this.state.chartData.map((v,index) => (\n                      <Flex\n                        py={2}\n                        my={2}\n                        width={1}\n                        flexDirection={'row'}\n                        key={`earnings_${index}`}\n                      >\n                        <Flex\n                          width={0.35}\n                          alignItems={'center'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            color={'legend'}\n                          >\n                            {v.label}\n                          </Text>\n                        </Flex>\n                        <Flex\n                          width={0.65}\n                          position={'relative'}\n                          alignItems={'center'}\n                          minHeight={['20px','35px']}\n                          justifyContent={'center'}\n                        >\n                          <Flex\n                            zIndex={1}\n                            position={'relative'}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Text\n                              fontSize={1}\n                              fontWeight={3}\n                              color={'counter'}\n                            >\n                              {this.functionsUtil.abbreviateNumber(v.value,2,4)} {this.props.selectedToken}\n                            </Text>\n                          </Flex>\n                          <Flex\n                            right={0}\n                            width={v.perc}\n                            position={'absolute'}\n                            height={['20px','35px']}\n                            borderRadius={['20px 0 0 20px','35px 0 0 35px']}\n                            style={{background:`linear-gradient(-90deg, rgba(${v.color},0) 0%, rgba(${v.color},1) 100%)`}}\n                          ></Flex>\n                        </Flex>\n                      </Flex>\n                    ))\n                  }\n                </Flex>\n              ) : (\n                <GenericChart\n                  type={Bar}\n                  height={250}\n                  showLoader={true}\n                  {...this.state.chartProps}\n                  data={this.state.chartData}\n                  parentId={'estimated-earnings-chart'}\n                />\n              )\n            }\n          </Flex>\n        </Flex>\n      </DashboardCard>\n    );\n  }\n}\n\nexport default EstimatedEarnings;","import Title from '../Title/Title';\nimport { Box, Flex } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport FundsOverview from '../FundsOverview/FundsOverview';\nimport DepositRedeem from '../DepositRedeem/DepositRedeem';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport EstimatedEarnings from '../EstimatedEarnings/EstimatedEarnings';\n\nclass AssetPage extends Component {\n\n  state = {\n    tokenFees:{},\n    tokenBalance:{},\n    tokenApproved:{},\n    activeModal:null,\n    govTokensBalance:{},\n    idleTokenBalance:{},\n    redeemableBalance:{},\n    govTokensDisabled:{},\n    availableGovTokens:{},\n    tokenFeesPercentage:{},\n    componentMounted:false\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadTokensInfo(){\n    if (this.props.account){\n      const newState = {...this.state};\n      await this.functionsUtil.asyncForEach(Object.keys(this.props.availableTokens),async (token) => {\n        const tokenConfig = this.props.availableTokens[token];\n        const govTokenAvailableTokens = {};\n        govTokenAvailableTokens[token] = tokenConfig;\n\n        const [\n          tokenFeesPercentage,\n          tokenBalance,\n          tokenFees,\n          idleTokenPrice,\n          idleTokenBalance,\n          tokenApproved,\n          govTokensBalance\n        ] = await Promise.all([\n          this.functionsUtil.getTokenFees(tokenConfig),\n          this.functionsUtil.getTokenBalance(token,this.props.account),\n          this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n          this.functionsUtil.genericContractCall(tokenConfig.idle.token, 'tokenPrice'),\n          this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n          this.functionsUtil.checkTokenApproved(token,tokenConfig.idle.address,this.props.account),\n          this.functionsUtil.getGovTokensUserTotalBalance(this.props.account,govTokenAvailableTokens,'DAI')\n        ]);\n\n        newState.tokenFees[token] = tokenFees;\n        newState.tokenBalance[token] = tokenBalance;\n        newState.tokenApproved[token] = tokenApproved;\n        newState.idleTokenBalance[token] = idleTokenBalance;\n        newState.govTokensBalance[token] = govTokensBalance;\n        newState.tokenFeesPercentage[token] = tokenFeesPercentage;\n        newState.govTokensDisabled[token] = tokenConfig.govTokensDisabled;\n        newState.redeemableBalance[token] = idleTokenBalance ? this.functionsUtil.fixTokenDecimals(idleTokenBalance.times(idleTokenPrice),tokenConfig.decimals) : this.functionsUtil.BNify(0);\n      });\n\n      newState.availableGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n      newState.componentMounted = true;\n      this.setState(newState);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n    const accountChanged = prevProps.account !== this.props.account;\n    if (accountChanged || transactionsChanged){\n      this.loadTokensInfo();\n    }\n  }\n\n  render() {\n\n    const userHasFunds = this.props.account && this.state.idleTokenBalance[this.props.selectedToken] && this.functionsUtil.BNify(this.state.idleTokenBalance[this.props.selectedToken]).gt(0);\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            <Breadcrumb\n              {...this.props}\n              isMobile={this.props.isMobile}\n              path={[this.props.selectedToken]}\n              handleClick={ e => this.props.goToSection(this.props.selectedStrategy) }\n              text={this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])}\n            />\n          </Flex>\n          <Flex\n            width={0.5}\n            justifyContent={'flex-end'}\n          >\n            <CardIconButton\n              icon={'Add'}\n              {...this.props}\n              text={'Add funds'}\n              handleClick={ e => this.setActiveModal('buy') }\n            />\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Deposit / Redeem\n        </Title>\n        <Flex\n          width={1}\n        >\n          <DepositRedeem\n            {...this.props}\n            tokenFees={this.state.tokenFees[this.props.selectedToken]}\n            tokenBalance={this.state.tokenBalance[this.props.selectedToken]}\n            tokenApproved={this.state.tokenApproved[this.props.selectedToken]}\n            govTokensBalance={this.state.govTokensBalance[this.props.selectedToken]}\n            idleTokenBalance={this.state.idleTokenBalance[this.props.selectedToken]}\n            redeemableBalance={this.state.redeemableBalance[this.props.selectedToken]}\n            tokenFeesPercentage={this.state.tokenFeesPercentage[this.props.selectedToken]}\n          />\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverview\n                {...this.props}\n                tokenFees={this.state.tokenFees[this.props.selectedToken]}\n              />\n            </Flex>\n        }\n        {\n          userHasFunds && this.props.account && !this.state.govTokensDisabled[this.props.selectedToken] && Object.keys(this.state.availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id={\"yield-farming\"}\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(this.state.availableGovTokens)}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.30,0.15]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    mobile:false,\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.25],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenRedeemableBalance']),\n                    props:{\n                      width:[0.35,0.30],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                    ]\n                  },\n                  {\n                    title:'DISTRIBUTION',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','userDistributionSpeed']),\n                    props:{\n                      width:[0.35,0.30],\n                    },\n                    fields:[\n                      {\n                        name:'userDistributionSpeed',\n                        props:{\n                          decimals:6\n                        }\n                      }\n                    ]\n                  },\n                  /*\n                  {\n                    title:'APR',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenApr']),\n                    props:{\n                      width:[0.2,0.17],\n                    },\n                    fields:[\n                      {\n                        name:'apr',\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','tokenPrice']),\n                    mobile:false,\n                    props:{\n                      width: 0.17,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                  */\n                ]}\n                {...this.props}\n                availableTokens={this.state.availableGovTokens}\n              />\n            </Flex>\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'estimated-earnings-container'}\n          >\n            <Title my={[3,4]}>Estimated earnings</Title>\n            <EstimatedEarnings\n              {...this.props}\n            />\n          </Flex>\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              enabledTokens={[this.props.selectedToken]}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React, { Component } from 'react';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Box, Text, Icon, Tooltip, Link, Input } from \"rimble-ui\";\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\n\nclass CurveDeposit extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    depositSlippage:null,\n    redeemableBalance:null,\n    migrationContract:null,\n    curveTokensBalance:null,\n    migrationSucceeded:false,\n    fastBalanceSelector:null,\n    migrationContractApproved:false,\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    await this.initToken();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const idleTokenBalanceChanged = prevProps.idleTokenBalance !== this.props.idleTokenBalance;\n    if (accountChanged || idleTokenBalanceChanged){\n      await this.initToken();\n    }\n    \n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = this.state.inputValue !== prevState.inputValue;\n    if (inputValueChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  setInputValue = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    const inputValue = this.props.idleTokenBalance ? this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage) : null;\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    const buttonDisabled = !amount || amount.gt(this.state.idleTokenBalance);\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  approve = async () => {\n    const migrationContract = this.state.migrationContract;\n    if (migrationContract){\n\n      // Check if the migration contract is approved\n      const migrationContractApproved = await this.checkMigrationContractApproved();\n\n      if (!migrationContractApproved){\n\n        const callbackApprove = (tx,error) => {\n          // Send Google Analytics event\n          const eventData = {\n            eventAction: 'approve',\n            eventCategory: 'CurveDeposit',\n            eventLabel: tx ? tx.status : null\n          };\n\n          const txSucceeded = tx && tx.status === 'success';\n\n          // console.log('callbackApprove',tx,error);\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            migrationContractApproved: txSucceeded, // True\n            processing: {\n              ...prevState.processing,\n              txHash:null,\n              loading:false\n            }\n          }));\n\n          if (typeof this.props.callbackApprove === 'function' && txSucceeded){\n            this.props.callbackApprove(tx);\n          }\n\n          this.checkMigration();\n        };\n\n        const callbackReceiptApprove = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              txHash\n            }\n          }));\n        };\n\n        this.functionsUtil.enableERC20(this.props.selectedToken,migrationContract.address,callbackApprove,callbackReceiptApprove);\n\n        this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            txHash:null,\n            loading:true\n          },\n          migrationContractApproved:false\n        }));\n      } else {\n        this.setState({\n          migrationContractApproved:true\n        });\n      }\n    }\n  }\n\n  deposit = async () => {\n\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    if (!inputValue){\n      return false;\n    }\n\n    const callbackDeposit = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveDeposit`,\n        eventAction: this.props.selectedToken,\n        eventValue: inputValue.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackDeposit === 'function' && txSucceeded){\n        this.props.callbackDeposit(tx);\n      }\n    };\n\n    const callbackReceiptDeposit = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.migrationContract.name;\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n    const depositParams = await this.getMigrationParams(_amount);\n\n    this.props.contractMethodSendWrapper(contractName, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  cancelTransaction = async () => {\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  async getMigrationParams(toMigrate){\n    const migrationParams = [];\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.selectedToken]);\n\n    if (!curveTokenConfig){\n      return false;\n    }\n    \n    const migrationContractParams = curveTokenConfig.migrationParams;\n    if (migrationContractParams.n_coins){\n      const amounts = await this.functionsUtil.getCurveAmounts(this.props.selectedToken,toMigrate,true);\n      let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n\n      if (this.state.maxSlippage){\n        minMintAmount = this.functionsUtil.BNify(minMintAmount);\n        minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n        minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n      }\n\n      migrationParams.push(amounts);\n      migrationParams.push(minMintAmount);\n    }\n\n    return migrationParams;\n  }\n\n  async calculateSlippage(){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (inputValue){\n      let underlyingBalanceToDeposit = inputValue;\n      if (underlyingBalanceToDeposit){\n        const idleTokenPrice = await this.functionsUtil.getIdleTokenPrice(this.props.tokenConfig);\n        if (idleTokenPrice){\n          underlyingBalanceToDeposit = underlyingBalanceToDeposit.times(idleTokenPrice);\n        }\n      } else {\n        underlyingBalanceToDeposit = this.functionsUtil.BNify(0);\n      }\n\n      const normalizeIdleTokenBalance = this.functionsUtil.normalizeTokenAmount(underlyingBalanceToDeposit,this.props.tokenConfig.decimals);\n      let depositSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizeIdleTokenBalance);\n      if (depositSlippage){\n        depositSlippage = depositSlippage.times(100);\n      }\n\n      this.setState({\n        depositSlippage\n      });\n    }\n  }\n\n  async checkMigrationContractApproved(){\n    const migrationContract = this.state.migrationContract || await this.functionsUtil.getCurveSwapContract();\n    if (migrationContract){\n      return await this.functionsUtil.checkTokenApproved(this.props.tokenConfig.idle.token,migrationContract.address,this.props.account);\n    }\n    return false;\n  }\n\n  async initToken(){\n\n    // Init and check migration contract\n    const migrationContract = await this.functionsUtil.getCurveSwapContract();\n    const migrationContractApproved = await this.checkMigrationContractApproved();\n\n    this.setState({\n      migrationContract,\n      migrationContractApproved\n    });\n  }\n\n  approveCallback = () => {\n    this.initToken();\n  }\n\n  migrationCallback = () => {\n    this.setState({\n      migrationSucceeded:true\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken){\n      return null;\n    }\n\n    // const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const hasCurveTokens = this.state.curveTokensBalance && this.state.curveTokensBalance.gt(0);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n            {\n              this.props.idleTokenBalance && this.props.idleTokenBalance.gt(0) && (\n                <Box\n                  width={1}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:3,\n                      px:[2,4]\n                    }}\n                  >\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    > \n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ this.state.migrationContractApproved ? 'CheckBox' : 'LooksOne'}\n                          color={ this.state.migrationContractApproved ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Approve the Curve contract\n                        </Text>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ hasCurveTokens ? 'CheckBox' : 'LooksTwo'}\n                          color={ hasCurveTokens ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Deposit your {this.props.tokenConfig.idle.token}\n                        </Text>\n                      </Flex>\n                    </Flex>\n                  </DashboardCard>\n                  {\n                    !this.state.migrationContractApproved ?\n                      this.state.processing.loading ? (\n                        <Flex\n                          mt={3}\n                          flexDirection={'column'}\n                        >\n                          <TxProgressBar\n                            web3={this.props.web3}\n                            waitText={`Approve estimated in`}\n                            hash={this.state.processing.txHash}\n                            endMessage={`Finalizing approve request...`}\n                            cancelTransaction={this.cancelTransaction.bind(this)}\n                          />\n                        </Flex>\n                      ) : (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3,\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'2.3em'}\n                              name={'LockOpen'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={1}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              To deposit your {this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt:3,\n                                width:[1,1/2]\n                              }}\n                              handleClick={this.approve.bind(this)}\n                            >\n                              Approve\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      )\n                    : this.state.processing.loading ? (\n                      <Flex\n                        mt={3}\n                        flexDirection={'column'}\n                      >\n                        <TxProgressBar\n                          web3={this.props.web3}\n                          waitText={`Deposit estimated in`}\n                          hash={this.state.processing.txHash}\n                          endMessage={`Finalizing deposit request...`}\n                          cancelTransaction={this.cancelTransaction.bind(this)}\n                        />\n                      </Flex>\n                    ) : (\n                      <Box\n                        mt={2}\n                        width={1}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text>\n                            Choose max slippage:\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={`Max additional slippage on top of the one shown below`}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'space-between'}\n                        >\n                          {\n                            [0.2,0.5,1,5].map( slippage => (\n                              <FastBalanceSelector\n                                cardProps={{\n                                  p:1\n                                }}\n                                textProps={{\n                                  fontSize:1\n                                }}\n                                percentage={slippage}\n                                key={`selector_${slippage}`}\n                                onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                isActive={this.state.maxSlippage === parseFloat(slippage)}\n                              />\n                            ))\n                          }\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                        >\n                          <Flex\n                            mb={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={this.state.depositSlippage ? 'space-between' : 'flex-end'}\n                          >\n                            {\n                              this.state.depositSlippage && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    textAlign={'right'}\n                                    style={{\n                                      whiteSpace:'nowrap'\n                                    }}\n                                    color={ parseFloat(this.state.depositSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                  >\n                                    {\n                                      parseFloat(this.state.depositSlippage.toFixed(3)) === 0 ?\n                                        'No Slippage'\n                                      : `${ this.state.depositSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositSlippage.abs().toFixed(3)}%`\n                                    }\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.state.depositSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              )\n                            }\n                            {\n                              this.props.idleTokenBalance && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'flex-end'}\n                                >\n                                  <Link\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'right'}\n                                    hoverColor={'copyColor'}\n                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                    style={{\n                                      maxWidth:'100%',\n                                      overflow:'hidden',\n                                      whiteSpace:'nowrap',\n                                      textOverflow:'ellipsis'\n                                    }}\n                                  >\n                                    {this.props.idleTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {this.props.selectedToken}\n                                  </Link>\n                                </Flex>\n                              )\n                            }\n                          </Flex>\n                          <Input\n                            min={0}\n                            type={\"number\"}\n                            required={true}\n                            height={'3.4em'}\n                            borderRadius={2}\n                            fontWeight={500}\n                            boxShadow={'none !important'}\n                            placeholder={`Insert amount`}\n                            onChange={this.changeInputValue.bind(this)}\n                            border={`1px solid ${this.props.theme.colors.divider}`}\n                            value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                          />\n                          <Flex\n                            mt={2}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            {\n                              [25,50,75,100].map( percentage => (\n                                <FastBalanceSelector\n                                  percentage={percentage}\n                                  key={`selector_${percentage}`}\n                                  onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                  isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                                />\n                              ))\n                            }\n                          </Flex>\n                          <Flex\n                            mt={2}\n                            justifyContent={'center'}\n                          >\n                            <RoundButton\n                              buttonProps={{\n                                mt:2,\n                                width:[1,1/2],\n                                disabled:this.state.buttonDisabled\n                              }}\n                              handleClick={this.deposit.bind(this)}\n                            >\n                              Deposit\n                            </RoundButton>\n                          </Flex>\n                        </Flex>\n                      </Box>\n                    )\n                  }\n                </Box>\n              )\n            }\n          {\n            /*\n            this.state.tokenConfig && this.state.redeemableBalance ? (\n              <Box width={1}>\n                <Migrate\n                  {...this.props}\n                  showActions={false}\n                  getTokenPrice={false}\n                  migrationTextProps={{\n                    fontWeight:500\n                  }}\n                  isMigrationTool={true}\n                  migrationImage={{\n                    mb:1,\n                    height:'1.8em',\n                    src:curveConfig.params.image\n                  }}\n                  showBalanceSelector={true}\n                  waitText={'Deposit estimated in'}\n                  tokenConfig={this.state.tokenConfig}\n                  callbackApprove={this.approveCallback.bind(this)}\n                  migrationParams={this.getMigrationParams.bind(this)}\n                  migrationCallback={this.migrationCallback.bind(this)}\n                  approveText={`To deposit your ${this.props.tokenConfig.idle.token} you need to approve Curve smart-contract first.`}\n                  migrationText={`You can deposit ${this.state.redeemableBalance.toFixed(4)} ${this.props.tokenConfig.idle.token} in the Curve Pool${ this.state.depositSlippage ? (this.state.depositSlippage.gte(0) ? ` with <span style=\"color:${this.props.theme.colors.transactions.status.failed}\">${this.state.depositSlippage.times(100).toFixed(2)}% of slippage</span>` : ` with <span style=\"color:${this.props.theme.colors.transactions.status.completed}\">${Math.abs(parseFloat(this.state.depositSlippage.times(100).toFixed(2)))}% of bonus</span>`) : '' }.`}\n                >\n                  {\n                    !this.props.account ? (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Input'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            Please connect with your wallet interact with Idle.\n                          </Text>\n                          <RoundButton\n                            buttonProps={{\n                              mt:2,\n                              width:[1,1/2]\n                            }}\n                            handleClick={this.props.connectAndValidateAccount}\n                          >\n                            Connect\n                          </RoundButton>\n                        </Flex>\n                      </DashboardCard>\n                    ) : (\n                      <DashboardCard\n                        cardProps={{\n                          p:3\n                        }}\n                      >\n                        {\n                          this.state.migrationSucceeded ? (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'DoneAll'}\n                                color={this.props.theme.colors.transactions.status.completed}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You have successfully deposited your {this.props.tokenConfig.idle.token} in the Curve Pool!\n                              </Text>\n                            </Flex>\n                          ) : (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'MoneyOff'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You don't have any {this.props.tokenConfig.idle.token} in your wallet.\n                              </Text>\n                            </Flex>\n                          )\n                        }\n                      </DashboardCard>\n                    )\n                  }\n                </Migrate>\n              </Box>\n            ) : null\n            */\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveDeposit;","import theme from '../theme';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\n// import { linearGradientDef } from '@nivo/core'\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport ChartCustomTooltip from '../ChartCustomTooltip/ChartCustomTooltip';\nimport ChartCustomTooltipRow from '../ChartCustomTooltipRow/ChartCustomTooltipRow';\n\nclass PortfolioEquityCurve extends Component {\n  state = {\n    startDate:null,\n    chartData:null,\n    chartProps:null,\n    chartwidth:null,\n    chartHeight:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentDidMount(){\n    this.loadUtils();\n    this.loadChartData();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    const quickDateSelectionChanged = prevProps.quickDateSelection !== this.props.quickDateSelection;\n    const tokenChanged = JSON.stringify(prevProps.enabledTokens) !== JSON.stringify(this.props.enabledTokens);\n    if (tokenChanged || quickDateSelectionChanged){\n      this.setState({\n        chartData:null\n      },() => {\n        this.componentDidMount();\n      });\n    }\n\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (mobileChanged){\n      this.loadChartData();\n    }\n  }\n\n  async loadChartData() {\n\n    let enabledTokens = this.props.enabledTokens;\n    if (!enabledTokens || !enabledTokens.length){\n      enabledTokens = Object.keys(this.props.availableTokens);\n    }\n\n    const curveTxs = await this.functionsUtil.getCurveTxs(this.props.account,0,'latest',enabledTokens);\n\n    const chartData = [];\n    let tokensBalance = [];\n    const processedTxs = {};\n    let firstTxTimestamp = null;\n    let totalBalance = this.functionsUtil.BNify(0);\n    const curvePoolContract = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    if (curveTxs && curveTxs.length){\n\n      curveTxs.forEach((tx,index) => {\n\n        if (!processedTxs[tx.hash]){\n          processedTxs[tx.hash] = [];\n        }\n\n        if (processedTxs[tx.hash].includes(tx.action)){\n          return;\n        }\n        \n        firstTxTimestamp = firstTxTimestamp ? Math.min(firstTxTimestamp,parseInt(tx.timeStamp)) : parseInt(tx.timeStamp);\n\n        const curveTokens = this.functionsUtil.BNify(tx.curveTokens);\n\n        switch (tx.action){\n          case 'CurveIn':\n          case 'CurveZapIn':\n          case 'CurveDepositIn':\n          case 'CurveTransferIn':\n            totalBalance = totalBalance.plus(curveTokens);\n          break;\n          case 'CurveOut':\n          case 'CurveZapOut':\n          case 'CurveDepositOut':\n          case 'CurveTransferOut':\n            totalBalance = totalBalance.minus(curveTokens);\n          break;\n          default:\n          break;\n        }\n\n        // Reset totalBalance if below zero\n        if (totalBalance.lt(0)){\n          totalBalance = this.functionsUtil.BNify(0);\n        }\n\n        const action = tx.action;\n        const balance = totalBalance;\n        const timeStamp = parseInt(tx.timeStamp);\n        const curveTokenPrice = this.functionsUtil.fixTokenDecimals(tx.curveTokenPrice,curvePoolContract.decimals);\n\n        // console.log(this.functionsUtil.strToMoment(timeStamp*1000).format('YYYY/MM/DD HH:mm'),tx.hash,tx.action,curveTokens.toString(),totalBalance.toString());\n\n        if (!curveTokenPrice.isNaN() && !curveTokenPrice.isNaN()){\n          tokensBalance.push({\n            action,\n            balance,\n            timeStamp,\n            curveTokens,\n            curveTokenPrice\n          });\n\n          processedTxs[tx.hash].push(action);\n        }\n      });\n    }\n\n    // Calculate Start Date\n    let startDate = null;\n    const currentDate = this.functionsUtil.strToMoment(new Date());\n\n    switch (this.props.quickDateSelection){\n      case 'week':\n        startDate = currentDate.clone().subtract(1,'week');\n      break;\n      case 'month':\n        startDate = currentDate.clone().subtract(1,'month');\n      break;\n      case 'month3':\n        startDate = currentDate.clone().subtract(3,'month');\n      break;\n      case 'month6':\n        startDate = currentDate.clone().subtract(6,'month');\n      break;\n      default:\n        startDate = null;\n      break;\n    }\n\n    const days = {};\n    let prevBalances = {};\n    let prevTimestamp = null;\n    let minChartValue = null;\n    let maxChartValue = null;\n    const aggregatedBalancesKeys = {};\n    const tokensBalancesPerDate = {};\n    let aggregatedBalance = this.functionsUtil.BNify(0);\n    // let curveTokenBalance = this.functionsUtil.BNify(0);\n    const currTimestamp = parseInt(new Date().getTime()/1000)+86400;\n\n    const tokensData = await this.functionsUtil.getTokenApiData(Object.values(this.props.availableTokens)[0].address,false,firstTxTimestamp,null,false,3600);\n\n    for (let timeStamp=firstTxTimestamp;timeStamp<=currTimestamp;timeStamp+=this.props.frequencySeconds){\n\n      let foundBalances = {};\n      let tokensBalances = {};\n      timeStamp = Math.min(currTimestamp,timeStamp);\n      let momentDate = this.functionsUtil.strToMoment(timeStamp*1000);\n\n      // eslint-disable-next-line\n      const filteredTokenData = tokensData.filter(tx => (tx.timestamp>=prevTimestamp && tx.timestamp<=timeStamp));\n\n      // eslint-disable-next-line\n      let filteredBalances = tokensBalance.filter(tx => (tx.timeStamp<=timeStamp && (!prevTimestamp || tx.timeStamp>prevTimestamp)));\n      \n      if (!filteredBalances.length){\n        if (prevBalances){\n          filteredBalances = prevBalances;\n          const lastFilteredTx = Object.values(filteredBalances).pop();\n          const currentBalance = parseFloat(lastFilteredTx.balance);\n\n          const lastTokenData = Object.values(filteredTokenData).pop();\n          let curveTokenPrice = null;\n          if (lastTokenData){\n            curveTokenPrice = await this.functionsUtil.getCurveTokenPrice(lastTokenData.blocknumber);\n          }\n\n          // Take idleToken price from API and calculate new balance\n          if (currentBalance>0 && timeStamp>firstTxTimestamp && curveTokenPrice){\n            // Set new curveTokenPrice\n            lastFilteredTx.curveTokenPrice = curveTokenPrice;\n            filteredBalances = [lastFilteredTx];\n          }\n        } else {\n          filteredBalances = [{\n            balance:this.functionsUtil.BNify(0),\n            curveTokenPrice:this.functionsUtil.BNify(0)\n          }];\n        }\n      }\n\n      const lastTx = Object.assign([],filteredBalances).pop();\n      let lastTxBalance = this.functionsUtil.BNify(lastTx.balance).times(lastTx.curveTokenPrice);\n\n      tokensBalances[curvePoolContract.token] = this.functionsUtil.BNify(lastTx.balance);\n      aggregatedBalance = lastTxBalance;\n\n      foundBalances = filteredBalances;\n\n      // console.log(momentDate.format('YYYY/MM/DD 00:00'),lastTx.balance.toString(),lastTx.curveTokenPrice.toString(),lastTxBalance.toString());\n\n      if (startDate === null || momentDate.isSameOrAfter(startDate)){\n        \n        if (momentDate.isAfter(new Date(),'day')){\n          momentDate = this.functionsUtil.strToMoment(new Date());\n        }\n\n        // Force date to midnight\n        const formattedDate = momentDate.format('YYYY/MM/DD 00:00');\n\n        // Save days for axisBottom format\n        days[momentDate.format('YYYY/MM/DD')] = 1;\n\n        const aggregatedBalanceParsed = parseFloat(parseFloat(aggregatedBalance.toFixed(6)));\n\n        aggregatedBalancesKeys[formattedDate] = aggregatedBalanceParsed;\n        tokensBalancesPerDate[formattedDate] = tokensBalances;\n\n        // console.log(formattedDate,tokensBalances);\n\n        minChartValue = minChartValue === null ? aggregatedBalanceParsed : Math.min(minChartValue,aggregatedBalanceParsed);\n        maxChartValue = maxChartValue === null ? aggregatedBalanceParsed : Math.max(maxChartValue,aggregatedBalanceParsed);\n      }\n\n      prevTimestamp = timeStamp;\n      prevBalances = foundBalances;\n    }\n\n    const aggregatedBalances = Object.keys(aggregatedBalancesKeys).map(date => ({\n      x:date,\n      y:aggregatedBalancesKeys[date],\n      balances:tokensBalancesPerDate[date]\n    }));\n\n    let itemIndex = 0;\n    aggregatedBalances.forEach( (item,index) => {\n      const itemPos = Math.floor(itemIndex/aggregatedBalances.length*100);\n      aggregatedBalances[index].itemPos = itemPos;\n      itemIndex++;\n    });\n\n    /*\n    aggregatedBalances.push({\n      x:momentDate.format('YYYY/MM/DD HH:mm'),\n      y:aggregatedBalance\n    });\n    */\n\n    // Add day before to start with zero balance\n    /*\n    const firstTxMomentDate = this.functionsUtil.strToMoment(firstTxTimestamp*1000);\n    if ((startDate === null || startDate.isSameOrBefore(firstTxMomentDate)) && aggregatedBalances.length){\n      const firstItem = aggregatedBalances[0];\n      const firstDate = this.functionsUtil.strToMoment(firstItem.x,'YYYY/MM/DD HH:mm');\n      firstDate.subtract(1,'day');\n      aggregatedBalances.unshift({\n        x:firstDate.format('YYYY/MM/DD HH:mm'),\n        y:0\n      });\n    }\n    */\n\n    // Add token Data\n    chartData.push({\n      id:'USD',\n      color: 'hsl('+ this.functionsUtil.getGlobalConfig(['stats','tokens','USD','color','hsl']).join(',')+')',\n      data:aggregatedBalances\n    });\n\n    let yFormatDecimals = 2;\n    if (maxChartValue-minChartValue<1){\n      yFormatDecimals = 4;\n    }\n\n    if (maxChartValue === minChartValue){\n      minChartValue = Math.max(0,maxChartValue-1);\n    }\n\n    const maxGridLines = 5;\n    const gridYStep = (maxChartValue-minChartValue)/maxGridLines;\n    const gridYValues = [];\n    for (let i=0;i<=maxGridLines;i++){\n      const gridYValue = parseFloat(parseFloat(minChartValue+(i*gridYStep)).toFixed(6));\n      gridYValues.push(gridYValue);\n    }\n    \n    const axisBottomMaxValues = 10;\n    const daysCount = Object.values(days).length;    \n    const daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n    const chartProps = {\n      xScale:{\n        type: 'time',\n        format: '%Y/%m/%d %H:%M',\n      },\n      yScale:{\n        type: 'linear',\n        stacked: false,\n        min: minChartValue,\n        max: maxChartValue\n      },\n      xFormat:'time:%b %d %Y',\n      yFormat:value => this.functionsUtil.formatMoney(value,yFormatDecimals),\n      axisBottom: this.props.isMobile ? null : {\n        legend: '',\n        tickSize:0,\n        format: '%b %d',\n        tickPadding: 15,\n        orient: 'bottom',\n        legendOffset: 36,\n        legendPosition: 'middle',\n        tickValues:'every '+daysFrequency+' days'\n      },\n      gridYValues,\n      pointSize:0,\n      useMesh:true,\n      axisLeft: this.props.isMobile ? null : {\n        legend: '',\n        tickSize: 0,\n        orient: 'left',\n        tickPadding: 10,\n        tickRotation: 0,\n        legendOffset: -70,\n        tickValues:gridYValues,\n        legendPosition: 'middle',\n        format: v => this.functionsUtil.abbreviateNumber(v,2),\n      },\n      animate:true,\n      pointLabel:'y',\n      areaOpacity:0.1,\n      enableArea:true,\n      enableSlices:'x',\n      enableGridY:true,\n      curve:'monotoneX',\n      enableGridX:false,\n      pointBorderWidth:1,\n      colors:d => d.color,\n      pointLabelYOffset:-12,\n      areaBaselineValue:minChartValue,\n      pointColor:{ from: 'color', modifiers: []},\n      theme:{\n        axis: {\n          ticks: {\n            text: {\n              fontSize:12,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '8 4'\n          }\n        },\n      },\n      /*\n      defs:[\n        linearGradientDef('gradientA', [\n          { offset: 0, color: 'inherit' },\n          { offset: 100, color: 'inherit', opacity: 0 },\n        ]),\n      ],\n      fill:[{ match: '*', id: 'gradientA' }],\n      */\n      margin: this.props.isMobile ? { top: 20, right: 25, bottom: 25, left: 20 } : { top: 30, right: 50, bottom: 45, left: 50 },\n      sliceTooltip:(slideData) => {\n        const { slice } = slideData;\n        const point = slice.points[0];\n        return (\n          <ChartCustomTooltip\n            point={point}\n          >\n            <ChartCustomTooltipRow\n              color={point.color}\n              label={point.serieId}\n              value={`$ ${point.data.yFormatted}`}\n            />\n            {\n            typeof point.data.balances === 'object' && Object.keys(point.data.balances).length>0 &&\n              Object.keys(point.data.balances).map(token => {\n                if (token === point.serieId){\n                  return null;\n                }\n                const tokenInfo = this.functionsUtil.getGlobalConfig(['stats','tokens',token]);\n                if (tokenInfo){\n                  const tokenName = tokenInfo.name ? tokenInfo.name : token;\n                  const color = tokenInfo.color.hex;\n                  const balance = point.data.balances[token];\n                  let formattedBalance = this.functionsUtil.formatMoney(balance,2);\n                  if (parseFloat(balance)>=0.01){\n                    return (\n                      <ChartCustomTooltipRow\n                        label={tokenName}\n                        color={color}\n                        key={`row_${token}`}\n                        value={`${formattedBalance}`}\n                      />\n                    );\n                  }\n                }\n                return null;\n              })\n            }\n          </ChartCustomTooltip>\n        );\n      }\n    };\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  render() {\n    return (\n      <GenericChart\n        type={Line}\n        showLoader={true}\n        {...this.state.chartProps}\n        data={this.state.chartData}\n        parentId={this.props.parentId}\n        height={this.props.chartHeight}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default PortfolioEquityCurve;","import theme from '../theme';\nimport Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Flex, Heading, Text } from \"rimble-ui\";\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport PortfolioEquityCurve from '../PortfolioEquityCurve/PortfolioEquityCurve';\n\nclass FundsOverviewCurve extends Component {\n\n  state = {\n    compAPR:null,\n    aggregatedValues:[],\n    govTokensUserBalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    await this.functionsUtil.getCurveAvgBuyPrice();\n\n    // debugger;\n\n    await this.functionsUtil.getCurveAvgSlippage();\n\n    // debugger;\n    /*\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const [govTokensUserBalance,avgAPY,days] = await Promise.all([\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,'DAI'),\n      this.functionsUtil.loadAssetField('avgAPY',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '-') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    let [tokenAllocation,compAPR] = await Promise.all([\n      this.functionsUtil.getTokenAllocation(this.props.tokenConfig,false,false),\n      this.functionsUtil.getCompAPR(this.props.selectedToken,this.props.tokenConfig)\n    ]);\n\n    if (tokenAllocation){\n      const compoundInfo = this.props.tokenConfig.protocols.find( p => (p.name === 'compound') );\n      if (compoundInfo){\n        if (tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()]){\n          const compoundAllocationPerc = tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()];\n          compAPR = compAPR.times(compoundAllocationPerc);\n        }\n      }\n    }\n\n    this.setState({\n      compAPR,\n      aggregatedValues,\n      govTokensUserBalance\n    });\n    */\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Text\n                          mt={2}\n                          fontWeight={2}\n                          fontSize={[1,2]}\n                          color={'cellText'}\n                        >\n                          {v.props.title}\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquityCurve\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLentCurve',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPercCurve',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            {\n              /*\n              <Flex\n                mb={[2,0]}\n                width={[1,1/5]}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'flex-start'}\n              >\n                <Title\n                  mb={2}\n                  fontSize={[3,4]}\n                  component={Heading.h3}\n                >\n                  Fees\n                </Title>\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'feesCounter',\n                    props:{\n                      decimals:7,\n                      maxPrecision:8,\n                      style:{\n                        fontWeight:300,\n                        fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                        color:theme.colors.counter\n                      },\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n              */\n            }\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveApy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Avg Slippage\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveAvgSlippage',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverviewCurve;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport { Box, Flex, Text, Icon } from \"rimble-ui\";\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport CurveDeposit from '../CurveDeposit/CurveDeposit';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport TransactionField from '../TransactionField/TransactionField';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport FundsOverviewCurve from '../FundsOverviewCurve/FundsOverviewCurve';\n\nclass AssetPage extends Component {\n\n  state = {\n    inputValue:{},\n    processing:{},\n    tokenFees:null,\n    canRedeem:null,\n    canDeposit:null,\n    action:'deposit',\n    activeModal:null,\n    tokenConfig:null,\n    tokenBalance:null,\n    tokenApproved:null,\n    selectedToken:null,\n    availableTokens:{},\n    redeemBalance:null,\n    depositBalance:null,\n    buttonDisabled:false,\n    curveTokenPrice:null,\n    depositSlippage:null,\n    idleTokenBalance:null,\n    withdrawSlippage:null,\n    govTokensBalance:null,\n    curveZapContract:null,\n    curveTokenConfig:null,\n    curveTokensAmounts:{},\n    govTokensDisabled:null,\n    componentMounted:false,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    redeemableBalance:null,\n    fastBalanceSelector:{},\n    curveAvailableTokens:{},\n    tokenFeesPercentage:null,\n    redeemUnevenAmounts:false,\n    curveDepositContract:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  changeFromToken = (selectedToken) => {\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    this.props.goToSection(`${curveConfig.params.route}/${selectedToken}`);\n  }\n\n  getSelectedToken(){\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    return this.props.urlParams.param1 && curveAvailableTokens[this.props.urlParams.param1] ? this.props.urlParams.param1 : Object.keys(curveAvailableTokens)[0];\n  }\n\n  setSelectedToken = async (selectedToken) => {\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n    this.setState({\n      tokenConfig,\n      selectedToken,\n      availableTokens,\n      curveTokenConfig\n    });\n  }\n\n  loadTokensInfo = async () => {\n\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    this.setState({\n      curveAvailableTokens\n    });\n\n    const selectedToken = this.getSelectedToken();\n    // Check if token is set the query params\n    if (selectedToken && selectedToken !== this.props.urlParams.param1){\n      this.changeFromToken(selectedToken);\n      return await this.setSelectedToken(selectedToken);\n    } else if (selectedToken !== this.state.selectedToken){\n      await this.setSelectedToken(selectedToken);\n    }\n\n    const newState = {...this.state};\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n\n    if (newState.selectedToken !== selectedToken){\n      newState.selectedToken = selectedToken;\n    }\n\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n\n    const [\n      curveZapContract,\n      curvePoolContract,\n      curveSwapContract,\n      curveDepositContract\n    ] = await Promise.all([\n      this.functionsUtil.getCurveZapContract(),\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract()\n    ]);\n\n    newState.curveZapContract = curveZapContract;\n    newState.curvePoolContract = curvePoolContract;\n    newState.curveSwapContract = curveSwapContract;\n    newState.curveDepositContract = curveDepositContract;\n\n    newState.availableTokens = availableTokens;\n\n\n    // console.log('curveTokenPrice',newState.curveTokenPrice.toFixed(6),'curveTokenBalance',newState.curveTokenBalance.toFixed(6),'redeemableBalance',newState.redeemableBalance.toFixed(20),'tokenBalance',newState.tokenBalance.toFixed(20));\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[selectedToken] = tokenConfig;\n\n    newState.tokenConfig = tokenConfig;\n    newState.curveTokenConfig = curveTokenConfig;\n\n    if (this.props.account){\n      [\n        newState.curveTokenPrice,\n        newState.curveTokenBalance,\n        newState.tokenFeesPercentage,\n        newState.tokenFees,\n        newState.tokenBalance,\n        newState.idleTokenBalance,\n        newState.tokenApproved,\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokenPrice(),\n        this.functionsUtil.getCurveTokenBalance(),\n        this.functionsUtil.getTokenFees(tokenConfig),\n        this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n        this.functionsUtil.getTokenBalance(selectedToken,this.props.account),\n        this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n        this.functionsUtil.checkTokenApproved(selectedToken,curveDepositContract.address,this.props.account),\n      ]);\n\n\n      newState.processing = {\n        redeem:{\n          txHash:null,\n          loading:false\n        },\n        deposit:{\n          txHash:null,\n          loading:false\n        },\n        approve:{\n          txHash:null,\n          loading:false\n        },\n      };\n      newState.inputValue = {\n        redeem:null,\n        deposit:null\n      };\n      newState.fastBalanceSelector = {\n        redeem:null,\n        deposit:null\n      };\n\n      newState.componentMounted = true;\n      newState.depositBalance = newState.tokenBalance;\n      newState.redeemBalance = newState.redeemableBalance;\n      newState.govTokensDisabled = tokenConfig.govTokensDisabled;\n      newState.canRedeem = newState.curveTokenBalance && newState.curveTokenBalance.gt(0);\n      newState.canDeposit = newState.idleTokenBalance && newState.idleTokenBalance.gt(0);\n      newState.redeemableBalance = newState.curveTokenBalance ? newState.curveTokenBalance.times(newState.curveTokenPrice) : this.functionsUtil.BNify(0);\n    }\n\n    this.setState(newState);\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async calculateSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,this.state.curvePoolContract.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositBalance = amount;\n        newState.depositSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      case 'redeem':\n        newState.redeemBalance = amount;\n        newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.urlParams.param1 !== this.props.urlParams.param1;\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n\n    if (accountChanged || transactionsChanged || tokenChanged){\n      await this.loadTokensInfo();\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const redeemUnevenAmountsChanged = this.state.redeemUnevenAmounts !== prevState.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n    if (actionChanged || fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    if (actionChanged){\n      this.updateAssetSelector();\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  updateAssetSelector = async () => {\n    const newState = {};\n    switch (this.state.action){\n      case 'deposit':\n        this.loadTokensInfo();\n      break;\n      case 'redeem':\n        // this.loadTokensInfo();\n        const tokenConfig = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n        newState.curveAvailableTokens = {};\n        newState.curveTokenConfig = tokenConfig;\n        newState.selectedToken = tokenConfig.token;\n        newState.curveAvailableTokens[tokenConfig.token] = tokenConfig;\n      break;\n      default:\n      break;\n    }\n\n    this.setState(newState);\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.state.tokenBalance ? this.functionsUtil.BNify(this.state.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          amount = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n        } else {\n          amount = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  changeInputValue = (e) => {\n    if (!this.state.action){\n      return false;\n    }\n\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.state.tokenBalance));\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.curveTokenBalance)) );\n        } else {\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.redeemableBalance)) );\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = this.state.tokenApproved;\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.state.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.functionsUtil.enableERC20(this.state.selectedToken,this.state.curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    let loading = true;\n\n    switch (this.state.action){\n      // Handle deposit in curve\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.state.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if (this.state.metaTransactionsEnabled && txError){\n            this.setState({\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,tokensToDeposit);\n        const minMintAmount = await this.functionsUtil.genericContractCall(this.state.curveSwapContract.name,'calc_token_amount',[amounts,true]);\n        const depositParams = [amounts,minMintAmount];\n\n        // No need for callback atm\n        contractSendResult = await this.props.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n      break;\n      case 'redeem':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        let curveTokensToRedeem = null;\n        if (selectedPercentage){\n          curveTokensToRedeem = this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage);\n        } else {\n          curveTokensToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals));\n          if (!this.state.redeemUnevenAmounts){\n            const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n            curveTokensToRedeem = curveTokensToRedeem.div(curveTokenPrice);\n          }\n        }\n\n        if (!curveTokensToRedeem){\n          return false;\n        }\n\n        const callbackRedeem = (tx,error) => {\n          const txSucceeded = tx.status === 'success';\n\n          // Send Google Analytics event\n          const eventData = {\n            eventLabel: tx.status,\n            eventCategory: `CurveRedeem`,\n            eventAction: this.state.selectedToken,\n            eventValue: curveTokensToRedeem.toFixed()\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          }\n        };\n\n        const callbackReceiptRedeem = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const _amount = this.functionsUtil.normalizeTokenAmount(curveTokensToRedeem,this.state.curvePoolContract.decimals).toString();\n        let min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,0);\n\n        const contractName = this.state.curveDepositContract.name;\n        if (this.state.redeemUnevenAmounts){\n          console.log('remove_liquidity_imbalance',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_imbalance', [min_amounts, _amount], null, callbackRedeem, callbackReceiptRedeem);\n        } else {\n          min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,_amount);\n          console.log('remove_liquidity',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts], null, callbackRedeem, callbackReceiptRedeem);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    // console.log('contractSendResult',contractSendResult);\n\n    if (contractSendResult !== false){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    const userHasFunds = this.props.account && this.state.curveTokenBalance && this.functionsUtil.BNify(this.state.curveTokenBalance).gt(0);\n    const canPerformAction = true;\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            {\n              <Breadcrumb\n                {...this.props}\n                isMobile={this.props.isMobile}\n                path={['Boost',this.state.selectedToken]}\n                handleClick={ e => this.props.goToSection('best') }\n                text={this.functionsUtil.getGlobalConfig(['strategies','best','title'])}\n              />\n            }\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Curve Pool\n        </Title>\n        <Flex\n          width={1}\n        >\n          <Flex\n            width={1}\n            alignItems={'center'}\n            flexDirection={'column'}\n            justifyContent={'center'}\n          >\n            <Flex\n              width={[1,0.36]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Box\n                width={1}\n              >\n                <Text\n                  mb={1}\n                >\n                  Select your asset:\n                </Text>\n                <AssetSelector\n                  {...this.props}\n                  id={'token-from'}\n                  onChange={this.changeFromToken}\n                  selectedToken={this.state.selectedToken}\n                  tokenConfig={this.state.curveTokenConfig}\n                  showBalance={this.state.action === 'deposit'}\n                  availableTokens={this.state.curveAvailableTokens}\n                />\n              </Box>\n              <Box\n                width={1}\n              >\n                {\n                  canPerformAction ? (\n                    <Flex\n                      mt={2}\n                      flexDirection={'column'}\n                    >\n                      <Text\n                        mb={2}\n                      >\n                        Choose the action:\n                      </Text>\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('deposit');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'deposit' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'deposit'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Deposit\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('redeem');\n                            }\n                          }}\n                          isInteractive={true}\n                          isDisabled={ !this.state.canRedeem }\n                          isActive={ this.state.action === 'redeem' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'redeem'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Redeem\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </Flex>\n                  ) : (\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    >\n                      <Icon\n                        size={'2.3em'}\n                        name={'MoneyOff'}\n                        color={'cellText'}\n                      />\n                      <Text\n                        mt={2}\n                        fontSize={2}\n                        color={'cellText'}\n                        textAlign={'center'}\n                      >\n                        You don't have any {this.state.tokenConfig.idle.token} in your wallet.\n                      </Text>\n                    </Flex>\n                  )\n                }\n              </Box>\n            </Flex>\n            <Flex\n              width={1}\n              mt={ this.props.account ? 3 : 0 }\n            >\n            {\n              this.state.action === 'deposit' ? (\n                <CurveDeposit\n                  {...this.props}\n                  {...this.state}\n                />\n              ) : this.state.action === 'redeem' && (\n                <CurveRedeem\n                  {...this.props}\n                  {...this.state}\n                />\n              )\n            }\n            </Flex>\n          </Flex>\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverviewCurve\n                {...this.props}\n                tokenFees={this.state.tokenFees}\n                tokenConfig={this.state.tokenConfig}\n                selectedToken={this.state.selectedToken}\n                availableTokens={this.state.availableTokens}\n                enabledTokens={Object.keys(this.state.availableTokens)}\n              />\n            </Flex>\n        }\n        {\n          /*\n          this.props.account && !this.state.govTokensDisabled[this.state.selectedToken] && Object.keys(availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id=\"earnings-estimation\"\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(availableGovTokens)}\n                handleClick={(props) => {}}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.33,0.22]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.26],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    props:{\n                      width:[0.33,0.26],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                      {\n                        name:'tooltip',\n                        props:{\n                          placement:'bottom',\n                          message:'The shown balance may be lower than the real one.',\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    mobile:false,\n                    props:{\n                      width: 0.26,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                ]}\n                {...this.props}\n                availableTokens={availableGovTokens}\n              />\n            </Flex>\n          */\n        }\n        {\n          /*\n          this.props.account && \n            <Flex\n              mb={[3,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'estimated-earnings-container'}\n            >\n              <Title my={[3,4]}>Estimated earnings</Title>\n              <EstimatedEarnings\n                {...this.props}\n              />\n            </Flex>\n          */\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              availableTokens={this.state.availableTokens}\n              enabledTokens={Object.keys(this.state.availableTokens)}\n              enabledActions={['CurveIn','CurveOut','CurveZapIn','CurveZapOut','CurveTransferIn','CurveTransferOut','CurveDepositIn','CurveDepositOut']}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.state.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Button,\n  Form,\n  Icon,\n  Flex,\n  Link\n} from \"rimble-ui\";\nimport axios from 'axios';\nimport colors from '../../colors';\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\nimport globalConfigs from '../../configs/globalConfigs';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass WelcomeModal extends React.Component {\n\n  state = {\n    email:null,\n    error:false,\n    subscribed:false,\n    sendingForm:false\n  };\n\n  functionsUtil = null;\n\n  constructor(props) {\n    super(props);\n    this.functionsUtil = new FunctionsUtil(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleValidation = this.handleValidation.bind(this);\n  }\n\n  componentDidUpdate = async () => {\n    this.functionsUtil.setProps(this.props);\n  }\n\n  sendUserInfo = (sendEmail=true) => {\n    const walletProvider = this.functionsUtil.getWalletProvider();\n    const userInfo = {\n      address: this.props.account,\n      provider: walletProvider\n    };\n\n    if (sendEmail && this.state.email !== null){\n      userInfo.email = this.state.email;\n    }\n\n    this.functionsUtil.simpleIDPassUserInfo(userInfo);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if (!this.state.email){\n      return false;\n    }\n\n    const callback = () => {\n      this.setState({\n        sendingForm:false,\n        subscribed:true\n      });\n      window.setTimeout(this.props.closeModal,2500);\n    };\n\n    this.sendUserInfo();\n\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'send_email',\n      eventLabel: 'WelcomeModal'\n    });\n\n    axios.post(globalConfigs.newsletterSubscription.endpoint, {\n      'email': this.state.email\n    }).then(r => {\n      callback();\n    })\n    .catch(err => {\n      callback();\n    });\n\n    // Set signedUp in the localStorage\n    if (localStorage){\n      const walletAddress = this.props.account.toLowerCase();\n      let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : null;\n      if (lastLogin && lastLogin[walletAddress] && !lastLogin[walletAddress].signedUp){\n        lastLogin[walletAddress].signedUp = true;\n        this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n      }\n    }\n\n    this.setState({\n      sendingForm:true\n    })\n  };\n\n  closeModal = async () => {\n\n    const closeModal = () => {\n      this.props.closeModal();\n    };\n\n    try{\n      // Prevent sending email\n      this.sendUserInfo(false);\n\n      // Send Google Analytics event\n      if (globalConfigs.analytics.google.events.enabled){\n        this.functionsUtil.sendGoogleAnalyticsEvent({\n          eventCategory: 'UI',\n          eventAction: 'continue_without_email',\n          eventLabel: 'WelcomeModal'\n        },closeModal);\n\n        // Call callback after 1 second if stuck\n        setTimeout(closeModal,1000);\n      } else {\n        closeModal();\n      }\n    } catch (err) {\n      closeModal();\n    }\n  }\n\n  handleValidation(e) {\n    if (e && e.target) {\n      this.setState({ email: e.target.value });\n      e.target.parentNode.classList.add(\"was-validated\");\n    }\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        {\n          this.state.subscribed ? (\n            <ModalCard\n              closeFunc={this.closeModal}\n            >\n              <ModalCard.Header title={'All done'} icon={`images/done.svg`}></ModalCard.Header>\n              <ModalCard.Body>\n                <Flex width={1} flexDirection={'column'} mb={3}>\n                  <Text color={'dark-gray'} textAlign={'center'} fontSize={3} my={0}>\n                    Thanks for subscribing!\n                  </Text>\n                  <Button\n                    my={3}\n                    width={'100%'}\n                    borderRadius={4}\n                    onClick={this.closeModal}\n                  >\n                    CLOSE\n                  </Button>\n                </Flex>\n              </ModalCard.Body>\n            </ModalCard>\n          ) : (\n            <ModalCard closeFunc={this.closeModal}>\n              <ModalCard.Header title={'Stay up-to-date!'} icon={`images/notification.svg`}>\n              </ModalCard.Header>\n              <ModalCard.Body>\n                <Form onSubmit={this.handleSubmit}>\n                  <Flex width={1} flexDirection={'column'} mb={3}>\n                    <Text color={'mid-gray'} textAlign={'left'} fontSize={3} my={0}>\n                      Add your e-mail to receive updates about:\n                    </Text>\n                  </Flex>\n                  <Flex width={1} flexDirection={'column'} mt={2}>\n                    <Flex my={2} flexDirection={'row'} alignItems={'center'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Performance reports\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        New Protocols & Tokens\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Latest updates\n                      </Text>\n                    </Flex>\n                    <Form.Field width={1} label={''}>\n                      <Form.Input\n                        type=\"email\"\n                        name=\"EMAIL\"\n                        width={1}\n                        outline={'none'}\n                        border={0}\n                        px={3}\n                        py={4}\n                        fontSize={3}\n                        textAlign={['center','left']}\n                        placeholder={'Enter your e-mail'}\n                        onChange={this.handleValidation}\n                        required\n                      />\n                    </Form.Field>\n                    <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n                      <ButtonLoader\n                        buttonText={'SUBMIT'}\n                        isLoading={this.state.sendingForm}\n                        buttonProps={{className:header_styles.gradientButton,width:'100%',type:'submit'}}\n                      >\n                      </ButtonLoader>\n                      <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without e-mail</Link>\n                    </Flex>\n                  </Flex>\n                </Form>\n              </ModalCard.Body>\n            </ModalCard>\n          )\n        }\n      </Modal>\n    );\n  }\n}\n\nexport default WelcomeModal;\n","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\n\nclass MigrateModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'continue_without_migrate',\n        eventLabel: 'MigrateModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowMigrateModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowMigrateModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = () => {\n    const tokenMigrationRoute = this.functionsUtil.getGlobalConfig(['tools','tokenMigration','route']);\n    this.props.goToSection('tools/'+tokenMigrationRoute);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            iconHeight={'40px'}\n            title={'Migrate to Idle'}\n            icon={`images/migrate.svg`}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={3}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                You can migrate your funds from Compound, Aave, Fulcrum, Yearn and Idle V2 with just one transaction.\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                my={2}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.protocolsTokensBalances && Object.keys(this.props.protocolsTokensBalances).map( token => (\n                    <Flex\n                      mb={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      key={`token_${token}`}\n                      justifyContent={'space-between'}\n                    >\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'icon',\n                          props:{\n                            mr:2,\n                            height:'2.3em'\n                          }\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                      <SmartNumber\n                        mr={2}\n                        {...fieldProps}\n                        minPrecision={5}\n                        number={this.props.protocolsTokensBalances[token].balance} \n                      />\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'tokenName',\n                          props:fieldProps\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                    </Flex>\n                  ) )\n                }\n                <Text\n                  mb={0}\n                  fontSize={1}\n                  color={'red'}\n                  fontWeight={500}\n                  textAlign={'center'}\n                >\n                  Please be aware that by migrating your tokens from other protocols, your open positions might be liquidated if collateralized with migrated tokens.\n                </Text>\n              </Flex>\n              <Flex\n                mb={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <ButtonLoader\n                  buttonText={'MIGRATE'}\n                  handleClick={this.migrate}\n                  isLoading={this.state.sendingForm}\n                  buttonProps={{\n                    width:['100%','50%'],\n                    className:header_styles.gradientButton\n                  }}\n                >\n                </ButtonLoader>\n                {\n                /*\n                <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without migrate</Link>\n                */\n                }\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default MigrateModal;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass UpgradeModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'close_upgrade_modal',\n        eventLabel: 'UpgradeModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowUpgradeModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowUpgradeModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = async (token,strategy=null) => {\n\n    if (!strategy){\n      strategy = this.props.selectedStrategy;\n    }\n\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  convert = async (token) => {\n    const convertTool = this.functionsUtil.getGlobalConfig(['tools','tokenMigration']);\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n\n    if (!this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            icon={`images/migrate.svg`}\n            title={'Upgrade Available'}\n            iconHeight={['35px','40px']}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={[2,3]}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                Idle now supports yield farming and governance tokens distribution, migrate now your portfolio with just one click!\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n              >\n                <Flex\n                  fontSize={[2,3]}\n                  width={[0.5,0.28]}\n                  fontWeight={[4,5]}\n                  color={'copyColor'}\n                >\n                  {\n                    this.props.isMobile ? 'ASSET' : 'ASSET TO MIGRATE'\n                  }\n                </Flex>\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      BALANCE\n                    </Flex>\n                  )\n                }\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      OLD APY\n                    </Flex>\n                  )\n                }\n                <Flex\n                  fontSize={[2,3]}\n                  fontWeight={[4,5]}\n                  width={[0.25,0.19]}\n                  color={'copyColor'}\n                  justifyContent={'center'}\n                >\n                  {\n                    this.props.isMobile ? 'APY' : 'NEW APY'\n                  }\n                </Flex>\n                <Flex\n                  width={[0.25,0.15]}\n                >\n                  \n                </Flex>\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.tokensToMigrate && Object.keys(this.props.tokensToMigrate).map( tokenKey => {\n                    const token = this.props.tokensToMigrate[tokenKey].token;\n                    const strategy = this.props.tokensToMigrate[tokenKey].strategy;\n                    const tokenConfig = this.props.tokensToMigrate[tokenKey].tokenConfig;\n                    const balance = this.props.tokensToMigrate[tokenKey].oldContractBalanceFormatted;\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${tokenKey}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={[0.5,0.28]}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:['1.8em','2.3em']\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                        </Flex>\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <SmartNumber\n                                {...fieldProps}\n                                minPrecision={5}\n                                number={balance}\n                                flexProps={{\n                                  justifyContent:'center'\n                                }}\n                              />\n                            </Flex>\n                          )\n                        }\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <AssetField\n                                {...this.props}\n                                fieldInfo={{\n                                  name:'oldApy',\n                                  props:fieldProps\n                                }}\n                                token={token}\n                                tokenConfig={tokenConfig}\n                              />\n                            </Flex>\n                          )\n                        }\n                        <Flex\n                          width={[0.25,0.19]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={token}\n                            tokenConfig={tokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={[0.25,0.15]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.migrate(token,strategy) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.oldIdleTokensToMigrate && Object.keys(this.props.oldIdleTokensToMigrate).map( token => {\n                    const tokenConfig = this.props.oldIdleTokensToMigrate[token].tokenConfig;\n\n                    if (!tokenConfig){\n                      return null;\n                    }\n\n                    const balance = this.props.oldIdleTokensToMigrate[token].balance;\n                    let newTokenConfig = null;\n\n                    if (tokenConfig.availableStrategies && !this.props.availableTokens[tokenConfig.baseToken]){\n                      newTokenConfig = this.props.availableStrategies[tokenConfig.availableStrategies[0]][tokenConfig.baseToken];\n                    } else {\n                      newTokenConfig = this.props.availableTokens[tokenConfig.baseToken];\n                    }\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${token}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={0.28}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:'2.3em'\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <SmartNumber\n                            {...fieldProps}\n                            minPrecision={5}\n                            number={balance}\n                            flexProps={{\n                              justifyContent:'center'\n                            }}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'oldApy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.15}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.convert(token) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                my={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <RoundButton\n                  handleClick={this.closeModal}\n                  buttonProps={{\n                    fontSize:[2,3],\n                    width:['100%','40%'],\n                  }}\n                >\n                  MIGRATE LATER\n                </RoundButton>\n                {\n                  <Checkbox\n                    mt={2}\n                    required={false}\n                    color={'mid-gray'}\n                    checked={this.state.dontShowAgain}\n                    label={`Don't show this popup again`}\n                    onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                  />\n                }\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default UpgradeModal;","import React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport { Flex, Card, Icon, Text } from 'rimble-ui';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardMenu from '../DashboardMenu/DashboardMenu';\n\n// Import page components\nimport Stats from '../Stats/Stats';\nimport Utils from '../Utils/Utils';\nimport AssetPage from '../AssetPage/AssetPage';\nimport RoundButton from '../RoundButton/RoundButton';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CurveStrategy from '../CurveStrategy/CurveStrategy';\nimport WelcomeModal from \"../utilities/components/WelcomeModal\";\nimport TooltipModal from \"../utilities/components/TooltipModal\";\nimport MigrateModal from \"../utilities/components/MigrateModal\";\nimport UpgradeModal from \"../utilities/components/UpgradeModal\";\nimport DashboardHeader from '../DashboardHeader/DashboardHeader';\n\nclass Dashboard extends Component {\n  state = {\n    menu:[],\n    baseRoute:null,\n    clickEvent:null,\n    activeModal:null,\n    currentRoute:null,\n    pageComponent:null,\n    currentSection:null,\n    selectedSection:null,\n    tokensToMigrate:null,\n    showResetButton:false,\n    selectedSubsection:null,\n    oldIdleTokensToMigrate:null,\n    protocolsTokensBalances:null,\n  };\n\n  timeoutId = null;\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    window.functionsUtil = this.functionsUtil;\n  }\n\n  async loadMenu() {\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n    const menu = Object.keys(strategies).filter( s => ( !strategies[s].comingSoon ) ).map(strategy => ({\n        submenu:[],\n        color:'#fff',\n        selected:false,\n        route:baseRoute+'/'+strategy,\n        label:strategies[strategy].title,\n        image:strategies[strategy].icon,\n        bgColor:strategies[strategy].color,\n        component:strategies[strategy].component,\n        imageInactive:strategies[strategy].iconInactive,\n        imageInactiveDark:strategies[strategy].iconInactiveDark\n      })\n    );\n\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n\n    // Add Curve\n    if (curveConfig.enabled){\n      const curveParams = Object.assign({\n        submenu:[],\n        selected:false,\n        component:CurveStrategy,\n      },curveConfig.params);\n\n      menu.push(curveParams);\n    }\n\n    // Add Stats\n    menu.push(\n      {\n        icon:'Equalizer',\n        label:'Stats',\n        bgColor:'#21f36b',\n        color:'dark-gray',\n        component:Stats,\n        selected:false,\n        route:'/dashboard/stats',\n        submenu:[]\n      }\n    );\n\n    // Add tools\n    menu.push(\n      {\n        icon:'Build',\n        label:'Tools',\n        color:'dark-gray',\n        component:Utils,\n        selected:false,\n        route:'/dashboard/tools',\n        bgColor:this.props.theme.colors.primary,\n        submenu:Object.values(this.functionsUtil.getGlobalConfig(['tools'])).filter( u => (u.enabled) )\n      }\n    );\n\n    // Add Forum\n    menu.push(\n      {\n        submenu:[],\n        icon:'Forum',\n        mobile:false,\n        label:'Forum',\n        selected:false,\n        component:null,\n        color:'dark-gray',\n        bgColor:'#ff0000',\n        isExternalLink:true,\n        route:this.functionsUtil.getGlobalConfig(['forumURL'])\n      }\n    );\n\n    await this.setState({\n      menu\n    });\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  openTooltipModal = (modalTitle,modalContent) => {\n\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: modalTitle,\n      eventLabel: 'TooltipModal'\n    });\n\n    this.setState({\n      modalTitle,\n      modalContent\n    },() => {\n      this.setActiveModal('tooltip');\n    })\n  }\n\n  setActiveModal = (activeModal) => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadParams() {\n    const { match: { params } } = this.props;\n\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    let currentRoute = baseRoute;\n\n    let pageComponent = null;\n    let selectedToken = null;\n    let currentSection = null;\n    let selectedStrategy = null;\n\n    // Set strategy\n    if (params.section){\n      currentSection = params.section;\n      const param1 = params.param1;\n      const param2 = params.param2;\n\n      const section_is_strategy = Object.keys(this.props.availableStrategies).includes(currentSection.toLowerCase());\n      const param1_is_strategy = param1 && Object.keys(this.props.availableStrategies).includes(param1.toLowerCase());\n\n      if (section_is_strategy || param1_is_strategy){\n        selectedStrategy = section_is_strategy ? currentSection : param1;\n        currentRoute += '/'+selectedStrategy;\n\n        // Set token\n        const param1_is_token = param1 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param1.toUpperCase());\n        const param2_is_token = param2 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param2.toUpperCase());\n        if (param1_is_token || param2_is_token){\n          selectedToken = param1_is_token ? param1.toUpperCase() : param2.toUpperCase();\n          currentRoute += '/'+selectedToken;\n\n          if (section_is_strategy){\n            pageComponent = AssetPage;\n          }\n        }\n      } else {\n        currentRoute += '/'+params.section;\n\n        if (params.param1 && params.param1.length){\n          currentRoute += '/'+params.param1;\n        }\n\n        // if (params.param2 && params.param2.length){\n        //   currentRoute += '/'+params.param2;\n        // }\n      }\n    }\n\n    const menu = this.state.menu;\n\n    let selectedSection = null;\n    let selectedSubsection = null;\n\n    menu.forEach(m => {\n      m.selected = false;\n      const sectionRoute = baseRoute+'/'+params.section;\n      if (currentRoute.toLowerCase() === m.route.toLowerCase() || ( !m.submenu.length && m.route.toLowerCase() === sectionRoute.toLowerCase() )){\n        m.selected = true;\n        if (pageComponent === null){\n          pageComponent = m.component;\n        }\n      } else if (m.submenu.length) {\n        m.submenu.forEach(subm => {\n          subm.selected = false;\n          const submRoute = m.route+'/'+subm.route;\n          if (submRoute.toLowerCase() === currentRoute.toLowerCase()){\n            m.selected = true;\n            subm.selected = true;\n\n            // Set component, if null use parent\n            if (pageComponent === null){\n              if (subm.component){\n                pageComponent = subm.component;\n              } else {\n                pageComponent = m.component;\n              }\n            }\n          }\n\n          // Set selected subsection\n          if (subm.selected){\n            selectedSubsection = subm;\n          }\n\n        });\n      }\n\n      // Set selected section\n      if (m.selected){\n        selectedSection = m;\n      }\n    });\n\n    // console.log('pageComponent',params,pageComponent);\n\n    // Exit if no strategy and token selected\n    if (!pageComponent){\n      return this.goToSection('/',false);\n    }\n\n    // console.log('loadParams',selectedStrategy,selectedToken);\n    await this.props.setStrategyToken(selectedStrategy,selectedToken);\n\n    await this.setState({\n      menu,\n      params,\n      baseRoute,\n      currentRoute,\n      pageComponent,\n      currentSection,\n      selectedSection,\n      selectedSubsection\n    });\n  }\n\n  componentWillUnmount(){\n    if (this.timeoutId){\n      window.clearTimeout(this.timeoutId);\n    }\n  }\n\n  async componentWillMount() {\n\n    this.props.setCurrentSection('dashboard');\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n  }\n\n  async componentDidMount() {\n\n    this.timeoutId = window.setTimeout(() => {\n      if (!this.props.accountInizialized || !this.props.contractsInitialized){\n        this.setState({\n          showResetButton:true\n        });\n      }\n    },20000);\n\n    if (!this.props.web3){\n      return this.props.initWeb3();\n    } else if (!this.props.accountInizialized){\n      return this.props.initAccount();\n    } else if (!this.props.contractsInitialized){\n      return this.props.initializeContracts();\n    }\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n    this.checkModals();\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n\n    this.loadUtils();\n\n    const prevParams = prevProps.match.params;\n    const params = this.props.match.params;\n\n    if (JSON.stringify(prevParams) !== JSON.stringify(params)){\n      await this.setState({\n        pageComponent:null\n      }, () => {\n        this.loadParams();\n      });\n    }\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const strategyChanged = this.props.selectedStrategy && prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const accountInizialized = this.props.accountInizialized && prevProps.accountInizialized !== this.props.accountInizialized;\n    const contractsInitialized = this.props.contractsInitialized && prevProps.contractsInitialized !== this.props.contractsInitialized;\n\n    if (accountChanged || accountInizialized || contractsInitialized || strategyChanged){\n      this.checkModals();\n    }\n  }\n\n  async checkModals(){\n\n    if (this.props.selectedToken || !this.props.accountInizialized || !this.props.contractsInitialized || !this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    await this.checkTokensToMigrate();\n    await this.checkWelcomeModal();\n    await this.checkProtocolsTokensBalances();\n  }\n\n  async checkTokensToMigrate(){\n\n    const showUpgradeModal = this.functionsUtil.getStoredItem('dontShowUpgradeModal',false,null) !== null ? false : true;\n    if (this.props.selectedToken || !showUpgradeModal || !this.props.availableTokens){\n      return null;\n    }\n\n    const tokensToMigrate = await this.functionsUtil.getTokensToMigrate();\n    const oldIdleTokensToMigrate = await this.functionsUtil.getProtocolsTokensBalances('idle');\n\n    // console.log('tokensToMigrate',tokensToMigrate);\n    \n    if ((tokensToMigrate && Object.keys(tokensToMigrate).length>0) || (oldIdleTokensToMigrate && Object.keys(oldIdleTokensToMigrate).length>0)){\n      const activeModal = 'upgrade';\n      if (activeModal !== this.state.activeModal){\n        this.setState({\n          activeModal,\n          tokensToMigrate,\n          oldIdleTokensToMigrate\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkWelcomeModal(){\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show welcome modal\n    if (this.props.account && this.state.activeModal === null){\n      let welcomeIsOpen = false;\n\n      const welcomeModalProps = this.functionsUtil.getGlobalConfig(['modals','welcome']);\n\n      if (welcomeModalProps.enabled && localStorage){\n\n        // Check the last login of the wallet\n        const currTime = new Date().getTime();\n        const walletAddress = this.props.account.toLowerCase();\n        let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : {};\n\n        // First login\n        if (!lastLogin[walletAddress]){\n          lastLogin[walletAddress] = {\n            'signedUp':false,\n            'lastTime':currTime\n          };\n          welcomeIsOpen = true;\n        // User didn't sign up\n        } else if (!lastLogin[walletAddress].signedUp) {\n          const lastTime = parseInt(lastLogin[walletAddress].lastTime);\n          const timeFromLastLogin = (currTime-lastTime)/1000;\n          welcomeIsOpen = timeFromLastLogin>=welcomeModalProps.frequency; // 1 day since last login\n        }\n\n        if (welcomeIsOpen){\n          lastLogin[walletAddress].lastTime = currTime;\n          this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n        }\n      }\n\n      const activeModal = welcomeIsOpen ? 'welcome' : this.state.activeModal;\n      if (this.state.activeModal !== activeModal){\n        this.setState({\n          activeModal\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkProtocolsTokensBalances() {\n\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show migration modal if no other modals are opened\n    const migrateModalEnabled = this.functionsUtil.getGlobalConfig(['modals','migrate','enabled']);\n    const showMigrateModal = this.functionsUtil.getStoredItem('dontShowMigrateModal',false,null) !== null ? false : true;\n\n    if (this.state.activeModal === null && migrateModalEnabled && showMigrateModal && !this.state.protocolsTokensBalances){\n      const protocolsTokensBalances = await this.functionsUtil.getProtocolsTokensBalances();\n      const activeModal = protocolsTokensBalances && Object.keys(protocolsTokensBalances).length>0 ? 'migrate' : null;\n      const newState = {\n        activeModal,\n        protocolsTokensBalances\n      };\n      this.setState(newState);\n      return activeModal;\n    }\n\n    return null;\n  }\n\n  goToSection(section,isDashboard=true){\n\n    // Remove dashboard route\n    if (isDashboard){\n      section = section.replace(this.state.baseRoute +'/','');\n    }\n\n    const newRoute = isDashboard ? this.state.baseRoute +'/' + section : section;\n    window.location.hash=newRoute;\n\n    // Send GA event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'goToSection',\n      eventLabel: newRoute\n    });\n\n    window.scrollTo(0, 0);\n  }\n\n  logout = async () => {\n    this.props.setConnector('Infura','Infura');\n    await this.props.initWeb3('Infura');\n  }\n\n  changeToken(selectedToken){\n    selectedToken = selectedToken.toUpperCase();\n    if (Object.keys(this.props.availableTokens).includes(selectedToken)){\n      const routeParts = [];\n\n      // Add section\n      if (this.state.currentSection.toLowerCase() !== this.props.selectedStrategy.toLowerCase()){\n        routeParts.push(this.state.currentSection);\n      }\n\n      // Add strategy\n      routeParts.push(this.props.selectedStrategy); \n\n      // Add token\n      routeParts.push(selectedToken);\n\n      this.goToSection(routeParts.join('/'));\n    }\n  }\n\n  propagateClickEvent(clickEvent){\n    this.setState({\n      clickEvent:clickEvent.target\n    });\n  }\n\n  render() {\n    const PageComponent = this.state.pageComponent ? this.state.pageComponent : null;\n    return (\n      <Flex\n        width={'100%'}\n        position={'fixed'}\n        flexDirection={'row'}\n        backgroundColor={['dashboardBg','white']}\n        /*onClick={ e => this.propagateClickEvent(e) }*/\n        height={[(window.innerHeight-61)+'px','100vh']}\n      >\n        <Flex\n          bottom={0}\n          zIndex={99999}\n          width={[1,1/6]}\n          flexDirection={'column'}\n          position={['fixed','relative']}\n        >\n          <Card\n            p={[0,3]}\n            border={0}\n            width={['100vw','auto']}\n            height={['auto','100vh']}\n            backgroundColor={'menuBg'}\n            borderColor={this.props.theme.colors.menuRightBorder}\n            borderRight={`1px solid ${this.props.theme.colors.menuRightBorder}`}\n            >\n            <DashboardMenu\n              {...this.props}\n              menu={this.state.menu}\n            />\n          </Card>\n        </Flex>\n        <Flex\n          py={3}\n          mb={0}\n          px={[3,5]}\n          width={[1,5/6]}\n          style={{\n            overflowY:'scroll',\n            overflowX:'hidden'\n          }}\n          height={['92vh','auto']}\n          flexDirection={'columns'}\n          backgroundColor={'dashboardBg'}\n        >\n          {\n            !this.props.accountInizialized || !this.props.contractsInitialized || !PageComponent ? (\n              <Flex\n                width={1}\n                minHeight={'50vg'}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                {\n                  !this.state.showResetButton ? (\n                    <FlexLoader\n                      textProps={{\n                        textSize:4,\n                        fontWeight:2\n                      }}\n                      loaderProps={{\n                        mb:3,\n                        size:'40px'\n                      }}\n                      flexProps={{\n                        my:3,\n                        flexDirection:'column'\n                      }}\n                      text={ !this.props.accountInizialized ? 'Loading account...' : ( !this.props.contractsInitialized ? 'Loading contracts...' : 'Loading assets...' )}\n                    />\n                  ) : (\n                    <DashboardCard\n                      cardProps={{\n                        p:3,\n                        mt:3,\n                        width:[1,0.35]\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Icon\n                          size={'2.3em'}\n                          name={'Warning'}\n                          color={'cellText'}\n                        />\n                        <Text\n                          mt={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          Idle can't connect to your wallet!<br />Make sure that your wallet is unlocked and try again.\n                        </Text>\n                        <RoundButton\n                          buttonProps={{\n                            mt:3,\n                            width:[1,1/2]\n                          }}\n                          handleClick={this.logout.bind(this)}\n                        >\n                          Logout\n                        </RoundButton>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n              </Flex>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardHeader\n                  clickEvent={this.state.clickEvent}\n                  goToSection={this.goToSection.bind(this)}\n                  {...this.props}\n                />\n                {\n                  PageComponent &&\n                    <PageComponent\n                      {...this.props}\n                      match={{ params:{} }}\n                      urlParams={this.state.params}\n                      changeToken={this.changeToken.bind(this)}\n                      goToSection={this.goToSection.bind(this)}\n                      selectedSection={this.state.selectedSection}\n                      selectedSubsection={this.state.selectedSubsection}\n                      openTooltipModal={this.openTooltipModal.bind(this)}\n                      />\n                }\n              </Flex>\n            )\n          }\n        </Flex>\n        <UpgradeModal\n          {...this.props}\n          closeModal={this.resetModal}\n          goToSection={this.goToSection.bind(this)}\n          tokensToMigrate={this.state.tokensToMigrate}\n          isOpen={this.state.activeModal === 'upgrade'}\n          oldIdleTokensToMigrate={this.state.oldIdleTokensToMigrate}\n        />\n        <MigrateModal\n          {...this.props}\n          closeModal={this.resetModal}\n          goToSection={this.goToSection.bind(this)}\n          isOpen={this.state.activeModal === 'migrate'}\n          protocolsTokensBalances={this.state.protocolsTokensBalances}\n        />\n        <TooltipModal\n          closeModal={this.resetModal}\n          title={this.state.modalTitle}\n          content={this.state.modalContent}\n          isOpen={this.state.activeModal === 'tooltip'}\n        >\n        </TooltipModal>\n        <WelcomeModal\n          closeModal={this.resetModal}\n          account={this.props.account}\n          simpleID={this.props.simpleID}\n          network={this.props.network.current}\n          tokenName={this.props.selectedToken}\n          initSimpleID={this.props.initSimpleID}\n          baseTokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'welcome'}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default Dashboard;"],"sourceRoot":""}