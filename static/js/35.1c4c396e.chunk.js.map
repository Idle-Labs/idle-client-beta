{"version":3,"sources":["ConnectBox/ConnectBox.js","CurveRedeem/CurveRedeem.js","TwitterShareButton/TwitterShareButton.module.scss","TwitterShareButton/TwitterShareButton.js","utilities/components/ShareModal.js","DepositRedeem/DepositRedeem.js"],"names":["ConnectBox","functionsUtil","this","setProps","props","FunctionsUtil","loadUtils","prevProps","prevState","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","_DashboardCard_DashboardCard__WEBPACK_IMPORTED_MODULE_11__","cardProps","p","mt","rimble_ui__WEBPACK_IMPORTED_MODULE_8__","alignItems","flexDirection","size","name","color","fontSize","textAlign","_RoundButton_RoundButton__WEBPACK_IMPORTED_MODULE_9__","buttonProps","width","handleClick","connectAndValidateAccount","Component","CurveRedeem","state","processing","txHash","loading","inputValue","maxSlippage","tokenConfig","unevenAmounts","selectedToken","availableTokens","buttonDisabled","showMaxSlippage","redeemUnderlying","curveTokenConfig","curvePoolContract","curveSwapContract","curveTokenBalance","curveTokensAmounts","fastBalanceSelector","redeemUnevenAmounts","curveRedeemableIdleTokens","toggleUnevenAmounts","_this","setState","checkButtonDisabled","amount","arguments","length","undefined","gt","changeInputValue","e","target","value","isNaN","BNify","setFastBalanceSelector","setMaxSlippage","initToken","max_slippage","lte","normalizedAmount","normalizeTokenAmount","decimals","withdrawSlippage","curveIdleTokensAmounts","Promise","all","getCurveTokensAmounts","account","getCurveIdleTokensAmounts","getCurveSlippage","idle","token","getCurveTokenPrice","curveTokenPrice","redeemableBalance","times","minus","plus","div","redeemUnevenAmountsChanged","setInputValue","inputChanged","maxSlippageChanged","parseFloat","tokenConfigChanged","JSON","stringify","calculateSlippage","loadSelectedTokenConfig","selectedPercentage","curveConfig","getGlobalConfig","getCurvePoolContract","getCurveSwapContract","getCurveTokenBalance","getCurveRedeemableIdleTokens","getCurveAvailableTokens","Object","keys","callbackRedeem","tx","error","txSucceeded","status","eventData","eventLabel","eventCategory","eventAction","_this2","eventValue","toFixed","getTransactionError","sendGoogleAnalyticsEvent","callbackReceiptRedeem","transactionHash","_Users_samuelecester_Desktop_git_idle_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","contractName","_amount","min_amounts","console","log","toString","contractMethodSendWrapper","coin_index","migrationParams","coinIndex","min_amount","_this3","showSlippage","curveTokenName","react__WEBPACK_IMPORTED_MODULE_9___default","rimble_ui__WEBPACK_IMPORTED_MODULE_19__","justifyContent","_DashboardCard_DashboardCard__WEBPACK_IMPORTED_MODULE_17__","_TxProgressBar_TxProgressBar__WEBPACK_IMPORTED_MODULE_16__","web3","hash","endMessage","cancelTransaction","bind","waitText","mb","required","label","checked","onChange","placement","message","concat","join","_AssetSelector_AssetSelector__WEBPACK_IMPORTED_MODULE_15__","assign","id","showBalance","selectDestinationToken","py","px","boxShadow","style","flexWrap","map","balance","mx","key","_AssetField_AssetField__WEBPACK_IMPORTED_MODULE_10__","fieldInfo","mr","height","_SmartNumber_SmartNumber__WEBPACK_IMPORTED_MODULE_12__","ml","fontWeight","maxPrecision","number","slippage","_FastBalanceSelector_FastBalanceSelector__WEBPACK_IMPORTED_MODULE_18__","textProps","percentage","onMouseDown","isActive","maxWidth","whiteSpace","theme","colors","transactions","failed","completed","abs","hoverColor","onClick","overflow","textOverflow","isMobile","min","type","borderRadius","placeholder","border","divider","parseInt","_RoundButton_RoundButton__WEBPACK_IMPORTED_MODULE_13__","disabled","redeem","minHeight","display","_FlexLoader_FlexLoader__WEBPACK_IMPORTED_MODULE_11__","flexProps","loaderProps","text","module","exports","twitterIcon","TwitterShareButton","share","parent","w","Math","window","innerWidth","x","open","tweet","react_default","index_es","mainColor","contrastColor","className","styles","ShareModal","closeModal","_callee","action","regenerator_default","wrap","_context","prev","next","getGlobalConfigs","analytics","google","events","enabled","stop","escape","customText","__html","isOpen","ModalCard","closeFunc","confettiEnabled","react_confetti_default","position","zIndex","run","recycle","innerHeight","Header","title","icon","Body","my","dangerouslySetInnerHTML","src_TwitterShareButton_TwitterShareButton","React","DepositRedeem","txError","tokenAPY","curveAPY","canRedeem","canDeposit","directMint","activeModal","showBuyFlow","unlentBalance","tokenApproved","skipMigration","showRedeemFlow","contractPaused","canRedeemCurve","redeemGovTokens","canDepositCurve","actionProxyContract","migrationEnabled","componentMounted","redeemCurveEnabled","depositCurveBalance","depositCurveEnabled","showAdvancedOptions","depositCurveSlippage","metaTransactionsEnabled","setShowRedeemFlow","setShowBuyFlow","toggleShowAdvancedOptions","toggleSkipMigration","toggleRedeemCurve","toggleDepositCurve","toggleSkipMint","toggleRedeemGovTokens","toggleMetaTransactionsEnabled","resetModal","setActiveModal","approveContract","callbackApprove","callbackReceiptApprove","curveDepositContract","proxyContract","enableERC20","address","biconomy","checkTokenApproved","_callee2","_context2","sent","abrupt","approveToken","_callee3","_context3","objectSpread","approve","loadTokenInfo","_callee4","curveTokenEnabled","_ref5","_ref6","newState","_context4","checkContractPaused","getCurveDepositContract","getUnlentBalance","checkMigration","slicedToArray","tokenBalance","idleTokenBalance","deposit","boost","checkAction","loadAPY","_callee5","_context5","defineProperty","executeAction","_callee6","contractSendResult","callbackDeposit","callbackReceiptDeposit","curvePoolContractInfo","tokensToDeposit","amounts","minMintAmount","depositParams","_tokensToDeposit","depositMetaTransactionsEnabled","_depositParams","mintProxyContractInfo","mintProxyContract","_mintProxyContract$me","functionSignature","_skipMint","_ref9","_ref10","maxUnlentPerc","totalAUM","depositPerc","txData","idleTokenToRedeem","idleTokenPrice","_callbackRedeem","_callbackReceiptRedeem","redeemParams","_context6","getFastBalanceSelector","t0","localStorage","setLocalStorage","lendingProcessing","lendAmount","genericError","getCurveAmounts","getCurveTokenAmount","integerValue","contract","methods","function","apply","toConsumableArray","encodeABI","sendBiconomyTxWithPersonalSign","skipMintForDeposit","genericContractCall","loadAssetField","gte","setAction","toLowerCase","loadProxyContracts","actions","asyncForEach","_ref11","asyncToGenerator","mark","_callee9","hasProxyContract","_context9","initContract","abi","approved","_x3","getTokenAprs","tokenAprs","avgApy","getCurveAPY","tokenChanged","tokenBalanceChanged","actionChanged","fastBalanceSelectorChanged","depositCurveChanged","calculateCurveSlippage","govTokensDisabled","govTokensEnabled","selectedStrategy","skipMintForDepositEnabled","skipMintCheckboxEnabled","redeemGovTokenEnabled","metaTransactionsAvailable","useMetaTx","totalBalance","migrateText","migration","depositCurve","showDepositOptions","canPerformAction","showDepositCurve","showRedeemCurve","showActionFlow","showCurveSlippage","showRebalanceOption","showAdvancedDepositOptions","batchDepositInfo","batchDepositEnabled","batchDepositDepositEnabled","depositEnabled","showBatchDeposit","isMigrationTool","AssetSelector","Migrate","migrateTextBefore","DashboardCard","isInteractive","TransactionField","transaction","isDisabled","pt","pb","openTooltipModal","isRainbow","src","params","image","getWalletProvider","capitalize","backgroundColor","primary","href","route","govTokensBalance","TxProgressBar","tokenFeesPercentage","FastBalanceSelector","RoundButton","minWidth","textTransform","FlexLoader","BuyModal","showInline","availableMethods","buyToken","components_ShareModal","tokenName"],"mappings":"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","file":"static/js/35.1c4c396e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Flex, Icon, Text } from \"rimble-ui\";\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass ConnectBox extends Component {\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return (\n      <DashboardCard\n        cardProps={{\n          p:3,\n          mt:3\n        }}\n      >\n        <Flex\n          alignItems={'center'}\n          flexDirection={'column'}\n        >\n          <Icon\n            size={'1.8em'}\n            name={'Input'}\n            color={'cellText'}\n          />\n          <Text\n            mt={2}\n            fontSize={2}\n            color={'cellText'}\n            textAlign={'center'}\n          >\n            Please connect with your wallet interact with Idle.\n          </Text>\n          <RoundButton\n            buttonProps={{\n              mt:2,\n              width:[1,1/2]\n            }}\n            handleClick={this.props.connectAndValidateAccount}\n          >\n            Connect\n          </RoundButton>\n        </Flex>\n      </DashboardCard>\n    );\n  }\n}\n\nexport default ConnectBox;\n","import React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Icon, Checkbox, Box, Link, Input, Tooltip } from \"rimble-ui\";\n\nclass CurveRedeem extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    tokenConfig:null,\n    unevenAmounts:null,\n    selectedToken:null,\n    availableTokens:null,\n    buttonDisabled:false,\n    showMaxSlippage:false,\n    redeemUnderlying:true,\n    curveTokenConfig:null,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    curveTokensAmounts:null,\n    fastBalanceSelector:null,\n    redeemUnevenAmounts:false,\n    curveRedeemableIdleTokens:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.initToken();\n  }\n\n  showMaxSlippage(){\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  async calculateSlippage(max_slippage=null){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (!inputValue || inputValue.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    let withdrawSlippage = null;\n    let curveTokensAmounts = null;\n    let curveIdleTokensAmounts = null;\n    if (this.state.redeemUnevenAmounts){\n      [\n        curveTokensAmounts,\n        curveIdleTokensAmounts\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokensAmounts(this.props.account,normalizedAmount,true),\n        this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,normalizedAmount)\n      ]);\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false,curveIdleTokensAmounts);\n    } else {\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false);\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const redeemableBalance = inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.times(100).plus(this.state.maxSlippage || this.functionsUtil.BNify(0)).div(100)));\n      curveTokensAmounts = {};\n      curveTokensAmounts[this.state.selectedToken] = redeemableBalance;\n    }\n\n    if (withdrawSlippage){\n      withdrawSlippage = withdrawSlippage.times(100);\n    }\n\n    this.setState({\n      withdrawSlippage,\n      curveTokensAmounts,\n      curveIdleTokensAmounts\n    });\n\n    // Add max slippage but don't save in state\n    if (withdrawSlippage && max_slippage){\n      withdrawSlippage = withdrawSlippage.plus(max_slippage);\n    }\n\n    return withdrawSlippage;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.tokenConfig.idle.token !== this.props.tokenConfig.idle.token;\n    if (tokenChanged){\n      await this.initToken();\n    }\n\n    const redeemUnevenAmountsChanged = prevState.redeemUnevenAmounts !== this.state.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    const inputChanged = prevState.inputValue !== this.state.inputValue;\n    const maxSlippageChanged = parseFloat(prevState.maxSlippage) !== parseFloat(this.state.maxSlippage);\n    const tokenConfigChanged = JSON.stringify(prevState.tokenConfig) !== JSON.stringify(this.state.tokenConfig);\n    if (inputChanged || tokenConfigChanged || maxSlippageChanged){\n      this.calculateSlippage();\n    }\n\n    const selectedTokenChanged = prevState.selectedToken !== this.state.selectedToken;\n    if (selectedTokenChanged){\n      this.loadSelectedTokenConfig();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    let buttonDisabled = false;\n\n    // if (this.state.redeemUnevenAmounts){\n      buttonDisabled = !amount || amount.gt(this.state.curveTokenBalance);\n    // } else {\n      // buttonDisabled = !amount || amount.gt(this.state.redeemableBalance);\n    // }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    let inputValue = null;\n\n    // if (this.state.redeemUnevenAmounts){\n    inputValue = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n    // } else {\n      // inputValue = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n    // }\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  selectDestinationToken(selectedToken){\n    this.setState({\n      selectedToken\n    });\n  }\n\n  async loadSelectedTokenConfig(){\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const tokenConfig = this.state.availableTokens[this.state.selectedToken];\n    const curveTokenConfig = curveConfig.availableTokens[tokenConfig.idle.token];\n    this.setState({\n      tokenConfig,\n      curveTokenConfig\n    });\n  }\n\n  async initToken(){\n    const [curvePoolContract,curveSwapContract] = await Promise.all([\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract()\n    ]);\n\n    const [\n      curveTokenPrice,\n      curveTokenBalance,\n      curveRedeemableIdleTokens,\n    ] = await Promise.all([\n      this.functionsUtil.getCurveTokenPrice(),\n      this.functionsUtil.getCurveTokenBalance(this.props.account),\n      this.functionsUtil.getCurveRedeemableIdleTokens(this.props.account)\n    ]);\n\n    const unevenAmounts = [];\n    const redeemableBalance = curveTokenBalance ? curveTokenBalance.times(curveTokenPrice) : this.functionsUtil.BNify(0);\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();;\n    const selectedToken = Object.keys(availableTokens)[0];\n\n    this.setState({\n      selectedToken,\n      unevenAmounts,\n      curveTokenPrice,\n      availableTokens,\n      curvePoolContract,\n      curveSwapContract,\n      curveTokenBalance,\n      redeemableBalance,\n      curveRedeemableIdleTokens\n    });\n  }\n\n  async redeem(){\n\n    if (!this.state.curveTokenBalance){\n      return false;\n    }\n\n    const callbackRedeem = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveRedeem`,\n        eventAction: this.props.selectedToken,\n        eventValue: this.state.curveTokenBalance.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackRedeem === 'function' && txSucceeded){\n        this.props.callbackRedeem(tx);\n      }\n    };\n\n    const callbackReceiptRedeem = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.curveSwapContract.name;\n    const withdrawSlippage = await this.calculateSlippage(this.state.maxSlippage);\n    const max_slippage = this.functionsUtil.BNify(this.state.maxSlippage).div(100);\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    // const curveTokenBalance = this.functionsUtil.normalizeTokenAmount(this.state.curveTokenBalance,this.state.curvePoolContract.decimals);\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    if (this.state.redeemUnevenAmounts){\n      const min_amounts = this.state.redeemUnderlying ? await this.functionsUtil.getCurveTokensAmounts(this.props.account,_amount,false,true) : await this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,_amount,max_slippage);\n      console.log('remove_liquidity',_amount.toString(),min_amounts);\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    } else {\n      const coin_index = this.state.curveTokenConfig.migrationParams.coinIndex;\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.div(100))),this.state.tokenConfig.decimals);\n      // const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.minus(inputValue.times(withdrawSlippage.div(100))),this.state.curveTokenConfig.decimals);\n      // let _token_amount = await this.functionsUtil.getCurveTokenAmount(amounts,false);\n      // _token_amount = this.functionsUtil.BNify(_token_amount).isGreaterThan(curveTokenBalance) ? curveTokenBalance : this.functionsUtil.BNify(_token_amount);\n\n      console.log('remove_liquidity_one_coin',_amount, coin_index, min_amount);\n\n      // debugger;\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_one_coin', [_amount, coin_index, min_amount, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    }\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  getFastBalanceSelector(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n\n  render() {\n\n    const showSlippage = !this.state.buttonDisabled && this.state.withdrawSlippage;\n    const curveTokenName = this.functionsUtil.getGlobalConfig(['curve','poolContract','token']);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          {\n            !this.state.curveTokenBalance ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3,\n                  minHeight:'195px',\n                  style:{\n                    display:'flex',\n                    alignItems:'center',\n                    justifyContent:'center'\n                  }\n                }}\n              >\n                <FlexLoader\n                  flexProps={{\n                    flexDirection:'row'\n                  }}\n                  loaderProps={{\n                    size:'30px'\n                  }}\n                  textProps={{\n                    ml:2\n                  }}\n                  text={'Checking Curve Pool...'}\n                />\n              </DashboardCard>\n            ) : this.state.processing.loading ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3\n                }}\n              >\n                <Flex\n                  flexDirection={'column'}\n                >\n                  <TxProgressBar\n                    web3={this.props.web3}\n                    hash={this.state.processing.txHash}\n                    endMessage={`Finalizing redeem request...`}\n                    cancelTransaction={this.cancelTransaction.bind(this)}\n                    waitText={ this.props.waitText ? this.props.waitText : 'Redeem estimated in'}\n                  />\n                </Flex>\n              </DashboardCard>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    mb:2\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'1.8em'}\n                      color={'cellText'}\n                      name={'FileUpload'}\n                    />\n                    <Text\n                      mt={1}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Withdraw from the Curve Pool in a specific token or in uneven amounts of tokens (with no slippage).\n                    </Text>\n                    <Flex\n                      mt={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                    >\n                      <Checkbox\n                        required={false}\n                        label={`Redeem with no slippage`}\n                        checked={this.state.redeemUnevenAmounts}\n                        onChange={ e => this.toggleUnevenAmounts(e.target.checked) }\n                      />\n                      <Tooltip\n                        placement={'top'}\n                        message={`You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.`}\n                      >\n                        <Icon\n                          size={'1em'}\n                          color={'cellTitle'}\n                          name={\"InfoOutline\"}\n                        />\n                      </Tooltip>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n                {\n                  !this.state.redeemUnevenAmounts/* && (!this.props.selectedToken || (this.state.showMaxSlippage && showSlippage))*/ && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      {\n                        this.state.tokenConfig && \n                          <Box\n                            width={1}\n                          >\n                            <Text\n                              mb={1}\n                            >\n                              Select destination token:\n                            </Text>\n                            <AssetSelector\n                              {...this.props}\n                              id={'token-from'}\n                              showBalance={false}\n                              tokenConfig={this.state.tokenConfig}\n                              selectedToken={this.state.selectedToken}\n                              availableTokens={this.state.availableTokens}\n                              onChange={this.selectDestinationToken.bind(this)}\n                            />\n                          </Box>\n                      }\n                    </Box>\n                  )\n                }\n                {\n                  this.state.curveTokensAmounts && !this.state.buttonDisabled && (\n                    <DashboardCard\n                      cardProps={{\n                        mt:1,\n                        mb:2,\n                        py:2,\n                        px:1\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Text\n                          mt={1}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          You will receive:\n                        </Text>\n                        <Flex\n                          mt={2}\n                          width={1}\n                          boxShadow={0}\n                          style={{\n                            flexWrap:'wrap'\n                          }}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                          >\n                            {\n                              Object.keys(this.state.curveTokensAmounts).map( token => {\n                                const balance = this.state.curveTokensAmounts[token];\n                                return (\n                                  <Flex\n                                    mb={1}\n                                    mx={1}\n                                    width={'auto'}\n                                    flexDirection={'row'}\n                                    key={`tokenBalance_${token}`}\n                                    justifyContent={'flex-start'}\n                                  >\n                                    <AssetField\n                                      token={token}\n                                      tokenConfig={{\n                                        token:token\n                                      }}\n                                      fieldInfo={{\n                                        name:'icon',\n                                        props:{\n                                          mr:1,\n                                          width:['1.4em','1.6em'],\n                                          height:['1.4em','1.6em']\n                                        }\n                                      }}\n                                    />\n                                    <SmartNumber\n                                      ml={1}\n                                      fontSize={[0,1]}\n                                      fontWeight={500}\n                                      maxPrecision={4}\n                                      color={'cellText'}\n                                      number={balance.toString()}\n                                    />\n                                  </Flex>\n                                );\n                            })\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n                {\n                  this.state.showMaxSlippage && showSlippage && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Text>\n                          Choose max slippage:\n                        </Text>\n                        <Tooltip\n                          placement={'top'}\n                          message={`Max additional slippage on top of the one shown below`}\n                        >\n                          <Icon\n                            ml={1}\n                            size={'1em'}\n                            color={'cellTitle'}\n                            name={\"InfoOutline\"}\n                          />\n                        </Tooltip>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        {\n                          [0.2,0.5,1,5].map( slippage => (\n                            <FastBalanceSelector\n                              cardProps={{\n                                p:1\n                              }}\n                              textProps={{\n                                fontSize:1\n                              }}\n                              percentage={slippage}\n                              key={`selector_${slippage}`}\n                              onMouseDown={()=>this.setMaxSlippage(slippage)}\n                              isActive={this.state.maxSlippage === parseFloat(slippage)}\n                            />\n                          ))\n                        }\n                      </Flex>\n                    </Box>\n                  )\n                }\n                <Flex\n                  mb={3}\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  <Flex\n                    mb={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'flex-end'}\n                  >\n                    {\n                      showSlippage && (\n                        <Flex\n                          width={1}\n                          maxWidth={'40%'}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            textAlign={'right'}\n                            style={{\n                              whiteSpace:'nowrap'\n                            }}\n                            color={ parseFloat(this.state.withdrawSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                          >\n                            {\n                              parseFloat(this.state.withdrawSlippage.toFixed(3)) === 0 ?\n                                'No Slippage'\n                              : `${ this.state.withdrawSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.withdrawSlippage.abs().toFixed(3)}%`\n                            }\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={ this.state.redeemUnevenAmounts ? `You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.` : this.state.withdrawSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                          {\n                            !this.state.redeemUnevenAmounts &&\n                              <Link\n                                ml={1}\n                                color={'copyColor'}\n                                hoverColor={'primary'}\n                                onClick={this.showMaxSlippage.bind(this)}\n                              >\n                                change\n                              </Link>\n                          }\n                        </Flex>\n                      )\n                    }\n                    <Flex\n                      width={1}\n                      maxWidth={'60%'}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      justifyContent={'flex-end'}\n                    >\n                      <Link\n                        fontSize={1}\n                        fontWeight={3}\n                        color={'dark-gray'}\n                        textAlign={'right'}\n                        hoverColor={'copyColor'}\n                        onClick={ (e) => this.setFastBalanceSelector(100) }\n                        style={{\n                          maxWidth:'100%',\n                          overflow:'hidden',\n                          whiteSpace:'nowrap',\n                          textOverflow:'ellipsis'\n                        }}\n                      >\n                        {this.state.curveTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {curveTokenName}\n                      </Link>\n                    </Flex>\n                  </Flex>\n                  <Input\n                    min={0}\n                    type={\"number\"}\n                    required={true}\n                    height={'3.4em'}\n                    borderRadius={2}\n                    fontWeight={500}\n                    boxShadow={'none !important'}\n                    placeholder={`Insert amount`}\n                    onChange={this.changeInputValue.bind(this)}\n                    border={`1px solid ${this.props.theme.colors.divider}`}\n                    value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                  />\n                  <Flex\n                    mt={2}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      [25,50,75,100].map( percentage => (\n                        <FastBalanceSelector\n                          percentage={percentage}\n                          key={`selector_${percentage}`}\n                          onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                          isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                        />\n                      ))\n                    }\n                  </Flex>\n                </Flex>\n                <Flex\n                  justifyContent={'center'}\n                >\n                  <RoundButton\n                    buttonProps={{\n                      mt:2,\n                      width:[1,1/2],\n                      disabled:this.state.buttonDisabled\n                    }}\n                    handleClick={this.redeem.bind(this)}\n                  >\n                    Redeem\n                  </RoundButton>\n                </Flex>\n              </Flex>\n            )\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveRedeem;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"twitterIcon\":\"TwitterShareButton_twitterIcon__2QCmn\"};","import React, { Component } from 'react';\nimport {\n  Button,\n  Flex,\n  Box,\n  Text\n} from \"rimble-ui\";\nimport styles from './TwitterShareButton.module.scss';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass TwitterShareButton extends Component {\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate() {\n    this.loadUtils();\n  }\n\n  share = () => {\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'Share',\n      eventAction: 'twitter',\n      eventLabel: this.props.parent\n    });\n\n    const w = Math.min(window.innerWidth,600);\n    const h = 350;\n    const x = (window.innerWidth-w)/2;\n    const y = 150;\n    window.open(`https://twitter.com/intent/tweet?text=${this.props.tweet}`,\"_blank\",`toolbar=yes,scrollbars=no,resizable=no,top=${y},left=${x},width=${w},height=${h}`);\n  }\n\n  render() {\n    return (\n        <Button\n          borderRadius={1}\n          mainColor={'#2aa6f2'}\n          contrastColor={'white'}\n          onClick={ e => { this.share() } }\n        >\n          <Flex flexDirection={'row'} alignItems={'center'} justifyContent={'center'}>\n            <Box className={styles.twitterIcon} />\n            <Text color={'white'} fontWeight={3} ml={2}>{ this.props.text ? this.props.text : 'Tweet' }</Text>\n          </Flex>\n        </Button>\n    );\n  }\n}\n\nexport default TwitterShareButton;\n","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Link,\n  Flex\n} from \"rimble-ui\";\nimport ModalCard from './ModalCard';\nimport TwitterShareButton from '../../TwitterShareButton/TwitterShareButton.js';\nimport Confetti from 'react-confetti/dist/react-confetti';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass ShareModal extends React.Component {\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate() {\n    this.loadUtils();\n  }\n\n  closeModal = async (action) => {\n    const globalConfigs = this.functionsUtil.getGlobalConfigs();\n    // Send Google Analytics event\n    if (globalConfigs.analytics.google.events.enabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'Share',\n        eventAction: action,\n        eventLabel: 'ShareModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n    const tweet = window.escape(this.props.tweet);\n    const customText = {__html: this.props.text};\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          {\n            this.props.confettiEnabled &&\n            <Confetti\n              style={{ position: 'fixed','zIndex':9999 }}\n              run={true}\n              recycle={true}\n              width={window.innerWidth}\n              height={window.innerHeight}\n            />\n          }\n          <ModalCard.Header title={this.props.title} icon={this.props.icon}></ModalCard.Header>\n          <ModalCard.Body>\n            <Flex my={3} width={1} flexDirection={'column'} mx={'auto'}>\n              <Text color={'dark-gray'} textAlign={'center'} fontSize={3} mb={2} dangerouslySetInnerHTML={customText}></Text>\n            </Flex>\n            <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n              <TwitterShareButton tweet={tweet} text={'Share now'} parent={'ShareModal'} />\n              <Link mt={2} onClick={ e => this.closeModal('continue_without_sharing') } hoverColor={'blue'}>continue without sharing</Link>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default ShareModal;","import theme from '../theme';\nimport Migrate from '../Migrate/Migrate';\nimport React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport ConnectBox from '../ConnectBox/ConnectBox';\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport ShareModal from '../utilities/components/ShareModal';\nimport TransactionField from '../TransactionField/TransactionField';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Input, Box, Icon, Link, Checkbox, Tooltip, Image } from \"rimble-ui\";\n\nclass DepositRedeem extends Component {\n\n  state = {\n    txError:{},\n    tokenAPY:'-',\n    inputValue:{},\n    processing:{},\n    curveAPY:null,\n    canRedeem:false,\n    maxSlippage:0.2,\n    canDeposit:false,\n    action:'deposit',\n    directMint:false,\n    activeModal:null,\n    showBuyFlow:false,\n    unlentBalance:null,\n    tokenApproved:false,\n    skipMigration:false,\n    showRedeemFlow:false,\n    contractPaused:false,\n    buttonDisabled:false,\n    canRedeemCurve:false,\n    showMaxSlippage:false,\n    redeemGovTokens:false,\n    canDepositCurve:false,\n    fastBalanceSelector:{},\n    actionProxyContract:{},\n    migrationEnabled:false,\n    componentMounted:false,\n    curveTokenBalance:null,\n    redeemCurveEnabled:false,\n    depositCurveBalance:null,\n    depositCurveEnabled:true,\n    showAdvancedOptions:false,\n    depositCurveSlippage:null,\n    metaTransactionsEnabled:true\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadProxyContracts();\n  }\n\n  async componentDidMount(){\n\n  }\n\n  setShowRedeemFlow = (showRedeemFlow) => {\n    this.setState({\n      showRedeemFlow\n    });\n  }\n\n  setShowBuyFlow = (showBuyFlow) => {\n    this.setState({\n      showBuyFlow\n    });\n  }\n\n  toggleShowAdvancedOptions = showAdvancedOptions => {\n    this.setState((prevState) => ({\n      showAdvancedOptions:!prevState.showAdvancedOptions\n    }));\n  }\n\n  toggleSkipMigration = skipMigration => {\n    this.setState({\n      skipMigration\n    });\n  }\n\n  toggleRedeemCurve = redeemCurveEnabled => {\n    this.setState({\n      redeemCurveEnabled\n    });\n  }\n\n  toggleDepositCurve = depositCurveEnabled => {\n    this.setState({\n      depositCurveEnabled\n    });\n  }\n\n  toggleSkipMint = (directMint) => {\n    this.setState({\n      directMint\n    });\n  }\n\n  toggleRedeemGovTokens = (redeemGovTokens) => {\n    this.setState({\n      redeemGovTokens\n    });\n  }\n\n  toggleMetaTransactionsEnabled = (metaTransactionsEnabled) => {\n    this.setState({\n      metaTransactionsEnabled\n    });\n  }\n\n  async loadProxyContracts(){\n    const actions = ['deposit','redeem'];\n    const newState = {\n      actionProxyContract:{}\n    };\n\n    await this.functionsUtil.asyncForEach(actions,async (action) => {\n      const mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'proxyContract']);\n      const hasProxyContract = mintProxyContractInfo && mintProxyContractInfo.enabled;\n      newState.actionProxyContract[action] = hasProxyContract ? mintProxyContractInfo : null;\n      if (hasProxyContract){\n        const proxyContract = await this.props.initContract(mintProxyContractInfo.name,mintProxyContractInfo.address,mintProxyContractInfo.abi);\n        newState.actionProxyContract[action].contract = proxyContract.contract;\n        newState.actionProxyContract[action].approved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,mintProxyContractInfo.address,this.props.account);\n      }\n    });\n\n    this.setState(newState);\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadAPY(){\n    const tokenAprs = await this.functionsUtil.getTokenAprs(this.props.tokenConfig);\n    if (tokenAprs && tokenAprs.avgApy !== null){\n      const tokenAPY = this.functionsUtil.BNify(tokenAprs.avgApy).toFixed(2);\n\n      let curveAPY = null;\n      if (this.state.canDepositCurve){\n        curveAPY = await this.functionsUtil.getCurveAPY();\n        // console.log('curveAPY',curveAPY);\n        if (curveAPY){\n          curveAPY = curveAPY.plus(tokenAPY);\n        }\n      }\n      this.setState({\n        tokenAPY,\n        curveAPY\n      });\n    }\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    if (this.props.tokenBalance === null){\n      return false;\n    }\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const tokenBalanceChanged = prevProps.tokenBalance !== this.props.tokenBalance && this.props.tokenBalance !== null;\n\n    if (tokenChanged || tokenBalanceChanged){\n      await this.loadProxyContracts();\n      this.loadTokenInfo();\n      return false;\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n\n    if (actionChanged || fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const redeemGovTokensChanged = prevState.redeemGovTokens !== this.state.redeemGovTokens;\n    if (redeemGovTokensChanged || actionChanged){\n      this.checkButtonDisabled();\n    }\n\n    const depositCurveChanged = prevState.depositCurveEnabled !== this.state.depositCurveEnabled;\n    const metaTransactionsChanged = prevState.metaTransactionsEnabled !== this.state.metaTransactionsEnabled;\n    if (metaTransactionsChanged || depositCurveChanged){\n      const tokenApproved = await this.checkTokenApproved();\n      this.setState({\n        tokenApproved\n      });\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateCurveSlippage();\n    }\n  }\n\n  async calculateCurveSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,curvePoolContractInfo.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositCurveBalance = amount;\n        newState.depositCurveSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      case 'redeem':\n        // newState.redeemBalance = amount;\n        // newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateCurveSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  approveContract = async (callbackApprove,callbackReceiptApprove) => {\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      this.functionsUtil.enableERC20(this.props.selectedToken,curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n    } else {\n      const proxyContract = this.state.actionProxyContract[this.state.action];\n      if (proxyContract && this.state.metaTransactionsEnabled && this.props.biconomy){\n        this.functionsUtil.enableERC20(this.props.selectedToken,proxyContract.address,callbackApprove,callbackReceiptApprove);\n      } else {\n        this.functionsUtil.enableERC20(this.props.selectedToken,this.props.tokenConfig.idle.address,callbackApprove,callbackReceiptApprove);\n      }\n    }\n  }\n\n  checkTokenApproved = async () => {\n\n    let tokenApproved = false;\n\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,curveDepositContract.address,this.props.account);\n    } else {\n      const proxyContract = this.state.actionProxyContract[this.state.action];\n      if (proxyContract && this.state.metaTransactionsEnabled && this.props.biconomy){\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,proxyContract.address,this.props.account);\n      } else {\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,this.props.tokenConfig.idle.address,this.props.account);\n      }\n    }\n\n    return tokenApproved;\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = await this.checkTokenApproved();\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.approveContract(callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  loadTokenInfo = async () => {\n\n    if (this.state.componentMounted){\n      this.setState({\n        componentMounted:false\n      });\n    }\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token]);\n    const curveTokenEnabled = curveConfig.enabled && curveTokenConfig && curveTokenConfig.enabled;\n\n    const [\n      tokenApproved,\n      contractPaused,\n      curveSwapContract,\n      curveDepositContract,\n      unlentBalance,\n      {migrationEnabled},\n      curveTokenBalance,\n    ] = await Promise.all([\n      this.checkTokenApproved(),\n      this.functionsUtil.checkContractPaused(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract(),\n      this.functionsUtil.getUnlentBalance(this.props.tokenConfig),\n      this.functionsUtil.checkMigration(this.props.tokenConfig,this.props.account),\n      curveTokenEnabled ? this.functionsUtil.getCurveTokenBalance(this.props.account) : null\n    ]);\n\n    const canDeposit = this.props.tokenBalance && this.functionsUtil.BNify(this.props.tokenBalance).gt(0);\n    const canRedeem = this.props.idleTokenBalance && this.functionsUtil.BNify(this.props.idleTokenBalance).gt(0);\n\n    const canDepositCurve = curveTokenEnabled && canDeposit;\n    const depositCurveEnabled = canDepositCurve;\n\n    const canRedeemCurve = curveTokenEnabled && curveTokenBalance && curveTokenBalance.gt(0);\n    const redeemCurveEnabled = canRedeemCurve;\n\n    const newState = {...this.state};\n\n    // Check curve deposit enabled\n    if (newState.depositCurveEnabled && !curveTokenEnabled){\n      newState.depositCurveEnabled = false;\n    }\n    \n    newState.canRedeem = canRedeem;\n    newState.canDeposit = canDeposit;\n    newState.unlentBalance = unlentBalance;\n    newState.tokenApproved = tokenApproved;\n    newState.contractPaused = contractPaused;\n    newState.canRedeemCurve = canRedeemCurve;\n    newState.canDepositCurve = canDepositCurve;\n    newState.migrationEnabled = migrationEnabled;\n    newState.curveTokenBalance = curveTokenBalance;\n    newState.curveSwapContract = curveSwapContract;\n    newState.redeemCurveEnabled = redeemCurveEnabled;\n    newState.depositCurveEnabled = depositCurveEnabled;\n    newState.curveDepositContract = curveDepositContract;\n\n    newState.txError = {\n      redeem:false,\n      deposit:false\n    };\n    newState.processing = {\n      redeem:{\n        txHash:null,\n        loading:false\n      },\n      deposit:{\n        txHash:null,\n        loading:false\n      },\n      approve:{\n        txHash:null,\n        loading:false\n      },\n      boost:{\n        txHash:null,\n        loading:false\n      }\n    };\n    newState.inputValue = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n    newState.fastBalanceSelector = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n\n    newState.componentMounted = true;\n\n    this.setState(newState,() => {\n      this.checkAction();\n      this.loadAPY();\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const redeemGovTokens = this.state.redeemGovTokens;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    let loading = true;\n\n    switch (this.state.action){\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        if (!this.state.tokenApproved){\n          return this.approveToken();\n        }\n\n        if (localStorage){\n          this.functionsUtil.setLocalStorage('redirectToFundsAfterLogged',0);\n        }\n\n        this.setState({\n          lendingProcessing: this.props.account,\n          lendAmount: '',\n          genericError: '',\n        });\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.props.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if (this.state.metaTransactionsEnabled && txError){\n            this.setState({\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n        const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n        // Handle Curve Deposit\n        if (curveTokenEnabled && this.state.depositCurveEnabled){\n\n          const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,curvePoolContractInfo.decimals);\n\n          const amounts = await this.functionsUtil.getCurveAmounts(this.props.tokenConfig.idle.token,tokensToDeposit);\n          let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n          if (this.state.maxSlippage){\n            minMintAmount = this.functionsUtil.BNify(minMintAmount);\n            minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n            minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n          }\n          \n          const depositParams = [amounts,minMintAmount];\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, callbackDeposit, callbackReceiptDeposit);\n        } else {\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n\n          const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']);\n          // const gasLimitDeposit = this.functionsUtil.BNify(1000000);\n          let depositParams = [];\n\n          // Use Proxy Contract if enabled\n          const mintProxyContractInfo = this.state.actionProxyContract[this.state.action];\n          if (depositMetaTransactionsEnabled && mintProxyContractInfo && this.props.biconomy && this.state.metaTransactionsEnabled){\n            const mintProxyContract = this.state.actionProxyContract[this.state.action].contract;\n            depositParams = [tokensToDeposit, this.props.tokenConfig.idle.address];\n            // console.log('mintProxyContract',mintProxyContractInfo.function,depositParams);\n            if (this.state.metaTransactionsEnabled){\n              const functionSignature = mintProxyContract.methods[mintProxyContractInfo.function](...depositParams).encodeABI();\n              contractSendResult = await this.functionsUtil.sendBiconomyTxWithPersonalSign(mintProxyContractInfo.name, functionSignature, callbackDeposit, callbackReceiptDeposit);\n            } else {\n              contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n            }\n          // Use main contract if no proxy contract exists\n          } else {\n            let _skipMint = !this.state.directMint && this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMint']);\n            _skipMint = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : _skipMint;\n\n            // Mint if someone mint over X amount\n            if (_skipMint){\n              let [\n                maxUnlentPerc,\n                totalAUM\n              ] = await Promise.all([\n                this.functionsUtil.genericContractCall('idleDAIYield', 'maxUnlentPerc'),\n                this.functionsUtil.loadAssetField('pool',this.props.selectedToken,this.props.tokenConfig,this.props.account)\n              ]);\n\n              if (maxUnlentPerc && totalAUM){\n                const depositPerc = inputValue.div(totalAUM).times(100);\n                maxUnlentPerc = this.functionsUtil.BNify(maxUnlentPerc).div(1e3);\n                if (depositPerc.gte(maxUnlentPerc.times(2))){\n                  _skipMint = false;\n                }\n                // console.log(maxUnlentPerc.toFixed(5),inputValue.toFixed(5),totalAUM.toFixed(5),depositPerc.toFixed(5),depositPerc.gte(maxUnlentPerc.times(2)),_skipMint);\n              }\n            }\n\n            depositParams = [tokensToDeposit, _skipMint, '0x0000000000000000000000000000000000000000'];\n            contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'mintIdleToken', depositParams, callbackDeposit, callbackReceiptDeposit);\n          }\n        }\n      break;\n      case 'redeem':\n\n        if (redeemGovTokens){\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_gov`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: 0\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', [0], callbackRedeem, callbackReceiptRedeem);\n          \n        } else {\n\n          if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n            return false;\n          }\n\n          const txData = {\n            value:this.functionsUtil.BNify(inputValue)\n          };\n\n          let idleTokenToRedeem = null;\n          if (selectedPercentage){\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage);\n          } else {\n            const idleTokenPrice = await this.functionsUtil.genericContractCall(this.props.tokenConfig.idle.token, 'tokenPrice');\n            idleTokenToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals)).div(idleTokenPrice);\n          }\n\n          // Normalize number\n          idleTokenToRedeem = this.functionsUtil.normalizeTokenAmount(idleTokenToRedeem,18);\n\n          if (!idleTokenToRedeem){\n            return false;\n          }\n\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_partial`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: parseInt(inputValue)\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          let redeemParams = [idleTokenToRedeem];\n          // console.log(redeemParams,idleTokenToRedeem);\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', redeemParams, callbackRedeem, callbackReceiptRedeem, txData);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    if (contractSendResult !== false){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  showMaxSlippage = () => {\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  checkAction = () => {\n    let action = this.state.action;\n\n    switch(action){\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = 'deposit';\n        }\n      break;\n      default:\n      break;\n    }\n\n    if (action !== this.state.action){\n      this.setState({\n        action\n      },() => {\n        this.checkButtonDisabled();\n      });\n    } else {\n      this.checkButtonDisabled();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.props.tokenBalance));\n      break;\n      case 'redeem':\n        buttonDisabled = !this.state.canRedeemCurve && !this.state.redeemGovTokens && ( buttonDisabled || (amount && amount.gt(this.props.redeemableBalance)) );\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.props.tokenBalance ? this.functionsUtil.BNify(this.props.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        amount = this.props.redeemableBalance ? this.functionsUtil.BNify(this.props.redeemableBalance).times(selectedPercentage) : null;\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  changeInputValue = (e) => {\n    if (!this.state.action){\n      return false;\n    }\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem && !this.state.canRedeemCurve){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const govTokensDisabled = this.props.tokenConfig.govTokensDisabled;\n    const govTokensEnabled = this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'govTokensEnabled']);\n    const skipMintForDepositEnabled = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : true;\n    const skipMintCheckboxEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMintCheckboxEnabled']) && skipMintForDepositEnabled;\n\n    const redeemGovTokenEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','redeemGovTokens','enabled']) && !govTokensDisabled && govTokensEnabled;\n    const redeemGovTokens = redeemGovTokenEnabled && this.state.redeemGovTokens && this.state.action === 'redeem';\n\n    const metaTransactionsAvailable = this.props.biconomy && this.state.actionProxyContract[this.state.action];\n    const useMetaTx = metaTransactionsAvailable && this.state.metaTransactionsEnabled;\n    const totalBalance = this.state.action === 'deposit' ? this.props.tokenBalance : this.props.redeemableBalance;\n    const migrateText = this.state.migrationEnabled && this.props.tokenConfig.migration.message !== undefined ? this.props.tokenConfig.migration.message : null;\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n    const depositCurve = curveTokenEnabled && this.state.depositCurveEnabled && this.state.action === 'deposit';\n\n    const showDepositOptions = this.state.action === 'deposit' && !this.state.contractPaused && (curveTokenEnabled || this.state.tokenApproved);\n\n    const canPerformAction = /*!depositCurve && !this.state.redeemCurveEnabled && */((this.state.action === 'deposit' && this.state.canDeposit) || (this.state.action === 'redeem' && this.state.canRedeem) || redeemGovTokens);\n    const showDepositCurve = showDepositOptions && curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canDepositCurve && this.state.action === 'deposit';\n    const showRedeemCurve = curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canRedeemCurve && this.state.action === 'redeem';\n\n    const showActionFlow = !redeemGovTokens && canPerformAction;\n    const showBuyFlow = this.state.componentMounted && (!showDepositCurve || this.state.showBuyFlow) && !this.state.depositCurveEnabled && this.state.tokenApproved && !this.state.contractPaused && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.action === 'deposit' && !this.state.canDeposit;\n    const showRedeemFlow = this.state.canRedeem && (!this.state.redeemCurveEnabled || this.state.showRedeemFlow);\n\n    const showCurveSlippage = depositCurve && this.state.depositCurveSlippage && this.state.depositCurveBalance && !this.state.buttonDisabled;\n\n    const showRebalanceOption = showDepositOptions && this.state.canDeposit && skipMintCheckboxEnabled && this.state.action === 'deposit';\n    const showAdvancedDepositOptions = showDepositCurve || showRebalanceOption;\n\n    const batchDepositInfo = this.functionsUtil.getGlobalConfig(['tools','batchDeposit']);\n    const batchDepositEnabled = batchDepositInfo.enabled && typeof batchDepositInfo.props.availableTokens[this.props.tokenConfig.idle.token] !== 'undefined';\n    const batchDepositDepositEnabled = batchDepositInfo.depositEnabled;\n\n    const showBatchDeposit = batchDepositEnabled && batchDepositDepositEnabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          <Box\n            width={1}\n          >\n            <Text mb={1}>\n              Select your asset:\n            </Text>\n            <AssetSelector\n              {...this.props}\n            />\n          </Box>\n          <Migrate\n            {...this.props}\n            migrateTextBefore={migrateText}\n            migrateText={migrateText !== null ? '' : null}\n            toggleSkipMigration={this.toggleSkipMigration.bind(this)}\n          >\n            {\n              !this.props.account ? (\n                <ConnectBox\n                  {...this.props}\n                />\n              ) :\n              this.state.componentMounted ? (\n                this.state.action ? (\n                  <Box width={1}>\n                    <Flex\n                      mt={2}\n                      flexDirection={'column'}\n                    >\n                      <Text mb={2}>\n                        Choose the action:\n                      </Text>\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('deposit');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'deposit' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'deposit'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:3\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Deposit\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('redeem');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'redeem' }\n                          isDisabled={ !this.state.canRedeem && !this.state.canRedeemCurve }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'redeem'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:3\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Redeem\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </Flex>\n                    {\n                      showAdvancedDepositOptions ? (\n                        <DashboardCard\n                          cardProps={{\n                            pt:2,\n                            px:2,\n                            mt:3,\n                            display:'flex',\n                            alignItems:'center',\n                            flexDirection:'column',\n                            justifyContent:'center',\n                            pb:this.state.showAdvancedOptions ? 3 : 2,\n                          }}\n                        >\n                          <Flex\n                            width={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <Link\n                              ml={1}\n                              mainColor={'primary'}\n                              hoverColor={'primary'}\n                              onClick={this.toggleShowAdvancedOptions}\n                            >\n                              { this.state.showAdvancedOptions ? 'Hide' : 'Show' } advanced options\n                            </Link>\n                            <Icon\n                              size={'1.8em'}\n                              color={'cellText'}\n                              name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                            />\n                          </Flex>\n                          {\n                            this.state.showAdvancedOptions &&\n                              <Flex\n                                mt={1}\n                                flexDirection={'column'}\n                              >\n                                {\n                                  showDepositCurve && \n                                    <Flex\n                                      alignItems={'center'}\n                                      justifyContent={'row'}\n                                    >\n                                      <Checkbox\n                                        required={false}\n                                        disabled={this.state.directMint}\n                                        label={`Deposit in the Curve Pool`}\n                                        checked={this.state.depositCurveEnabled}\n                                        onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                      />\n                                      <Link\n                                        mainColor={'primary'}\n                                        hoverColor={'primary'}\n                                        onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                      >\n                                        (read more)\n                                      </Link>\n                                    </Flex>\n                                }\n                                {\n                                  showRebalanceOption && \n                                    <Flex\n                                      alignItems={'center'}\n                                      justifyContent={'row'}\n                                    >\n                                      <Checkbox\n                                        required={false}\n                                        label={`Rebalance the pool`}\n                                        checked={this.state.directMint}\n                                        disabled={this.state.depositCurveEnabled}\n                                        onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                      />\n                                      <Tooltip\n                                        placement={'bottom'}\n                                        message={this.functionsUtil.getGlobalConfig(['messages','directMint'])}\n                                      >\n                                        <Icon\n                                          size={'1em'}\n                                          color={'cellTitle'}\n                                          name={\"InfoOutline\"}\n                                        />\n                                      </Tooltip>\n                                    </Flex>\n                                }\n                              </Flex>\n                          }\n                        </DashboardCard>\n                      ) : (\n                        <Flex\n                          width={1}\n                          flexDirection={'column'}\n                        >\n                          {\n                            showDepositCurve && (\n                              <Flex\n                                width={1}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <DashboardCard\n                                  isRainbow={true}\n                                  cardProps={{\n                                    py:3,\n                                    px:2,\n                                    mt:3,\n                                    display:'flex',\n                                    alignItems:'center',\n                                    flexDirection:'column',\n                                    justifyContent:'center',\n                                  }}\n                                >\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <Image\n                                      height={'1.8em'}\n                                      src={curveConfig.params.image}\n                                    />\n                                    <Text\n                                      mt={2}\n                                      px={2}\n                                      fontSize={1}\n                                      color={'dark-gray'}\n                                      textAlign={'center'}\n                                    >\n                                      Deposit your tokens in the Curve Pool and boost your APY up to {this.state.curveAPY ? this.state.curveAPY.toFixed(2) : '-'}%.\n                                      <Link\n                                        ml={1}\n                                        mainColor={'primary'}\n                                        hoverColor={'primary'}\n                                        onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                      >\n                                        Read More\n                                      </Link>\n                                    </Text>\n                                    <Checkbox\n                                      mt={2}\n                                      required={false}\n                                      label={`Deposit in Curve`}\n                                      checked={this.state.depositCurveEnabled}\n                                      onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                    />\n                                  </Flex>\n                                </DashboardCard>\n                                {\n                                  (!this.state.showBuyFlow && !this.state.depositCurveEnabled && !this.state.canDeposit) &&\n                                    <Link\n                                      textAlign={'center'}\n                                      hoverColor={'primary'}\n                                      onClick={ e => this.setShowBuyFlow(true) }\n                                    >\n                                      I just want to deposit more {this.props.selectedToken}\n                                    </Link>\n                                }\n                              </Flex>\n                            )\n                          }\n                          {\n                            showRebalanceOption && (\n                              <DashboardCard\n                                cardProps={{\n                                  py:3,\n                                  px:2,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    color={'cellText'}\n                                    name={'InfoOutline'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    px={2}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    By checking this flag you can rebalance the pool and help all users gain an additional APR\n                                  </Text>\n                                </Flex>\n                                <Checkbox\n                                  mt={2}\n                                  required={false}\n                                  label={`Rebalance the pool`}\n                                  checked={this.state.directMint}\n                                  onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                />\n                              </DashboardCard>\n                            )\n                          }\n                        </Flex>\n                      )\n                    }\n                    {\n                      (metaTransactionsAvailable && !showBuyFlow && !this.state.contractPaused) && \n                      <DashboardCard\n                        cardProps={{\n                          py:3,\n                          px:2,\n                          my:3,\n                          display:'flex',\n                          alignItems:'center',\n                          flexDirection:'column',\n                          justifyContent:'center',\n                        }}\n                      >\n                        {\n                          this.state.metaTransactionsEnabled && this.state.txError[this.state.action] && this.state.actionProxyContract[this.state.action].approved ? (\n                            <Flex\n                              width={1}\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <Icon\n                                size={'1.8em'}\n                                name={'Warning'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={1}\n                                fontSize={1}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                Seems like you are having some trouble with Meta-Transactions... Disable them by unchecking the box below and try again!\n                              </Text>\n                            </Flex>\n                          ) : this.functionsUtil.getWalletProvider() === 'WalletConnect' && this.state.metaTransactionsEnabled ? (\n                            <Flex\n                              width={1}\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <Icon\n                                size={'1.8em'}\n                                name={'Warning'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={1}\n                                fontSize={1}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                Please disable Meta-Transactions if you are using Argent Wallet to avoid failed transactions!\n                              </Text>\n                            </Flex>\n                          ) : (\n                            <Text\n                              mt={1}\n                              fontSize={1}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              Meta-Transactions are {this.state.metaTransactionsEnabled ? 'available' : 'disabled'} for {this.state.action}s!<br />\n                              {\n                                this.state.metaTransactionsEnabled && !this.state.actionProxyContract[this.state.action].approved && `Please either enable the Smart-Contract to enjoy gas-less ${this.state.action} or just disable meta-tx.`\n                              }\n                            </Text>\n                          )\n                        }\n                        <Checkbox\n                          mt={2}\n                          required={false}\n                          checked={this.state.metaTransactionsEnabled}\n                          onChange={ e => this.toggleMetaTransactionsEnabled(e.target.checked) }\n                          label={`${this.functionsUtil.capitalize(this.state.action)} with Meta-Transaction`}\n                        />\n                      </DashboardCard>\n                    }\n                    {\n                      showBatchDeposit &&\n                        <Flex\n                          p={2}\n                          mt={3}\n                          width={1}\n                          borderRadius={2}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'center'}\n                          backgroundColor={'white'}\n                          border={`1px solid ${this.props.theme.colors.primary}`}\n                        >\n                          <Link\n                            textAlign={'center'}\n                            hoverColor={'primary'}\n                            href={`/#/dashboard/tools/${batchDepositInfo.route}/${this.props.tokenConfig.idle.token}`}\n                          >\n                            Gas fees too high? Save gas with our Batch Deposit!\n                          </Link>\n                          <Icon\n                            ml={1}\n                            size={'1em'}\n                            color={'primary'}\n                            name={'LocalGasStation'}\n                          />\n                        </Flex>\n                    }\n                    {\n                      showRedeemCurve && this.state.canRedeem && (\n                        <Flex\n                          width={1}\n                          flexDirection={'column'}\n                          justifyContent={'center'}\n                        >\n                          <DashboardCard\n                            isRainbow={true}\n                            cardProps={{\n                              py:3,\n                              px:2,\n                              mt:3,\n                              display:'flex',\n                              alignItems:'center',\n                              flexDirection:'column',\n                              justifyContent:'center',\n                            }}\n                          >\n                            <Flex\n                              width={1}\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <Image\n                                height={'1.8em'}\n                                src={curveConfig.params.image}\n                              />\n                              <Text\n                                mt={2}\n                                px={2}\n                                fontSize={1}\n                                color={'dark-gray'}\n                                textAlign={'center'}\n                              >\n                                Redeem your tokens from the Curve Pool.\n                                <Link\n                                  ml={1}\n                                  mainColor={'primary'}\n                                  hoverColor={'primary'}\n                                  onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                >\n                                  Read More\n                                </Link>\n                              </Text>\n                              {\n                                this.state.canRedeem &&\n                                  <Checkbox\n                                    mt={2}\n                                    required={false}\n                                    label={`Redeem from Curve`}\n                                    checked={this.state.redeemCurveEnabled}\n                                    onChange={ e => this.toggleRedeemCurve(e.target.checked) }\n                                  />\n                              }\n                            </Flex>\n                          </DashboardCard>\n                          {\n                            this.canRedeem &&\n                              <Link\n                                textAlign={'center'}\n                                hoverColor={'primary'}\n                                onClick={ e => this.setShowRedeemFlow(true) }\n                              >\n                                I just want to redeem my {this.props.selectedToken}\n                              </Link>\n                          }\n                        </Flex>\n                      )\n                    }\n                    {\n                      (this.state.action === 'redeem' && this.state.unlentBalance && showRedeemFlow) &&\n                        <DashboardCard\n                          cardProps={{\n                            py:2,\n                            px:2,\n                            mt:3,\n                            display:'flex',\n                            alignItems:'center',\n                            flexDirection:'column',\n                            justifyContent:'center',\n                          }}\n                        >\n                          <Flex\n                            width={1}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Icon\n                              size={'1.8em'}\n                              color={'cellText'}\n                              name={'LocalGasStation'}\n                            />\n                            <Text\n                              px={2}\n                              fontSize={1}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              Available balance for Cheap Redeem\n                            </Text>\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                            >\n                              <Text\n                                fontSize={1}\n                                fontWeight={3}\n                                color={'dark-gray'}\n                                textAlign={'center'}\n                                hoverColor={'copyColor'}\n                              >\n                                {this.state.unlentBalance.toFixed(4)} {this.props.selectedToken}\n                              </Text>\n                              <Tooltip\n                                placement={'top'}\n                                message={this.functionsUtil.getGlobalConfig(['messages','cheapRedeem'])}\n                              >\n                                <Icon\n                                  ml={1}\n                                  size={'1em'}\n                                  color={'cellTitle'}\n                                  name={\"InfoOutline\"}\n                                />\n                              </Tooltip>\n                            </Flex>\n                          </Flex>\n                        </DashboardCard>\n                    }\n                    {\n                      (this.state.action === 'redeem' && redeemGovTokenEnabled && showRedeemFlow) && (\n                        <DashboardCard\n                          cardProps={{\n                            py:3,\n                            px:2,\n                            mt:3,\n                            display:'flex',\n                            alignItems:'center',\n                            flexDirection:'column',\n                            justifyContent:'center',\n                          }}\n                        >\n                          <Flex\n                            width={1}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Icon\n                              size={'1.8em'}\n                              color={'cellText'}\n                              name={'InfoOutline'}\n                            />\n                            <Text\n                              mt={1}\n                              px={2}\n                              fontSize={1}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              By redeeming your {this.props.selectedToken} you will automatically get also the proportional amount of governance tokens accrued{ this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~ $${this.props.govTokensBalance.toFixed(2)})` : null }.\n                            </Text>\n                          </Flex>\n                          <Checkbox\n                            mt={2}\n                            required={false}\n                            checked={this.state.redeemGovTokens}\n                            label={`Redeem governance tokens only`}\n                            onChange={ e => this.toggleRedeemGovTokens(e.target.checked) }\n                          />\n                        </DashboardCard>\n                      )\n                    }\n                    {\n                      (this.state.contractPaused && this.state.action === 'deposit') ? (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'1.8em'}\n                              name={'Warning'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={1}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              Deposits for {this.props.selectedToken} are temporarily unavailable due to Smart-Contract maintenance. Redeems are always available.\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      ) : (!this.state.tokenApproved && this.state.action === 'deposit') ? (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3\n                          }}\n                        >\n                          {\n                            this.state.processing['approve'] && this.state.processing['approve'].loading ? (\n                              <Flex\n                                flexDirection={'column'}\n                              >\n                                <TxProgressBar\n                                  web3={this.props.web3}\n                                  waitText={`Approve estimated in`}\n                                  endMessage={`Finalizing approve request...`}\n                                  hash={this.state.processing['approve'].txHash}\n                                  cancelTransaction={this.cancelTransaction.bind(this)}\n                                />\n                              </Flex>\n                            ) : (\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'LockOpen'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={3}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  {\n                                    this.state.depositCurveEnabled ? \n                                      `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.`\n                                    : useMetaTx ?\n                                      `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle using Meta-Transaction you need to approve our Smart-Contract first.`\n                                    :\n                                      `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle you need to approve our Smart-Contract first.`\n                                  }\n                                </Text>\n                                <RoundButton\n                                  buttonProps={{\n                                    mt:3,\n                                    width:[1,1/2]\n                                  }}\n                                  handleClick={this.approveToken.bind(this)}\n                                >\n                                  Approve\n                                </RoundButton>\n                              </Flex>\n                            )\n                          }\n                        </DashboardCard>\n                      ) : (!showBuyFlow && canPerformAction) && (\n                        !this.state.processing[this.state.action].loading ? (\n                          <Flex\n                            mt={2}\n                            flexDirection={'column'}\n                          >\n                            {\n                              showActionFlow && (\n                                <Flex\n                                  mb={3}\n                                  width={1}\n                                  flexDirection={'column'}\n                                >\n                                  {\n                                    /*\n                                    showCurveSlippage &&\n                                      <DashboardCard\n                                        cardProps={{\n                                          p:3,\n                                          mb:2\n                                        }}\n                                      >\n                                        <Flex\n                                          alignItems={'center'}\n                                          flexDirection={'column'}\n                                        >\n                                          <Icon\n                                            size={'1.8em'}\n                                            color={'cellText'}\n                                            name={'FileUpload'}\n                                          />\n                                          <Text\n                                            mt={2}\n                                            fontSize={2}\n                                            color={'cellText'}\n                                            textAlign={'center'}\n                                          >\n                                            You can deposit {this.state.depositCurveBalance.toFixed(4)} {this.props.selectedToken} in the Curve Pool{ this.state.depositCurveSlippage ? (this.state.depositCurveSlippage.gt(0) ? ` with ${this.state.depositCurveSlippage.times(100).toFixed(2)}% of slippage` : ` with ${Math.abs(parseFloat(this.state.depositCurveSlippage.times(100).toFixed(2)))}% of bonus`) : '' }.\n                                          </Text>\n                                        </Flex>\n                                      </DashboardCard>\n                                    */\n                                  }\n                                  {\n                                    (totalBalance || this.props.tokenFeesPercentage) && (\n                                      <Box\n                                        mb={1}\n                                        width={1}\n                                      >\n                                        {\n                                          this.state.showMaxSlippage && showCurveSlippage && (\n                                            <Box\n                                              mb={2}\n                                              width={1}\n                                            >\n                                              <Flex\n                                                alignItems={'center'}\n                                                flexDirection={'row'}\n                                              >\n                                                <Text>\n                                                  Choose max slippage:\n                                                </Text>\n                                                <Tooltip\n                                                  placement={'top'}\n                                                  message={`Max additional slippage on top of the one shown below`}\n                                                >\n                                                  <Icon\n                                                    ml={1}\n                                                    size={'1em'}\n                                                    color={'cellTitle'}\n                                                    name={\"InfoOutline\"}\n                                                  />\n                                                </Tooltip>\n                                              </Flex>\n                                              <Flex\n                                                mt={2}\n                                                alignItems={'center'}\n                                                flexDirection={'row'}\n                                                justifyContent={'space-between'}\n                                              >\n                                                {\n                                                  [0.2,0.5,1,5].map( slippage => (\n                                                    <FastBalanceSelector\n                                                      cardProps={{\n                                                        p:1\n                                                      }}\n                                                      textProps={{\n                                                        fontSize:1\n                                                      }}\n                                                      percentage={slippage}\n                                                      key={`selector_${slippage}`}\n                                                      onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                                      isActive={this.state.maxSlippage === parseFloat(slippage)}\n                                                    />\n                                                  ))\n                                                }\n                                              </Flex>\n                                            </Box>\n                                          )\n                                        }\n                                        <Flex\n                                          width={1}\n                                          alignItems={'center'}\n                                          flexDirection={'row'}\n                                          justifyContent={'space-between'}\n                                        >\n                                        {\n                                          showCurveSlippage ? (\n                                            <Flex\n                                              width={1}\n                                              maxWidth={'50%'}\n                                              alignItems={'center'}\n                                              flexDirection={'row'}\n                                            >\n                                              <Text\n                                                fontSize={1}\n                                                fontWeight={3}\n                                                textAlign={'right'}\n                                                style={{\n                                                  whiteSpace:'nowrap'\n                                                }}\n                                                color={ this.state.depositCurveSlippage.gt(0) ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                              >\n                                                {\n                                                  parseFloat(this.state.depositCurveSlippage.times(100).toFixed(2)) === 0 ?\n                                                    'No Slippage'\n                                                  : `${ this.state.depositCurveSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositCurveSlippage.times(100).abs().toFixed(2)}%`\n                                                }\n                                              </Text>\n                                              <Tooltip\n                                                placement={'top'}\n                                                message={this.functionsUtil.getGlobalConfig(['messages','curveBonusSlippage'])}\n                                              >\n                                                <Icon\n                                                  ml={1}\n                                                  size={'1em'}\n                                                  color={'cellTitle'}\n                                                  name={\"InfoOutline\"}\n                                                />\n                                              </Tooltip>\n                                              <Link\n                                                ml={1}\n                                                color={'copyColor'}\n                                                hoverColor={'primary'}\n                                                onClick={this.showMaxSlippage}\n                                              >\n                                                change\n                                              </Link>\n                                            </Flex>\n                                          ) : this.props.tokenFeesPercentage && (\n                                            <Flex\n                                              alignItems={'center'}\n                                              flexDirection={'row'}\n                                            >\n                                              <Text\n                                                fontSize={1}\n                                                fontWeight={3}\n                                                color={'dark-gray'}\n                                                textAlign={'right'}\n                                                hoverColor={'copyColor'}\n                                              >\n                                                Performance fee: {this.props.tokenFeesPercentage.times(100).toFixed(2)}%\n                                              </Text>\n                                              <Tooltip\n                                                placement={'top'}\n                                                message={this.functionsUtil.getGlobalConfig(['messages','performanceFee'])}\n                                              >\n                                                <Icon\n                                                  ml={1}\n                                                  size={'1em'}\n                                                  color={'cellTitle'}\n                                                  name={\"InfoOutline\"}\n                                                />\n                                              </Tooltip>\n                                            </Flex>\n                                          )\n                                        }\n                                        {\n                                          totalBalance && (\n                                            <Link\n                                              fontSize={1}\n                                              fontWeight={3}\n                                              color={'dark-gray'}\n                                              textAlign={'right'}\n                                              hoverColor={'copyColor'}\n                                              onClick={ (e) => this.setFastBalanceSelector(100) }\n                                            >\n                                              {totalBalance.toFixed(6)} {this.props.selectedToken}\n                                            </Link>\n                                          )\n                                        }\n                                        </Flex>\n                                      </Box>\n                                    )\n                                  }\n                                  <Input\n                                    min={0}\n                                    type={\"number\"}\n                                    required={true}\n                                    height={'3.4em'}\n                                    borderRadius={2}\n                                    fontWeight={500}\n                                    boxShadow={'none !important'}\n                                    placeholder={`Insert amount`}\n                                    onChange={this.changeInputValue.bind(this)}\n                                    border={`1px solid ${theme.colors.divider}`}\n                                    value={this.state.inputValue[this.state.action] !== null ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]).toFixed() : ''}\n                                  />\n                                  <Flex\n                                    mt={2}\n                                    alignItems={'center'}\n                                    flexDirection={'row'}\n                                    justifyContent={'space-between'}\n                                  >\n                                    {\n                                      [25,50,75,100].map( percentage => (\n                                        <FastBalanceSelector\n                                          percentage={percentage}\n                                          key={`selector_${percentage}`}\n                                          onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                          isActive={this.state.fastBalanceSelector[this.state.action] === parseInt(percentage)}\n                                        />\n                                      ))\n                                    }\n                                  </Flex>\n                                </Flex>\n                              )\n                            }\n                            {\n                              canPerformAction && \n                                <Flex\n                                  justifyContent={'center'}\n                                  mt={ redeemGovTokens ? 2 : 0 }\n                                >\n                                  <RoundButton\n                                    buttonProps={{\n                                      width:'auto',\n                                      minWidth:[1,1/2],\n                                      style:{\n                                        textTransform:'capitalize'\n                                      },\n                                      disabled:this.state.buttonDisabled\n                                    }}\n                                    handleClick={this.state.buttonDisabled ? null : this.executeAction.bind(this) }\n                                  >\n                                    {this.state.action}{ redeemGovTokens ? ' Gov Tokens' : '' /*(depositCurve ? ' in Curve' : '')*/ }\n                                  </RoundButton>\n                                </Flex>\n                            }\n                          </Flex>\n                        ) : (\n                          <Flex\n                            mt={4}\n                            flexDirection={'column'}\n                          >\n                            <TxProgressBar\n                              web3={this.props.web3}\n                              cancelTransaction={this.cancelTransaction.bind(this)}\n                              hash={this.state.processing[this.state.action].txHash}\n                              endMessage={`Finalizing ${this.state.action} request...`}\n                              waitText={`${this.functionsUtil.capitalize(this.state.action)} estimated in`}\n                            />\n                          </Flex>\n                        )\n                      )\n                    }\n                  </Box>\n                ) : null\n              ) : (\n                <Flex\n                  mt={4}\n                  flexDirection={'column'}\n                >\n                  <FlexLoader\n                    flexProps={{\n                      flexDirection:'row'\n                    }}\n                    loaderProps={{\n                      size:'30px'\n                    }}\n                    textProps={{\n                      ml:2\n                    }}\n                    text={'Loading asset info...'}\n                  />\n                </Flex>\n              )\n            }\n          </Migrate>\n        </Flex>\n        {\n          /*\n          showDepositCurve && this.state.depositCurveEnabled ? (\n            <CurveDeposit\n              {...this.props}\n            />\n          ) :\n          */\n          showRedeemCurve && this.state.redeemCurveEnabled && (\n            <Box\n              mt={3}\n              width={1}\n            >\n              <CurveRedeem\n                {...this.props}\n              />\n            </Box>\n          )\n        }\n        {\n          showBuyFlow &&\n            <Flex\n              mt={3}\n              width={[1,0.5]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <BuyModal\n                {...this.props}\n                showInline={true}\n                availableMethods={[]}\n                buyToken={this.props.selectedToken}\n              />\n            </Flex>\n        }\n\n        <ShareModal\n          confettiEnabled={true}\n          icon={`images/medal.svg`}\n          title={`Congratulations!`}\n          account={this.props.account}\n          closeModal={this.resetModal}\n          tokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'share'}\n          text={`You have successfully deposited in Idle!<br />Enjoy <strong>${this.state.tokenAPY}% APY</strong> on your <strong>${this.props.selectedToken}</strong>!`}\n          tweet={`I'm earning ${this.state.tokenAPY}% APY on my ${this.props.selectedToken} with @idlefinance! Go to ${this.functionsUtil.getGlobalConfig(['baseURL'])} and start earning now from your idle tokens!`}\n        />\n\n      </Flex>\n    );\n  }\n}\n\nexport default DepositRedeem;\n"],"sourceRoot":""}