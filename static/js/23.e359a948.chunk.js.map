{"version":3,"sources":["utilities/components/UpgradeModal.js"],"names":["UpgradeModal","props","_this","Object","_Users_samuelecester_Desktop_git_idle_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","_Users_samuelecester_Desktop_git_idle_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_samuelecester_Desktop_git_idle_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","dontShowAgain","functionsUtil","componentDidUpdate","_Users_samuelecester_Desktop_git_idle_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_Users_samuelecester_Desktop_git_idle_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","wrap","_context","prev","next","loadUtils","stop","closeModal","_callee2","_context2","getGlobalConfig","sendGoogleAnalyticsEvent","eventCategory","eventAction","eventLabel","toggleDontShowAgain","setLocalStorage","removeStoredItem","setState","migrate","_ref3","_callee3","token","strategy","_args3","arguments","_context3","length","undefined","selectedStrategy","concat","goToSection","_x","apply","convert","_ref4","_callee4","convertTool","_context4","route","_x2","setProps","FunctionsUtil","_this2","availableStrategies","availableTokens","fieldProps","fontWeight","fontSize","color","flexProps","justifyContent","react__WEBPACK_IMPORTED_MODULE_7___default","createElement","rimble_ui__WEBPACK_IMPORTED_MODULE_12__","isOpen","_ModalCard__WEBPACK_IMPORTED_MODULE_8__","maxWidth","closeFunc","Header","icon","title","iconHeight","Body","mb","width","flexDirection","my","textAlign","mt","alignItems","isMobile","tokensToMigrate","keys","map","tokenKey","tokenConfig","balance","oldContractBalanceFormatted","key","_AssetField_AssetField__WEBPACK_IMPORTED_MODULE_10__","fieldInfo","name","mr","height","idle","_SmartNumber_SmartNumber__WEBPACK_IMPORTED_MODULE_11__","assign","minPrecision","number","_RoundButton_RoundButton_js__WEBPACK_IMPORTED_MODULE_14__","handleClick","e","buttonProps","size","className","header_styles","gradientButton","oldIdleTokensToMigrate","newTokenConfig","baseToken","required","checked","label","onChange","target","React","Component"],"mappings":"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","file":"static/js/23.e359a948.chunk.js","sourcesContent":["import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass UpgradeModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'close_upgrade_modal',\n        eventLabel: 'UpgradeModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowUpgradeModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowUpgradeModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = async (token,strategy=null) => {\n\n    if (!strategy){\n      strategy = this.props.selectedStrategy;\n    }\n\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  convert = async (token) => {\n    const convertTool = this.functionsUtil.getGlobalConfig(['tools','tokenMigration']);\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n\n    if (!this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            icon={`images/migrate.svg`}\n            title={'Upgrade Available'}\n            iconHeight={['35px','40px']}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={[2,3]}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                Idle now supports yield farming and governance tokens distribution, migrate now your portfolio with just one click!\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n              >\n                <Flex\n                  fontSize={[2,3]}\n                  width={[0.5,0.28]}\n                  fontWeight={[4,5]}\n                  color={'copyColor'}\n                >\n                  {\n                    this.props.isMobile ? 'ASSET' : 'ASSET TO MIGRATE'\n                  }\n                </Flex>\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      BALANCE\n                    </Flex>\n                  )\n                }\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      OLD APY\n                    </Flex>\n                  )\n                }\n                <Flex\n                  fontSize={[2,3]}\n                  fontWeight={[4,5]}\n                  width={[0.25,0.19]}\n                  color={'copyColor'}\n                  justifyContent={'center'}\n                >\n                  {\n                    this.props.isMobile ? 'APY' : 'NEW APY'\n                  }\n                </Flex>\n                <Flex\n                  width={[0.25,0.15]}\n                >\n                  \n                </Flex>\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.tokensToMigrate && Object.keys(this.props.tokensToMigrate).map( tokenKey => {\n                    const token = this.props.tokensToMigrate[tokenKey].token;\n                    const strategy = this.props.tokensToMigrate[tokenKey].strategy;\n                    const tokenConfig = this.props.tokensToMigrate[tokenKey].tokenConfig;\n                    const balance = this.props.tokensToMigrate[tokenKey].oldContractBalanceFormatted;\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${tokenKey}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={[0.5,0.28]}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:['1.8em','2.3em']\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                        </Flex>\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <SmartNumber\n                                {...fieldProps}\n                                minPrecision={5}\n                                number={balance}\n                                flexProps={{\n                                  justifyContent:'center'\n                                }}\n                              />\n                            </Flex>\n                          )\n                        }\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <AssetField\n                                {...this.props}\n                                fieldInfo={{\n                                  name:'oldApy',\n                                  props:fieldProps\n                                }}\n                                token={token}\n                                tokenConfig={tokenConfig}\n                              />\n                            </Flex>\n                          )\n                        }\n                        <Flex\n                          width={[0.25,0.19]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={token}\n                            tokenConfig={tokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={[0.25,0.15]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.migrate(token,strategy) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.oldIdleTokensToMigrate && Object.keys(this.props.oldIdleTokensToMigrate).map( token => {\n                    const tokenConfig = this.props.oldIdleTokensToMigrate[token].tokenConfig;\n\n                    if (!tokenConfig){\n                      return null;\n                    }\n\n                    const balance = this.props.oldIdleTokensToMigrate[token].balance;\n                    let newTokenConfig = null;\n\n                    if (tokenConfig.availableStrategies && !this.props.availableTokens[tokenConfig.baseToken]){\n                      newTokenConfig = this.props.availableStrategies[tokenConfig.availableStrategies[0]][tokenConfig.baseToken];\n                    } else {\n                      newTokenConfig = this.props.availableTokens[tokenConfig.baseToken];\n                    }\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${token}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={0.28}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:'2.3em'\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <SmartNumber\n                            {...fieldProps}\n                            minPrecision={5}\n                            number={balance}\n                            flexProps={{\n                              justifyContent:'center'\n                            }}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'oldApy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.15}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.convert(token) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                my={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <RoundButton\n                  handleClick={this.closeModal}\n                  buttonProps={{\n                    fontSize:[2,3],\n                    width:['100%','40%'],\n                  }}\n                >\n                  MIGRATE LATER\n                </RoundButton>\n                {\n                  <Checkbox\n                    mt={2}\n                    required={false}\n                    color={'mid-gray'}\n                    checked={this.state.dontShowAgain}\n                    label={`Don't show this popup again`}\n                    onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                  />\n                }\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default UpgradeModal;"],"sourceRoot":""}