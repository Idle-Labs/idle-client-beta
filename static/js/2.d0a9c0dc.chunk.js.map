{"version":3,"sources":["TransactionListFilters/TransactionListFilters.js","TransactionsList/TransactionsList.js","TableCellHeader/TableCellHeader.js","TableRow/TableRow.js","TableHeader/TableHeader.js","TableCellHeader/TableCellHeader.module.scss","TransactionListFilters/TransactionListFilters.module.scss"],"names":["TransactionListFilters","state","maxWidth","minWidth","maxHeight","isOpened","activeFilters","status","assets","actions","setFilter","filter","value","_this","setState","prevState","Object","objectSpread","defineProperty","applyFilters","toggle","arguments","length","undefined","props","toggleOpened","resetFilter","resetFilters","_this2","this","react_default","a","createElement","index_es","mb","top","width","zIndex","flexDirection","alignItems","justifyContent","position","DashboardCard","cardProps","py","px","style","transition","isInteractive","handleClick","cursor","onClick","fontSize","fontWeight","color","size","isMobile","name","overflow","mt","borderTop","concat","theme","colors","divider","keys","filters","map","filterCategory","filterValues","key","flexBasis","flex","TableCellHeader","pb","toUpperCase","filterValue","filterLabel","isChecked","my","label","checked","className","styles","radioBtn","onChange","e","Text","mainColor","ml","values","v","filterName","mr","textTransform","hoverColor","textAlign","Component","TransactionsList","page","prevTxs","txsPerPage","loading","totalTxs","totalPages","deposit","redeem","send","receive","migrate","swap","swapout","withdraw","completed","pending","failed","renderedTxs","processedTxs","lastBlockNumber","functionsUtil","processTxs","availableActions","action","toLowerCase","txsIndexes","tx","parseFloat","token","includes","sort","b","timeStamp","Math","ceil","forEach","i","selectedToken","tokenConfig","availableTokens","decimals","min","date","Date","getTxAction","parsedValue","tokenAmount","amount","toFixed","momentDate","strToMoment","push","setProps","FunctionsUtil","preventDefault","max","loadUtils","loadTxs","prevProps","transactionsChanged","JSON","stringify","transactions","enabledTokens","count","account","firstBlockNumber","getGlobalConfig","enabledActions","getEtherscanTxs","etherscanTxs","hashKey","lastTx","pop","blockNumber","parseInt","_this3","_this4","hasActiveFilters","m","FlexLoader","flexProps","minHeight","height","loaderProps","textProps","text","id","pt","src_TransactionListFilters_TransactionListFilters","assign","bind","TableHeader","cols","index","txHash","hash","txHashKey","TableRow","rowProps","transaction","window","open","rowId","cardId","fieldComponent","TransactionField","prevPage","nextPage","h3","fontFamily","ColTitle","react__WEBPACK_IMPORTED_MODULE_5___default","rimble_ui__WEBPACK_IMPORTED_MODULE_7__","h4","whiteSpace","lineHeight","children","desc","openTooltipModal","title","placement","message","tooltip","FieldComponent","react__WEBPACK_IMPORTED_MODULE_6___default","_DashboardCard_DashboardCard__WEBPACK_IMPORTED_MODULE_7__","rimble_ui__WEBPACK_IMPORTED_MODULE_5__","colInfo","colIndex","visible","mobile","parentProps","fields","fieldInfo","fieldIndex","colProps","parentId","_TableCellHeader_TableCellHeader__WEBPACK_IMPORTED_MODULE_7__","module","exports"],"mappings":"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","file":"static/js/2.d0a9c0dc.chunk.js","sourcesContent":["import theme from '../theme';\nimport React, { Component } from 'react';\nimport styles from './TransactionListFilters.module.scss';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport TableCellHeader from '../TableCellHeader/TableCellHeader';\nimport { Flex, Text, Icon, Radio, Button, Link } from \"rimble-ui\";\n\nclass TransactionListFilters extends Component {\n\n  state = {\n    maxWidth:0.4,\n    minWidth:0.18,\n    maxHeight:425,\n    isOpened:false,\n    activeFilters:{\n      status:null,\n      assets:null,\n      actions:null\n    }\n  }\n\n  setFilter = (filter,value) => {\n    this.setState((prevState) => ({\n      activeFilters:{\n        ...prevState.activeFilters,\n        [filter]:value\n      }\n    }));\n  }\n\n  applyFilters = (toggle=true) => {\n    if (typeof this.props.applyFilters === 'function'){\n      this.props.applyFilters(this.state.activeFilters);\n    }\n    if (toggle){\n      this.toggleOpened();\n    }\n  }\n\n  resetFilter = (filter) => {\n    this.setState((prevState) => ({\n      activeFilters:{\n        ...prevState.activeFilters,\n        [filter]:null\n      }\n    }),() => {\n      this.applyFilters(false);\n    });\n  }\n\n  resetFilters = (toggle=true) => {\n    this.setState({\n      activeFilters:{\n        status:null,\n        assets:null,\n        actions:null\n      }\n    },() => {\n      if (typeof this.props.resetFilters === 'function'){\n        this.props.resetFilters();\n      }\n      if (toggle){\n        this.toggleOpened();\n      }\n    })\n  }\n\n  toggleOpened = () => {\n    this.setState((prevState) => ({\n      isOpened: !prevState.isOpened\n    }));\n  }\n\n  render() {\n    return (\n      <Flex\n        mb={3}\n        top={0}\n        width={1}\n        zIndex={1}\n        flexDirection={'column'}\n        alignItems={'flex-start'}\n        justifyContent={'center'}\n        position={['relative','absolute']}\n      >\n        <DashboardCard\n          cardProps={{\n            py:2,\n            px:3,\n            width:[1, this.state.isOpened ? this.state.maxWidth : this.state.minWidth ],\n            style:{\n              transition:'width 0.3s ease-in-out'\n            }\n          }}\n          isInteractive={ !this.state.isOpened }\n          handleClick={ !this.state.isOpened ? this.toggleOpened : null }\n        >\n          <Flex\n            width={1}\n            style={{\n              cursor:'pointer'\n            }}\n            alignItems={'center'}\n            flexDirection={'row'}\n            justifyContent={'space-between'}\n            onClick={ this.state.isOpened ? this.toggleOpened : null }\n          >\n            <Text\n              fontSize={2}\n              fontWeight={500}\n              color={'copyColor'}\n            >\n              Filters\n            </Text>\n            <Icon\n              color={'copyColor'}\n              size={ this.props.isMobile ? '1.3em' : '1.5em'}\n              name={ this.state.isOpened ? 'Close' : 'Tune' }\n            />\n          </Flex>\n          <Flex\n            flexDirection={'column'}\n            style={{\n              overflow:'hidden',\n              transition:'max-height 0.3s ease-in-out',\n              maxHeight:this.state.isOpened ? this.state.maxHeight : 0\n            }}\n          >\n            <Flex\n              mt={2}\n              py={2}\n              width={1}\n              flexDirection={'row'}\n              borderTop={`1px solid ${theme.colors.divider}`}\n            >\n              {\n                Object.keys(this.props.filters).map((filterCategory) => {\n                  const filterValues = this.props.filters[filterCategory];\n                  return (\n                    <Flex\n                      flexDirection={'column'}\n                      key={`filter_${filterCategory}`}\n                      style={{\n                        flexBasis:'0',\n                        flex:'1 1 0px'\n                      }}\n                    >\n                      <TableCellHeader\n                        pb={2}\n                        fontWeight={3}\n                        fontSize={[0,2]}\n                        color={'cellText'}\n                      >\n                        {filterCategory.toUpperCase()}\n                      </TableCellHeader>\n                      {\n                        Object.keys(filterValues).map((filterValue) => {\n                          const filterLabel = filterValues[filterValue];\n                          const isChecked = this.state.activeFilters[filterCategory]===filterValue;\n                          return (\n                            <Radio\n                              my={2}\n                              fontSize={[0,2]}\n                              label={filterLabel}\n                              checked={isChecked}\n                              className={styles.radioBtn}\n                              key={`filter_${filterCategory}_${filterValue}`}\n                              onChange={ e => this.setFilter(filterCategory,filterValue) }\n                            />\n                          );\n                        })\n                      }\n                    </Flex>\n                  );\n                })\n              }\n            </Flex>\n            <Flex\n              flexDirection={'row'}\n            >\n              <Button.Text\n                fontWeight={4}\n                fontSize={[2,3]}\n                mainColor={'copyColor'}\n                onClick={this.applyFilters}\n              >\n                Apply filters\n              </Button.Text>\n              <Button.Text\n                ml={3}\n                fontWeight={4}\n                fontSize={[2,3]}\n                mainColor={'copyColor'}\n                onClick={this.resetFilters}\n              >\n                Reset\n              </Button.Text>\n            </Flex>\n          </Flex>\n        </DashboardCard>\n        {\n          !this.state.isOpened && this.props.activeFilters && Object.values(this.props.activeFilters).filter( v => (v !== null) ).length>0 &&\n            <Flex\n              mt={3}\n              width={1}\n              flexDirection={['column','row']}\n              alignItems={['flex-start','flex-end']}\n              justifyContent={['flex-end','flex-start']}\n            >\n              {\n                Object.keys(this.props.activeFilters).map((filterName) => {\n                  const filterValue = this.props.activeFilters[filterName];\n                  if (filterValue !== null){\n                    const filterLabel = this.props.filters[filterName][filterValue];\n                    return (\n                      <DashboardCard\n                        cardProps={{\n                          py:2,\n                          px:3,\n                          mb:[2,0],\n                          mr:[0,3],\n                          width:[1,this.state.minWidth]\n                        }}\n                        isInteractive={true}\n                        key={`filter_${filterName}`}\n                      >\n                        <Flex\n                          width={1}\n                          style={{\n                            cursor:'pointer'\n                          }}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'space-between'}\n                          onClick={e => this.resetFilter(filterName)}\n                        >\n                          <Text\n                            fontSize={2}\n                            fontWeight={500}\n                            color={'cellText'}\n                            style={{\n                              textTransform:'capitalize'\n                            }}\n                          >\n                            {filterLabel}\n                          </Text>\n                          <Icon\n                            name={'Close'}\n                            color={'cellText'}\n                            size={ this.props.isMobile ? '1.3em' : '1.5em'}\n                          />\n                        </Flex>\n                      </DashboardCard>\n                    );\n                  }\n                  return null;\n                })\n              }\n              <Link\n                mt={[2,0]}\n                fontSize={[3,2]}\n                fontWeight={[3]}\n                color={'dark-gray'}\n                hoverColor={'copyColor'}\n                textAlign={['center','left']}\n                onClick={ e => this.resetFilters(false) }\n              >\n                Clear all filters\n              </Link>\n            </Flex>\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default TransactionListFilters;","import React, { Component } from 'react';\n// import style from './TransactionsList.module.scss';\nimport TableRow from '../TableRow/TableRow';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport TableHeader from '../TableHeader/TableHeader';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport { Flex, Heading, Text, Link, Icon } from \"rimble-ui\";\nimport TransactionField from '../TransactionField/TransactionField';\nimport TransactionListFilters from '../TransactionListFilters/TransactionListFilters';\n\nclass TransactionsList extends Component {\n\n  state = {\n    page:1,\n    prevTxs:{},\n    txsPerPage:5,\n    loading:false,\n    totalTxs:null,\n    totalPages:null,\n    activeFilters:{\n      status:null,\n      assets:null,\n      actions:null,\n    },\n    filters:{\n      actions:{\n        deposit:'Deposit',\n        redeem:'Redeem',\n        send:'Send',\n        receive:'Receive',\n        migrate:'Migrate',\n        swap:'Swap-In',\n        swapout:'Swap-Out',\n        withdraw:'Withdraw',\n        // curvein:'CurveIn',\n        // curveout:'CurveOut',\n        // curvezapin:'CurveZapIn',\n        // curvezapout:'CurveZapOut',\n      },\n      status:{\n        completed:'Completed',\n        pending:'Pending',\n        failed:'Failed'\n      },\n      assets:{}\n    },\n    renderedTxs:null,\n    processedTxs:null,\n    lastBlockNumber:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  prevPage(e){\n    if (e){\n      e.preventDefault();\n    }\n    const page = Math.max(1,this.state.page-1);\n    this.setState({\n      page\n    });\n  }\n\n  nextPage(e){\n    if (e){\n      e.preventDefault();\n    }\n    const page = Math.min(this.state.totalPages,this.state.page+1);this.processTxs(page);\n    this.setState({\n      page\n    });\n  }\n\n  async componentDidMount(){\n    this.loadUtils();\n    this.loadTxs();\n  }\n\n  applyFilters = activeFilters => {\n    this.setState({\n      activeFilters\n    },() => {\n      this.processTxs();\n    });\n  }\n\n  resetFilters = () => {\n    this.setState({\n      activeFilters:{\n        status:null,\n        assets:null,\n        actions:null,\n      }\n    },() => {\n      this.processTxs();\n    });\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const transactionsChanged = JSON.stringify(prevProps.transactions) !== JSON.stringify(this.props.transactions);\n    const tokenChanged = JSON.stringify(prevProps.enabledTokens) !== JSON.stringify(this.props.enabledTokens);\n\n    if (tokenChanged || transactionsChanged){\n      this.setState({\n        page:1,\n        prevTxs:{}\n      },()=>{\n        this.loadTxs();\n      })\n      return false;\n    }\n    const pageChanged = prevState.page !== this.state.page;\n    if (pageChanged){\n      this.processTxs();\n    }\n  }\n\n  async loadTxs(count,endBlockNumber='latest'){\n    if (!this.props.account){\n      return false;\n    }\n\n    count = count ? count : 0;\n\n    this.setState({\n      loading:true\n    });\n\n    const firstBlockNumber = this.functionsUtil.getGlobalConfig(['network','firstBlockNumber']);\n\n    // Take last block number, is null take first block number\n    let prevTxs = {...this.state.prevTxs};\n    let lastBlockNumber = Math.max(firstBlockNumber,this.state.lastBlockNumber);\n\n    let enabledTokens = this.props.enabledTokens;\n    if (!enabledTokens || !enabledTokens.length){\n      enabledTokens = Object.keys(this.props.availableTokens);\n    }\n\n    const assets = {...this.state.filters.assets};\n\n    enabledTokens.forEach((token) => {\n      assets[token] = token;\n    });\n\n    let actions = {...this.state.filters.actions};\n    \n    const enabledActions = typeof this.props.enabledActions !== 'undefined' ? this.props.enabledActions : [];\n\n    if (enabledActions.length){\n      actions = {};\n      enabledActions.forEach( action => {\n        actions[action.toLowerCase()] = action;\n      });\n    }\n\n    const etherscanTxs = await this.functionsUtil.getEtherscanTxs(this.props.account,lastBlockNumber,'latest',enabledTokens);\n\n    // Merge new txs with previous ones\n    if (etherscanTxs && etherscanTxs.length){\n      etherscanTxs.forEach((tx) => {\n        if (tx.hashKey){\n          prevTxs[tx.hashKey] = tx;\n        } else {\n          prevTxs[`t${tx.timeStamp}`] = tx;\n        }\n      });\n    }\n\n    const lastTx = Object.values(prevTxs).pop();\n\n    // Update last block number\n    if (lastTx && lastTx.blockNumber && (!this.state.lastBlockNumber || lastTx.blockNumber>this.state.lastBlockNumber)){\n      lastBlockNumber = parseInt(lastTx.blockNumber)+1;\n    }\n\n    return this.setState( prevState => ({\n      prevTxs,\n      loading:false,\n      lastBlockNumber,\n      filters:{\n        ...prevState.filters,\n        assets,\n        actions\n      }\n    }), () => {\n      this.processTxs()\n    });\n  };\n\n  processTxs = (page=null) => {\n\n    page = page ? page : this.state.page;\n\n    const availableActions = Object.keys(this.state.filters.actions).map( action => (action.toLowerCase()) );\n\n    // Sort prevTxs by timeStamp\n    const txsIndexes = Object.values(this.state.prevTxs)\n                        .filter(tx => (!!parseFloat(tx.value))) // Filter txs with value\n                        .filter(tx => (\n                          (this.state.activeFilters.status === null || tx.status.toLowerCase() === this.state.activeFilters.status.toLowerCase()) && \n                          (this.state.activeFilters.assets === null || tx.token.toLowerCase() === this.state.activeFilters.assets.toLowerCase()) &&\n                          ( availableActions.includes(tx.action.toLowerCase()) && (this.state.activeFilters.actions === null || (tx.action.toLowerCase() === this.state.activeFilters.actions.toLowerCase()) ))\n                        )) // Filter by activeFilters\n                        .sort((a,b) => (a.timeStamp > b.timeStamp) ? -1 : 1 );\n\n    // Calculate max number of pages\n    const totalTxs = txsIndexes.length;\n    const totalPages = Math.ceil(totalTxs/this.state.txsPerPage);\n\n    const processedTxs = [];\n\n    // console.log(this.state.prevTxs,txsIndexes);\n\n    txsIndexes.forEach((tx, i) => {\n      const selectedToken = tx.token;\n      const tokenConfig = this.props.availableTokens[selectedToken];\n      const decimals = Math.min(tokenConfig.decimals,8);\n      \n      const date = new Date(tx.timeStamp*1000);\n      const action = tx.action ? tx.action : this.functionsUtil.getTxAction(tx,tokenConfig);\n\n      const parsedValue = parseFloat(tx.tokenAmount);\n\n      const amount = parsedValue ? (this.props.isMobile ? parsedValue.toFixed(4) : parsedValue.toFixed(decimals)) : '-';\n      const momentDate = this.functionsUtil.strToMoment(date);\n\n      // Save new params\n      tx.status = tx.status ? tx.status : 'Completed';\n      tx.action = action;\n      tx.momentDate = momentDate;\n      tx.amount = amount;\n\n      if (i>=((page-1)*this.state.txsPerPage) && i<((page-1)*this.state.txsPerPage)+this.state.txsPerPage) {\n        processedTxs.push(tx);\n      }\n    });\n\n    // console.log('processedTxs',this.state.page,txsIndexes,processedTxs);\n\n    const loading = false;\n  \n    this.setState({\n      loading,\n      totalTxs,\n      totalPages,\n      processedTxs\n    });\n  }\n\n  render() {\n\n    const hasActiveFilters = Object.values(this.state.activeFilters).filter( v => (v !== null) ).length>0;\n\n    // console.log('processedTxs',this.state.processedTxs);\n    const processedTxs = this.state.processedTxs ? Object.values(this.state.processedTxs) : null;\n\n    return (\n      <Flex flexDirection={'column'} width={1} m={'0 auto'}>\n        {\n          this.state.loading ? (\n            <FlexLoader\n              flexProps={{\n                flexDirection:'row',\n                minHeight:this.props.height\n              }}\n              loaderProps={{\n                size:'30px'\n              }}\n              textProps={{\n                ml:2\n              }}\n              text={'Loading transactions...'}\n            />\n          ) : (\n            <Flex\n              width={1}\n              position={'relative'}\n              flexDirection={'column'}\n              id={'transactions-list-container'}\n              pt={[0, hasActiveFilters ? '116px' : 5]}\n            >\n              <TransactionListFilters\n                {...this.props}\n                filters={this.state.filters}\n                activeFilters={this.state.activeFilters}\n                resetFilters={this.resetFilters.bind(this)}\n                applyFilters={this.applyFilters.bind(this)}\n              />\n              {\n                processedTxs && processedTxs.length ? (\n                  <Flex\n                    width={1}\n                    flexDirection={'column'}\n                  >\n                    <TableHeader\n                      cols={this.props.cols}\n                      isMobile={this.props.isMobile}\n                    />\n                    <Flex\n                      id={'transactions-list'}\n                      flexDirection={'column'}\n                    >\n                      {\n                        processedTxs.map( (tx,index) => {\n                          const txHash = tx.hash;\n                          const txHashKey = tx.hashKey;\n                          const handleClick = (e) => {\n                            return (txHash ? window.open(`https://etherscan.io/tx/${txHash}`) : null);\n                          };\n\n                          return (\n                            <TableRow\n                              {...this.props}\n                              rowProps={{\n                                isInteractive:true\n                              }}\n                              hash={txHash}\n                              transaction={tx}\n                              key={`tx-${index}`}\n                              handleClick={handleClick}\n                              rowId={`tx-col-${txHashKey}`}\n                              cardId={`tx-card-${txHashKey}`}\n                              fieldComponent={TransactionField}\n                            />\n                          );\n                        })\n                      }\n                    </Flex>\n                    <Flex\n                      height={'50px'}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      justifyContent={'flex-end'}\n                      id={'transactions-list-pagination'}\n                    >\n                      <Flex mr={3}>\n                        <Link mr={1} onClick={ e => this.prevPage(e) }>\n                          <Icon\n                            name={'KeyboardArrowLeft'}\n                            size={'2em'}\n                            color={ this.state.page>1 ? '#4f4f4f' : '#d8d8d8' }\n                          />\n                        </Link>\n                        <Link onClick={ e => this.nextPage(e) }>\n                          <Icon\n                            name={'KeyboardArrowRight'}\n                            size={'2em'}\n                            color={ this.state.page<this.state.totalPages ? '#4f4f4f' : '#d8d8d8' }\n                          />\n                        </Link>\n                      </Flex>\n                      <Flex alignItems={'center'}>\n                        <Text \n                          fontSize={1}\n                          fontWeight={3}\n                          color={'cellText'}\n                        >\n                          Page {this.state.page} of {this.state.totalPages}\n                        </Text>\n                      </Flex>\n                    </Flex>\n                  </Flex>\n                ) : (\n                  <Heading.h3 textAlign={'center'} fontFamily={'sansSerif'} fontWeight={2} fontSize={[2]} color={'dark-gray'}>\n                    There are no transactions\n                  </Heading.h3>\n                )\n              }\n            </Flex>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default TransactionsList;\n","import React, { Component } from 'react';\nimport styles from './TableCellHeader.module.scss';\nimport { Flex, Heading, Icon, Link, Tooltip } from \"rimble-ui\";\n\nclass TableCellHeader extends Component {\n  render() {\n\n    const ColTitle = (props) => (\n      <Heading.h4\n        fontWeight={[3,4]}\n        color={'cellTitle'}\n        style={{\n          width:'100%',\n          whiteSpace:'nowrap'\n        }}\n        fontSize={['10px',3]}\n        lineHeight={'initial'}\n        {...props}\n      >\n        {props.children}\n      </Heading.h4>\n    );\n\n    return (\n      <Flex\n        width={this.props.width}\n      >\n        {\n          (this.props.desc && this.props.desc.length>1) ? (\n            <Flex\n              alignItems={'center'}\n            >\n              <ColTitle\n                {...this.props}\n              />\n              <Link\n                style={{\n                  cursor:'pointer'\n                }}\n                onClick={ e => this.props.openTooltipModal(this.props.title,this.props.desc) }\n              >\n                <Tooltip\n                  placement={'top'}\n                  message={'Click to read the description'}\n                >\n                  <Icon\n                    ml={1}\n                    name={\"Info\"}\n                    color={'cellTitle'}\n                    className={styles.tooltip}\n                    size={ this.props.isMobile ? '1em' : '1.2em'}\n                  />\n                </Tooltip>\n              </Link>\n            </Flex>\n          ) : (\n            <ColTitle\n              {...this.props}\n            />\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default TableCellHeader;\n","import { Flex } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass TableRow extends Component {\n  render() {\n    const FieldComponent = this.props.fieldComponent;\n    const isInteractive = typeof this.props.handleClick === 'function';\n    return (\n      <DashboardCard\n        cardProps={{\n          mb:2,\n          width:1,\n          px:[2,4],\n          py:[2,'12px']\n        }}\n        id={this.props.cardId}\n        {...this.props.rowProps}\n        className={this.props.token}\n        isInteractive={isInteractive}\n        handleClick={ isInteractive ? e => this.props.handleClick(this.props) : null }\n      >\n        <Flex\n          flexDirection={'row'}\n          id={this.props.rowId}\n        >\n          {\n            this.props.cols.map((colInfo,colIndex) => {\n              if (colInfo.visible === false || (colInfo.mobile === false && this.props.isMobile)){\n                return null;\n              }\n              return (\n                <Flex\n                  key={`col-${colIndex}`}\n                  {...colInfo.props}\n                >\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    {...colInfo.parentProps}\n                  >\n                    {\n                      colInfo.fields.map((fieldInfo,fieldIndex) => {\n                        if (fieldInfo.visible === false || (fieldInfo.mobile === false && this.props.isMobile)){\n                          return null;\n                        }\n                        return (\n                          <Flex\n                            height={'100%'}\n                            flexDirection={'column'}\n                            alignItems={'flex-start'}\n                            justifyContent={'center'}\n                            {...fieldInfo.parentProps}\n                            style={ fieldInfo.style ? fieldInfo.style : {\n                              overflow:'hidden'\n                            }}\n                            width={colInfo.fields.length>1 ? 'auto' : 1}\n                            id={`field-${colIndex}-${fieldIndex}-${fieldInfo.name}`}\n                            key={`field-${colIndex}-${fieldIndex}-${fieldInfo.name}`}\n                          >\n                            <FieldComponent\n                              {...this.props}\n                              fieldInfo={fieldInfo}\n                              colProps={colInfo.props}\n                              parentId={`field-${colIndex}-${fieldIndex}-${fieldInfo.name}`}\n                            />\n                          </Flex>\n                        );\n                      })\n                    }\n                  </Flex>\n                </Flex>\n              )\n            })\n          }\n        </Flex>\n      </DashboardCard>\n    );\n  }\n}\n\nexport default TableRow;\n","import { Flex } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport TableCellHeader from '../TableCellHeader/TableCellHeader';\n\nclass TableHeader extends Component {\n  render() {\n    return (\n      <Flex\n        width={1}\n        px={[2,4]}\n        pb={[2,3]}\n        flexDirection={'row'}\n      >\n        {\n          this.props.cols.map((colInfo,colIndex) => {\n            // Skip non-mobile columns\n            if (colInfo.visible === false || (colInfo.mobile === false && this.props.isMobile)){\n              return null;\n            }\n\n            return (colInfo.title && colInfo.title.length) ? (\n              <TableCellHeader\n                {...this.props}\n                {...colInfo.props}\n                desc={colInfo.desc}\n                title={colInfo.title}\n                key={`col-header-${colIndex}`}\n              >\n                {colInfo.title}\n              </TableCellHeader>\n            ) : (\n              <Flex key={`col-header-${colIndex}`} {...colInfo.props}></Flex>\n            )\n          })\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default TableHeader;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tooltip\":\"TableCellHeader_tooltip__3xM3k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"radioBtn\":\"TransactionListFilters_radioBtn__1vgHa\"};"],"sourceRoot":""}