{"version":3,"sources":["PortfolioDonut/PortfolioDonut.js"],"names":["PortfolioDonut","state","chartData","totalFunds","chartProps","parentWidth","selectedToken","selectedTokenConfig","functionsUtil","this","setProps","props","FunctionsUtil","loadUtils","loadPortfolio","prevProps","prevState","JSON","stringify","Object","keys","availableTokens","portfolio","BNify","isRisk","selectedStrategy","asyncForEach","_ref","_Users_samuelecester_Desktop_git_idle_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_Users_samuelecester_Desktop_git_idle_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee3","token","tokenConfig","idleTokenBalance","tokenPrice","tokenBalance","wrap","_context3","prev","next","_this2","getTokenBalance","idle","account","sent","getIdleTokenPrice","convertTokenBalance","times","gt","plus","stop","_x3","apply","arguments","getGovTokensUserBalances","govTokensUserBalances","forEach","govToken","govTokenBalance","tokenPercentage","div","tokenColorHsl","getGlobalConfig","toUpperCase","join","push","id","label","substr","value","Math","round","color","padAngle","animate","borderWidth","cornerRadius","innerRadius","motionDamping","motionStiffness","colors","d","tooltipFormat","v","sliceLabel","parseFloat","radialLabel","theme","tooltip","container","display","labels","text","fontSize","fontWeight","fontFamily","fonts","sansSerif","legends","slicesLabelsSkipAngle","slicesLabelsTextColor","radialLabelsLinkStrokeWidth","radialLabelsTextColor","radialLabelsSkipAngle","radialLabelsTextXOffset","radialLabelsLinkOffset","parseInt","radialLabelsLinkDiagonalLength","radialLabelsLinkHorizontalLength","radialLabelsLinkColor","from","margin","isMobile","top","right","bottom","left","onMouseEnter","data","e","setState","onMouseLeave","itemWidth","itemHeight","translateY","symbolSize","anchor","direction","itemTextColor","legend","symbolShape","effects","on","style","strategyIcon","convertToken","react__WEBPACK_IMPORTED_MODULE_8___default","createElement","rimble_ui__WEBPACK_IMPORTED_MODULE_9__","width","zIndex","textAlign","alignItems","position","height","flexDirection","justifyContent","Fragment","_AssetField_AssetField__WEBPACK_IMPORTED_MODULE_10__","fieldInfo","name","mb","_SmartNumber_SmartNumber__WEBPACK_IMPORTED_MODULE_11__","unitProps","ml","decimals","maxPrecision","unit","number","src","_GenericChart_GenericChart__WEBPACK_IMPORTED_MODULE_13__","assign","type","Pie","showLoader","parentId","parentIdHeight","Component"],"mappings":"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","file":"static/js/13.7d82b160.chunk.js","sourcesContent":["import { Pie } from '@nivo/pie';\nimport React, { Component } from 'react';\nimport { Flex, Text, Image } from \"rimble-ui\";\nimport AssetField from '../AssetField/AssetField';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\n\nclass PortfolioDonut extends Component {\n  state = {\n    chartData:null,\n    totalFunds:null,\n    chartProps:null,\n    parentWidth:null,\n    selectedToken:null,\n    selectedTokenConfig:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentWillUnmount() {\n    \n  }\n\n  async componentDidMount(){\n    this.loadPortfolio();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    const availableTokensChanged = JSON.stringify(Object.keys(prevProps.availableTokens)) !== JSON.stringify(Object.keys(this.props.availableTokens));\n    if (availableTokensChanged){\n      this.loadPortfolio();\n    }\n  }\n\n  async loadPortfolio() {\n\n    const portfolio = {};\n    let totalFunds = this.functionsUtil.BNify(0);\n    const isRisk = this.props.selectedStrategy === 'risk';\n\n    await this.functionsUtil.asyncForEach(Object.keys(this.props.availableTokens),async (token) => {\n      const tokenConfig = this.props.availableTokens[token];\n      const idleTokenBalance = await this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account);\n\n      if (idleTokenBalance){\n        const tokenPrice = await this.functionsUtil.getIdleTokenPrice(tokenConfig);\n        const tokenBalance = await this.functionsUtil.convertTokenBalance(idleTokenBalance.times(tokenPrice),token,tokenConfig,isRisk);\n\n        if (tokenBalance.gt(0)){\n          portfolio[token] = tokenBalance;\n\n          // Increment total balance\n          totalFunds = totalFunds.plus(tokenBalance);\n        }\n      }\n    });\n\n    // Add Gov Tokens\n    const govTokensUserBalances = await this.functionsUtil.getGovTokensUserBalances(this.props.account,this.props.availableTokens,'DAI',null,true);\n    if (govTokensUserBalances){\n      Object.keys(govTokensUserBalances).forEach( govToken => {\n        const govTokenBalance = this.functionsUtil.BNify(govTokensUserBalances[govToken]);\n        portfolio[govToken] = govTokenBalance;\n        totalFunds = totalFunds.plus(govTokenBalance);\n      });\n    }\n\n    const chartData = [];\n\n    Object.keys(portfolio).forEach(token => {\n      const tokenBalance = portfolio[token];\n      if (tokenBalance.gt(0)){\n        const tokenPercentage = tokenBalance.div(totalFunds).times(100);\n        let tokenColorHsl = this.functionsUtil.getGlobalConfig(['stats','tokens',token.toUpperCase(),'color','hsl']);\n        tokenColorHsl = tokenColorHsl ? tokenColorHsl.join(',') : '0,0%,0%';\n        chartData.push({\n          id:token,\n          label:token.substr(0,1).toUpperCase()+token.substr(1),\n          value:Math.round(tokenPercentage),\n          color:'hsl('+tokenColorHsl+')'\n        });\n      }\n    });\n\n    const chartProps = {\n      padAngle:0,\n      animate:true,\n      borderWidth:0,\n      cornerRadius:0,\n      innerRadius:0.65,\n      motionDamping:15,\n      motionStiffness:90,\n      colors:d => d.color,\n      tooltipFormat: v => v+'%',\n      sliceLabel: d => {\n        if (parseFloat(d.value)>=5){\n          return d.value+'%';\n        } else {\n          return null;\n        }\n      },\n      radialLabel: d => {\n        return null;\n      },\n      theme:{\n        tooltip: {\n          container: {\n            display: 'none'\n          },\n        },\n        labels:{\n          text:{\n            fontSize:16,\n            fontWeight:500,\n            fontFamily: this.props.theme.fonts.sansSerif\n          }\n        },\n        legends:{\n          text:{\n            fontSize:13,\n            fontWeight:500,\n            fontFamily: this.props.theme.fonts.sansSerif\n          }\n        }\n      },\n      slicesLabelsSkipAngle:5,\n      slicesLabelsTextColor:'#fff',\n      radialLabelsLinkStrokeWidth:0,\n      radialLabelsTextColor:'#333',\n      radialLabelsSkipAngle:10,\n      radialLabelsTextXOffset:0,\n      radialLabelsLinkOffset:-parseInt(this.state.parentWidth*0.2),\n      radialLabelsLinkDiagonalLength:0,\n      radialLabelsLinkHorizontalLength:0,\n      radialLabelsLinkColor:{ from: 'color' },\n      margin: this.props.isMobile ? { top: 15, right: 25, bottom: 30, left: 25 } : { top: 30, right: 50, bottom: 60, left: 50 },\n      onMouseEnter:(data, e) => {\n        const selectedToken = data.id;\n        const selectedTokenConfig = selectedToken ? this.props.availableTokens[selectedToken] || this.functionsUtil.getGlobalConfig(['stats','tokens',selectedToken]) : null;\n        this.setState({\n          selectedToken,\n          selectedTokenConfig\n        });\n      },\n      onMouseLeave:(data, e) => {\n        this.setState({\n          selectedToken:null,\n          selectedTokenConfig:null\n        });\n      },\n      legends:[\n        {\n          itemWidth: 60,\n          itemHeight: 18,\n          translateY: this.props.isMobile ? 25 : 50,\n          symbolSize: 10,\n          anchor: 'bottom',\n          direction: 'row',\n          itemTextColor: this.props.theme.colors.legend,\n          symbolShape: 'circle',\n          effects: [\n            {\n              on: 'hover',\n              style: {\n                itemTextColor: '#000'\n              }\n            }\n          ]\n        }\n      ]\n    };\n\n    this.setState({\n      portfolio,\n      chartData,\n      chartProps,\n      totalFunds\n    });\n  }\n\n  render() {\n    const selectedToken = this.state.selectedToken !== null && this.state.portfolio[this.state.selectedToken] ? this.state.portfolio[this.state.selectedToken] : false;\n    const strategyIcon = this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'icon']);\n    const convertToken = this.state.selectedToken ? this.functionsUtil.getGlobalConfig(['stats','tokens',this.state.selectedToken,'conversionRateField']) : false;\n\n    return (\n      <Flex\n        width={1}\n      >\n        { \n          (this.state.totalFunds || selectedToken) && \n            <Flex\n              zIndex={0}\n              top={['32%','35%']}\n              left={['23%','27%']}\n              textAlign={'center'}\n              alignItems={'center'}\n              width={['55%','46%']}\n              position={'absolute'}\n              height={['40%','35%']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              {\n                selectedToken ? (\n                  <>\n                    <AssetField\n                      fieldInfo={{\n                        name:'icon',\n                        props:{\n                          mb:1,\n                          height:'2.2em'\n                        }\n                      }}\n                      token={this.state.selectedToken}\n                      tokenConfig={this.state.selectedTokenConfig}\n                    />\n                    <SmartNumber\n                      unitProps={{\n                        ml:2,\n                        fontSize:4,\n                        fontWeight:3\n                      }}\n                      decimals={2}\n                      fontSize={[3,4]}\n                      maxPrecision={5}\n                      fontWeight={[3,4]}\n                      unit={ convertToken ? '$' : null}\n                      number={this.state.portfolio[this.state.selectedToken]}\n                    />\n                    <Text\n                      fontWeight={3}\n                      fontSize={[1,2]}\n                      color={'cellTitle'}\n                    >\n                      {this.state.selectedToken}\n                    </Text>\n                  </>\n                ) : (\n                  <>\n                    <Image\n                      mb={1}\n                      height={'2.2em'}\n                      src={strategyIcon}\n                    />\n                    <SmartNumber\n                      unit={'$'}\n                      unitProps={{\n                        ml:2,\n                        fontSize:4,\n                        fontWeight:3\n                      }}\n                      decimals={2}\n                      fontSize={[3,4]}\n                      maxPrecision={5}\n                      fontWeight={[3,4]}\n                      number={this.state.totalFunds}\n                    />\n                    <Text\n                      fontWeight={3}\n                      fontSize={[1,2]}\n                      color={'cellTitle'}\n                    >\n                      Total funds\n                    </Text>\n                  </>\n                )\n              }\n            </Flex>\n        }\n        <GenericChart\n          type={Pie}\n          showLoader={true}\n          {...this.state.chartProps}\n          data={this.state.chartData}\n          parentId={this.props.parentId}\n          parentIdHeight={this.props.parentId}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default PortfolioDonut;\n"],"sourceRoot":""}