{"version":3,"sources":["AssetsUnderManagement/AssetsUnderManagement.js","DepositRedeem/DepositRedeem.module.scss","TwitterShareButton/TwitterShareButton.module.scss","Stats/StatsChart.js","Rebalance/Rebalance.js","utilities/components/DateRangeModal.js","ExecuteTransaction/ExecuteTransaction.js","Stats/Stats.js","Utils/Utils.js","FundsOverview/FundsOverview.js","CurveRedeem/CurveRedeem.js","TwitterShareButton/TwitterShareButton.js","utilities/components/ShareModal.js","DepositRedeem/DepositRedeem.js","EstimatedEarnings/EstimatedEarnings.js","AssetPage/AssetPage.js","CurveDeposit/CurveDeposit.js","PortfolioEquityCurve/PortfolioEquityCurve.js","FundsOverviewCurve/FundsOverviewCurve.js","CurveStrategy/CurveStrategy.js","utilities/components/WelcomeModal.js","utilities/components/MigrateModal.js","utilities/components/UpgradeModal.js","Dashboard/Dashboard.js"],"names":["AssetsUnderManagement","state","totalAUM","totalAUMEndOfYear","functionsUtil","this","setProps","props","FunctionsUtil","loadUtils","loadTotalAUM","prevProps","prevState","contractsInitialized","availableStrategies","JSON","stringify","getAggregatedStats","avgAPY","plus","times","div","setState","_this2","react__WEBPACK_IMPORTED_MODULE_9___default","a","createElement","rimble_ui__WEBPACK_IMPORTED_MODULE_10__","width","react_countup__WEBPACK_IMPORTED_MODULE_8___default","delay","decimals","decimal","separator","useEasing","duration","start","parseFloat","end","formattingFn","n","formatMoney","_ref2","countUpRef","style","counterStyle","display","color","whiteSpace","fontFamily","theme","fonts","counter","fontWeight","fontWeights","textAlign","isMobile","fontSize","fontSizes","ref","subtitle","_Title_Title__WEBPACK_IMPORTED_MODULE_7__","Object","assign","subtitleProps","span","alignItems","justifyContent","loaderAlign","size","Component","module","exports","input","twitterIcon","StatsChart","chartProps","chartType","chartData","chartWidth","parseAum","value","parseInt","toFixed","_this","selectedToken","loadApiData","_callee3","CustomTooltipRow","CustomTooltip","maxGridLines","apiResults","apiResults_unfiltered","totalItems","protocols","versionInfo","keys","tempData","gridYStep","itemIndex","gridYValues","maxChartValue","axisBottomIndex","idleChartData","firstIdleBlock","divergingData","startTimestamp","endTimestamp","timestamp","date","lastRow","maxRange","i","_i","_i2","_i3","prevValue","_i4","prevApr","prevData","startBalance","currentBalance","avgApy","_i5","firstTokenPrice","_i6","regenerator_default","wrap","_context3","prev","next","tokenConfig","chartMode","abrupt","react_default","index_es","mb","flexDirection","pr","flexBasis","flex","mr","height","borderRadius","backgroundColor","textTransform","label","dangerouslySetInnerHTML","__html","DashboardCard","key","point","id","cardProps","py","px","left","data","itemPos","xFormatted","children","length","globalConfigs","stats","versions","idleVersion","Line","t0","moment","_d","getTime","format","deposits","redeems","forEach","row","idleTokens","fixTokenDecimals","idleSupply","idleTokensPrev","eq","diff","minus","gte","Math","max","abs","values","filter","v","Bar","push","indexBy","enableLabel","minValue","maxValue","d","axisBottom","tickSize","legend","tickPadding","orient","legendOffset","legendPosition","tickValues","axisLeft","axisRight","tickRotation","abbreviateNumber","markers","axis","lineStyle","strokeOpacity","textStyle","fill","colors","transactions","action","deposit","legendOrientation","legendOffsetX","stroke","strokeDasharray","redeem","padding","labelTextColor","labelSkipWidth","labelSkipHeight","pointSize","useMesh","animate","pointLabel","curve","enableArea","enableSlices","enableGridX","enableGridY","pointBorderWidth","pointLabelYOffset","legends","dataFrom","itemWidth","itemHeight","translateX","translateY","symbolSize","itemsSpacing","direction","anchor","symbolShape","itemTextColor","effects","on","ticks","text","sansSerif","grid","line","lineChartStroke","tooltip","container","boxShadow","background","pointColor","from","modifiers","margin","top","right","bottom","strToMoment","indexValue","depositFormatted","redeemFormatted","tokens","hsl","join","map","idlePrice","aum","x","y","toString","p","j","protocolsData","protocolAllocation","protocolAddr","toLowerCase","address","z","BNify","rate","allocation","foundItem","item","pos","indexOf","allocations","name","undefined","xScale","type","xFormat","yFormat","yScale","stacked","showAdvanced","sliceTooltip","slideData","slice","points","serieId","serieColor","yFormatted","protocolName","protocolColor","protocolAllocationFormatted","protocolAllocationPerc","concat","protocolData","protocolPaused","foundProtocol","find","capitalize","_ref3","borderCollapse","totalAllocation","reduce","accumulator","allocationPerc","_ref4","_ref5","idle","idleRate","protocolEarning","defiScore","isNaN","idleScore","apy","apr","days","earnings","earning","blocknumber","floor","additionalProtocols","additionalProtocol","protocolInfo","protocol","enabled","unshift","rateField","chartRow","baseProfit","firstProtocolData","firstProtocolBlock","pData","protocolRate","acc","field","idlePerformance","d1","rowData","protocolApy","tokenPrice","asyncForEach","_ref6","asyncToGenerator","mark","_callee2","lastRowData","lastTokenPrice","_context2","_ref7","_callee","tokenExchangeRate","tokenPriceFixed","lastYDiff","_context","price","lt","stop","_x2","apply","arguments","_x","showAdvancedChanged","apiResultsChanged","tokenChanged","componentDidMount","GenericChart","showLoader","parentId","parentIdHeight","Rebalance","loading","processing","rebalance","txHash","shouldRebalance","checkRebalance","sent","e","callback","callback_receipt","preventDefault","tx","error","eventData","eventCategory","eventAction","eventLabel","status","getTransactionError","sendGoogleAnalyticsEvent","window","toastProvider","addMessage","secondaryMessage","colorTheme","actionHref","actionText","variant","objectSpread","transactionHash","contractMethodSendWrapper","token","accountChanged","account","minHeight","FlexLoader","flexProps","loaderProps","textProps","ml","TxProgressBar","web3","waitText","endMessage","hash","mt","RoundButton","buttonProps","disabled","handleClick","DateRangeModal","quickSelection","ranges","startDate","Date","endDate","componentDidUpdate","selection","target","clone","subtract","closeModal","newState","handleSelect","startTimestampObj","endTimestampObj","_this3","isOpen","ModalCard","closeFunc","Header","title","Body","cardBg","required","onChange","handleQuickSelect","bind","options","dist","minDate","maxDate","className","themeMode","Footer","my","mx","mainColor","onClick","React","ExecuteTransaction","txStatus","contractName","methodName","params","ExecuteComponent","parentProps","progressBarProps","cancelTransaction","execute","componentProps","Stats","delta","carouselMax","rebalances","buttonGroups","carouselIndex","statsVersions","minStartTime","govTokensPool","unlentBalance","carouselOffsetLeft","showRefreshIdleSpeed","dateRangeModalOpened","quickSelections","day","week","weeks","month","componentUnmounted","setDateRange","isSameOrAfter","isSame","add","isBefore","isAfter","maxEndDate","setStateSafe","toggleAdvancedCharts","setDateRangeModal","filterTokenData","r","setIdleVersion","isRisk","firstResult","lastResult","firstIdlePrice","lastIdlePrice","compoundInfo","firstCompoundData","lastCompoundData","compoundWithCOMPInfo","compoundAvgApr","firstCompoundPrice","lastCompoundPrice","compoundApr","availableTokens","includes","selectedStrategy","getTokenApiData","pop","convertTokenBalance","sum","compoundWithCOMP","compoundData","compoundRate","index","prevRow","prevTotalAllocation","hasRebalanced","prevP","prevAllocation","getGovTokenPool","getUnlentBalance","selectToken","strategy","setStrategyToken","changeToken","handleCarousel","$element","jQuery","position","loadParams","latestVersion","version","enabledStrategies","strategiesParams","versionInfoExtra","param","match","currentNetworkAvailableTokens","customToken","toUpperCase","getLatestAvailableVersion","getVersionInfo","newEndTimestampObj","newStartTimestampObj","initWeb3","document","innerHTML","body","appendChild","loadCarousel","strategyChanged","dateChanged","versionChanged","idleTokenEnabled","getGlobalConfig","apyLong","textSize","versionsOptions","enabledTokens","performanceTooltip","versionDefaultValue","Breadcrumb","showPathMobile","goToSection","path","GenericSelector","innerProps","defaultValue","AssetSelector","isInteractive","StatsCard","labelTooltip","VariationNumber","iconPos","iconSize","lineHeight","description","Stats_StatsChart","contracts","pb","pt","AllocationChart","src_Rebalance_Rebalance","pl","h4","RoundIconButton","iconName","transition","titleParentProps","utilities_components_DateRangeModal","strategies","statsTokens","statsProtocols","strategyInfo","Title","titlePostfix","AssetsList","cols","fields","mobile","overflow","desc","showTooltip","rgb","hoverColor","isActive","src_ExecuteTransaction_ExecuteTransaction","Button","completed","Utils","SubComponent","selectedSubsection","subComponent","selectedSection","route","directProps","toolProps","flexWrap","submenu","tool","toolIndex","image","src","icon","FundsOverview","govTokensAprs","aggregatedValues","govTokensTotalApr","govTokensUserBalance","govTokensDistribution","govTokensTotalBalance","govTokensTotalAprTooltip","idleTokenUserDistribution","govTokensDistributionTooltip","govTokensTotalBalanceTooltip","idleGovToken","getIdleGovToken","govTokenAvailableTokens","Promise","all","getGovTokensAprs","getUserDistribution","getGovTokensUserBalances","loadAssetField","depositTimestamp","getAvgAPYStats","totBalance","govTokenBalance","govToken","balance","gt","totApr","govTokenApr","AssetField","fieldInfo","PortfolioEquity","chartHeight","chartToken","frequencySeconds","getFrequencySeconds","component","Heading","h3","maxPrecision","govTokenIndex","tokenName","distributionFrequency","CurveRedeem","inputValue","maxSlippage","unevenAmounts","buttonDisabled","showMaxSlippage","redeemUnderlying","curveTokenConfig","curvePoolContract","curveSwapContract","curveTokenBalance","curveTokensAmounts","fastBalanceSelector","redeemUnevenAmounts","curveRedeemableIdleTokens","toggleUnevenAmounts","checkButtonDisabled","amount","changeInputValue","setFastBalanceSelector","setMaxSlippage","initToken","max_slippage","lte","normalizedAmount","normalizeTokenAmount","withdrawSlippage","curveIdleTokensAmounts","getCurveTokensAmounts","getCurveIdleTokensAmounts","getCurveSlippage","getCurveTokenPrice","curveTokenPrice","redeemableBalance","redeemUnevenAmountsChanged","setInputValue","inputChanged","maxSlippageChanged","tokenConfigChanged","calculateSlippage","loadSelectedTokenConfig","selectedPercentage","curveConfig","getCurvePoolContract","getCurveSwapContract","getCurveTokenBalance","getCurveRedeemableIdleTokens","getCurveAvailableTokens","callbackRedeem","txSucceeded","eventValue","callbackReceiptRedeem","_amount","min_amounts","console","log","coin_index","migrationParams","coinIndex","min_amount","showSlippage","curveTokenName","checked","placement","message","showBalance","selectDestinationToken","SmartNumber","number","slippage","FastBalanceSelector","percentage","onMouseDown","maxWidth","failed","textOverflow","min","placeholder","border","divider","TwitterShareButton","share","parent","w","innerWidth","open","tweet","contrastColor","styles","ShareModal","getGlobalConfigs","analytics","google","events","escape","customText","confettiEnabled","react_confetti_default","zIndex","run","recycle","innerHeight","src_TwitterShareButton_TwitterShareButton","DepositRedeem","txError","tokenAPY","curveAPY","canRedeem","canDeposit","directMint","activeModal","showBuyFlow","tokenApproved","skipMigration","showRedeemFlow","contractPaused","canRedeemCurve","redeemGovTokens","canDepositCurve","actionProxyContract","migrationEnabled","componentMounted","redeemCurveEnabled","depositCurveBalance","depositCurveEnabled","showAdvancedOptions","depositCurveSlippage","showETHWrapperEnabled","metaTransactionsEnabled","setShowRedeemFlow","setShowBuyFlow","toggleShowAdvancedOptions","toggleSkipMigration","toggleRedeemCurve","toggleDepositCurve","toggleShowETHWrapper","toggleSkipMint","toggleRedeemGovTokens","toggleMetaTransactionsEnabled","resetModal","setActiveModal","approveContract","callbackApprove","callbackReceiptApprove","curveDepositContract","proxyContract","enableERC20","biconomy","checkTokenApproved","approveToken","approve","loadTokenInfo","_callee4","curveTokenEnabled","_context4","checkContractPaused","getCurveDepositContract","checkMigration","slicedToArray","tokenBalance","idleTokenBalance","boost","checkAction","loadAPY","_callee5","_context5","defineProperty","executeAction","_callee6","contractSendResult","callbackDeposit","callbackReceiptDeposit","curvePoolContractInfo","tokensToDeposit","amounts","minMintAmount","depositParams","_tokensToDeposit","depositMetaTransactionsEnabled","_depositParams","mintProxyContractInfo","mintProxyContract","_mintProxyContract$me","functionSignature","_skipMint","_ref9","_ref10","maxUnlentPerc","depositPerc","txData","idleTokenToRedeem","idleTokenPrice","_callbackRedeem","_callbackReceiptRedeem","redeemParams","_context6","getFastBalanceSelector","localStorage","setLocalStorage","lendingProcessing","lendAmount","genericError","getCurveAmounts","getCurveTokenAmount","integerValue","contract","methods","function","toConsumableArray","encodeABI","sendBiconomyTxWithPersonalSign","skipMintForDeposit","minAmountForMint","genericContractCall","setAction","loadProxyContracts","actions","_ref11","_callee9","hasProxyContract","_context9","initContract","abi","approved","_x3","getTokenAprs","tokenAprs","getCurveAPY","tokenBalanceChanged","actionChanged","fastBalanceSelectorChanged","depositCurveChanged","calculateCurveSlippage","govTokensDisabled","govTokensEnabled","skipMintForDepositEnabled","skipMintCheckboxEnabled","redeemGovTokenEnabled","metaTransactionsAvailable","useMetaTx","totalBalance","migrateText","migration","depositCurve","showDepositOptions","showDepositCurve","showRedeemCurve","showCurveSlippage","showRebalanceOption","showAdvancedDepositOptions","batchDepositInfo","batchDepositEnabled","batchDepositDepositEnabled","depositEnabled","showBatchDeposit","isMigrationTool","ethWrapperInfo","ETHWrapperComponent","showETHWrapper","canPerformAction","showActionFlow","Migrate","migrateTextBefore","TransactionField","transaction","isDisabled","openTooltipModal","isRainbow","getWalletProvider","primary","href","fullWidth","depositOnly","govTokensBalance","tokenFeesPercentage","borderColor","minWidth","ConnectBox","src_CurveRedeem_CurveRedeem","BuyModal","showInline","availableMethods","buyToken","components_ShareModal","EstimatedEarnings","maxInputValue","loadChart","earningsYear","tokenApy","amountMonth","amount3Months","amount6Months","amountYear","perc","monthColor","month3","month3Color","month6","month6Color","year","yearColor","labelTextColorModifiers","gridYValue","_ref","labels","showAPYDisclaimer","verticalAlign","AssetPage","tokenFees","availableGovTokens","getTokenFees","getTokenApy","getTokenBalance","getUserTokenFees","getGovTokensUserTotalBalance","getTokenGovTokens","loadTokensInfo","transactionsChanged","userHasFunds","CardIconButton","src_DepositRedeem_DepositRedeem","src_FundsOverview_FundsOverview","src_EstimatedEarnings_EstimatedEarnings","TransactionsList","CurveDeposit","depositSlippage","migrationContract","curveTokensBalance","migrationSucceeded","migrationContractApproved","checkMigrationContractApproved","getMigrationParams","approveCallback","migrationCallback","idleTokenBalanceChanged","toMigrate","n_coins","underlyingBalanceToDeposit","getIdleTokenPrice","normalizeIdleTokenBalance","hasCurveTokens","PortfolioEquityCurve","chartwidth","loadChartData","quickDateSelectionChanged","quickDateSelection","getCurveTxs","curveTxs","tokensBalance","processedTxs","firstTxTimestamp","timeStamp","curveTokens","currentDate","prevBalances","prevTimestamp","minChartValue","aggregatedBalancesKeys","tokensBalancesPerDate","aggregatedBalance","currTimestamp","tokensData","foundBalances","tokensBalances","momentDate","filteredTokenData","filteredBalances","lastFilteredTx","lastTokenData","lastTx","lastTxBalance","formattedDate","aggregatedBalanceParsed","aggregatedBalances","balances","yFormatDecimals","daysCount","daysFrequency","ceil","areaOpacity","areaBaselineValue","ChartCustomTooltip","ChartCustomTooltipRow","tokenInfo","hex","formattedBalance","FundsOverviewCurve","compAPR","getCurveAvgBuyPrice","getCurveAvgSlippage","src_PortfolioEquityCurve_PortfolioEquityCurve","redeemBalance","depositBalance","curveZapContract","curveAvailableTokens","changeFromToken","setSelectedToken","baseToken","getSelectedToken","urlParams","param1","getCurveZapContract","updateAssetSelector","curveTokensToRedeem","src_CurveDeposit_CurveDeposit","src_FundsOverviewCurve_FundsOverviewCurve","enabledActions","WelcomeModal","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","email","subscribed","sendingForm","sendUserInfo","sendEmail","walletProvider","userInfo","provider","simpleIDPassUserInfo","setTimeout","err","handleSubmit","assertThisInitialized","handleValidation","axios","post","newsletterSubscription","endpoint","then","catch","walletAddress","lastLogin","getItem","parse","signedUp","parentNode","classList","onSubmit","green","Field","Input","outline","ButtonLoader","buttonText","isLoading","header_styles","gradientButton","MigrateModal","dontShowAgain","toggleDontShowAgain","removeStoredItem","migrate","tokenMigrationRoute","fieldProps","iconHeight","protocolsTokensBalances","minPrecision","UpgradeModal","_args3","convert","convertTool","tokensToMigrate","tokenKey","oldContractBalanceFormatted","oldIdleTokensToMigrate","newTokenConfig","Dashboard","menu","baseRoute","clickEvent","currentRoute","pageComponent","currentSection","showResetButton","timeoutId","modalTitle","modalContent","logout","setConnector","s","comingSoon","selected","bgColor","imageInactive","iconInactive","imageInactiveDark","iconInactiveDark","curveParams","CurveStrategy","u","isExternalLink","section","param2","section_is_strategy","param1_is_strategy","param1_is_token","param2_is_token","m","sectionRoute","subm","clearTimeout","setCurrentSection","loadMenu","accountInizialized","initAccount","initializeContracts","checkModals","prevParams","checkTokensToMigrate","checkWelcomeModal","checkProtocolsTokensBalances","showUpgradeModal","getStoredItem","getTokensToMigrate","getProtocolsTokensBalances","welcomeIsOpen","welcomeModalProps","currTime","lastTime","frequency","migrateModalEnabled","showMigrateModal","isDashboard","replace","newRoute","location","scrollTo","routeParts","PageComponent","menuRightBorder","borderRight","DashboardMenu","overflowY","overflowX","DashboardHeader","components_UpgradeModal","components_MigrateModal","TooltipModal","content","components_WelcomeModal","simpleID","network","current","initSimpleID","baseTokenName"],"mappings":"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","file":"static/js/3.154442e5.chunk.js","sourcesContent":["import Title from '../Title/Title';\nimport CountUp from 'react-countup';\nimport React, { Component } from 'react';\nimport { Box, Flex, Text, Loader } from \"rimble-ui\";\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass AssetsUnderManagement extends Component {\n\n  state = {\n    totalAUM:null,\n    totalAUMEndOfYear:null\n  }\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.loadTotalAUM();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const availableStrategiesChanged = !prevProps.availableStrategies && JSON.stringify(prevProps.availableStrategies) !== JSON.stringify(this.props.availableStrategies);\n    if (availableStrategiesChanged || contractsInitialized){\n      this.loadTotalAUM();\n    }\n  }\n\n  async loadTotalAUM(){\n\n    if (!this.props.availableStrategies || !this.props.contractsInitialized){\n      return true;\n    }\n\n    const {\n      avgAPY,\n      totalAUM\n    } = await this.functionsUtil.getAggregatedStats();\n\n    const totalAUMEndOfYear = totalAUM.plus(totalAUM.times(avgAPY.div(100)));\n\n    this.setState({\n      totalAUM,\n      totalAUMEndOfYear\n    });\n  }\n\n  render() {\n    return this.state.totalAUM ? (\n      <Box\n        width={1}\n      >\n        <CountUp\n          delay={0}\n          decimals={4}\n          decimal={'.'}\n          separator={''}\n          useEasing={false}\n          duration={31536000}\n          start={parseFloat(this.state.totalAUM)}\n          end={parseFloat(this.state.totalAUMEndOfYear)}\n          formattingFn={ n => '$ '+this.functionsUtil.formatMoney(n,4) }\n        >\n          {({ countUpRef, start }) => (\n            <span\n              style={ this.props.counterStyle ? this.props.counterStyle : {\n                display:'block',\n                color:'dark-gray',\n                whiteSpace:'nowrap',\n                fontFamily:this.props.theme.fonts.counter,\n                fontWeight:this.props.theme.fontWeights[5],\n                textAlign: this.props.isMobile ? 'center' : 'right',\n                fontSize: this.props.isMobile ? '1.6em' : this.props.theme.fontSizes[6]\n              }}\n              ref={countUpRef}\n            />\n          )}\n        </CountUp>\n        {\n          (typeof this.props.subtitle === 'undefined' || this.props.subtitle) && (\n            <Title\n              fontWeight={3}\n              fontSize={[2,2]}\n              color={'cellTitle'}\n              textAlign={['center','right']}\n              {...this.props.subtitleProps}\n            >\n              {\n                this.props.subtitle ? this.props.subtitle : (\n                  <Text.span fontWeight={'inherit'} color={'inherit'} fontSize={'inherit'}>Assets Under Management <Text.span color={'cellTitle'} fontWeight={3} fontSize={'70%'}>(V3 + V4)</Text.span></Text.span>\n                )\n              }\n            </Title>\n          )\n        }\n      </Box>\n    ) : (\n      <Flex\n        alignItems={'center'}\n        justifyContent={this.props.loaderAlign || 'center'}\n      >\n        <Loader\n          size={\"30px\"}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default AssetsUnderManagement;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"DepositRedeem_input__28jp2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"twitterIcon\":\"TwitterShareButton_twitterIcon__2QCmn\"};","import moment from 'moment';\nimport theme from '../theme';\nimport { Bar } from '@nivo/bar';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\nimport { Flex, Text, Box } from 'rimble-ui';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass StatsChart extends Component {\n  state = {\n    chartProps:{},\n    chartType:null,\n    chartData:null,\n    chartWidth:null\n  };\n\n  async componentDidMount() {\n    this.setState({\n      chartData:null,\n      chartType:null,\n      chartProps:null,\n    });\n    this.loadUtils();\n    this.loadApiData();\n  }\n\n  async componentDidUpdate(prevProps) {\n    const showAdvancedChanged = prevProps.showAdvanced !== this.props.showAdvanced;\n    const apiResultsChanged = prevProps.apiResults !== this.props.apiResults;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    if (apiResultsChanged || showAdvancedChanged || tokenChanged){\n      this.componentDidMount();\n    }\n  }\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  parseAum = value => {\n    return (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.tokenConfig || !this.props.selectedToken || !this.props.chartMode || !this.props.apiResults){\n      return false;\n    }\n\n    const CustomTooltipRow = props => (\n      <Flex\n        mb={2}\n        width={1}\n        alignItems={'center'}\n        flexDirection={'row'}\n      >\n        <Flex\n          pr={2}\n          style={{\n            flexBasis:'0',\n            flex:'1 1 0px'\n          }}\n          alignItems={'center'}\n          justifyContent={'flex-start'}\n        > \n          {\n            props.color && \n            <Box\n              mr={2}\n              width={'10px'}\n              height={'10px'}\n              borderRadius={'50%'}\n              backgroundColor={props.color}\n            >\n            </Box>\n          }\n          <Text\n            fontSize={1}\n            fontWeight={2}\n            textAlign={'left'}\n            color={'dark-gray'}\n            style={{\n              textTransform:'capitalize'\n            }}\n          >\n            {props.label}\n          </Text>\n        </Flex>\n        <Flex\n          style={{\n            flexBasis:'0',\n            flex:'1 1 0px'\n          }}\n          alignItems={'center'}\n          justifyContent={'flex-end'}\n        >\n          <Text\n            fontSize={1}\n            fontWeight={3}\n            color={'cellText'}\n            textAlign={'right'}\n            style={{\n              whiteSpace:'nowrap'\n            }}\n            dangerouslySetInnerHTML={{\n              __html: props.value\n            }}\n          >\n          </Text>\n        </Flex>\n      </Flex>\n    );\n\n    const CustomTooltip = props => {\n      return (\n        <DashboardCard\n          key={props.point.id}\n          cardProps={{\n            py:2,\n            px:3,\n            width:1,\n            left: props.point.data.itemPos>50 ? '-110%' : '0'\n          }}\n        >\n          <Flex\n            width={1}\n            flexDirection={'column'}\n          >\n            {\n              props.point.data.xFormatted && \n                <Text\n                  mb={2}\n                  fontSize={1}\n                  fontWeight={3}\n                  color={'cellText'}\n                  textAlign={'left'}\n                >\n                  {props.point.data.xFormatted}\n                </Text>\n            }\n            {props.children}\n          </Flex>\n        </DashboardCard>\n      );\n    };\n\n    const maxGridLines = 4;\n    const apiResults = this.props.apiResults;\n    const apiResults_unfiltered = this.props.apiResults_unfiltered;\n    const totalItems = apiResults.length;\n    const protocols = Object.assign([],this.props.tokenConfig.protocols);\n    // const compoundProtocol = this.props.tokenConfig.protocols.find( p => (p.name === 'compound'));\n\n    const versionInfo = globalConfigs.stats.versions[this.props.idleVersion];\n\n    let keys = {};\n    let tempData = {};\n    let gridYStep = 0;\n    let itemIndex = 0;\n    let chartData = [];\n    let chartProps = {};\n    let chartType = Line;\n    let gridYValues = [];\n    let maxChartValue = 0;\n    let axisBottomIndex = 0;\n    let idleChartData = null;\n    let firstIdleBlock = null;\n\n    switch (this.props.chartMode){\n      case 'VOL':\n        let divergingData = {};\n\n        const startTimestamp = parseInt(apiResults_unfiltered[0].timestamp);\n        const endTimestamp = parseInt(moment()._d.getTime()/1000);\n\n        for (let timestamp=startTimestamp;timestamp<=endTimestamp;timestamp+=86400){\n          const date = moment(timestamp*1000).format(\"YYYY/MM/DD\");\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n        }\n\n        let lastRow = null;\n        apiResults_unfiltered.forEach(row => {\n          const date = moment(row.timestamp*1000).format(\"YYYY/MM/DD\");\n          const idleTokens = this.functionsUtil.fixTokenDecimals(row.idleSupply,18);\n\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp:row.timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n\n          if (lastRow){\n            const idleTokensPrev = this.functionsUtil.fixTokenDecimals(lastRow.idleSupply,18);\n            const idleTokensDiff = !idleTokens.eq(idleTokensPrev);\n            if (idleTokensDiff){\n              const diff = idleTokens.minus(idleTokensPrev);\n              // Deposits\n              if (diff.gte(0)){\n                divergingData[date].deposits+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,divergingData[date].deposits);\n              } else {\n                divergingData[date].redeems+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,Math.abs(divergingData[date].deposits));\n              }\n            }\n\n          } else {\n            divergingData[date].deposits+=parseFloat(idleTokens);\n          }\n\n          lastRow = row;\n        });\n\n        chartData = Object.values(divergingData).filter(v => {\n          return (!this.props.startTimestamp || v.timestamp>=this.props.startTimestamp) && (!this.props.endTimestamp || v.timestamp<=this.props.endTimestamp);\n        });\n\n        let maxRange = 0;\n        chartData.forEach(v => {\n          maxRange = Math.max(maxRange,Math.abs(v.deposits),Math.abs(v.redeems));\n        })\n\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          indexBy: 'date',\n          enableLabel: false,\n          minValue:-maxRange,\n          maxValue:maxRange,\n          label: d => {\n            return Math.abs(d.value);\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days',\n          },\n          axisLeft: null,\n          axisRight: {\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:8,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(Math.abs(v),0)\n          },\n          markers: [\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { strokeOpacity: 0 },\n              textStyle: { fill: theme.colors.transactions.action.deposit },\n              legend: 'deposits',\n              legendPosition: 'top-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { stroke: theme.colors['dark-gray'], strokeDasharray: '5 3' },\n              textStyle: { fill: theme.colors.transactions.action.redeem },\n              legend: 'redeems',\n              legendPosition: 'bottom-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n          ],\n          keys:['deposits','redeems'],\n          padding:0.4,\n          colors:[theme.colors.transactions.action.deposit, theme.colors.transactions.action.redeem],\n          labelTextColor: 'inherit:darker(1.4)',\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 80 : 100,\n              itemHeight: 18,\n              translateX: 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            },\n            tooltip:{\n              container:{\n                boxShadow:null,\n                background:null\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 50, bottom: 45, left: 50 } : { top: 20, right: 70, bottom: 70, left: 50 },\n          tooltip:(data) => {\n            const xFormatted = this.functionsUtil.strToMoment(data.indexValue).format('MMM DD');\n            const point = {\n              id:data.id,\n              data:{\n                xFormatted\n              }\n            };\n            const depositFormatted = this.functionsUtil.abbreviateNumber(data.data.deposits,2)+' '+this.props.selectedToken;\n            const redeemFormatted = this.functionsUtil.abbreviateNumber(data.data.redeems,2)+' '+this.props.selectedToken;\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                <CustomTooltipRow\n                  label={'Deposits'}\n                  color={theme.colors.deposit}\n                  value={depositFormatted}\n                />\n                <CustomTooltipRow\n                  label={'Redeem'}\n                  color={theme.colors.redeem}\n                  value={redeemFormatted}\n                />\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      /*\n      case 'AUM_ALL':\n        await this.functionsUtil.asyncForEach(Object.keys(availableTokens[globalConfigs.network.requiredNetwork]),async (tokenName,i) => {\n          const tokenConfig = availableTokens[globalConfigs.network.requiredNetwork][tokenName];\n          const tokenDataApi = await this.props.getTokenData(tokenConfig.address);\n          chartData.push({\n            id:tokenName,\n            color: tokenConfig.color,\n            data: tokenDataApi.map((d,i) => {\n              const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n              const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,tokenConfig.decimals);\n              const aum = idleTokens.times(idlePrice);\n              return {\n                x: moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\"),\n                y: parseInt(aum.toString())\n              };\n            })\n          });\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken,\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v),\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            legendPosition: 'middle'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            format: '%b %d',\n            tickValues: this.props.isMobile ? 'every 4 days' : 'every 3 days',\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 36,\n            legendPosition: 'middle'\n          },\n          enableArea:false,\n          curve:\"linear\",\n          enableSlices:'x',\n          enableGridX:true,\n          enableGridY:false,\n          colors:d => d.color,\n          pointSize:0,\n          pointColor:{ from: 'color', modifiers: []},\n          pointBorderWidth:1,\n          pointLabel:\"y\",\n          pointLabelYOffset:-12,\n          useMesh:true,\n          animate:false,\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 60, bottom: 40, left: 60 },\n        };\n      break;\n      */\n      case 'AUM':\n\n        maxChartValue = 0;\n\n        chartData.push({\n          id:'AUM',\n          color: 'hsl('+globalConfigs.stats.tokens[this.props.selectedToken].color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n            const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n            const aum = idleTokens.times(idlePrice);\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(aum.toString());\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x,y };\n          })\n        });\n\n        // Add allocation\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          apiResults.map((d,i) => {\n            return d.protocolsData.filter((protocolAllocation,x) => {\n                return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            })\n            .map((protocolAllocation,z) => {\n              const protocolPaused = this.functionsUtil.BNify(protocolAllocation.rate).eq(0);\n              if (!protocolPaused){\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals));\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                let foundItem = chartData[0].data.filter(item => { return item.x === x });\n                if (foundItem){\n                  foundItem = foundItem[0];\n                  const pos = chartData[0].data.indexOf(foundItem);\n                  if (!foundItem.allocations){\n                    foundItem.allocations = {};\n                  }\n                  foundItem.allocations[p.name] = y;\n                  chartData[0].data[pos] = foundItem;\n                }\n              }\n              return undefined;\n            })[0]\n          }).filter((v) => { return v !== undefined; } )\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:v => this.functionsUtil.formatMoney(v,v<1 ? 3 :0),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:true,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            if (typeof point === 'object' && typeof point.data === 'object'){\n              return (\n                <CustomTooltip\n                  point={point}\n                >\n                  <CustomTooltipRow\n                    label={point.serieId}\n                    color={point.serieColor}\n                    value={point.data.yFormatted}\n                  />\n                  {\n                    point.data.allocations && typeof point.data.allocations === 'object' &&\n                      Object.keys(point.data.allocations).map(protocolName => {\n                        const protocolColor = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n                        const protocolAllocation = point.data.allocations[protocolName];\n                        const protocolAllocationFormatted = this.functionsUtil.formatMoney(protocolAllocation,protocolAllocation<1 ? 3 : 0);\n                        const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                        return (\n                          <CustomTooltipRow\n                            label={protocolName}\n                            color={protocolColor}\n                            key={`${point.id}_${protocolName}`}\n                            value={`${protocolAllocationFormatted} (${protocolAllocationPerc})`}\n                          />\n                        );\n                      })\n                  }\n                </CustomTooltip>\n              );\n              /*\n              return (\n                <div\n                    key={point.id}\n                    style={{\n                      background: 'white',\n                      color: 'inherit',\n                      fontSize: 'inherit',\n                      borderRadius: '2px',\n                      boxShadow: 'rgba(0, 0, 0, 0.25) 0px 1px 2px',\n                      padding: '5px 9px'\n                    }}\n                >\n                  <div>\n                    <table style={{width:'100%',borderCollapse:'collapse'}}>\n                      <tbody>\n                        <tr>\n                          <td style={{padding:'3px 5px'}}>\n                            <span style={{display:'block', width: '12px', height: '12px', background: point.serieColor}}></span>\n                          </td>\n                          <td style={{padding:'3px 5px'}}>{point.serieId}</td>\n                          <td style={{padding:'3px 5px'}}><strong>{point.data.yFormatted}</strong></td>\n                        </tr>\n                        {\n                          point.data.allocations && typeof point.data.allocations === 'object' &&\n                            Object.keys(point.data.allocations).map(protocolName => {\n                              const protocolColor = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n                              const protocolAllocation = this.functionsUtil.formatMoney(point.data.allocations[protocolName],0);\n                              const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                              return (\n                                <tr key={`${point.id}_${protocolName}`}>\n                                  <td style={{padding:'3px 5px'}}>\n                                    <span style={{display:'block', width: '12px', height: '12px', background: protocolColor}}></span>\n                                  </td>\n                                  <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{protocolName}</td>\n                                  <td style={{padding:'3px 5px'}}><strong>{protocolAllocation}</strong> ({protocolAllocationPerc})</td>\n                                </tr>\n                              );\n                            })\n                        }\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              );\n              */\n            }\n\n            return null;\n          }\n        };\n      break;\n      case 'ALL':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\");\n\n          let row = {\n            date\n          };\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const foundProtocol = this.props.tokenConfig.protocols.find((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() });\n            if (foundProtocol){\n              const protocolName = this.functionsUtil.capitalize(foundProtocol.name);\n              if (!protocolPaused){\n                let allocation = parseFloat(this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals));\n                keys[protocolName] = 1;\n                row[protocolName] = allocation;\n                row[`${protocolName}Color`] = 'hsl('+globalConfigs.stats.protocols[protocolName.toLowerCase()].color.hsl.join(',')+')';\n                // console.log(protocolName,this.functionsUtil.BNify(protocolData.allocation).toString(),this.props.tokenConfig.decimals,allocation);\n                maxChartValue = Math.max(maxChartValue,allocation);\n              } else {\n                row[protocolName] = 0;\n              }\n            }\n          });\n\n\n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n            orient: 'left',\n            tickSize: 0,\n            tickPadding: 10,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            tickValues:gridYValues,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickSize: 0,\n            tickPadding: 10,\n            orient: 'bottom-left',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize:this.props.isMobile ? 12 : 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize:this.props.isMobile ? 12 : 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 60 },\n          tooltip:({ id, value, color }) => {\n            const allocation = this.functionsUtil.formatMoney(value,0);\n            return (\n              <table style={{width:'100%',borderCollapse:'collapse'}}>\n                <tbody>\n                  <tr>\n                    <td style={{padding:'3px 5px'}}>\n                      <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                    </td>\n                    <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                    <td style={{padding:'3px 5px'}}><strong>{allocation} {this.props.selectedToken}</strong></td>\n                  </tr>\n                </tbody>\n              </table>\n            )\n          }\n        }\n      break;\n      case 'ALL_PERC':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\")\n          let row = {\n            date:moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\")\n          };\n          if (tempData[date]){\n            row = tempData[date];\n          }\n\n          const totalAllocation = d.protocolsData.reduce((accumulator,protocolAllocation) => {\n            const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n            return this.functionsUtil.BNify(accumulator).plus(allocation);\n          },0);\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const protocolName = this.props.tokenConfig.protocols.filter((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() })[0].name;\n            if (!protocolPaused){\n              const allocation = this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals);\n              const allocationPerc = parseFloat(allocation.div(totalAllocation).times(100));\n              keys[protocolName] = 1;\n              row[protocolName] = allocationPerc;\n              row[`${protocolName}Color`] = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n            } else if (typeof row[protocolName] !== undefined) {\n              row[protocolName] = 0;\n            } \n          });\n          \n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          data: chartData,\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 40, bottom: 40, left: 60 },\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => parseInt(v)+'%'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            orient: 'bottom',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          tooltip:({ id, value, color }) => {\n            const allocation = parseInt(value)===100 ? this.functionsUtil.formatMoney(value,0) : this.functionsUtil.formatMoney(value,2);\n            return (\n              <table style={{width:'100%',borderCollapse:'collapse'}}>\n                <tbody>\n                  <tr>\n                    <td style={{padding:'3px 5px'}}>\n                      <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                    </td>\n                    <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                    <td style={{padding:'3px 5px'}}><strong>{allocation}%</strong></td>\n                  </tr>\n                </tbody>\n              </table>\n            )\n          }\n        }\n      break;\n      case 'APR':\n\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n          chartData.push({\n            id:p.name,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                const protocolPaused = this.functionsUtil.BNify(protocolAllocation.rate).eq(0);\n                if (!protocolPaused){\n                  const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                  const y = parseFloat(this.functionsUtil.fixTokenDecimals(protocolAllocation.rate,18));\n\n                  maxChartValue = Math.max(maxChartValue,y);\n\n                  return { x, y };\n                }\n                return undefined;\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(this.functionsUtil.fixTokenDecimals(d.idleRate,18));\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x, y };\n          })\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(2)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    // const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'SCORE':\n\n        let prevValue = 0;\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n\n          chartData.push({\n            id:p.name,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(protocolAllocation.defiScore);\n\n                y = isNaN(y) || !y ? prevValue : y;\n                prevValue = y;\n                maxChartValue = Math.max(maxChartValue,y);\n\n                return { x, y };\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            let y = parseFloat(d.idleScore);\n            y = isNaN(y) || !y ? prevValue : y;\n            prevValue = y;\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x, y };\n          })\n        });\n\n        // debugger;\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(1),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE_V4':\n\n        itemIndex = 0;\n        maxChartValue = 0;\n        // let prevApy = null;\n        let prevApr = null;\n        let prevData = null;\n        let startBalance = this.functionsUtil.BNify(1);\n        let currentBalance = this.functionsUtil.BNify(1);\n        let avgApy = this.functionsUtil.BNify(0);\n\n        // console.log('PRICE_V4',apiResults);\n\n        idleChartData = apiResults.map((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const apr = this.functionsUtil.fixTokenDecimals(d.idleRate,18).div(100);\n          // const apy = this.functionsUtil.apr2apy(apr);\n          \n          avgApy = avgApy.plus(apr.times(100));\n\n          if (prevApr){\n            const days = (d.timestamp-prevData.timestamp)/86400;\n            // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n            const earnings = currentBalance.times(prevApr.times(days).div(365));\n            currentBalance = currentBalance.plus(earnings);\n\n            const earning = currentBalance.div(startBalance).minus(1).times(100);\n            y = parseFloat(earning);\n\n            // apy = earning.times(365).div(totDays).toFixed(2);\n            apy = avgApy.div(i+1).toFixed(2);\n          }\n\n          prevData = d;\n          // prevApy = apy;\n          prevApr = apr;\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          return { x, y, apy, blocknumber, itemPos };\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        protocols.forEach( p => {\n\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          // prevApy = null;\n          prevApr = null;\n          prevData = null;\n          let baseProfit = 0;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n          avgApy = this.functionsUtil.BNify(0);\n          startBalance = this.functionsUtil.BNify(1);\n          currentBalance = this.functionsUtil.BNify(1);\n\n          apiResults.forEach( (d,i) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              const protocolRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n                if (protocolData[field]){\n                  return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(protocolData[field]));\n                }\n                return this.functionsUtil.BNify(acc);\n              },0) : this.functionsUtil.BNify(protocolData[rateField]);\n\n              const protocolPaused = protocolRate.eq(0);\n              if (!protocolPaused){\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null){\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => (d1.blocknumber>=firstProtocolBlock) );\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                    }\n                  }\n                }\n\n                let rowData = {};\n\n                let y = 0;\n                let apy = 0;\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                const apr = this.functionsUtil.fixTokenDecimals(protocolRate,18).div(100);\n\n                avgApy = avgApy.plus(apr.times(100));\n                // const apy = this.functionsUtil.apr2apy(apr);\n\n                if (prevData){\n                  const days = (d.timestamp-prevData.timestamp)/86400;\n                  // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n                  const earnings = currentBalance.times(prevApr.times(days).div(365));\n                  currentBalance = currentBalance.plus(earnings);\n\n                  const earning = currentBalance.div(startBalance).minus(1).times(100);\n                  y = parseFloat(earning)+baseProfit;\n\n                  apy = avgApy.div(i+1).toFixed(2);\n                }\n\n                prevData = d;\n                prevApr = apr;\n\n                if (firstIdleBlock === null){\n                  firstIdleBlock = parseInt(d.blocknumber);\n                }\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n                // const blocknumber = d.blocknumber;\n\n                itemIndex++;\n\n                rowData = {\n                  x,\n                  y,\n                  apy,\n                  itemPos\n                };\n\n                itemIndex++;\n                chartRow.data.push(rowData);\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: idleChartData\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              itemWidth: this.props.isMobile ? 70 : 100,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE':\n        // let prevTokenPrice = null;\n        maxChartValue = 0;\n        let firstTokenPrice = null;\n\n        idleChartData = apiResults.map((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          let days = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const tokenPrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n\n          if (!firstTokenPrice){\n            firstTokenPrice = tokenPrice;\n          } else {\n            y = parseFloat(tokenPrice.div(firstTokenPrice).minus(1).times(100));\n\n            days = (d.timestamp-apiResults[0].timestamp)/86400;\n            const earning = tokenPrice.div(firstTokenPrice).minus(1).times(100);\n            apy = earning.times(365).div(days).toFixed(2);\n\n            // console.log(firstTokenPrice.toString(),tokenPrice.toString(),earning.toString(),days,y,apy);\n          }\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          return { x, y, apy, blocknumber, itemPos };\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        await this.functionsUtil.asyncForEach(protocols,async (p) => {\n\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          let baseProfit = 0;\n          firstTokenPrice = null;\n          let lastRowData = null;\n          let lastTokenPrice = null;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n\n          await this.functionsUtil.asyncForEach(apiResults,async (d) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData && protocolData[rateField]){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              const protocolPaused = this.functionsUtil.BNify(protocolData[rateField]).eq(0);\n              if (!protocolPaused){\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null){\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => {\n                      return d1.blocknumber>=firstProtocolBlock;\n                    });\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                    }\n                  }\n                }\n\n                let rowData = {};\n                let tokenExchangeRate = protocolData.price;\n                let tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n                // Take data from\n                if (protocolInfo && protocolInfo.data && protocolInfo.data[p.address.toLowerCase()] && protocolInfo.data[p.address.toLowerCase()][d.blocknumber]){\n                  tokenExchangeRate = this.functionsUtil.BNify(globalConfigs.stats.protocols[p.name].data[p.address.toLowerCase()][d.blocknumber]);\n                  tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                }/* else if (p.name === 'aave'){\n                  // Token holders (aDAI = 0xc025c03e10f656d3ee76685d53d236824d8ef3da , aUSDC = 0xd2c734fbd8f5d1c809185e014016dd4097e94711)\n                  let aaveTokenBalance = await this.functionsUtil.genericContractCall(p.token,'balanceOf',['0xd2c734fbd8f5d1c809185e014016dd4097e94711'],{},d.blocknumber);\n                  if (aaveTokenBalance){\n                    if (!Object.values(aave_data).length){\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(1,p.decimals);\n                      aave_data[d.blocknumber] = aaveTokenBalance.toString();\n                    } else {\n                      const firstBalance = Object.values(aave_data)[0];\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(this.functionsUtil.BNify(aaveTokenBalance).div(this.functionsUtil.BNify(firstBalance)).toFixed(p.decimals),p.decimals);\n                      aave_data[d.blocknumber] = tokenExchangeRate.toString();\n                    }\n                  }\n                }\n                */\n\n                let y = baseProfit;\n                let apy = 0;\n\n                if (!firstTokenPrice){\n                  firstTokenPrice = tokenPriceFixed;\n                } else {\n                  if (tokenPriceFixed.lt(lastTokenPrice)){\n                    firstTokenPrice = tokenPriceFixed;\n                    const lastYDiff = chartRow.data[chartRow.data.length-1].y-chartRow.data[chartRow.data.length-2].y;\n                    y = lastRowData.y+lastYDiff;\n                    baseProfit = y;\n                  } else {\n                    y += parseFloat(tokenPriceFixed.div(firstTokenPrice).minus(1).times(100));\n                  }\n\n                  const days = (d.timestamp-apiResults[0].timestamp)/86400;\n                  const earning = tokenPriceFixed.div(firstTokenPrice).minus(1).times(100);\n                  apy = earning.times(365).div(days).toFixed(2);\n                }\n\n                y = Math.max(0,y);\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n\n                rowData = {\n                  x,\n                  y,\n                  apy,\n                  itemPos\n                };\n\n                itemIndex++;\n                lastRowData = rowData;\n                chartRow.data.push(rowData);\n                lastTokenPrice = tokenPriceFixed;\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: idleChartData\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              itemWidth: this.props.isMobile ? 70 : 100,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      chartType,\n      chartProps,\n      chartData\n    });\n  }\n\n  render() {\n    return(\n      <GenericChart\n        showLoader={true}\n        {...this.state.chartProps}\n        height={this.props.height}\n        type={this.state.chartType}\n        data={this.state.chartData}\n        width={this.state.chartWidth}\n        isMobile={this.props.isMobile}\n        parentId={this.props.parentId}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default StatsChart;","import { Flex, Text } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass Rebalance extends Component {\n\n  state = {\n    loading:true,\n    processing:{\n      rebalance:{\n        txHash:null,\n        loading:false\n      },\n    },\n    shouldRebalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.checkRebalance();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged || accountChanged){\n      this.checkRebalance();\n    }\n  }\n\n  checkRebalance = async () => {\n    this.setState({\n      loading:true,\n    });\n\n    const shouldRebalance = await this.functionsUtil.checkRebalance(this.props.tokenConfig);\n\n    this.setState({\n      loading:false,\n      shouldRebalance\n    });\n  }\n\n  rebalance = async (e) => {\n    e.preventDefault();\n\n    const callback = (tx,error) => {\n\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Rebalance',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      let txDenied = false;\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      if (tx.status === 'success'){\n        // Toast message\n        window.toastProvider.addMessage(`Rebalance completed`, {\n          secondaryMessage: `Now the pool is balanced!`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"success\",\n        });\n\n      } else if (!txDenied){\n        window.toastProvider.addMessage(`Rebalance error`, {\n          secondaryMessage: `The rebalance has failed, try again...`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"failure\",\n        });\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          rebalance:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n\n      this.checkRebalance();\n    }\n\n    const callback_receipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            rebalance:{\n              ...prevState.processing.rebalance,\n              txHash\n            }\n          }\n        })\n      );\n    };\n\n    this.props.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'rebalance', [], null , callback, callback_receipt);\n\n    this.setState({\n      processing:{\n        rebalance:{\n          txHash:null,\n          loading:true\n        }\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Flex\n        px={3}\n        width={1}\n        minHeight={'100px'}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n      {\n        this.state.loading ? (\n          <FlexLoader\n            flexProps={{\n              flexDirection:'row'\n            }}\n            loaderProps={{\n              size:'30px'\n            }}\n            textProps={{\n              ml:2\n            }}\n            text={'Checking rebalance...'}\n          />\n        ) : (\n          this.state.processing.rebalance.loading ? (\n            <TxProgressBar web3={this.props.web3} waitText={`Rebalance estimated in`} endMessage={`Finalizing rebalance request...`} hash={this.state.processing.rebalance.txHash} />\n          ) : (\n            <Flex\n              width={1}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                mt={0}\n                mb={3}\n                textAlign={'center'}\n              >\n                {this.state.shouldRebalance ? 'Rebalance the entire pool. All users will bless you.' : 'The pool is already balanced.'}\n              </Text>\n              <RoundButton\n                buttonProps={{\n                  width:'auto',\n                  disabled:!this.state.shouldRebalance\n                }}\n                handleClick={e => this.rebalance(e)}\n              >\n                Rebalance\n              </RoundButton>\n            </Flex>\n          )\n        )\n      }\n      </Flex>\n    )\n  }\n}\n\nexport default Rebalance;","import React from \"react\";\nimport {\n  Modal,\n  Button,\n  Flex,\n  Field,\n  Select\n} from \"rimble-ui\";\nimport moment from 'moment';\nimport ModalCard from './ModalCard';\nimport 'react-date-range/dist/styles.css';\nimport { DateRange } from 'react-date-range';\nimport 'react-date-range/dist/theme/default.css';\nimport './DateRangeModal.css';\n\nclass DateRangeModal extends React.Component {\n\n  state = {\n    quickSelection:'',\n    ranges:{\n      startDate: this.props.startDate ? this.props.startDate : new Date(),\n      endDate: this.props.endDate ? this.props.endDate : new Date(),\n      key: 'selection'\n    }\n  }\n\n  handleSelect(ranges){\n    this.setState({\n      quickSelection:'',\n      ranges:ranges.selection\n    });\n  }\n\n  handleQuickSelect(e){\n    let startDate = null;\n    let endDate = moment(new Date());\n    const quickSelection = e.target.value;\n\n    switch (quickSelection){\n      case 'day':\n        startDate = endDate.clone().subtract(1,'day');\n      break;\n      case 'week':\n        startDate = endDate.clone().subtract(1,'week');\n      break;\n      case 'weeks':\n        startDate = endDate.clone().subtract(2,'week');\n      break;\n      case 'month':\n        startDate = endDate.clone().subtract(1,'month');\n      break;\n      default:\n        startDate = null;\n        endDate = null;\n      break;\n    }\n\n    if (startDate && endDate){\n      startDate = startDate._d;\n      endDate = endDate._d;\n\n      const ranges = {\n        startDate,\n        endDate,\n        key:'selection'\n      };\n\n      this.setState({\n        ranges,\n        quickSelection\n      }, () => {\n        this.closeModal();\n      });\n    }\n  }\n\n  componentDidUpdate = (prevProps) => {\n    if (prevProps.startDate !== this.props.startDate || prevProps.endDate !== this.props.endDate){\n      this.setState({\n        ranges:{\n          startDate: this.props.startDate ? this.props.startDate : new Date(),\n          endDate: this.props.endDate ? this.props.endDate : new Date(),\n          key: 'selection'\n        }\n      });\n    }\n  }\n\n  closeModal(){\n    const newState = this.props.handleSelect(this.state.ranges,this.state.quickSelection);\n    const ranges = {\n      startDate:newState.startTimestampObj ? newState.startTimestampObj._d : new Date(),\n      endDate:newState.endTimestampObj ? newState.endTimestampObj._d : new Date(),\n      key: 'selection'\n    };\n    this.setState({\n      ranges\n    });\n    this.props.closeModal();\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          <ModalCard.Header title={'Select Date Range'}>\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex width={1} flexDirection={'column'} alignItems={'center'}>\n              <Field label=\"Quick Date Selection\" style={{display:'flex',width:'100%',alignItems:'stretch',justifyContent:'center'}}>\n                <Select\n                  style={{\n                    fontSize:'14px',\n                    height:'2.5em',\n                    boxShadow:'none',\n                    color:this.props.theme.colors.counter,\n                    backgroundColor:this.props.theme.colors.cardBg\n                  }}\n                  width={'100%'}\n                  required={true}\n                  onChange={this.handleQuickSelect.bind(this)}\n                  value={this.state.quickSelection}\n                  options={[\n                    { value: '', label: \"Select an option\" },\n                    { value: \"day\", label: \"Last day\" },\n                    { value: \"week\", label: \"Last week\" },\n                    { value: \"weeks\", label: \"Last 2 weeks\" },\n                    { value: \"month\", label: \"Last month\" }\n                  ]}\n                />\n              </Field>\n              <DateRange\n                ranges={[this.state.ranges]}\n                minDate={this.props.minDate}\n                maxDate={this.props.maxDate}\n                className={this.props.themeMode}\n                onChange={this.handleSelect.bind(this)}\n              />\n            </Flex>\n          </ModalCard.Body>\n          <ModalCard.Footer>\n            <Flex px={[2,0]} flexDirection={['column', 'row']} width={1} justifyContent={'center'}>\n              <Button\n                my={2}\n                mx={[0, 2]}\n                borderRadius={4}\n                mainColor={'blue'}\n                onClick={ e => this.closeModal(e) }\n                size={this.props.isMobile ? 'small' : 'medium'}\n              >\n              APPLY\n              </Button>\n            </Flex>\n          </ModalCard.Footer>\n        </ModalCard>\n      </Modal>\n    );\n  }\n\n}\n\nexport default DateRangeModal;","import { Flex } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass ExecuteTransaction extends Component {\n\n  state = {\n    txStatus:null,\n    processing:{\n      txHash:null,\n      loading:false\n    }\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  execute(){\n\n    const callback = (tx,error) => {\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Transaction',\n        eventLabel: this.props.methodName,\n        eventAction: this.props.contractName\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      const txSucceeded = tx.status === 'success';\n      if (txSucceeded){\n        if (typeof this.props.callback === 'function'){\n          this.props.callback();\n        }\n      }\n\n      this.setState({\n        txStatus:tx.status,\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      });\n    };\n\n    const callbackReceipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        txStatus:'processing',\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    this.functionsUtil.contractMethodSendWrapper(this.props.contractName,this.props.methodName,this.props.params,callback,callbackReceipt);\n\n    this.setState((prevState) => ({\n      txStatus:'loading',\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  render() {\n    const ExecuteComponent = this.props.Component;\n    return (\n      <Flex\n        {...this.props.parentProps}\n      >\n        {\n          this.state.txStatus === 'success' && this.props.children ?\n            this.props.children\n          : this.state.processing && this.state.processing.loading ? (\n            <TxProgressBar\n              web3={this.props.web3}\n              {...this.props.progressBarProps}\n              hash={this.state.processing.txHash}\n              waitText={`${this.props.action} estimated in`}\n              cancelTransaction={this.cancelTransaction.bind(this)}\n              endMessage={`Finalizing ${this.props.action} request...`}\n            />\n          ) : (\n            <ExecuteComponent\n              onClick={this.execute.bind(this)}\n              {...this.props.componentProps}\n            >\n              {this.props.componentProps.value}\n            </ExecuteComponent>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default ExecuteTransaction;\n","import moment from 'moment';\nimport Title from '../Title/Title';\nimport StatsChart from './StatsChart';\nimport React, { Component } from 'react';\nimport Rebalance from '../Rebalance/Rebalance';\nimport StatsCard from '../StatsCard/StatsCard';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport GenericSelector from '../GenericSelector/GenericSelector';\nimport RoundIconButton from '../RoundIconButton/RoundIconButton';\nimport VariationNumber from '../VariationNumber/VariationNumber';\nimport AllocationChart from '../AllocationChart/AllocationChart';\nimport DateRangeModal from '../utilities/components/DateRangeModal';\nimport { Flex, Text, Heading, Box, Icon, Button, Link } from 'rimble-ui';\nimport ExecuteTransaction from '../ExecuteTransaction/ExecuteTransaction';\nimport AssetsUnderManagement from '../AssetsUnderManagement/AssetsUnderManagement';\n\nclass Stats extends Component {\n  state = {\n    aum:null,\n    apr:null,\n    days:'-',\n    delta:null,\n    earning:null,\n    minDate:null,\n    maxDate:null,\n    carouselMax:1,\n    rebalances:'-',\n    buttonGroups:[],\n    apiResults:null,\n    carouselIndex:0,\n    idleVersion:null,\n    statsVersions:{},\n    minStartTime:null,\n    endTimestamp:null,\n    showAdvanced:true,\n    govTokensPool:null,\n    unlentBalance:null,\n    quickSelection:null,\n    startTimestamp:null,\n    endTimestampObj:null,\n    shouldRebalance:null,\n    carouselOffsetLeft:0,\n    startTimestampObj:null,\n    showRefreshIdleSpeed:false,\n    apiResults_unfiltered:null,\n    dateRangeModalOpened:false\n  };\n\n  quickSelections = {\n    day:'Last day',\n    week:'Last week',\n    weeks:'Last 2 weeks',\n    month:'Last month'\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount() {\n    this.loadUtils();\n    await this.loadParams();\n  }\n\n  componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  showRefreshIdleSpeed(){\n    this.setState({\n      showRefreshIdleSpeed:true\n    });\n  }\n\n  getLatestAvailableVersion(){\n    const statsVersions = globalConfigs.stats.versions;\n    let latestVersion = null;\n    Object.keys(statsVersions).forEach( version => {\n      const versionInfo = statsVersions[version];\n      if (versionInfo.enabledStrategies.includes(this.props.selectedStrategy)){\n        latestVersion = version;\n      }\n    });\n\n    return latestVersion;\n  }\n\n  getVersionInfo(version){\n    if (!version){\n      version = this.state.idleVersion;\n    }\n\n    if (!globalConfigs.stats.versions[version]){\n      return null;\n    }\n\n    const versionInfo = Object.assign({},globalConfigs.stats.versions[version]);\n\n    if (versionInfo.strategiesParams && versionInfo.strategiesParams[this.props.selectedStrategy]){\n      const versionInfoExtra = versionInfo.strategiesParams[this.props.selectedStrategy];\n      Object.keys(versionInfoExtra).forEach( param => {\n        versionInfo[param] = versionInfoExtra[param];\n      });\n    }\n\n    return versionInfo;\n  }\n\n  async loadParams() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    const newState = {};\n    const { match: { params } } = this.props;\n\n    const currentNetworkAvailableTokens = Object.keys(this.props.availableTokens);\n\n    if (!!params.customToken && currentNetworkAvailableTokens.indexOf(params.customToken.toUpperCase()) !== -1 ){\n      newState.selectedToken = params.customToken.toUpperCase();\n    } else {\n      newState.selectedToken = this.props.selectedToken.toUpperCase();\n    }\n\n    newState.tokenConfig = this.props.availableTokens[newState.selectedToken];\n    newState.minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp,'YYYY-MM-DD');\n    newState.maxEndDate = moment();\n\n    newState.endTimestampObj = moment(moment().format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    newState.latestVersion = this.getLatestAvailableVersion();\n    newState.idleVersion = this.state.idleVersion === null ? newState.latestVersion : this.state.idleVersion;\n\n    const versionInfo = this.getVersionInfo(newState.idleVersion);\n\n    // console.log('loadParams',newState.latestVersion,newState.idleVersion,versionInfo);\n\n    if (newState.idleVersion && versionInfo.endTimestamp){\n      const newEndTimestampObj = moment(moment(versionInfo.endTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.endTimestampObj.isAfter(newEndTimestampObj)){\n        newState.endTimestampObj = newEndTimestampObj;\n        newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n      }\n\n      if (!newState.maxEndDate || newState.maxEndDate.isAfter(newEndTimestampObj)){\n        newState.maxEndDate = newEndTimestampObj;\n      }\n    }\n\n    newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n\n    // Set start date\n    newState.startTimestampObj = newState.endTimestampObj.clone().subtract(1,'month');\n    newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n\n    if (newState.idleVersion && versionInfo.startTimestamp){\n      const newStartTimestampObj = moment(moment(versionInfo.startTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.startTimestampObj.isBefore(newStartTimestampObj)){\n        newState.startTimestampObj = newStartTimestampObj;\n        newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n      }\n\n      if (newState.minStartTime.isBefore(newStartTimestampObj)){\n        newState.minStartTime = newStartTimestampObj;\n      }\n    }\n\n    newState.minDate = newState.minStartTime._d;\n    newState.maxDate = newState.maxEndDate._d;\n\n    if (newState !== this.state){\n      await this.setStateSafe(newState);\n    }\n  }\n\n  setDateRange = (ranges,quickSelection=null) => {\n\n    const minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp);\n\n    let startTimestampObj = moment(ranges.startDate).isSameOrAfter(minStartTime) ? moment(ranges.startDate) : minStartTime;\n    let endTimestampObj = moment(ranges.endDate);\n\n    if (startTimestampObj.isSame(endTimestampObj)){\n      endTimestampObj.add(1,'day');\n    }\n\n    endTimestampObj = moment(endTimestampObj.format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    if (startTimestampObj.isBefore(this.state.minStartTime)){\n      startTimestampObj = this.state.minStartTime;\n    }\n\n    if (endTimestampObj.isAfter(this.state.maxEndDate)){\n      endTimestampObj = this.state.maxEndDate;\n    }\n\n    const startTimestamp = parseInt(startTimestampObj._d.getTime()/1000);\n    const endTimestamp = parseInt(endTimestampObj._d.getTime()/1000);\n\n    const newState = {\n      minStartTime,\n      endTimestamp,\n      quickSelection,\n      startTimestamp,\n      endTimestampObj,\n      startTimestampObj\n    };\n\n    this.setStateSafe(newState);\n\n    return newState;\n  }\n\n  toggleAdvancedCharts = (e) => {\n    e.preventDefault();\n    this.setStateSafe({\n      showAdvanced:!this.state.showAdvanced\n    });\n  }\n\n  setDateRangeModal = (dateRangeModalOpened) => {\n    if (dateRangeModalOpened !== this.state.dateRangeModalOpened){\n      this.setStateSafe({\n        dateRangeModalOpened\n      });\n    }\n  }\n\n  async componentDidMount() {\n\n    if (!this.props.web3){\n      this.props.initWeb3();\n      return false;\n    }\n\n    const style = document.createElement('style');\n    style.id = 'crisp-custom-style';\n    style.type = 'text/css';\n    style.innerHTML = `\n    .crisp-client{\n      display:none !important;\n    }`;\n    document.body.appendChild(style);\n\n    this.loadUtils();\n    await this.loadParams();\n    this.loadApiData();\n    this.loadCarousel();\n  }\n\n  loadCarousel(){\n    const carouselMax = this.props.isMobile ? 3 : 2;\n    this.setStateSafe({\n      carouselMax\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const strategyChanged = prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    const dateChanged = prevState.startTimestamp !== this.state.startTimestamp || prevState.endTimestamp !== this.state.endTimestamp;\n    const versionChanged = prevState.idleVersion !== this.state.idleVersion;\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n\n    if (mobileChanged){\n      this.loadCarousel();\n    }\n\n    if (contractsInitialized || tokenChanged || strategyChanged || versionChanged){\n      // console.log('componentDidUpdate',this.props.selectedStrategy,this.props.selectedToken);\n      await this.componentDidMount();\n    } else if (dateChanged){\n      this.loadApiData();\n    }\n  }\n\n  filterTokenData = (apiResults) => {\n    return apiResults.filter((r,i) => {\n      return (!this.state.startTimestamp || r.timestamp >= this.state.startTimestamp) && (!this.state.endTimestamp || r.timestamp <= this.state.endTimestamp);\n    });\n  }\n\n  setIdleVersion = idleVersion => {\n    this.setStateSafe({\n      idleVersion\n    });\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    // Get COMP APR\n    // const compAPR = await this.functionsUtil.getCompAPR(this.props.tokenConfig);\n    // console.log('compAPR',compAPR.toString());\n\n    const startTimestamp = this.state.minDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.minDate).format('DD/MM/YYYY 00:00:00'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n    const endTimestamp = this.state.maxDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.maxDate).format('DD/MM/YYYY 23:59:59'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n\n    const isRisk = ['v3','v4'].includes(this.state.idleVersion) && this.props.selectedStrategy === 'risk';\n    let apiResults_unfiltered = await this.functionsUtil.getTokenApiData(this.props.tokenConfig.address,isRisk,startTimestamp,endTimestamp,true,7200);\n\n    const apiResults = this.filterTokenData(apiResults_unfiltered);\n\n    // console.log('loadApiData',startTimestamp,endTimestamp,new Date(startTimestamp*1000),new Date(endTimestamp*1000),apiResults,apiResults_unfiltered);\n\n    if (!apiResults || !apiResults_unfiltered || !apiResults.length || !apiResults_unfiltered.length){\n      return false;\n    }\n\n    const firstResult = apiResults[0];\n    const lastResult = Object.values(apiResults).pop();\n\n    window.moment = moment;\n\n    let days = (lastResult.timestamp-firstResult.timestamp)/86400;\n    if (days === 0){\n      days = 1;\n    }\n\n    let apr = null;\n    let delta = 'N/A';\n\n    const idleTokens = this.functionsUtil.fixTokenDecimals(lastResult.idleSupply,18);\n    const firstIdlePrice = this.functionsUtil.fixTokenDecimals(firstResult.idlePrice,this.props.tokenConfig.decimals);\n    const lastIdlePrice = this.functionsUtil.fixTokenDecimals(lastResult.idlePrice,this.props.tokenConfig.decimals);\n\n    // Calculate AUM\n    let aum = idleTokens.times(lastIdlePrice);\n\n    // Convert Token balance\n    aum = await this.functionsUtil.convertTokenBalance(aum,this.props.selectedToken,this.props.tokenConfig,isRisk);\n\n    const compoundInfo = this.props.tokenConfig.protocols.filter((p) => { return p.name === 'compound' })[0];\n    const firstCompoundData = compoundInfo ? firstResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n    const lastCompoundData = compoundInfo ? lastResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n\n    if (this.state.idleVersion === 'v4') {\n\n      apr = apiResults.reduce( (sum,r) => {\n        const idleRate = this.functionsUtil.fixTokenDecimals(r.idleRate,18);\n        return this.functionsUtil.BNify(sum).plus(idleRate);\n      },0);\n\n      // Calculate average\n      apr = apr.div(apiResults.length);\n\n      if (compoundInfo){\n        const compoundWithCOMPInfo = globalConfigs.stats.protocols.compoundWithCOMP;\n        const rateField = compoundWithCOMPInfo.rateField ? compoundWithCOMPInfo.rateField : 'rate';\n\n        let compoundAvgApr = apiResults.reduce( (sum,r) => {\n\n          const compoundData = r.protocolsData.find((pData,x) => {\n            return pData.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase()\n          });\n\n          let compoundRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n            if (compoundData[field]){\n              return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(compoundData[field]));\n            }\n            return this.functionsUtil.BNify(acc);\n          },0) : this.functionsUtil.BNify(compoundData[rateField]);\n\n          compoundRate = this.functionsUtil.fixTokenDecimals(compoundRate,18);\n\n          return this.functionsUtil.BNify(sum).plus(compoundRate);\n        },0);\n\n        // Calculate average\n        compoundAvgApr = compoundAvgApr.div(apiResults.length);\n\n        // compoundAvgApr = this.functionsUtil.apr2apy(compoundAvgApr.div(100)).times(100);\n        // apr = this.functionsUtil.apr2apy(apr.div(100)).times(100);\n\n        delta = apr.minus(compoundAvgApr);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n\n      apr = apr.toFixed(2);\n\n    } else {\n      const earning = lastIdlePrice.div(firstIdlePrice).minus(1).times(100);\n      apr = earning.times(365).div(days).toFixed(2);\n\n      if (firstCompoundData && lastCompoundData){\n        const firstCompoundPrice = this.functionsUtil.fixTokenDecimals(firstCompoundData.price,this.props.tokenConfig.decimals);\n        const lastCompoundPrice = this.functionsUtil.fixTokenDecimals(lastCompoundData.price,this.props.tokenConfig.decimals);\n        const compoundApr = lastCompoundPrice.div(firstCompoundPrice).minus(1).times(100);\n        delta = earning.minus(compoundApr).times(365).div(days);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n    }\n\n    // Count rebalances\n    let rebalances = 0;\n    apiResults.forEach((row,index) => {\n      if (index){\n        const prevRow = apiResults[index-1];\n\n        const totalAllocation = row.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        const prevTotalAllocation = prevRow.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        let hasRebalanced = false;\n        row.protocolsData.forEach( p => {\n          if (hasRebalanced){\n            return;\n          }\n          const prevP = prevRow.protocolsData.find( prevP => (prevP.protocolAddr.toLowerCase() === p.protocolAddr.toLowerCase()) );\n          const allocation = this.functionsUtil.fixTokenDecimals(p.allocation,this.props.tokenConfig.decimals);\n          const prevAllocation = this.functionsUtil.fixTokenDecimals(prevP.allocation,this.props.tokenConfig.decimals);\n          const allocationPerc = parseInt(parseFloat(allocation.div(totalAllocation).times(100)));\n          const prevAllocationPerc = parseInt(parseFloat(prevAllocation.div(prevTotalAllocation).times(100)));\n          if (allocationPerc!==prevAllocationPerc){\n            rebalances++;\n            hasRebalanced = true;\n          }\n        });\n      }\n    });\n\n    // Add gov tokens balance to AUM\n    const availableTokens = {};\n    availableTokens[this.props.selectedToken] = this.props.tokenConfig;\n    const govTokensPool = await this.functionsUtil.getGovTokenPool(null,availableTokens,'DAI');\n    if (govTokensPool){\n      aum = aum.plus(govTokensPool);\n    }\n\n    // Format AUM\n    aum = this.functionsUtil.formatMoney(parseFloat(aum));\n\n    let unlentBalance = await this.functionsUtil.getUnlentBalance(this.props.tokenConfig);\n    if (unlentBalance){\n      unlentBalance = this.functionsUtil.formatMoney(parseFloat(unlentBalance));\n    }\n\n    this.setStateSafe({\n      aum,\n      apr,\n      days,\n      delta,\n      apiResults,\n      rebalances,\n      govTokensPool,\n      unlentBalance,\n      apiResults_unfiltered\n    });\n  }\n\n  selectToken = async (strategy,token) => {\n    await this.props.setStrategyToken(strategy,token);\n    this.props.changeToken(token);\n  }\n\n  handleCarousel = action => {\n    let carouselIndex = this.state.carouselIndex;\n    if (action==='next' && carouselIndex<this.state.carouselMax){\n      carouselIndex++;\n    } else if (action==='back' && carouselIndex>0){\n      carouselIndex--;\n    }\n\n    const $element = window.jQuery(`#carousel-cursor > div:eq(${carouselIndex})`);\n    const carouselOffsetLeft = -parseFloat($element.position().left)+'px';\n\n    this.setStateSafe({\n      carouselIndex,\n      carouselOffsetLeft\n    });\n  }\n\n  render() {\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const apyLong = this.functionsUtil.getGlobalConfig(['messages','apyLong']);\n\n    if (!this.props.availableStrategies){\n      return (\n        <FlexLoader\n          textProps={{\n            textSize:4,\n            fontWeight:2\n          }}\n          loaderProps={{\n            mb:3,\n            size:'40px'\n          }}\n          flexProps={{\n            minHeight:'50vh',\n            flexDirection:'column'\n          }}\n          text={'Loading assets...'}\n        />\n      );\n    }\n\n    if (!this.props.selectedToken){\n      const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n      const enabledTokens = [];\n      const statsTokens = this.functionsUtil.getGlobalConfig(['stats','tokens']);\n      const statsProtocols = this.functionsUtil.getGlobalConfig(['stats','protocols']);\n      Object.keys(statsTokens).forEach(token => {\n        const tokenInfo = statsTokens[token];\n        if (tokenInfo.enabled){\n          enabledTokens.push(token);\n        }\n      });\n      return (\n        <Flex\n          mb={3}\n          width={1}\n          flexDirection={'column'}\n        >\n          <AssetsUnderManagement\n            {...this.props}\n            loaderAlign={'flex-end'}\n          />\n          {\n            Object.keys(strategies).map(strategy => {\n              const strategyInfo = strategies[strategy];\n              const availableTokens = this.props.availableStrategies[strategy];\n              if (!availableTokens){\n                return false;\n              }\n              return (\n                <Box\n                  mb={2}\n                  width={1}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                  key={`strategy-container-${strategy}`}\n                >\n                  <Title\n                    mt={3}\n                    mb={[3,4]}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'baseline'}\n                      justifyContent={'center'}\n                    >\n                      {strategyInfo.title}\n                      {\n                        strategyInfo.titlePostfix &&\n                          <Text\n                            ml={2}\n                            fontWeight={3}\n                            fontSize={[2,4]}\n                            color={'dark-gray'}\n                          >\n                            {strategyInfo.titlePostfix}\n                          </Text>\n                      }\n                    </Flex>\n                  </Title>\n                  <AssetsList\n                    enabledTokens={enabledTokens}\n                    handleClick={(props) => this.selectToken(strategy,props.token)}\n                    cols={[\n                      {\n                        title:'CURRENCY',\n                        props:{\n                          width:[0.26,0.15]\n                        },\n                        fields:[\n                          {\n                            name:'icon',\n                            props:{\n                              mr:2,\n                              height:['1.4em','2.3em']\n                            }\n                          },\n                          {\n                            name:'tokenName'\n                          }\n                        ]\n                      },\n                      {\n                        title:'POOL',\n                        props:{\n                          width:[0.22,0.14],\n                        },\n                        fields:[\n                          {\n                            name:'allocationChart',\n                            mobile:false,\n                            parentProps:{\n                              width:0.3\n                            },\n                            style:{\n                              overflow:'visible'\n                            },\n                            showLoader:false,\n                          },\n                          {\n                            name:'pool',\n                            props:{\n                              ml:1\n                            },\n                            parentProps:{\n                              width:[1,0.7]\n                            }\n                          }\n                        ]\n                      },\n                      {\n                        title:'APY',\n                        desc:apyLong,\n                        props:{\n                          width: [0.29,0.14],\n                        },\n                        parentProps:{\n                          flexDirection:'column',\n                          alignItems:'flex-start',\n                        },\n                        fields:[\n                          {\n                            name:'apy',\n                            showTooltip:true\n                          },\n                          {\n                            name:'idleDistribution',\n                            showLoader:false,\n                            props:{\n                              decimals:this.props.isMobile ? 1 : 2,\n                              fontSize:this.props.isMobile ? '9px' : 0\n                            }\n                          },\n                        ]\n                      },\n                      {\n                        title:'RISK SCORE',\n                        desc:this.functionsUtil.getGlobalConfig(['messages','riskScore']),\n                        mobile:false,\n                        props:{\n                          width:[0.27,0.16],\n                        },\n                        fields:[\n                          {\n                            name:'score'\n                          }\n                        ]\n                      },\n                      {\n                        title:'APR LAST WEEK',\n                        mobile:false,\n                        props:{\n                          width: 0.25,\n                        },\n                        parentProps:{\n                          width:1,\n                          pr:[2,4]\n                        },\n                        fields:[\n                          {\n                            name:'aprChart',\n                          }\n                        ]\n                      },\n                      {\n                        title:'',\n                        props:{\n                          width:[0.23,0.16],\n                        },\n                        parentProps:{\n                          width:1\n                        },\n                        fields:[\n                          {\n                            name:'button',\n                            label:this.props.isMobile ? 'View' : 'View stats',\n                            props:{\n                              width:1,\n                              fontSize:3,\n                              fontWeight:3,\n                              height:'45px',\n                              borderRadius:4,\n                              boxShadow:null,\n                              mainColor:'redeem',\n                              size: this.props.isMobile ? 'small' : 'medium',\n                              handleClick:(props) => this.selectToken(strategy,props.token)\n                            }\n                          }\n                        ]\n                      }\n                    ]}\n                    {...this.props}\n                    selectedStrategy={strategy}\n                    availableTokens={availableTokens}\n                  />\n                  {\n                    !this.props.isMobile &&\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'flex-end'}\n                      >\n                        {\n                          Object.values(statsProtocols).filter( p => (p.legend) ).map( (p,index) => (\n                            <Flex\n                              mr={3}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              key={`legend_${index}`}\n                            >\n                              <Box\n                                mr={1}\n                                width={'10px'}\n                                height={'10px'}\n                                borderRadius={'50%'}\n                                backgroundColor={`rgb(${p.color.rgb.join(',')})`}\n                              >\n                              </Box>\n                              <Text.span\n                                fontSize={1}\n                                color={'cellText'}\n                              >\n                                {p.label}\n                              </Text.span>\n                            </Flex>\n                          ))\n                        }\n                      </Flex>\n                  }\n                </Box>\n              );\n            })\n          }\n          {\n            idleTokenEnabled && !this.state.showRefreshIdleSpeed ? (\n              <Flex\n                mb={4}\n                width={1}\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <Link\n                  hoverColor={'primary'}\n                  onClick={this.showRefreshIdleSpeed.bind(this)}\n                >\n                  Refresh Idle Speed\n                </Link>\n              </Flex>\n            ) : idleTokenEnabled && this.state.showRefreshIdleSpeed &&\n              <DashboardCard\n                cardProps={{\n                  p:2,\n                  mb:4,\n                  width:1,\n                  mt:[2,3],\n                }}\n                isActive={true}\n                isInteractive={false}\n              >\n                <Flex\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  <Text\n                    fontWeight={500}\n                    color={'flashColor'}\n                    textAlign={'center'}\n                    fontSize={[1,'15px']}\n                  >\n                    By executing this transaction you can adjust the IDLE distribution speed among the pools.\n                  </Text>\n                  <ExecuteTransaction\n                    action={'Refresh'}\n                    Component={Button}\n                    parentProps={{\n                      mt:1\n                    }}\n                    componentProps={{\n                      size:'small',\n                      mainColor:'blue',\n                      value:'REFRESH IDLE SPEED'\n                    }}\n                    params={[]}\n                    contractName={'IdleController'}\n                    methodName={'refreshIdleSpeeds'}\n                    {...this.props}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'center'}\n                      justifyContent={'center'}\n                    >\n                      <Icon\n                        mr={1}\n                        name={'Done'}\n                        size={'1.4em'}\n                        color={this.props.theme.colors.transactions.status.completed}\n                      />\n                      <Text\n                        fontWeight={500}\n                        fontSize={'15px'}\n                        color={'copyColor'}\n                        textAlign={'center'}\n                      >\n                        Idle Speed Refreshed\n                      </Text>\n                    </Flex>\n                  </ExecuteTransaction>\n                </Flex>\n              </DashboardCard>\n          }\n        </Flex>\n      );\n    } else {\n      const versionsOptions = Object.keys(globalConfigs.stats.versions).filter( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return versionInfo.enabledTokens.includes(this.props.selectedToken) && versionInfo.enabledStrategies.includes(this.props.selectedStrategy);\n      }).map( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return {\n          value:version,\n          label:versionInfo.label\n        }\n      });\n\n      const versionInfo = this.getVersionInfo(this.state.idleVersion);\n\n      let performanceTooltip = null;\n      if (this.state.idleVersion && versionInfo){\n        const showPerformanceTooltip = this.functionsUtil.getGlobalConfig(['stats','versions',this.state.idleVersion,'showPerformanceTooltip']);\n        performanceTooltip = showPerformanceTooltip ? this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'performanceTooltip']) : null;\n      }\n\n      const versionDefaultValue = versionsOptions.find( v => (v.value === this.state.idleVersion) );\n\n      return (\n        <Flex\n          p={0}\n          width={1}\n          flexDirection={'column'}\n        >\n          {\n          /*\n          }\n          <Flex position={['absolute','relative']} left={0} px={[3,0]} zIndex={10} width={1} flexDirection={'row'} mb={[0,3]}>\n            <Flex alignItems={'center'} width={[2/3,1/2]}>\n              <RouterLink to=\"/\">\n                <Image src=\"images/logo-gradient.svg\"\n                  height={['35px','48px']}\n                  position={'relative'} />\n              </RouterLink>\n              <Heading.h3 color={'dark-gray'} textAlign={'left'} fontWeight={3} lineHeight={'initial'} fontSize={[4,5]} ml={[1,2]}>\n                <Text.span fontSize={'80%'}>|</Text.span> Stats\n              </Heading.h3>\n            </Flex>\n            <Flex flexDirection={'row'} width={[1/3,1/2]} justifyContent={'flex-end'} alignItems={'center'}>\n              {\n                this.state.buttonGroups && \n                  this.props.isMobile ? (\n                    <ButtonGroup\n                      isMobile={this.props.isMobile}\n                      components={ this.state.buttonGroups.reduce((components,array) => components.concat(array),[]) }\n                      theme={'light'}\n                    />\n                  ) :\n                  this.state.buttonGroups.map((buttonGroup,i) => (\n                    <ButtonGroup\n                      key={`buttonGroup_${i}`}\n                      isMobile={this.props.isMobile}\n                      components={buttonGroup}\n                      theme={'light'}\n                    />\n                  ))\n              }\n            </Flex>\n          </Flex>\n          */\n          }\n          <Box\n            mb={[3,4]}\n          >\n            <Flex\n              flexDirection={['column','row']}\n            >\n              <Flex\n                width={[1,0.4]}\n              >\n                <Breadcrumb\n                  {...this.props}\n                  showPathMobile={true}\n                  text={'ASSETS OVERVIEW'}\n                  isMobile={this.props.isMobile}\n                  handleClick={ e => this.props.goToSection('stats') }\n                  path={[this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])]}\n                />\n              </Flex>\n              <Flex\n                mt={[3,0]}\n                width={[1,0.6]}\n                flexDirection={['column','row']}\n                justifyContent={['center','space-between']}\n              >\n                <Flex\n                  width={[1,0.26]}\n                  flexDirection={'column'}\n                >\n                  <GenericSelector\n                    innerProps={{\n                      p:1,\n                      height:['100%','46px'],\n                    }}\n                    name={'idle-version'}\n                    options={versionsOptions}\n                    defaultValue={versionDefaultValue}\n                    onChange={ v => this.setIdleVersion(v) }\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.3]}\n                  flexDirection={'column'}\n                >\n                  <AssetSelector\n                    innerProps={{\n                      p:1\n                    }}\n                    {...this.props}\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.39]}\n                  flexDirection={'column'}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:1,\n                      display:'flex',\n                      alignItems:'center',\n                      height:['46px','100%'],\n                      justifyContent:'center'\n                    }}\n                    isInteractive={true}\n                    handleClick={ e => this.setDateRangeModal(true) }\n                  >\n                    <Text\n                      fontWeight={3}\n                      color={'copyColor'}\n                    >\n                    {\n                      this.state.quickSelection\n                      ?\n                        this.quickSelections[this.state.quickSelection]\n                      : this.state.startTimestampObj && this.state.endTimestampObj &&\n                        `${this.state.startTimestampObj.format('DD/MM/YY')} - ${this.state.endTimestampObj.format('DD/MM/YY')}`\n                    }\n                    </Text>\n                  </DashboardCard>\n                </Flex>\n              </Flex>\n            </Flex>\n          </Box>\n\n          {\n            this.state.idleVersion && (versionInfo.startTimestamp>parseInt(new Date().getTime()/1000)) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Idle Stats {this.state.idleVersion} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : (\n              <Box\n                width={1}\n              >\n                <Box\n                  mt={[3,0]}\n                  mb={[3,4]}\n                >\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    justifyContent={'center'}\n                    flexDirection={['column','row']}\n                  >\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        value={this.state.aum}\n                        title={'Asset Under Management'}\n                        label={ this.state.unlentBalance ? `Unlent funds: ${this.state.unlentBalance} ${this.props.selectedToken}` : this.props.selectedToken }\n                        labelTooltip={ this.state.unlentBalance ? this.functionsUtil.getGlobalConfig(['messages','cheapRedeem']) : null}\n                      />\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Avg APY'}\n                        label={'Annualized'}\n                      >\n                        <Flex\n                          width={1}\n                          alignItems={'center'}\n                          flexDirection={['column','row']}\n                        >\n                          <VariationNumber\n                            direction={'up'}\n                            iconPos={'right'}\n                            iconSize={'1.8em'}\n                            justifyContent={'flex-start'}\n                            width={1}\n                            >\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                              fontSize={[4,5]}\n                            >\n                              {this.state.apr}\n                              <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                            </Text>\n                          </VariationNumber>\n                        </Flex>\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Overperformance on Compound'}\n                        label={'Annualized'}\n                      >\n                        {\n                          this.state.delta && !isNaN(this.state.delta) ? (\n                            <VariationNumber\n                              direction={'up'}\n                              iconPos={'right'}\n                              iconSize={'1.8em'}\n                              justifyContent={'flex-start'}\n                              >\n                              <Text\n                                lineHeight={1}\n                                fontSize={[4,5]}\n                                fontWeight={[3,4]}\n                                color={'statValue'}\n                              >\n                                {this.state.delta}\n                                <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                              </Text>\n                            </VariationNumber>\n                          ) : (\n                            <Text\n                              lineHeight={1}\n                              fontSize={[4,5]}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                            >\n                              {this.state.delta}\n                            </Text>\n                          )\n                        }\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        label={' '}\n                        title={'Rebalances'}\n                        value={this.state.rebalances.toString()}\n                      />\n                    </Flex>\n                    {\n                    /*\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Current APR</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.currApr}\n                            <Text.span color={'copyColor'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Days Live</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.days}\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    */\n                    }\n                  </Flex>\n                </Box>\n\n                <DashboardCard\n                  title={'Historical Performance'}\n                  description={performanceTooltip}\n                  cardProps={{\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex id='chart-PRICE' width={1} mb={3}>\n                    <StatsChart\n                      height={ 350 }\n                      {...this.state}\n                      parentId={'chart-PRICE'}\n                      isMobile={this.props.isMobile}\n                      contracts={this.props.contracts}\n                      apiResults={this.state.apiResults}\n                      idleVersion={this.state.idleVersion}\n                      apiResults_unfiltered={this.state.apiResults_unfiltered}\n                      chartMode={this.state.idleVersion === this.state.latestVersion ? 'PRICE_V4' : 'PRICE'}\n                    />\n                  </Flex>\n                </DashboardCard>\n\n                <DashboardCard\n                  cardProps={{\n                    pb:3,\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex\n                    flexDirection={['column','row']}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      this.state.idleVersion === this.state.latestVersion && \n                      <Flex\n                        pt={2}\n                        width={[1,1/3]}\n                        id={'allocation-chart'}\n                        flexDirection={'column'}\n                        alignItems={'flex-start'}\n                        justifyContent={'flex-start'}\n                      >\n                        <AllocationChart\n                          height={310}\n                          {...this.props}\n                          parentId={'allocation-chart'}\n                        />\n                        <Rebalance\n                          {...this.props}\n                        />\n                      </Flex>\n                    }\n                    <Flex\n                      mb={[0,3]}\n                      id={'chart-ALL'}\n                      pl={[0,this.state.idleVersion === this.state.latestVersion ? 0 : 3]}\n                      width={[1, this.state.idleVersion === this.state.latestVersion ? 2/3 : 1]}\n                    >\n                      <Flex alignItems={'flex-start'} justifyContent={'flex-start'} flexDirection={'column'} width={1}>\n                        <Heading.h4\n                          mb={2}\n                          ml={3}\n                          mt={[3,4]}\n                          fontWeight={4}\n                          fontSize={[2,3]}\n                          textAlign={'left'}\n                          color={'dark-gray'}\n                          lineHeight={'initial'}\n                        >\n                          Allocations over time\n                        </Heading.h4>\n                        <StatsChart\n                          height={350}\n                          {...this.state}\n                          chartMode={'ALL'}\n                          parentId={'chart-ALL'}\n                          isMobile={this.props.isMobile}\n                          contracts={this.props.contracts}\n                          apiResults={this.state.apiResults}\n                          idleVersion={this.state.idleVersion}\n                          apiResults_unfiltered={this.state.apiResults_unfiltered}\n                        />\n                      </Flex>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n\n                <Flex\n                  position={'relative'}\n                >\n                  <Flex\n                    width={1}\n                    id={'carousel-container'}\n                    justifyContent={'flex-end'}\n                  >\n                    <RoundIconButton\n                      buttonProps={{\n                        mr:3\n                      }}\n                      iconName={'ArrowBack'}\n                      disabled={this.state.carouselIndex === 0}\n                      handleClick={ e => this.handleCarousel('back') }\n                    />\n                    <RoundIconButton\n                      iconName={'ArrowForward'}\n                      handleClick={ e => this.handleCarousel('next') }\n                      disabled={this.state.carouselIndex === this.state.carouselMax}\n                    />\n                  </Flex>\n                  <Flex\n                    mt={5}\n                    height={'400px'}\n                    position={'absolute'}\n                    id={'carousel-cursor'}\n                    width={['444%','200%']}\n                    justifyContent={'flex-start'}\n                    left={this.state.carouselOffsetLeft}\n                    style={{\n                      transition:'left 0.3s ease-in-out'\n                    }}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        id='chart-AUM'\n                      >\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            ml={3}\n                            mt={3}\n                            mb={2}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Asset Under Management\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'AUM'}\n                            parentId={'chart-AUM'}\n                            isMobile={this.props.isMobile}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-APR' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            APRs\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'APR'}\n                            parentId={'chart-APR'}\n                            isMobile={this.props.isMobile}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                      title={'Risk Score'}\n                      description={'Idle Risk Score is a weighted average of the underlying protocols risks assessed by DeFi Score'}\n                      titleParentProps={{\n                        ml:16,\n                        mt:16\n                      }}\n                    >\n                      <Flex id='chart-SCORE' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'SCORE'}\n                            parentId={'chart-SCORE'}\n                            isMobile={this.props.isMobile}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-VOL' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Volume\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'VOL'}\n                            parentId={'chart-VOL'}\n                            isMobile={this.props.isMobile}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                </Flex>\n              </Box>\n            )\n          }\n          <DateRangeModal\n            {...this.props}\n            minDate={this.state.minDate}\n            maxDate={this.state.maxDate}\n            handleSelect={this.setDateRange}\n            isOpen={this.state.dateRangeModalOpened}\n            closeModal={e => this.setDateRangeModal(false)}\n            startDate={this.state.startTimestampObj ? this.state.startTimestampObj._d : null}\n            endDate={this.state.endTimestampObj ? this.state.endTimestampObj._d : null}\n          />\n        </Flex>\n      );\n    }\n  }\n}\n\nexport default Stats;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport { Flex, Icon, Text, Box, Image } from \"rimble-ui\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass Utils extends Component {\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    const SubComponent = this.props.selectedSubsection && this.props.selectedSubsection.subComponent ? this.props.selectedSubsection.subComponent : null;\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.props.selectedSubsection ? (\n            <Box\n              width={1}\n            >\n              <Flex\n                width={1}\n              >\n                <Breadcrumb\n                  {...this.props}\n                  showPathMobile={true}\n                  isMobile={this.props.isMobile}\n                  path={[this.props.selectedSubsection.label]}\n                  text={this.props.selectedSection.label.toUpperCase()}\n                  handleClick={ e => this.props.goToSection(this.props.selectedSection.route) }\n                />\n              </Flex>\n              <Flex\n                my={[2,3]}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <Title\n                  mb={2}\n                >\n                  {this.props.selectedSubsection.label}\n                </Title>\n                <Text\n                  textAlign={'center'}\n                >\n                  {this.props.selectedSubsection.desc}\n                </Text>\n              </Flex>\n              <SubComponent\n                {...this.props}\n                {...this.props.selectedSubsection.directProps}\n                toolProps={this.props.selectedSubsection.props}\n              />\n            </Box>\n          ) : (\n            <Flex\n              my={[2,3]}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Title\n                mb={3}\n              >\n                Tools\n              </Title>\n              <Flex\n                width={1}\n                style={{\n                  flexWrap:'wrap'\n                }}\n              >\n              {\n                this.props.selectedSection.submenu.map( (tool,toolIndex) => (\n                  <DashboardCard\n                    isInteractive={true}\n                    key={`tool_${toolIndex}`}\n                    cardProps={{\n                      p:[3,4],\n                      mb:[3,3],\n                      mr:[0,'2%'],\n                      style:{\n                        flex: this.props.isMobile ? '1 1 100%' : '0 0 31%'\n                      },\n                      alignItems:'center',\n                      flexDirection:'column',\n                      justifyContent:'center'\n                    }}\n                    handleClick={ e => this.props.goToSection(this.props.selectedSection.route+'/'+tool.route) }\n                  >\n                    <Text\n                      fontSize={[3,4]}\n                      textAlign={'center'}\n                    >\n                      {tool.label}\n                    </Text>\n                    <Flex\n                      justifyContent={'center'}\n                    >\n                      {\n                        tool.image ? (\n                          <Image\n                            my={[0,2]}\n                            height={'2.2em'}\n                            src={tool.image}\n                          />\n                        ) : tool.icon && (\n                          <Icon\n                            my={[0,2]}\n                            size={'3em'}\n                            name={tool.icon}\n                          />\n                        )\n                      }\n                    </Flex>\n                    <Text\n                      fontSize={[2,2]}\n                      textAlign={'center'}\n                    >\n                      {tool.desc}\n                    </Text>\n                  </DashboardCard>\n                ) )\n              }\n              </Flex>\n            </Flex>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default Utils;\n","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Flex, Heading, Text } from \"rimble-ui\";\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport PortfolioEquity from '../PortfolioEquity/PortfolioEquity';\n\nclass FundsOverview extends Component {\n\n  state = {\n    govTokensAprs:null,\n    aggregatedValues:[],\n    govTokensTotalApr:null,\n    govTokensUserBalance:null,\n    govTokensDistribution:null,\n    govTokensTotalBalance:null,\n    govTokensTotalAprTooltip:null,\n    idleTokenUserDistribution:null,\n    govTokensDistributionTooltip:null,\n    govTokensTotalBalanceTooltip:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  idleGovToken = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    this.idleGovToken = this.functionsUtil.getIdleGovToken();\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const isRisk = this.props.selectedStrategy === 'risk';\n\n    const [\n      govTokensAprs,\n      idleTokenUserDistribution,\n      govTokensUserBalance,\n      depositTimestamp,\n      days,\n    ] = await Promise.all([\n      this.functionsUtil.getGovTokensAprs(this.props.selectedToken,this.props.tokenConfig),\n      this.idleGovToken.getUserDistribution(this.props.account,govTokenAvailableTokens,true),\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null),\n      this.functionsUtil.loadAssetField('depositTimestamp',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    const avgAPY = await this.functionsUtil.getAvgAPYStats(this.props.tokenConfig.address,isRisk,depositTimestamp);\n\n    const govTokensTotalBalance = govTokensUserBalance ? Object.values(govTokensUserBalance).reduce( (totBalance,govTokenBalance) => {\n      return totBalance.plus(this.functionsUtil.BNify(govTokenBalance));\n    },this.functionsUtil.BNify(0)) : null;\n\n    const govTokensTotalBalanceTooltip = govTokensUserBalance ? Object.keys(govTokensUserBalance).map( govToken => {\n      const balance = govTokensUserBalance[govToken];\n      if (balance.gt(0)){\n        return `+${balance.toFixed(2)} ${govToken}`;\n      } else {\n        return null;\n      }\n    }).filter(v => (v !== null)) : null;\n\n    // console.log(govTokensTotalBalance,govTokensUserBalance,govTokensTotalBalanceTooltip);\n\n    const govTokensTotalApr = govTokensAprs ? Object.values(govTokensAprs).reduce( (totApr,govTokenApr) => {\n      return totApr.plus(this.functionsUtil.BNify(govTokenApr));\n    },this.functionsUtil.BNify(0)) : null;\n\n    const govTokensTotalAprTooltip = govTokensAprs ? Object.keys(govTokensAprs).map( govToken => {\n      const apr = govTokensAprs[govToken];\n      if (apr.gt(0)){\n        return `${govToken}: ${apr.toFixed(2)}%`;\n      }\n      return null;\n    }).filter(v => (v !== null)) : null;\n\n    /*\n    const govTokensDistributionTooltip = govTokensUserDistribution ? Object.keys(govTokensUserDistribution).map( govToken => {\n      const speed = govTokensUserDistribution[govToken];\n      if (speed.gt(0)){\n        const distributionFrequency = this.functionsUtil.getGlobalConfig(['govTokens',govToken,'distributionFrequency']);\n        return `+${speed.toFixed(4)} ${govToken}/${distributionFrequency}`;\n      }\n      return null;\n    }).filter(v => (v !== null)) : null;\n    */\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '-') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    this.setState({\n      govTokensAprs,\n      aggregatedValues,\n      govTokensTotalApr,\n      govTokensUserBalance,\n      govTokensTotalBalance,\n      govTokensTotalAprTooltip,\n      idleTokenUserDistribution,\n      govTokensTotalBalanceTooltip\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Text\n                          mt={2}\n                          fontWeight={2}\n                          fontSize={[1,2]}\n                          color={'cellText'}\n                        >\n                          {v.props.title}\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquity\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              chartToken={this.props.selectedToken}\n              enabledTokens={[this.props.selectedToken]}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLent',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:this.props.theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPerc',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.govTokensTotalBalanceTooltip && this.state.govTokensTotalBalanceTooltip.length>0 && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      this.state.govTokensTotalBalanceTooltip.map((govTokenBalance,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          mt={govTokenIndex ? 1 : 0}\n                          key={`govToken_${govTokenIndex}`}\n                        >\n                          {govTokenBalance}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                )/* : this.state.govTokensUserBalance && Object.keys(this.state.govTokensUserBalance).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + ${this.state.govTokensTotalBalance.toFixed(4)}\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalBalanceTooltip.join(' / ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Fees\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'feesCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'apy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.idleTokenUserDistribution && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      mt={1}\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      {this.state.idleTokenUserDistribution.toFixed(4)} {this.idleGovToken.tokenName}/{this.idleGovToken.tokenConfig.distributionFrequency}\n                    </Text>\n                  </Flex>\n                )\n                /*\n                this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length===1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      Object.keys(this.state.govTokensAprs).map((govToken,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          ml={govTokenIndex ? 2 : 0}\n                          key={`govToken_${govToken}`}\n                        >\n                          {this.state.govTokensAprs[govToken].toFixed(2)}% {govToken}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                ) : this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + {this.state.govTokensTotalApr.toFixed(2)}%\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalAprTooltip.join('; ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Risk Score\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'score',\n                  props:{\n                    decimals:1,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverview;","import React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Icon, Checkbox, Box, Link, Input, Tooltip } from \"rimble-ui\";\n\nclass CurveRedeem extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    tokenConfig:null,\n    unevenAmounts:null,\n    selectedToken:null,\n    availableTokens:null,\n    buttonDisabled:false,\n    showMaxSlippage:false,\n    redeemUnderlying:true,\n    curveTokenConfig:null,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    curveTokensAmounts:null,\n    fastBalanceSelector:null,\n    redeemUnevenAmounts:false,\n    curveRedeemableIdleTokens:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.initToken();\n  }\n\n  showMaxSlippage(){\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  async calculateSlippage(max_slippage=null){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (!inputValue || inputValue.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    let withdrawSlippage = null;\n    let curveTokensAmounts = null;\n    let curveIdleTokensAmounts = null;\n    if (this.state.redeemUnevenAmounts){\n      [\n        curveTokensAmounts,\n        curveIdleTokensAmounts\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokensAmounts(this.props.account,normalizedAmount,true),\n        this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,normalizedAmount)\n      ]);\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false,curveIdleTokensAmounts);\n    } else {\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false);\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const redeemableBalance = inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.times(100).plus(this.state.maxSlippage || this.functionsUtil.BNify(0)).div(100)));\n      curveTokensAmounts = {};\n      curveTokensAmounts[this.state.selectedToken] = redeemableBalance;\n    }\n\n    if (withdrawSlippage){\n      withdrawSlippage = withdrawSlippage.times(100);\n    }\n\n    this.setState({\n      withdrawSlippage,\n      curveTokensAmounts,\n      curveIdleTokensAmounts\n    });\n\n    // Add max slippage but don't save in state\n    if (withdrawSlippage && max_slippage){\n      withdrawSlippage = withdrawSlippage.plus(max_slippage);\n    }\n\n    return withdrawSlippage;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.tokenConfig.idle.token !== this.props.tokenConfig.idle.token;\n    if (tokenChanged){\n      await this.initToken();\n    }\n\n    const redeemUnevenAmountsChanged = prevState.redeemUnevenAmounts !== this.state.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    const inputChanged = prevState.inputValue !== this.state.inputValue;\n    const maxSlippageChanged = parseFloat(prevState.maxSlippage) !== parseFloat(this.state.maxSlippage);\n    const tokenConfigChanged = JSON.stringify(prevState.tokenConfig) !== JSON.stringify(this.state.tokenConfig);\n    if (inputChanged || tokenConfigChanged || maxSlippageChanged){\n      this.calculateSlippage();\n    }\n\n    const selectedTokenChanged = prevState.selectedToken !== this.state.selectedToken;\n    if (selectedTokenChanged){\n      this.loadSelectedTokenConfig();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    let buttonDisabled = false;\n\n    // if (this.state.redeemUnevenAmounts){\n      buttonDisabled = !amount || amount.gt(this.state.curveTokenBalance);\n    // } else {\n      // buttonDisabled = !amount || amount.gt(this.state.redeemableBalance);\n    // }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    let inputValue = null;\n\n    // if (this.state.redeemUnevenAmounts){\n    inputValue = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n    // } else {\n      // inputValue = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n    // }\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  selectDestinationToken(selectedToken){\n    this.setState({\n      selectedToken\n    });\n  }\n\n  async loadSelectedTokenConfig(){\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const tokenConfig = this.state.availableTokens[this.state.selectedToken];\n    const curveTokenConfig = curveConfig.availableTokens[tokenConfig.idle.token];\n    this.setState({\n      tokenConfig,\n      curveTokenConfig\n    });\n  }\n\n  async initToken(){\n    const [curvePoolContract,curveSwapContract] = await Promise.all([\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract()\n    ]);\n\n    const [\n      curveTokenPrice,\n      curveTokenBalance,\n      curveRedeemableIdleTokens,\n    ] = await Promise.all([\n      this.functionsUtil.getCurveTokenPrice(),\n      this.functionsUtil.getCurveTokenBalance(this.props.account),\n      this.functionsUtil.getCurveRedeemableIdleTokens(this.props.account)\n    ]);\n\n    const unevenAmounts = [];\n    const redeemableBalance = curveTokenBalance ? curveTokenBalance.times(curveTokenPrice) : this.functionsUtil.BNify(0);\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();;\n    const selectedToken = Object.keys(availableTokens)[0];\n\n    this.setState({\n      selectedToken,\n      unevenAmounts,\n      curveTokenPrice,\n      availableTokens,\n      curvePoolContract,\n      curveSwapContract,\n      curveTokenBalance,\n      redeemableBalance,\n      curveRedeemableIdleTokens\n    });\n  }\n\n  async redeem(){\n\n    if (!this.state.curveTokenBalance){\n      return false;\n    }\n\n    const callbackRedeem = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveRedeem`,\n        eventAction: this.props.selectedToken,\n        eventValue: this.state.curveTokenBalance.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackRedeem === 'function' && txSucceeded){\n        this.props.callbackRedeem(tx);\n      }\n    };\n\n    const callbackReceiptRedeem = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.curveSwapContract.name;\n    const withdrawSlippage = await this.calculateSlippage(this.state.maxSlippage);\n    const max_slippage = this.functionsUtil.BNify(this.state.maxSlippage).div(100);\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    // const curveTokenBalance = this.functionsUtil.normalizeTokenAmount(this.state.curveTokenBalance,this.state.curvePoolContract.decimals);\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    if (this.state.redeemUnevenAmounts){\n      const min_amounts = this.state.redeemUnderlying ? await this.functionsUtil.getCurveTokensAmounts(this.props.account,_amount,false,true) : await this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,_amount,max_slippage);\n      console.log('remove_liquidity',_amount.toString(),min_amounts);\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    } else {\n      const coin_index = this.state.curveTokenConfig.migrationParams.coinIndex;\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.div(100))),this.state.tokenConfig.decimals);\n      // const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.minus(inputValue.times(withdrawSlippage.div(100))),this.state.curveTokenConfig.decimals);\n      // let _token_amount = await this.functionsUtil.getCurveTokenAmount(amounts,false);\n      // _token_amount = this.functionsUtil.BNify(_token_amount).isGreaterThan(curveTokenBalance) ? curveTokenBalance : this.functionsUtil.BNify(_token_amount);\n\n      console.log('remove_liquidity_one_coin',_amount, coin_index, min_amount);\n\n      // debugger;\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_one_coin', [_amount, coin_index, min_amount, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    }\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  getFastBalanceSelector(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n\n  render() {\n\n    const showSlippage = !this.state.buttonDisabled && this.state.withdrawSlippage;\n    const curveTokenName = this.functionsUtil.getGlobalConfig(['curve','poolContract','token']);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          {\n            !this.state.curveTokenBalance ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3,\n                  minHeight:'195px',\n                  style:{\n                    display:'flex',\n                    alignItems:'center',\n                    justifyContent:'center'\n                  }\n                }}\n              >\n                <FlexLoader\n                  flexProps={{\n                    flexDirection:'row'\n                  }}\n                  loaderProps={{\n                    size:'30px'\n                  }}\n                  textProps={{\n                    ml:2\n                  }}\n                  text={'Checking Curve Pool...'}\n                />\n              </DashboardCard>\n            ) : this.state.processing.loading ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3\n                }}\n              >\n                <Flex\n                  flexDirection={'column'}\n                >\n                  <TxProgressBar\n                    web3={this.props.web3}\n                    hash={this.state.processing.txHash}\n                    endMessage={`Finalizing redeem request...`}\n                    cancelTransaction={this.cancelTransaction.bind(this)}\n                    waitText={ this.props.waitText ? this.props.waitText : 'Redeem estimated in'}\n                  />\n                </Flex>\n              </DashboardCard>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    mb:2\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'1.8em'}\n                      color={'cellText'}\n                      name={'FileUpload'}\n                    />\n                    <Text\n                      mt={1}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Withdraw from the Curve Pool in a specific token or in uneven amounts of tokens (with no slippage).\n                    </Text>\n                    <Flex\n                      mt={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                    >\n                      <Checkbox\n                        required={false}\n                        label={`Redeem with no slippage`}\n                        checked={this.state.redeemUnevenAmounts}\n                        onChange={ e => this.toggleUnevenAmounts(e.target.checked) }\n                      />\n                      <Tooltip\n                        placement={'top'}\n                        message={`You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.`}\n                      >\n                        <Icon\n                          size={'1em'}\n                          color={'cellTitle'}\n                          name={\"InfoOutline\"}\n                        />\n                      </Tooltip>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n                {\n                  !this.state.redeemUnevenAmounts/* && (!this.props.selectedToken || (this.state.showMaxSlippage && showSlippage))*/ && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      {\n                        this.state.tokenConfig && \n                          <Box\n                            width={1}\n                          >\n                            <Text\n                              mb={1}\n                            >\n                              Select destination token:\n                            </Text>\n                            <AssetSelector\n                              {...this.props}\n                              id={'token-from'}\n                              showBalance={false}\n                              tokenConfig={this.state.tokenConfig}\n                              selectedToken={this.state.selectedToken}\n                              availableTokens={this.state.availableTokens}\n                              onChange={this.selectDestinationToken.bind(this)}\n                            />\n                          </Box>\n                      }\n                    </Box>\n                  )\n                }\n                {\n                  this.state.curveTokensAmounts && !this.state.buttonDisabled && (\n                    <DashboardCard\n                      cardProps={{\n                        mt:1,\n                        mb:2,\n                        py:2,\n                        px:1\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Text\n                          mt={1}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          You will receive:\n                        </Text>\n                        <Flex\n                          mt={2}\n                          width={1}\n                          boxShadow={0}\n                          style={{\n                            flexWrap:'wrap'\n                          }}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                          >\n                            {\n                              Object.keys(this.state.curveTokensAmounts).map( token => {\n                                const balance = this.state.curveTokensAmounts[token];\n                                return (\n                                  <Flex\n                                    mb={1}\n                                    mx={1}\n                                    width={'auto'}\n                                    flexDirection={'row'}\n                                    key={`tokenBalance_${token}`}\n                                    justifyContent={'flex-start'}\n                                  >\n                                    <AssetField\n                                      token={token}\n                                      tokenConfig={{\n                                        token:token\n                                      }}\n                                      fieldInfo={{\n                                        name:'icon',\n                                        props:{\n                                          mr:1,\n                                          width:['1.4em','1.6em'],\n                                          height:['1.4em','1.6em']\n                                        }\n                                      }}\n                                    />\n                                    <SmartNumber\n                                      ml={1}\n                                      fontSize={[0,1]}\n                                      fontWeight={500}\n                                      maxPrecision={4}\n                                      color={'cellText'}\n                                      number={balance.toString()}\n                                    />\n                                  </Flex>\n                                );\n                            })\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n                {\n                  this.state.showMaxSlippage && showSlippage && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Text>\n                          Choose max slippage:\n                        </Text>\n                        <Tooltip\n                          placement={'top'}\n                          message={`Max additional slippage on top of the one shown below`}\n                        >\n                          <Icon\n                            ml={1}\n                            size={'1em'}\n                            color={'cellTitle'}\n                            name={\"InfoOutline\"}\n                          />\n                        </Tooltip>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        {\n                          [0.2,0.5,1,5].map( slippage => (\n                            <FastBalanceSelector\n                              cardProps={{\n                                p:1\n                              }}\n                              textProps={{\n                                fontSize:1\n                              }}\n                              percentage={slippage}\n                              key={`selector_${slippage}`}\n                              onMouseDown={()=>this.setMaxSlippage(slippage)}\n                              isActive={this.state.maxSlippage === parseFloat(slippage)}\n                            />\n                          ))\n                        }\n                      </Flex>\n                    </Box>\n                  )\n                }\n                <Flex\n                  mb={3}\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  <Flex\n                    mb={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'flex-end'}\n                  >\n                    {\n                      showSlippage && (\n                        <Flex\n                          width={1}\n                          maxWidth={'40%'}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            textAlign={'right'}\n                            style={{\n                              whiteSpace:'nowrap'\n                            }}\n                            color={ parseFloat(this.state.withdrawSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                          >\n                            {\n                              parseFloat(this.state.withdrawSlippage.toFixed(3)) === 0 ?\n                                'No Slippage'\n                              : `${ this.state.withdrawSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.withdrawSlippage.abs().toFixed(3)}%`\n                            }\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={ this.state.redeemUnevenAmounts ? `You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.` : this.state.withdrawSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                          {\n                            !this.state.redeemUnevenAmounts &&\n                              <Link\n                                ml={1}\n                                color={'copyColor'}\n                                hoverColor={'primary'}\n                                onClick={this.showMaxSlippage.bind(this)}\n                              >\n                                change\n                              </Link>\n                          }\n                        </Flex>\n                      )\n                    }\n                    <Flex\n                      width={1}\n                      maxWidth={'60%'}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      justifyContent={'flex-end'}\n                    >\n                      <Link\n                        fontSize={1}\n                        fontWeight={3}\n                        color={'dark-gray'}\n                        textAlign={'right'}\n                        hoverColor={'copyColor'}\n                        onClick={ (e) => this.setFastBalanceSelector(100) }\n                        style={{\n                          maxWidth:'100%',\n                          overflow:'hidden',\n                          whiteSpace:'nowrap',\n                          textOverflow:'ellipsis'\n                        }}\n                      >\n                        {this.state.curveTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {curveTokenName}\n                      </Link>\n                    </Flex>\n                  </Flex>\n                  <Input\n                    min={0}\n                    type={\"number\"}\n                    required={true}\n                    height={'3.4em'}\n                    borderRadius={2}\n                    fontWeight={500}\n                    boxShadow={'none !important'}\n                    placeholder={`Insert amount`}\n                    onChange={this.changeInputValue.bind(this)}\n                    border={`1px solid ${this.props.theme.colors.divider}`}\n                    value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                  />\n                  <Flex\n                    mt={2}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      [25,50,75,100].map( percentage => (\n                        <FastBalanceSelector\n                          percentage={percentage}\n                          key={`selector_${percentage}`}\n                          onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                          isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                        />\n                      ))\n                    }\n                  </Flex>\n                </Flex>\n                <Flex\n                  justifyContent={'center'}\n                >\n                  <RoundButton\n                    buttonProps={{\n                      mt:2,\n                      width:[1,1/2],\n                      disabled:this.state.buttonDisabled\n                    }}\n                    handleClick={this.redeem.bind(this)}\n                  >\n                    Redeem\n                  </RoundButton>\n                </Flex>\n              </Flex>\n            )\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveRedeem;","import React, { Component } from 'react';\nimport {\n  Button,\n  Flex,\n  Box,\n  Text\n} from \"rimble-ui\";\nimport styles from './TwitterShareButton.module.scss';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass TwitterShareButton extends Component {\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate() {\n    this.loadUtils();\n  }\n\n  share = () => {\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'Share',\n      eventAction: 'twitter',\n      eventLabel: this.props.parent\n    });\n\n    const w = Math.min(window.innerWidth,600);\n    const h = 350;\n    const x = (window.innerWidth-w)/2;\n    const y = 150;\n    window.open(`https://twitter.com/intent/tweet?text=${this.props.tweet}`,\"_blank\",`toolbar=yes,scrollbars=no,resizable=no,top=${y},left=${x},width=${w},height=${h}`);\n  }\n\n  render() {\n    return (\n        <Button\n          borderRadius={1}\n          mainColor={'#2aa6f2'}\n          contrastColor={'white'}\n          onClick={ e => { this.share() } }\n        >\n          <Flex flexDirection={'row'} alignItems={'center'} justifyContent={'center'}>\n            <Box className={styles.twitterIcon} />\n            <Text color={'white'} fontWeight={3} ml={2}>{ this.props.text ? this.props.text : 'Tweet' }</Text>\n          </Flex>\n        </Button>\n    );\n  }\n}\n\nexport default TwitterShareButton;\n","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Link,\n  Flex\n} from \"rimble-ui\";\nimport ModalCard from './ModalCard';\nimport TwitterShareButton from '../../TwitterShareButton/TwitterShareButton.js';\nimport Confetti from 'react-confetti/dist/react-confetti';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass ShareModal extends React.Component {\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate() {\n    this.loadUtils();\n  }\n\n  closeModal = async (action) => {\n    const globalConfigs = this.functionsUtil.getGlobalConfigs();\n    // Send Google Analytics event\n    if (globalConfigs.analytics.google.events.enabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'Share',\n        eventAction: action,\n        eventLabel: 'ShareModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n    const tweet = window.escape(this.props.tweet);\n    const customText = {__html: this.props.text};\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          {\n            this.props.confettiEnabled &&\n            <Confetti\n              style={{ position: 'fixed','zIndex':9999 }}\n              run={true}\n              recycle={true}\n              width={window.innerWidth}\n              height={window.innerHeight}\n            />\n          }\n          <ModalCard.Header title={this.props.title} icon={this.props.icon}></ModalCard.Header>\n          <ModalCard.Body>\n            <Flex my={3} width={1} flexDirection={'column'} mx={'auto'}>\n              <Text color={'dark-gray'} textAlign={'center'} fontSize={3} mb={2} dangerouslySetInnerHTML={customText}></Text>\n            </Flex>\n            <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n              <TwitterShareButton tweet={tweet} text={'Share now'} parent={'ShareModal'} />\n              <Link mt={2} onClick={ e => this.closeModal('continue_without_sharing') } hoverColor={'blue'}>continue without sharing</Link>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default ShareModal;","import Migrate from '../Migrate/Migrate';\nimport React, { Component } from 'react';\nimport styles from './DepositRedeem.module.scss';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport ConnectBox from '../ConnectBox/ConnectBox';\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport ShareModal from '../utilities/components/ShareModal';\nimport TransactionField from '../TransactionField/TransactionField';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Input, Box, Icon, Link, Checkbox, Tooltip, Image } from \"rimble-ui\";\n\nclass DepositRedeem extends Component {\n\n  state = {\n    txError:{},\n    tokenAPY:'-',\n    inputValue:{},\n    processing:{},\n    curveAPY:null,\n    canRedeem:false,\n    maxSlippage:0.2,\n    canDeposit:false,\n    action:'deposit',\n    directMint:false,\n    activeModal:null,\n    showBuyFlow:false,\n    unlentBalance:null,\n    tokenApproved:false,\n    skipMigration:false,\n    showRedeemFlow:false,\n    contractPaused:false,\n    buttonDisabled:false,\n    canRedeemCurve:false,\n    showMaxSlippage:false,\n    redeemGovTokens:false,\n    canDepositCurve:false,\n    fastBalanceSelector:{},\n    actionProxyContract:{},\n    migrationEnabled:false,\n    componentMounted:false,\n    curveTokenBalance:null,\n    redeemCurveEnabled:false,\n    depositCurveBalance:null,\n    depositCurveEnabled:true,\n    showAdvancedOptions:false,\n    depositCurveSlippage:null,\n    showETHWrapperEnabled:false,\n    metaTransactionsEnabled:true\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadProxyContracts();\n  }\n\n  async componentDidMount(){\n\n  }\n\n  setShowRedeemFlow = (showRedeemFlow) => {\n    this.setState({\n      showRedeemFlow\n    });\n  }\n\n  setShowBuyFlow = (showBuyFlow) => {\n    this.setState({\n      showBuyFlow\n    });\n  }\n\n  toggleShowAdvancedOptions = showAdvancedOptions => {\n    this.setState((prevState) => ({\n      showAdvancedOptions:!prevState.showAdvancedOptions\n    }));\n  }\n\n  toggleSkipMigration = skipMigration => {\n    this.setState({\n      skipMigration\n    });\n  }\n\n  toggleRedeemCurve = redeemCurveEnabled => {\n    this.setState({\n      redeemCurveEnabled\n    });\n  }\n\n  toggleDepositCurve = depositCurveEnabled => {\n    this.setState({\n      depositCurveEnabled\n    });\n  }\n\n  toggleShowETHWrapper = showETHWrapperEnabled => {\n    this.setState({\n      showETHWrapperEnabled\n    });\n  }\n\n  toggleSkipMint = (directMint) => {\n    this.setState({\n      directMint\n    });\n  }\n\n  toggleRedeemGovTokens = (redeemGovTokens) => {\n    this.setState({\n      redeemGovTokens\n    });\n  }\n\n  toggleMetaTransactionsEnabled = (metaTransactionsEnabled) => {\n    this.setState({\n      metaTransactionsEnabled\n    });\n  }\n\n  async loadProxyContracts(){\n    const actions = ['deposit','redeem'];\n    const newState = {\n      actionProxyContract:{}\n    };\n\n    await this.functionsUtil.asyncForEach(actions,async (action) => {\n      const mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'proxyContract']);\n      const hasProxyContract = mintProxyContractInfo && mintProxyContractInfo.enabled;\n      newState.actionProxyContract[action] = hasProxyContract ? mintProxyContractInfo : null;\n      if (hasProxyContract){\n        const proxyContract = await this.props.initContract(mintProxyContractInfo.name,mintProxyContractInfo.address,mintProxyContractInfo.abi);\n        newState.actionProxyContract[action].contract = proxyContract.contract;\n        newState.actionProxyContract[action].approved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,mintProxyContractInfo.address,this.props.account);\n      }\n    });\n\n    this.setState(newState);\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadAPY(){\n    const tokenAprs = await this.functionsUtil.getTokenAprs(this.props.tokenConfig);\n    if (tokenAprs && tokenAprs.avgApy !== null){\n      const tokenAPY = this.functionsUtil.BNify(tokenAprs.avgApy).toFixed(2);\n\n      let curveAPY = null;\n      if (this.state.canDepositCurve){\n        curveAPY = await this.functionsUtil.getCurveAPY();\n        // console.log('curveAPY',curveAPY);\n        if (curveAPY){\n          curveAPY = curveAPY.plus(tokenAPY);\n        }\n      }\n      this.setState({\n        tokenAPY,\n        curveAPY\n      });\n    }\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    if (this.props.tokenBalance === null){\n      return false;\n    }\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const tokenBalanceChanged = prevProps.tokenBalance !== this.props.tokenBalance && this.props.tokenBalance !== null;\n\n    if (tokenChanged || tokenBalanceChanged){\n      await this.loadProxyContracts();\n      this.loadTokenInfo();\n      return false;\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n\n    if (actionChanged || fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const redeemGovTokensChanged = prevState.redeemGovTokens !== this.state.redeemGovTokens;\n    if (redeemGovTokensChanged || actionChanged){\n      this.checkButtonDisabled();\n    }\n\n    const depositCurveChanged = prevState.depositCurveEnabled !== this.state.depositCurveEnabled;\n    const metaTransactionsChanged = prevState.metaTransactionsEnabled !== this.state.metaTransactionsEnabled;\n    if (metaTransactionsChanged || depositCurveChanged){\n      const tokenApproved = await this.checkTokenApproved();\n      this.setState({\n        tokenApproved\n      });\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateCurveSlippage();\n    }\n  }\n\n  async calculateCurveSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,curvePoolContractInfo.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositCurveBalance = amount;\n        newState.depositCurveSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      case 'redeem':\n        // newState.redeemBalance = amount;\n        // newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateCurveSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  approveContract = async (callbackApprove,callbackReceiptApprove) => {\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      this.functionsUtil.enableERC20(this.props.selectedToken,curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n    } else {\n      const proxyContract = this.state.actionProxyContract[this.state.action];\n      if (proxyContract && this.state.metaTransactionsEnabled && this.props.biconomy){\n        this.functionsUtil.enableERC20(this.props.selectedToken,proxyContract.address,callbackApprove,callbackReceiptApprove);\n      } else {\n        this.functionsUtil.enableERC20(this.props.selectedToken,this.props.tokenConfig.idle.address,callbackApprove,callbackReceiptApprove);\n      }\n    }\n  }\n\n  checkTokenApproved = async () => {\n\n    let tokenApproved = false;\n\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,curveDepositContract.address,this.props.account);\n    } else {\n      const proxyContract = this.state.actionProxyContract[this.state.action];\n      if (proxyContract && this.state.metaTransactionsEnabled && this.props.biconomy){\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,proxyContract.address,this.props.account);\n      } else {\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,this.props.tokenConfig.idle.address,this.props.account);\n      }\n    }\n\n    return tokenApproved;\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = await this.checkTokenApproved();\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.approveContract(callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  loadTokenInfo = async () => {\n\n    if (this.state.componentMounted){\n      this.setState({\n        componentMounted:false\n      });\n    }\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token]);\n    const curveTokenEnabled = curveConfig.enabled && curveTokenConfig && curveTokenConfig.enabled;\n\n    const [\n      tokenApproved,\n      contractPaused,\n      curveSwapContract,\n      curveDepositContract,\n      unlentBalance,\n      {migrationEnabled},\n      curveTokenBalance,\n    ] = await Promise.all([\n      this.checkTokenApproved(),\n      this.functionsUtil.checkContractPaused(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract(),\n      this.functionsUtil.getUnlentBalance(this.props.tokenConfig),\n      this.functionsUtil.checkMigration(this.props.tokenConfig,this.props.account),\n      curveTokenEnabled ? this.functionsUtil.getCurveTokenBalance(this.props.account) : null\n    ]);\n\n    const canDeposit = this.props.tokenBalance && this.functionsUtil.BNify(this.props.tokenBalance).gt(0);\n    const canRedeem = this.props.idleTokenBalance && this.functionsUtil.BNify(this.props.idleTokenBalance).gt(0);\n\n    const canDepositCurve = curveTokenEnabled && canDeposit;\n    const depositCurveEnabled = canDepositCurve;\n\n    const showETHWrapperEnabled = this.state.showETHWrapperEnabled || !canDeposit;\n\n    const canRedeemCurve = curveTokenEnabled && curveTokenBalance && curveTokenBalance.gt(0);\n    const redeemCurveEnabled = canRedeemCurve;\n\n    const newState = {...this.state};\n\n    // Check curve deposit enabled\n    if (newState.depositCurveEnabled && !curveTokenEnabled){\n      newState.depositCurveEnabled = false;\n    }\n    \n    newState.canRedeem = canRedeem;\n    newState.canDeposit = canDeposit;\n    newState.unlentBalance = unlentBalance;\n    newState.tokenApproved = tokenApproved;\n    newState.contractPaused = contractPaused;\n    newState.canRedeemCurve = canRedeemCurve;\n    newState.canDepositCurve = canDepositCurve;\n    newState.migrationEnabled = migrationEnabled;\n    newState.curveTokenBalance = curveTokenBalance;\n    newState.curveSwapContract = curveSwapContract;\n    newState.redeemCurveEnabled = redeemCurveEnabled;\n    newState.depositCurveEnabled = depositCurveEnabled;\n    newState.curveDepositContract = curveDepositContract;\n    newState.showETHWrapperEnabled = showETHWrapperEnabled;\n\n    newState.txError = {\n      redeem:false,\n      deposit:false\n    };\n    newState.processing = {\n      redeem:{\n        txHash:null,\n        loading:false\n      },\n      deposit:{\n        txHash:null,\n        loading:false\n      },\n      approve:{\n        txHash:null,\n        loading:false\n      },\n      boost:{\n        txHash:null,\n        loading:false\n      }\n    };\n    newState.inputValue = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n    newState.fastBalanceSelector = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n\n    newState.componentMounted = true;\n\n    this.setState(newState,() => {\n      this.checkAction();\n      this.loadAPY();\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const redeemGovTokens = this.state.redeemGovTokens;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    let loading = true;\n\n    switch (this.state.action){\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        if (!this.state.tokenApproved){\n          return this.approveToken();\n        }\n\n        if (localStorage){\n          this.functionsUtil.setLocalStorage('redirectToFundsAfterLogged',0);\n        }\n\n        this.setState({\n          lendingProcessing: this.props.account,\n          lendAmount: '',\n          genericError: '',\n        });\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.props.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if (this.state.metaTransactionsEnabled && txError){\n            this.setState({\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n        const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n        // Handle Curve Deposit\n        if (curveTokenEnabled && this.state.depositCurveEnabled){\n\n          const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,curvePoolContractInfo.decimals);\n\n          const amounts = await this.functionsUtil.getCurveAmounts(this.props.tokenConfig.idle.token,tokensToDeposit);\n          let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n          if (this.state.maxSlippage){\n            minMintAmount = this.functionsUtil.BNify(minMintAmount);\n            minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n            minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n          }\n          \n          const depositParams = [amounts,minMintAmount];\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, callbackDeposit, callbackReceiptDeposit);\n        } else {\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n\n          const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']);\n          // const gasLimitDeposit = this.functionsUtil.BNify(1000000);\n          let depositParams = [];\n\n          // Use Proxy Contract if enabled\n          const mintProxyContractInfo = this.state.actionProxyContract[this.state.action];\n          if (depositMetaTransactionsEnabled && mintProxyContractInfo && this.props.biconomy && this.state.metaTransactionsEnabled){\n            const mintProxyContract = this.state.actionProxyContract[this.state.action].contract;\n            depositParams = [tokensToDeposit, this.props.tokenConfig.idle.address];\n            // console.log('mintProxyContract',mintProxyContractInfo.function,depositParams);\n            if (this.state.metaTransactionsEnabled){\n              const functionSignature = mintProxyContract.methods[mintProxyContractInfo.function](...depositParams).encodeABI();\n              contractSendResult = await this.functionsUtil.sendBiconomyTxWithPersonalSign(mintProxyContractInfo.name, functionSignature, callbackDeposit, callbackReceiptDeposit);\n            } else {\n              contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n            }\n          // Use main contract if no proxy contract exists\n          } else {\n            let _skipMint = !this.state.directMint && this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMint']);\n            _skipMint = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : _skipMint;\n\n            // Mint if someone mint over X amount\n            if (_skipMint){\n              // Check minAmountForMint\n              if (this.props.tokenConfig.deposit && this.props.tokenConfig.deposit.minAmountForMint){\n                const isRisk = this.props.selectedStrategy === 'risk';\n                const convertedAmount = await this.functionsUtil.convertTokenBalance(inputValue,this.props.selectedToken,this.props.tokenConfig,isRisk);\n                if (convertedAmount.gte(this.props.tokenConfig.deposit.minAmountForMint)){\n                  _skipMint = false;\n                }\n              } else {\n                let [\n                  maxUnlentPerc,\n                  totalAUM\n                ] = await Promise.all([\n                  this.functionsUtil.genericContractCall('idleDAIYield', 'maxUnlentPerc'),\n                  this.functionsUtil.loadAssetField('pool',this.props.selectedToken,this.props.tokenConfig,this.props.account)\n                ]);\n\n                if (maxUnlentPerc && totalAUM){\n                  const depositPerc = inputValue.div(totalAUM).times(100);\n                  maxUnlentPerc = this.functionsUtil.BNify(maxUnlentPerc).div(1e3);\n                  if (depositPerc.gte(maxUnlentPerc.times(2))){\n                    _skipMint = false;\n                  }\n                  // console.log(maxUnlentPerc.toFixed(5),inputValue.toFixed(5),totalAUM.toFixed(5),depositPerc.toFixed(5),depositPerc.gte(maxUnlentPerc.times(2)),_skipMint);\n                }\n              }\n            }\n\n            // console.log('skipMint',_skipMint);\n\n            depositParams = [tokensToDeposit, _skipMint, '0x0000000000000000000000000000000000000000'];\n            contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'mintIdleToken', depositParams, callbackDeposit, callbackReceiptDeposit);\n          }\n        }\n      break;\n      case 'redeem':\n\n        if (redeemGovTokens){\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_gov`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: 0\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', [0], callbackRedeem, callbackReceiptRedeem);\n          \n        } else {\n\n          if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n            return false;\n          }\n\n          const txData = {\n            value:this.functionsUtil.BNify(inputValue)\n          };\n\n          let idleTokenToRedeem = null;\n          if (selectedPercentage){\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage);\n          } else {\n            const idleTokenPrice = await this.functionsUtil.genericContractCall(this.props.tokenConfig.idle.token, 'tokenPrice');\n            idleTokenToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals)).div(idleTokenPrice);\n          }\n\n          // Normalize number\n          idleTokenToRedeem = this.functionsUtil.normalizeTokenAmount(idleTokenToRedeem,18);\n\n          if (!idleTokenToRedeem){\n            return false;\n          }\n\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_partial`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: parseInt(inputValue)\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          let redeemParams = [idleTokenToRedeem];\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', redeemParams, callbackRedeem, callbackReceiptRedeem, txData);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    if (contractSendResult !== false){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  showMaxSlippage = () => {\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  checkAction = () => {\n    let action = this.state.action;\n\n    switch(action){\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = 'deposit';\n        }\n      break;\n      default:\n      break;\n    }\n\n    if (action !== this.state.action){\n      this.setState({\n        action\n      },() => {\n        this.checkButtonDisabled();\n      });\n    } else {\n      this.checkButtonDisabled();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.props.tokenBalance));\n      break;\n      case 'redeem':\n        buttonDisabled = !this.state.canRedeemCurve && !this.state.redeemGovTokens && ( buttonDisabled || (amount && amount.gt(this.props.redeemableBalance)) );\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.props.tokenBalance ? this.functionsUtil.BNify(this.props.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        amount = this.props.redeemableBalance ? this.functionsUtil.BNify(this.props.redeemableBalance).times(selectedPercentage) : null;\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  changeInputValue = (e) => {\n    if (!this.state.action){\n      return false;\n    }\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem && !this.state.canRedeemCurve){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const govTokensDisabled = this.props.tokenConfig.govTokensDisabled;\n    const govTokensEnabled = this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'govTokensEnabled']);\n    const skipMintForDepositEnabled = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : true;\n    const skipMintCheckboxEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMintCheckboxEnabled']) && skipMintForDepositEnabled;\n\n    const redeemGovTokenEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','redeemGovTokens','enabled']) && !govTokensDisabled && govTokensEnabled;\n    const redeemGovTokens = redeemGovTokenEnabled && this.state.redeemGovTokens && this.state.action === 'redeem';\n\n    const metaTransactionsAvailable = this.props.biconomy && this.state.actionProxyContract[this.state.action];\n    const useMetaTx = metaTransactionsAvailable && this.state.metaTransactionsEnabled;\n    const totalBalance = this.state.action === 'deposit' ? this.props.tokenBalance : this.props.redeemableBalance;\n    const migrateText = this.state.migrationEnabled && this.props.tokenConfig.migration.message !== undefined ? this.props.tokenConfig.migration.message : null;\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n    const depositCurve = curveTokenEnabled && this.state.depositCurveEnabled && this.state.action === 'deposit';\n\n    const showDepositOptions = this.state.action === 'deposit' && !this.state.contractPaused && (curveTokenEnabled || this.state.tokenApproved);\n\n    const showDepositCurve = showDepositOptions && curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canDepositCurve && this.state.action === 'deposit';\n    const showRedeemCurve = curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canRedeemCurve && this.state.action === 'redeem';\n\n    const showRedeemFlow = this.state.canRedeem && (!this.state.redeemCurveEnabled || this.state.showRedeemFlow);\n\n    const showCurveSlippage = depositCurve && this.state.depositCurveSlippage && this.state.depositCurveBalance && !this.state.buttonDisabled;\n\n    const showRebalanceOption = showDepositOptions && this.state.canDeposit && skipMintCheckboxEnabled && this.state.action === 'deposit';\n    const showAdvancedDepositOptions = showDepositCurve || showRebalanceOption;\n\n    const batchDepositInfo = this.functionsUtil.getGlobalConfig(['tools','batchDeposit']);\n    const batchDepositEnabled = batchDepositInfo.enabled && typeof batchDepositInfo.props.availableTokens[this.props.tokenConfig.idle.token] !== 'undefined';\n    const batchDepositDepositEnabled = batchDepositInfo.depositEnabled;\n\n    const showBatchDeposit = batchDepositEnabled && batchDepositDepositEnabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const ethWrapperInfo = this.functionsUtil.getGlobalConfig(['tools','ethWrapper']);\n    const ETHWrapperComponent = ethWrapperInfo.subComponent;\n    const showETHWrapper = this.props.selectedToken === 'WETH' && ethWrapperInfo.enabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const canPerformAction = /*!depositCurve && !this.state.redeemCurveEnabled && */((this.state.action === 'deposit' && this.state.canDeposit) || (this.state.action === 'redeem' && this.state.canRedeem) || redeemGovTokens) && (!this.state.showETHWrapperEnabled || this.state.action === 'redeem');\n    const showActionFlow = !redeemGovTokens && canPerformAction;\n\n    const showBuyFlow = this.state.componentMounted && (!showDepositCurve || this.state.showBuyFlow) && !this.state.depositCurveEnabled && this.state.tokenApproved && !this.state.contractPaused && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.action === 'deposit' && !this.state.canDeposit && !this.state.showETHWrapperEnabled;\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          <Box\n            width={1}\n          >\n            <Text mb={1}>\n              Select your asset:\n            </Text>\n            <AssetSelector\n              {...this.props}\n            />\n          </Box>\n          <Migrate\n            {...this.props}\n            migrateTextBefore={migrateText}\n            migrateText={migrateText !== null ? '' : null}\n            toggleSkipMigration={this.toggleSkipMigration.bind(this)}\n          >\n            {\n              !this.props.account ? (\n                <ConnectBox\n                  {...this.props}\n                />\n              ) :\n              this.state.componentMounted ? (\n                this.state.action ? (\n                  <Box width={1}>\n                    <Flex\n                      mt={2}\n                      flexDirection={'column'}\n                    >\n                      <Text mb={2}>\n                        Choose the action:\n                      </Text>\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('deposit');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'deposit' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'deposit'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:3\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Deposit\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('redeem');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'redeem' }\n                          isDisabled={ !this.state.canRedeem && !this.state.canRedeemCurve }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'redeem'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:3\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Redeem\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </Flex>\n                    {\n                      showAdvancedDepositOptions ? (\n                        <DashboardCard\n                          cardProps={{\n                            pt:2,\n                            px:2,\n                            mt:3,\n                            display:'flex',\n                            alignItems:'center',\n                            flexDirection:'column',\n                            justifyContent:'center',\n                            pb:this.state.showAdvancedOptions ? 3 : 2,\n                          }}\n                        >\n                          <Flex\n                            width={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <Link\n                              ml={1}\n                              mainColor={'primary'}\n                              hoverColor={'primary'}\n                              onClick={this.toggleShowAdvancedOptions}\n                            >\n                              { this.state.showAdvancedOptions ? 'Hide' : 'Show' } advanced options\n                            </Link>\n                            <Icon\n                              size={'1.8em'}\n                              color={'cellText'}\n                              name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                            />\n                          </Flex>\n                          {\n                            this.state.showAdvancedOptions &&\n                              <Flex\n                                mt={1}\n                                flexDirection={'column'}\n                              >\n                                {\n                                  showDepositCurve && \n                                    <Flex\n                                      alignItems={'center'}\n                                      justifyContent={'row'}\n                                    >\n                                      <Checkbox\n                                        required={false}\n                                        disabled={this.state.directMint}\n                                        label={`Deposit in the Curve Pool`}\n                                        checked={this.state.depositCurveEnabled}\n                                        onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                      />\n                                      <Link\n                                        mainColor={'primary'}\n                                        hoverColor={'primary'}\n                                        onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                      >\n                                        (read more)\n                                      </Link>\n                                    </Flex>\n                                }\n                                {\n                                  showRebalanceOption && \n                                    <Flex\n                                      alignItems={'center'}\n                                      justifyContent={'row'}\n                                    >\n                                      <Checkbox\n                                        required={false}\n                                        label={`Rebalance the pool`}\n                                        checked={this.state.directMint}\n                                        disabled={this.state.depositCurveEnabled}\n                                        onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                      />\n                                      <Tooltip\n                                        placement={'bottom'}\n                                        message={this.functionsUtil.getGlobalConfig(['messages','directMint'])}\n                                      >\n                                        <Icon\n                                          size={'1em'}\n                                          color={'cellTitle'}\n                                          name={\"InfoOutline\"}\n                                        />\n                                      </Tooltip>\n                                    </Flex>\n                                }\n                              </Flex>\n                          }\n                        </DashboardCard>\n                      ) : (\n                        <Flex\n                          width={1}\n                          flexDirection={'column'}\n                        >\n                          {\n                            showDepositCurve && (\n                              <Flex\n                                width={1}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <DashboardCard\n                                  isRainbow={true}\n                                  cardProps={{\n                                    py:3,\n                                    px:2,\n                                    mt:3,\n                                    display:'flex',\n                                    alignItems:'center',\n                                    flexDirection:'column',\n                                    justifyContent:'center',\n                                  }}\n                                >\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <Image\n                                      height={'1.8em'}\n                                      src={curveConfig.params.image}\n                                    />\n                                    <Text\n                                      mt={2}\n                                      px={2}\n                                      fontSize={1}\n                                      color={'dark-gray'}\n                                      textAlign={'center'}\n                                    >\n                                      Deposit your tokens in the Curve Pool and boost your APY up to {this.state.curveAPY ? this.state.curveAPY.toFixed(2) : '-'}%.\n                                      <Link\n                                        ml={1}\n                                        mainColor={'primary'}\n                                        hoverColor={'primary'}\n                                        onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                      >\n                                        Read More\n                                      </Link>\n                                    </Text>\n                                    <Checkbox\n                                      mt={2}\n                                      required={false}\n                                      label={`Deposit in Curve`}\n                                      checked={this.state.depositCurveEnabled}\n                                      onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                    />\n                                  </Flex>\n                                </DashboardCard>\n                                {\n                                  (!this.state.showBuyFlow && !this.state.depositCurveEnabled && !this.state.canDeposit) &&\n                                    <Link\n                                      textAlign={'center'}\n                                      hoverColor={'primary'}\n                                      onClick={ e => this.setShowBuyFlow(true) }\n                                    >\n                                      I just want to deposit more {this.props.selectedToken}\n                                    </Link>\n                                }\n                              </Flex>\n                            )\n                          }\n                          {\n                            showRebalanceOption && (\n                              <DashboardCard\n                                cardProps={{\n                                  py:3,\n                                  px:2,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    color={'cellText'}\n                                    name={'InfoOutline'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    px={2}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    By checking this flag you can rebalance the pool and help all users gain an additional APR\n                                  </Text>\n                                </Flex>\n                                <Checkbox\n                                  mt={2}\n                                  required={false}\n                                  label={`Rebalance the pool`}\n                                  checked={this.state.directMint}\n                                  onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                />\n                              </DashboardCard>\n                            )\n                          }\n                        </Flex>\n                      )\n                    }\n                    {\n                      (metaTransactionsAvailable && !showBuyFlow && !this.state.contractPaused) && \n                      <DashboardCard\n                        cardProps={{\n                          py:3,\n                          px:2,\n                          my:3,\n                          display:'flex',\n                          alignItems:'center',\n                          flexDirection:'column',\n                          justifyContent:'center',\n                        }}\n                      >\n                        {\n                          this.state.metaTransactionsEnabled && this.state.txError[this.state.action] && this.state.actionProxyContract[this.state.action].approved ? (\n                            <Flex\n                              width={1}\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <Icon\n                                size={'1.8em'}\n                                name={'Warning'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={1}\n                                fontSize={1}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                Seems like you are having some trouble with Meta-Transactions... Disable them by unchecking the box below and try again!\n                              </Text>\n                            </Flex>\n                          ) : this.functionsUtil.getWalletProvider() === 'WalletConnect' && this.state.metaTransactionsEnabled ? (\n                            <Flex\n                              width={1}\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <Icon\n                                size={'1.8em'}\n                                name={'Warning'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={1}\n                                fontSize={1}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                Please disable Meta-Transactions if you are using Argent Wallet to avoid failed transactions!\n                              </Text>\n                            </Flex>\n                          ) : (\n                            <Text\n                              mt={1}\n                              fontSize={1}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              Meta-Transactions are {this.state.metaTransactionsEnabled ? 'available' : 'disabled'} for {this.state.action}s!<br />\n                              {\n                                this.state.metaTransactionsEnabled && !this.state.actionProxyContract[this.state.action].approved && `Please either enable the Smart-Contract to enjoy gas-less ${this.state.action} or just disable meta-tx.`\n                              }\n                            </Text>\n                          )\n                        }\n                        <Checkbox\n                          mt={2}\n                          required={false}\n                          checked={this.state.metaTransactionsEnabled}\n                          onChange={ e => this.toggleMetaTransactionsEnabled(e.target.checked) }\n                          label={`${this.functionsUtil.capitalize(this.state.action)} with Meta-Transaction`}\n                        />\n                      </DashboardCard>\n                    }\n                    {\n                      showBatchDeposit ? (\n                        <Flex\n                          p={2}\n                          mt={3}\n                          width={1}\n                          borderRadius={2}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'center'}\n                          backgroundColor={'DashboardCard'}\n                          border={`1px solid ${this.props.theme.colors.primary}`}\n                        >\n                          <Link\n                            textAlign={'center'}\n                            hoverColor={'primary'}\n                            href={`/#/dashboard/tools/${batchDepositInfo.route}/${this.props.tokenConfig.idle.token}`}\n                          >\n                            Gas fees too high? Save gas with our Batch Deposit!\n                          </Link>\n                          <Icon\n                            ml={1}\n                            size={'1em'}\n                            color={'primary'}\n                            name={'LocalGasStation'}\n                          />\n                        </Flex>\n                      ) : showETHWrapper && (\n                        <Flex\n                          width={1}\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                          justifyContent={'center'}\n                        >\n                          <DashboardCard\n                            cardProps={{\n                              py:3,\n                              px:2,\n                              mt:3,\n                              display:'flex',\n                              alignItems:'center',\n                              flexDirection:'column',\n                              justifyContent:'center',\n                              pb:this.state.showAdvancedOptions ? 3 : 2,\n                            }}\n                          >\n                            <Flex\n                              alignItems={'center'}\n                              justifyContent={'row'}\n                            >\n                              <Checkbox\n                                required={false}\n                                checked={this.state.showETHWrapperEnabled}\n                                label={`Convert your ETH to WETH`}\n                                onChange={ e => this.toggleShowETHWrapper(e.target.checked) }\n                              />\n                            </Flex>\n                          </DashboardCard>\n                          {\n                            this.state.showETHWrapperEnabled && \n                              <ETHWrapperComponent\n                                {...this.props}\n                                fullWidth={true}\n                                depositOnly={true}\n                                toolProps={ethWrapperInfo.props}\n                              />\n                          }\n                        </Flex>\n                      )\n\n                        /*(\n                          <Flex\n                            p={2}\n                            mt={3}\n                            width={1}\n                            borderRadius={2}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                            backgroundColor={'DashboardCard'}\n                            border={`1px solid ${this.props.theme.colors.primary}`}\n                          >\n                            <Link\n                              textAlign={'center'}\n                              hoverColor={'primary'}\n                              href={`/#/dashboard/tools/${ethWrapperInfo.route}`}\n                            >\n                              Convert your ETH to WETH with a 1:1 ratio\n                            </Link>\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'primary'}\n                              name={'SwapHoriz'}\n                            />\n                          </Flex>\n                      )*/\n                    }\n                    {\n                      showRedeemCurve && this.state.canRedeem && (\n                        <Flex\n                          width={1}\n                          flexDirection={'column'}\n                          justifyContent={'center'}\n                        >\n                          <DashboardCard\n                            isRainbow={true}\n                            cardProps={{\n                              py:3,\n                              px:2,\n                              mt:3,\n                              display:'flex',\n                              alignItems:'center',\n                              flexDirection:'column',\n                              justifyContent:'center',\n                            }}\n                          >\n                            <Flex\n                              width={1}\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <Image\n                                height={'1.8em'}\n                                src={curveConfig.params.image}\n                              />\n                              <Text\n                                mt={2}\n                                px={2}\n                                fontSize={1}\n                                color={'dark-gray'}\n                                textAlign={'center'}\n                              >\n                                Redeem your tokens from the Curve Pool.\n                                <Link\n                                  ml={1}\n                                  mainColor={'primary'}\n                                  hoverColor={'primary'}\n                                  onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                >\n                                  Read More\n                                </Link>\n                              </Text>\n                              {\n                                this.state.canRedeem &&\n                                  <Checkbox\n                                    mt={2}\n                                    required={false}\n                                    label={`Redeem from Curve`}\n                                    checked={this.state.redeemCurveEnabled}\n                                    onChange={ e => this.toggleRedeemCurve(e.target.checked) }\n                                  />\n                              }\n                            </Flex>\n                          </DashboardCard>\n                          {\n                            this.canRedeem &&\n                              <Link\n                                textAlign={'center'}\n                                hoverColor={'primary'}\n                                onClick={ e => this.setShowRedeemFlow(true) }\n                              >\n                                I just want to redeem my {this.props.selectedToken}\n                              </Link>\n                          }\n                        </Flex>\n                      )\n                    }\n                    {\n                      (this.state.action === 'redeem' && this.state.unlentBalance && showRedeemFlow) &&\n                        <DashboardCard\n                          cardProps={{\n                            py:2,\n                            px:2,\n                            mt:3,\n                            display:'flex',\n                            alignItems:'center',\n                            flexDirection:'column',\n                            justifyContent:'center',\n                          }}\n                        >\n                          <Flex\n                            width={1}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Icon\n                              size={'1.8em'}\n                              color={'cellText'}\n                              name={'LocalGasStation'}\n                            />\n                            <Text\n                              px={2}\n                              fontSize={1}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              Available balance for Cheap Redeem\n                            </Text>\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                            >\n                              <Text\n                                fontSize={1}\n                                fontWeight={3}\n                                color={'dark-gray'}\n                                textAlign={'center'}\n                                hoverColor={'copyColor'}\n                              >\n                                {this.state.unlentBalance.toFixed(4)} {this.props.selectedToken}\n                              </Text>\n                              <Tooltip\n                                placement={'top'}\n                                message={this.functionsUtil.getGlobalConfig(['messages','cheapRedeem'])}\n                              >\n                                <Icon\n                                  ml={1}\n                                  size={'1em'}\n                                  color={'cellTitle'}\n                                  name={\"InfoOutline\"}\n                                />\n                              </Tooltip>\n                            </Flex>\n                          </Flex>\n                        </DashboardCard>\n                    }\n                    {\n                      (this.state.action === 'redeem' && redeemGovTokenEnabled && showRedeemFlow) && (\n                        <DashboardCard\n                          cardProps={{\n                            py:3,\n                            px:2,\n                            mt:3,\n                            display:'flex',\n                            alignItems:'center',\n                            flexDirection:'column',\n                            justifyContent:'center',\n                          }}\n                        >\n                          <Flex\n                            width={1}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Icon\n                              size={'1.8em'}\n                              color={'cellText'}\n                              name={'InfoOutline'}\n                            />\n                            <Text\n                              mt={1}\n                              px={2}\n                              fontSize={1}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              By redeeming your {this.props.selectedToken} you will automatically get also the proportional amount of governance tokens accrued{ this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~ $${this.props.govTokensBalance.toFixed(2)})` : null }.\n                            </Text>\n                          </Flex>\n                          <Checkbox\n                            mt={2}\n                            required={false}\n                            checked={this.state.redeemGovTokens}\n                            label={`Redeem governance tokens only`}\n                            onChange={ e => this.toggleRedeemGovTokens(e.target.checked) }\n                          />\n                        </DashboardCard>\n                      )\n                    }\n                    {\n                      (this.state.contractPaused && this.state.action === 'deposit') ? (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'1.8em'}\n                              name={'Warning'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={1}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              Deposits for {this.props.selectedToken} are temporarily unavailable due to Smart-Contract maintenance. Redeems are always available.\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      ) : (!this.state.tokenApproved && this.state.action === 'deposit' && !this.state.showETHWrapperEnabled) ? (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3\n                          }}\n                        >\n                          {\n                            this.state.processing['approve'] && this.state.processing['approve'].loading ? (\n                              <Flex\n                                flexDirection={'column'}\n                              >\n                                <TxProgressBar\n                                  web3={this.props.web3}\n                                  waitText={`Approve estimated in`}\n                                  endMessage={`Finalizing approve request...`}\n                                  hash={this.state.processing['approve'].txHash}\n                                  cancelTransaction={this.cancelTransaction.bind(this)}\n                                />\n                              </Flex>\n                            ) : (\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'LockOpen'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={3}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  {\n                                    this.state.depositCurveEnabled ? \n                                      `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.`\n                                    : useMetaTx ?\n                                      `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle using Meta-Transaction you need to approve our Smart-Contract first.`\n                                    :\n                                      `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle you need to approve our Smart-Contract first.`\n                                  }\n                                </Text>\n                                <RoundButton\n                                  buttonProps={{\n                                    mt:3,\n                                    width:[1,1/2]\n                                  }}\n                                  handleClick={this.approveToken.bind(this)}\n                                >\n                                  Approve\n                                </RoundButton>\n                              </Flex>\n                            )\n                          }\n                        </DashboardCard>\n                      ) : (!showBuyFlow && canPerformAction) && (\n                        !this.state.processing[this.state.action].loading ? (\n                          <Flex\n                            mt={2}\n                            flexDirection={'column'}\n                          >\n                            {\n                              showActionFlow && (\n                                <Flex\n                                  mb={3}\n                                  width={1}\n                                  flexDirection={'column'}\n                                >\n                                  {\n                                    /*\n                                    showCurveSlippage &&\n                                      <DashboardCard\n                                        cardProps={{\n                                          p:3,\n                                          mb:2\n                                        }}\n                                      >\n                                        <Flex\n                                          alignItems={'center'}\n                                          flexDirection={'column'}\n                                        >\n                                          <Icon\n                                            size={'1.8em'}\n                                            color={'cellText'}\n                                            name={'FileUpload'}\n                                          />\n                                          <Text\n                                            mt={2}\n                                            fontSize={2}\n                                            color={'cellText'}\n                                            textAlign={'center'}\n                                          >\n                                            You can deposit {this.state.depositCurveBalance.toFixed(4)} {this.props.selectedToken} in the Curve Pool{ this.state.depositCurveSlippage ? (this.state.depositCurveSlippage.gt(0) ? ` with ${this.state.depositCurveSlippage.times(100).toFixed(2)}% of slippage` : ` with ${Math.abs(parseFloat(this.state.depositCurveSlippage.times(100).toFixed(2)))}% of bonus`) : '' }.\n                                          </Text>\n                                        </Flex>\n                                      </DashboardCard>\n                                    */\n                                  }\n                                  {\n                                    (totalBalance || this.props.tokenFeesPercentage) && (\n                                      <Box\n                                        mb={1}\n                                        width={1}\n                                      >\n                                        {\n                                          this.state.showMaxSlippage && showCurveSlippage && (\n                                            <Box\n                                              mb={2}\n                                              width={1}\n                                            >\n                                              <Flex\n                                                alignItems={'center'}\n                                                flexDirection={'row'}\n                                              >\n                                                <Text>\n                                                  Choose max slippage:\n                                                </Text>\n                                                <Tooltip\n                                                  placement={'top'}\n                                                  message={`Max additional slippage on top of the one shown below`}\n                                                >\n                                                  <Icon\n                                                    ml={1}\n                                                    size={'1em'}\n                                                    color={'cellTitle'}\n                                                    name={\"InfoOutline\"}\n                                                  />\n                                                </Tooltip>\n                                              </Flex>\n                                              <Flex\n                                                mt={2}\n                                                alignItems={'center'}\n                                                flexDirection={'row'}\n                                                justifyContent={'space-between'}\n                                              >\n                                                {\n                                                  [0.2,0.5,1,5].map( slippage => (\n                                                    <FastBalanceSelector\n                                                      cardProps={{\n                                                        p:1\n                                                      }}\n                                                      textProps={{\n                                                        fontSize:1\n                                                      }}\n                                                      percentage={slippage}\n                                                      key={`selector_${slippage}`}\n                                                      onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                                      isActive={this.state.maxSlippage === parseFloat(slippage)}\n                                                    />\n                                                  ))\n                                                }\n                                              </Flex>\n                                            </Box>\n                                          )\n                                        }\n                                        <Flex\n                                          width={1}\n                                          alignItems={'center'}\n                                          flexDirection={'row'}\n                                          justifyContent={'space-between'}\n                                        >\n                                        {\n                                          showCurveSlippage ? (\n                                            <Flex\n                                              width={1}\n                                              maxWidth={'50%'}\n                                              alignItems={'center'}\n                                              flexDirection={'row'}\n                                            >\n                                              <Text\n                                                fontSize={1}\n                                                fontWeight={3}\n                                                textAlign={'right'}\n                                                style={{\n                                                  whiteSpace:'nowrap'\n                                                }}\n                                                color={ this.state.depositCurveSlippage.gt(0) ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                              >\n                                                {\n                                                  parseFloat(this.state.depositCurveSlippage.times(100).toFixed(2)) === 0 ?\n                                                    'No Slippage'\n                                                  : `${ this.state.depositCurveSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositCurveSlippage.times(100).abs().toFixed(2)}%`\n                                                }\n                                              </Text>\n                                              <Tooltip\n                                                placement={'top'}\n                                                message={this.functionsUtil.getGlobalConfig(['messages','curveBonusSlippage'])}\n                                              >\n                                                <Icon\n                                                  ml={1}\n                                                  size={'1em'}\n                                                  color={'cellTitle'}\n                                                  name={\"InfoOutline\"}\n                                                />\n                                              </Tooltip>\n                                              <Link\n                                                ml={1}\n                                                color={'copyColor'}\n                                                hoverColor={'primary'}\n                                                onClick={this.showMaxSlippage}\n                                              >\n                                                change\n                                              </Link>\n                                            </Flex>\n                                          ) : this.props.tokenFeesPercentage && (\n                                            <Flex\n                                              alignItems={'center'}\n                                              flexDirection={'row'}\n                                            >\n                                              <Text\n                                                fontSize={1}\n                                                fontWeight={3}\n                                                color={'dark-gray'}\n                                                textAlign={'right'}\n                                                hoverColor={'copyColor'}\n                                              >\n                                                Performance fee: {this.props.tokenFeesPercentage.times(100).toFixed(2)}%\n                                              </Text>\n                                              <Tooltip\n                                                placement={'top'}\n                                                message={this.functionsUtil.getGlobalConfig(['messages','performanceFee'])}\n                                              >\n                                                <Icon\n                                                  ml={1}\n                                                  size={'1em'}\n                                                  color={'cellTitle'}\n                                                  name={\"InfoOutline\"}\n                                                />\n                                              </Tooltip>\n                                            </Flex>\n                                          )\n                                        }\n                                        {\n                                          totalBalance && (\n                                            <Link\n                                              fontSize={1}\n                                              fontWeight={3}\n                                              color={'dark-gray'}\n                                              textAlign={'right'}\n                                              hoverColor={'copyColor'}\n                                              onClick={ (e) => this.setFastBalanceSelector(100) }\n                                            >\n                                              {totalBalance.toFixed(6)} {this.props.selectedToken}\n                                            </Link>\n                                          )\n                                        }\n                                        </Flex>\n                                      </Box>\n                                    )\n                                  }\n                                  <Input\n                                    min={0}\n                                    type={\"number\"}\n                                    required={true}\n                                    height={'3.4em'}\n                                    borderRadius={2}\n                                    fontWeight={500}\n                                    className={styles.input}\n                                    borderColor={'cardBorder'}\n                                    backgroundColor={'cardBg'}\n                                    boxShadow={'none !important'}\n                                    placeholder={`Insert amount`}\n                                    onChange={this.changeInputValue.bind(this)}\n                                    border={`1px solid ${this.props.theme.colors.divider}`}\n                                    value={this.state.inputValue[this.state.action] !== null ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]).toFixed() : ''}\n                                  />\n                                  <Flex\n                                    mt={2}\n                                    alignItems={'center'}\n                                    flexDirection={'row'}\n                                    justifyContent={'space-between'}\n                                  >\n                                    {\n                                      [25,50,75,100].map( percentage => (\n                                        <FastBalanceSelector\n                                          percentage={percentage}\n                                          key={`selector_${percentage}`}\n                                          onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                          isActive={this.state.fastBalanceSelector[this.state.action] === parseInt(percentage)}\n                                        />\n                                      ))\n                                    }\n                                  </Flex>\n                                </Flex>\n                              )\n                            }\n                            {\n                              canPerformAction && \n                                <Flex\n                                  justifyContent={'center'}\n                                  mt={ redeemGovTokens ? 2 : 0 }\n                                >\n                                  <RoundButton\n                                    buttonProps={{\n                                      width:'auto',\n                                      minWidth:[1,1/2],\n                                      style:{\n                                        textTransform:'capitalize'\n                                      },\n                                      disabled:this.state.buttonDisabled\n                                    }}\n                                    handleClick={this.state.buttonDisabled ? null : this.executeAction.bind(this) }\n                                  >\n                                    {this.state.action}{ redeemGovTokens ? ' Gov Tokens' : '' /*(depositCurve ? ' in Curve' : '')*/ }\n                                  </RoundButton>\n                                </Flex>\n                            }\n                          </Flex>\n                        ) : (\n                          <Flex\n                            mt={3}\n                            flexDirection={'column'}\n                          >\n                            <TxProgressBar\n                              web3={this.props.web3}\n                              cancelTransaction={this.cancelTransaction.bind(this)}\n                              hash={this.state.processing[this.state.action].txHash}\n                              endMessage={`Finalizing ${this.state.action} request...`}\n                              waitText={`${this.functionsUtil.capitalize(this.state.action)} estimated in`}\n                            />\n                          </Flex>\n                        )\n                      )\n                    }\n                  </Box>\n                ) : null\n              ) : (\n                <Flex\n                  mt={4}\n                  flexDirection={'column'}\n                >\n                  <FlexLoader\n                    flexProps={{\n                      flexDirection:'row'\n                    }}\n                    loaderProps={{\n                      size:'30px'\n                    }}\n                    textProps={{\n                      ml:2\n                    }}\n                    text={'Loading asset info...'}\n                  />\n                </Flex>\n              )\n            }\n          </Migrate>\n        </Flex>\n        {\n          /*\n          showDepositCurve && this.state.depositCurveEnabled ? (\n            <CurveDeposit\n              {...this.props}\n            />\n          ) :\n          */\n          showRedeemCurve && this.state.redeemCurveEnabled && (\n            <Box\n              mt={3}\n              width={1}\n            >\n              <CurveRedeem\n                {...this.props}\n              />\n            </Box>\n          )\n        }\n        {\n          showBuyFlow &&\n            <Flex\n              mt={3}\n              width={[1,0.5]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <BuyModal\n                {...this.props}\n                showInline={true}\n                availableMethods={[]}\n                buyToken={this.props.selectedToken}\n              />\n            </Flex>\n        }\n\n        <ShareModal\n          confettiEnabled={true}\n          icon={`images/medal.svg`}\n          title={`Congratulations!`}\n          account={this.props.account}\n          closeModal={this.resetModal}\n          tokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'share'}\n          text={`You have successfully deposited in Idle!<br />Enjoy <strong>${this.state.tokenAPY}% APY</strong> on your <strong>${this.props.selectedToken}</strong>!`}\n          tweet={`I'm earning ${this.state.tokenAPY}% APY on my ${this.props.selectedToken} with @idlefinance! Go to ${this.functionsUtil.getGlobalConfig(['baseURL'])} and start earning now from your idle tokens!`}\n        />\n\n      </Flex>\n    );\n  }\n}\n\nexport default DepositRedeem;\n","import theme from '../theme';\nimport { Bar } from '@nivo/bar';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Text, Input, Icon, Tooltip } from \"rimble-ui\";\n\nclass EstimatedEarnings extends Component {\n\n  state = {\n    chartData:null,\n    chartProps:null,\n    inputValue:1000,\n    maxInputValue:999999999999999\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    this.loadChart();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged){\n      this.loadChart();\n    }\n  }\n\n  async loadChart(){\n    const amount = this.functionsUtil.BNify(this.state.inputValue);\n    const earningsYear = amount.times(this.props.tokenApy.div(100));\n\n    const amountMonth = parseFloat(earningsYear.div(12));\n    const amount3Months = parseFloat(earningsYear.div(4));\n    const amount6Months = parseFloat(earningsYear.div(2));\n    const amountYear = parseFloat(earningsYear.div(1));\n\n    const chartData = [\n      {\n        perc:1/12,\n        label:'MONTH',\n        value:amountMonth,\n        month:amountMonth,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        monthColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:3/12,\n        label:'3 MONTHS',\n        value:amount3Months,\n        month3:amount3Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month3Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:6/12,\n        label:'6 MONTHS',\n        value:amount6Months,\n        month6:amount6Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month6Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:1,\n        label:'YEAR',\n        year:amountYear,\n        value:amountYear,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        yearColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      }\n    ];\n\n    let labelTextColorModifiers = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'chart','labelTextColorModifiers']);\n\n    const maxGridLines = 4;\n    const gridYStep = amountYear/maxGridLines;\n    const gridYValues = [0];\n    for (let i=1;i<=maxGridLines;i++){\n      const gridYValue = i*gridYStep;\n      gridYValues.push(gridYValue);\n    }\n\n    const chartProps = {\n      padding: 0.2,\n      animate: false,\n      indexBy: 'label',\n      // enableLabel: false,\n      labelSkipWidth: 16,\n      labelSkipHeight: 16,\n      keys: ['month','month3','month6','year'],\n      colors: ({ id, data }) => data[`${id}Color`],\n      label: d => this.functionsUtil.abbreviateNumber(d.value,2,4)+' '+this.props.selectedToken,\n      labelTextColor: labelTextColorModifiers ? { from: 'color', modifiers: [ labelTextColorModifiers ] } : null,\n      isInteractive:false,\n      minValue:0,\n      gridYValues,\n      // maxValue:amountYear,\n      axisLeft:{\n        format: v => this.functionsUtil.abbreviateNumber(v,1,3),\n        tickValues:gridYValues,\n        orient: 'left',\n        tickSize: 0,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendPosition: 'middle'\n      },\n      axisBottom:{\n        legend: '',\n        tickSize:0,\n        tickPadding: 15,\n        orient: 'bottom',\n      },\n      theme:{\n        labels:{\n          text:{\n            fontSize:15,\n            fontWeight:600,\n            fill:theme.colors.counter,\n            fontFamily: theme.fonts.sansSerif\n          }\n        },\n        axis: {\n          ticks: {\n            text: {\n              fontSize:14,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '9 5'\n          }\n        },\n      },\n      margin: this.props.isMobile ? { top: 0, right: 0, bottom: 30, left: 0 } : { top: 10, right: 0, bottom: 50, left: 65 }\n    }\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  changeInputValue(e){\n    let inputValue = e.target.value.length && !isNaN(e.target.value) ? Math.min(this.state.maxInputValue,parseFloat(e.target.value)) : 0;\n    inputValue = this.functionsUtil.BNify(inputValue);\n    this.setState({\n      inputValue\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const showAPYDisclaimer = idleTokenEnabled && this.functionsUtil.getGlobalConfig(['govTokens','IDLE','showAPR']);\n\n    return (\n      <DashboardCard\n        cardProps={{\n          p:[3,4]\n        }}\n      >\n        <Flex\n          width={1}\n          flexDirection={['column','row']}\n        >\n          <Flex\n            width={[1,0.3]}\n            flexDirection={'column'}\n            justifyContent={'flex-start'}\n          >\n            <Flex\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <AssetField\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'icon',\n                  props:{\n                    mb:2,\n                    height:'2.5em'\n                  }\n                }}\n              />\n              <Text\n                fontSize={2}\n                color={'cellText'}\n                textAlign={'center'}\n              >\n                Set the amount and see your estimated earnings on time based on the current APY: { this.props.tokenApy ? `${this.props.tokenApy.toFixed(2)}%` : null}\n                {\n                  showAPYDisclaimer && \n                    <Flex\n                      style={{\n                        display:'inline-flex',\n                        verticalAlign:'middle'\n                      }}\n                    >\n                      <Tooltip\n                        placement={'top'}\n                        message={this.functionsUtil.getGlobalConfig(['messages','apyLong'])}\n                      >\n                        <Icon\n                          ml={1}\n                          name={\"Info\"}\n                          size={'1em'}\n                          color={'cellTitle'}\n                        />\n                      </Tooltip>\n                    </Flex>\n                }\n              </Text>\n            </Flex>\n            <Flex\n              mt={3}\n              flexDirection={'column'}\n            >\n              <Input\n                min={0}\n                type={\"number\"}\n                required={true}\n                borderRadius={2}\n                fontWeight={500}\n                textAlign={'center'}\n                height={['3em','3.4em']}\n                borderColor={'cardBorder'}\n                boxShadow={'none !important'}\n                max={this.state.maxInputValue}\n                backgroundColor={'cardBgHover'}\n                onChange={this.changeInputValue.bind(this)}\n                border={`1px solid ${theme.colors.divider}`}\n                placeholder={`Insert ${this.props.selectedToken.toUpperCase()} amount`}\n                value={this.state.inputValue && !isNaN(this.state.inputValue) ? this.state.inputValue : ''}\n              />\n            </Flex>\n            <Flex\n              mt={3}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                buttonProps={{\n                  width:[1,1/2],\n                }}\n                handleClick={this.loadChart.bind(this)}\n              >\n                CALCULATE\n              </RoundButton>\n            </Flex>\n          </Flex>\n          <Flex\n            mt={[3,0]}\n            width={[1,0.7]}\n            id={'estimated-earnings-chart'}\n          >\n            {\n              this.props.isMobile ? (\n                <Flex\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  {\n                    this.state.chartData !== null && this.state.chartData.map((v,index) => (\n                      <Flex\n                        py={2}\n                        my={2}\n                        width={1}\n                        flexDirection={'row'}\n                        key={`earnings_${index}`}\n                      >\n                        <Flex\n                          width={0.35}\n                          alignItems={'center'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            color={'legend'}\n                          >\n                            {v.label}\n                          </Text>\n                        </Flex>\n                        <Flex\n                          width={0.65}\n                          position={'relative'}\n                          alignItems={'center'}\n                          minHeight={['20px','35px']}\n                          justifyContent={'center'}\n                        >\n                          <Flex\n                            zIndex={1}\n                            position={'relative'}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Text\n                              fontSize={1}\n                              fontWeight={3}\n                              color={'counter'}\n                            >\n                              {this.functionsUtil.abbreviateNumber(v.value,2,4)} {this.props.selectedToken}\n                            </Text>\n                          </Flex>\n                          <Flex\n                            right={0}\n                            width={v.perc}\n                            position={'absolute'}\n                            height={['20px','35px']}\n                            borderRadius={['20px 0 0 20px','35px 0 0 35px']}\n                            style={{background:`linear-gradient(-90deg, rgba(${v.color},0) 0%, rgba(${v.color},1) 100%)`}}\n                          ></Flex>\n                        </Flex>\n                      </Flex>\n                    ))\n                  }\n                </Flex>\n              ) : (\n                <GenericChart\n                  type={Bar}\n                  height={250}\n                  showLoader={true}\n                  {...this.state.chartProps}\n                  data={this.state.chartData}\n                  parentId={'estimated-earnings-chart'}\n                />\n              )\n            }\n          </Flex>\n        </Flex>\n      </DashboardCard>\n    );\n  }\n}\n\nexport default EstimatedEarnings;","import Title from '../Title/Title';\nimport { Box, Flex } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport FundsOverview from '../FundsOverview/FundsOverview';\nimport DepositRedeem from '../DepositRedeem/DepositRedeem';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport EstimatedEarnings from '../EstimatedEarnings/EstimatedEarnings';\n\nclass AssetPage extends Component {\n\n  state = {\n    tokenApy:{},\n    tokenFees:{},\n    tokenBalance:{},\n    tokenApproved:{},\n    activeModal:null,\n    idleTokenPrice:{},\n    govTokensBalance:{},\n    idleTokenBalance:{},\n    redeemableBalance:{},\n    govTokensDisabled:{},\n    availableGovTokens:{},\n    tokenFeesPercentage:{},\n    componentMounted:false\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadTokensInfo(){\n    if (this.props.account){\n      const newState = {...this.state};\n      await this.functionsUtil.asyncForEach(Object.keys(this.props.availableTokens),async (token) => {\n        const tokenConfig = this.props.availableTokens[token];\n        const govTokenAvailableTokens = {};\n        govTokenAvailableTokens[token] = tokenConfig;\n\n        const [\n          tokenFeesPercentage,\n          tokenApy,\n          tokenBalance,\n          tokenFees,\n          idleTokenPrice,\n          idleTokenBalance,\n          tokenApproved,\n          govTokensBalance\n        ] = await Promise.all([\n          this.functionsUtil.getTokenFees(tokenConfig),\n          this.functionsUtil.getTokenApy(this.props.tokenConfig),\n          this.functionsUtil.getTokenBalance(token,this.props.account),\n          this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n          this.functionsUtil.genericContractCall(tokenConfig.idle.token, 'tokenPrice'),\n          this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n          this.functionsUtil.checkTokenApproved(token,tokenConfig.idle.address,this.props.account),\n          this.functionsUtil.getGovTokensUserTotalBalance(this.props.account,govTokenAvailableTokens,'DAI')\n        ]);\n\n        newState.tokenFees[token] = tokenFees;\n        newState.tokenBalance[token] = tokenBalance;\n        newState.tokenApproved[token] = tokenApproved;\n        newState.idleTokenPrice[token] = idleTokenPrice;\n        newState.idleTokenBalance[token] = idleTokenBalance;\n        newState.govTokensBalance[token] = govTokensBalance;\n        newState.tokenFeesPercentage[token] = tokenFeesPercentage;\n        newState.govTokensDisabled[token] = tokenConfig.govTokensDisabled;\n        newState.tokenApy[token] = tokenApy && !tokenApy.isNaN() ? tokenApy : null;\n        newState.redeemableBalance[token] = idleTokenBalance ? this.functionsUtil.fixTokenDecimals(idleTokenBalance.times(idleTokenPrice),tokenConfig.decimals) : this.functionsUtil.BNify(0);\n      });\n\n      newState.availableGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n      newState.componentMounted = true;\n\n      this.setState(newState);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n    const accountChanged = prevProps.account !== this.props.account;\n    if (accountChanged || transactionsChanged){\n      this.loadTokensInfo();\n    }\n  }\n\n  render() {\n\n    const userHasFunds = this.props.account && this.state.idleTokenBalance[this.props.selectedToken] && this.functionsUtil.BNify(this.state.idleTokenBalance[this.props.selectedToken]).gt(0);\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            <Breadcrumb\n              {...this.props}\n              isMobile={this.props.isMobile}\n              path={[this.props.selectedToken]}\n              handleClick={ e => this.props.goToSection(this.props.selectedStrategy) }\n              text={this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])}\n            />\n          </Flex>\n          <Flex\n            width={0.5}\n            justifyContent={'flex-end'}\n          >\n            <CardIconButton\n              icon={'Add'}\n              {...this.props}\n              text={'Add funds'}\n              handleClick={ e => this.setActiveModal('buy') }\n            />\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Deposit / Redeem\n        </Title>\n        <Flex\n          width={1}\n        >\n          <DepositRedeem\n            {...this.props}\n            tokenFees={this.state.tokenFees[this.props.selectedToken]}\n            tokenBalance={this.state.tokenBalance[this.props.selectedToken]}\n            tokenApproved={this.state.tokenApproved[this.props.selectedToken]}\n            govTokensBalance={this.state.govTokensBalance[this.props.selectedToken]}\n            idleTokenBalance={this.state.idleTokenBalance[this.props.selectedToken]}\n            redeemableBalance={this.state.redeemableBalance[this.props.selectedToken]}\n            tokenFeesPercentage={this.state.tokenFeesPercentage[this.props.selectedToken]}\n          />\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverview\n                {...this.props}\n                tokenFees={this.state.tokenFees[this.props.selectedToken]}\n              />\n            </Flex>\n        }\n        {\n          userHasFunds && this.props.account && !this.state.govTokensDisabled[this.props.selectedToken] && Object.keys(this.state.availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id={\"yield-farming\"}\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(this.state.availableGovTokens)}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.30,0.15]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    mobile:false,\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.25],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenRedeemableBalance']),\n                    props:{\n                      width:[0.35,0.30],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                    ]\n                  },\n                  {\n                    title:'DISTRIBUTION',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','userDistributionSpeed']),\n                    props:{\n                      width:[0.35,0.30],\n                    },\n                    fields:[\n                      {\n                        name:'userDistributionSpeed',\n                        props:{\n                          decimals:6\n                        }\n                      }\n                    ]\n                  },\n                  /*\n                  {\n                    title:'APR',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenApr']),\n                    props:{\n                      width:[0.2,0.17],\n                    },\n                    fields:[\n                      {\n                        name:'apr',\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','tokenPrice']),\n                    mobile:false,\n                    props:{\n                      width: 0.17,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                  */\n                ]}\n                {...this.props}\n                availableTokens={this.state.availableGovTokens}\n              />\n            </Flex>\n        }\n        {\n        this.props.account && this.state.tokenApy[this.props.selectedToken] && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'estimated-earnings-container'}\n          >\n            <Title my={[3,4]}>Estimated earnings</Title>\n            <EstimatedEarnings\n              {...this.props}\n              tokenApy={this.state.tokenApy[this.props.selectedToken]}\n            />\n          </Flex>\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              enabledTokens={[this.props.selectedToken]}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React, { Component } from 'react';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Box, Text, Icon, Tooltip, Link, Input } from \"rimble-ui\";\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\n\nclass CurveDeposit extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    depositSlippage:null,\n    redeemableBalance:null,\n    migrationContract:null,\n    curveTokensBalance:null,\n    migrationSucceeded:false,\n    fastBalanceSelector:null,\n    migrationContractApproved:false,\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    await this.initToken();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const idleTokenBalanceChanged = prevProps.idleTokenBalance !== this.props.idleTokenBalance;\n    if (accountChanged || idleTokenBalanceChanged){\n      await this.initToken();\n    }\n    \n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = this.state.inputValue !== prevState.inputValue;\n    if (inputValueChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  setInputValue = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    const inputValue = this.props.idleTokenBalance ? this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage) : null;\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    const buttonDisabled = !amount || amount.gt(this.state.idleTokenBalance);\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  approve = async () => {\n    const migrationContract = this.state.migrationContract;\n    if (migrationContract){\n\n      // Check if the migration contract is approved\n      const migrationContractApproved = await this.checkMigrationContractApproved();\n\n      if (!migrationContractApproved){\n\n        const callbackApprove = (tx,error) => {\n          // Send Google Analytics event\n          const eventData = {\n            eventAction: 'approve',\n            eventCategory: 'CurveDeposit',\n            eventLabel: tx ? tx.status : null\n          };\n\n          const txSucceeded = tx && tx.status === 'success';\n\n          // console.log('callbackApprove',tx,error);\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            migrationContractApproved: txSucceeded, // True\n            processing: {\n              ...prevState.processing,\n              txHash:null,\n              loading:false\n            }\n          }));\n\n          if (typeof this.props.callbackApprove === 'function' && txSucceeded){\n            this.props.callbackApprove(tx);\n          }\n\n          this.checkMigration();\n        };\n\n        const callbackReceiptApprove = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              txHash\n            }\n          }));\n        };\n\n        this.functionsUtil.enableERC20(this.props.selectedToken,migrationContract.address,callbackApprove,callbackReceiptApprove);\n\n        this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            txHash:null,\n            loading:true\n          },\n          migrationContractApproved:false\n        }));\n      } else {\n        this.setState({\n          migrationContractApproved:true\n        });\n      }\n    }\n  }\n\n  deposit = async () => {\n\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    if (!inputValue){\n      return false;\n    }\n\n    const callbackDeposit = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveDeposit`,\n        eventAction: this.props.selectedToken,\n        eventValue: inputValue.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackDeposit === 'function' && txSucceeded){\n        this.props.callbackDeposit(tx);\n      }\n    };\n\n    const callbackReceiptDeposit = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.migrationContract.name;\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n    const depositParams = await this.getMigrationParams(_amount);\n\n    this.props.contractMethodSendWrapper(contractName, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  cancelTransaction = async () => {\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  async getMigrationParams(toMigrate){\n    const migrationParams = [];\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.selectedToken]);\n\n    if (!curveTokenConfig){\n      return false;\n    }\n    \n    const migrationContractParams = curveTokenConfig.migrationParams;\n    if (migrationContractParams.n_coins){\n      const amounts = await this.functionsUtil.getCurveAmounts(this.props.selectedToken,toMigrate,true);\n      let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n\n      if (this.state.maxSlippage){\n        minMintAmount = this.functionsUtil.BNify(minMintAmount);\n        minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n        minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n      }\n\n      migrationParams.push(amounts);\n      migrationParams.push(minMintAmount);\n    }\n\n    return migrationParams;\n  }\n\n  async calculateSlippage(){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (inputValue){\n      let underlyingBalanceToDeposit = inputValue;\n      if (underlyingBalanceToDeposit){\n        const idleTokenPrice = await this.functionsUtil.getIdleTokenPrice(this.props.tokenConfig);\n        if (idleTokenPrice){\n          underlyingBalanceToDeposit = underlyingBalanceToDeposit.times(idleTokenPrice);\n        }\n      } else {\n        underlyingBalanceToDeposit = this.functionsUtil.BNify(0);\n      }\n\n      const normalizeIdleTokenBalance = this.functionsUtil.normalizeTokenAmount(underlyingBalanceToDeposit,this.props.tokenConfig.decimals);\n      let depositSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizeIdleTokenBalance);\n      if (depositSlippage){\n        depositSlippage = depositSlippage.times(100);\n      }\n\n      this.setState({\n        depositSlippage\n      });\n    }\n  }\n\n  async checkMigrationContractApproved(){\n    const migrationContract = this.state.migrationContract || await this.functionsUtil.getCurveSwapContract();\n    if (migrationContract){\n      return await this.functionsUtil.checkTokenApproved(this.props.tokenConfig.idle.token,migrationContract.address,this.props.account);\n    }\n    return false;\n  }\n\n  async initToken(){\n\n    // Init and check migration contract\n    const migrationContract = await this.functionsUtil.getCurveSwapContract();\n    const migrationContractApproved = await this.checkMigrationContractApproved();\n\n    this.setState({\n      migrationContract,\n      migrationContractApproved\n    });\n  }\n\n  approveCallback = () => {\n    this.initToken();\n  }\n\n  migrationCallback = () => {\n    this.setState({\n      migrationSucceeded:true\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken){\n      return null;\n    }\n\n    // const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const hasCurveTokens = this.state.curveTokensBalance && this.state.curveTokensBalance.gt(0);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n            {\n              this.props.idleTokenBalance && this.props.idleTokenBalance.gt(0) && (\n                <Box\n                  width={1}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:3,\n                      px:[2,4]\n                    }}\n                  >\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    > \n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ this.state.migrationContractApproved ? 'CheckBox' : 'LooksOne'}\n                          color={ this.state.migrationContractApproved ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Approve the Curve contract\n                        </Text>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ hasCurveTokens ? 'CheckBox' : 'LooksTwo'}\n                          color={ hasCurveTokens ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Deposit your {this.props.tokenConfig.idle.token}\n                        </Text>\n                      </Flex>\n                    </Flex>\n                  </DashboardCard>\n                  {\n                    !this.state.migrationContractApproved ?\n                      this.state.processing.loading ? (\n                        <Flex\n                          mt={3}\n                          flexDirection={'column'}\n                        >\n                          <TxProgressBar\n                            web3={this.props.web3}\n                            waitText={`Approve estimated in`}\n                            hash={this.state.processing.txHash}\n                            endMessage={`Finalizing approve request...`}\n                            cancelTransaction={this.cancelTransaction.bind(this)}\n                          />\n                        </Flex>\n                      ) : (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3,\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'2.3em'}\n                              name={'LockOpen'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={1}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              To deposit your {this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt:3,\n                                width:[1,1/2]\n                              }}\n                              handleClick={this.approve.bind(this)}\n                            >\n                              Approve\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      )\n                    : this.state.processing.loading ? (\n                      <Flex\n                        mt={3}\n                        flexDirection={'column'}\n                      >\n                        <TxProgressBar\n                          web3={this.props.web3}\n                          waitText={`Deposit estimated in`}\n                          hash={this.state.processing.txHash}\n                          endMessage={`Finalizing deposit request...`}\n                          cancelTransaction={this.cancelTransaction.bind(this)}\n                        />\n                      </Flex>\n                    ) : (\n                      <Box\n                        mt={2}\n                        width={1}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text>\n                            Choose max slippage:\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={`Max additional slippage on top of the one shown below`}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'space-between'}\n                        >\n                          {\n                            [0.2,0.5,1,5].map( slippage => (\n                              <FastBalanceSelector\n                                cardProps={{\n                                  p:1\n                                }}\n                                textProps={{\n                                  fontSize:1\n                                }}\n                                percentage={slippage}\n                                key={`selector_${slippage}`}\n                                onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                isActive={this.state.maxSlippage === parseFloat(slippage)}\n                              />\n                            ))\n                          }\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                        >\n                          <Flex\n                            mb={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={this.state.depositSlippage ? 'space-between' : 'flex-end'}\n                          >\n                            {\n                              this.state.depositSlippage && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    textAlign={'right'}\n                                    style={{\n                                      whiteSpace:'nowrap'\n                                    }}\n                                    color={ parseFloat(this.state.depositSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                  >\n                                    {\n                                      parseFloat(this.state.depositSlippage.toFixed(3)) === 0 ?\n                                        'No Slippage'\n                                      : `${ this.state.depositSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositSlippage.abs().toFixed(3)}%`\n                                    }\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.state.depositSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              )\n                            }\n                            {\n                              this.props.idleTokenBalance && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'flex-end'}\n                                >\n                                  <Link\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'right'}\n                                    hoverColor={'copyColor'}\n                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                    style={{\n                                      maxWidth:'100%',\n                                      overflow:'hidden',\n                                      whiteSpace:'nowrap',\n                                      textOverflow:'ellipsis'\n                                    }}\n                                  >\n                                    {this.props.idleTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {this.props.selectedToken}\n                                  </Link>\n                                </Flex>\n                              )\n                            }\n                          </Flex>\n                          <Input\n                            min={0}\n                            type={\"number\"}\n                            required={true}\n                            height={'3.4em'}\n                            borderRadius={2}\n                            fontWeight={500}\n                            boxShadow={'none !important'}\n                            placeholder={`Insert amount`}\n                            onChange={this.changeInputValue.bind(this)}\n                            border={`1px solid ${this.props.theme.colors.divider}`}\n                            value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                          />\n                          <Flex\n                            mt={2}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            {\n                              [25,50,75,100].map( percentage => (\n                                <FastBalanceSelector\n                                  percentage={percentage}\n                                  key={`selector_${percentage}`}\n                                  onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                  isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                                />\n                              ))\n                            }\n                          </Flex>\n                          <Flex\n                            mt={2}\n                            justifyContent={'center'}\n                          >\n                            <RoundButton\n                              buttonProps={{\n                                mt:2,\n                                width:[1,1/2],\n                                disabled:this.state.buttonDisabled\n                              }}\n                              handleClick={this.deposit.bind(this)}\n                            >\n                              Deposit\n                            </RoundButton>\n                          </Flex>\n                        </Flex>\n                      </Box>\n                    )\n                  }\n                </Box>\n              )\n            }\n          {\n            /*\n            this.state.tokenConfig && this.state.redeemableBalance ? (\n              <Box width={1}>\n                <Migrate\n                  {...this.props}\n                  showActions={false}\n                  getTokenPrice={false}\n                  migrationTextProps={{\n                    fontWeight:500\n                  }}\n                  isMigrationTool={true}\n                  migrationImage={{\n                    mb:1,\n                    height:'1.8em',\n                    src:curveConfig.params.image\n                  }}\n                  showBalanceSelector={true}\n                  waitText={'Deposit estimated in'}\n                  tokenConfig={this.state.tokenConfig}\n                  callbackApprove={this.approveCallback.bind(this)}\n                  migrationParams={this.getMigrationParams.bind(this)}\n                  migrationCallback={this.migrationCallback.bind(this)}\n                  approveText={`To deposit your ${this.props.tokenConfig.idle.token} you need to approve Curve smart-contract first.`}\n                  migrationText={`You can deposit ${this.state.redeemableBalance.toFixed(4)} ${this.props.tokenConfig.idle.token} in the Curve Pool${ this.state.depositSlippage ? (this.state.depositSlippage.gte(0) ? ` with <span style=\"color:${this.props.theme.colors.transactions.status.failed}\">${this.state.depositSlippage.times(100).toFixed(2)}% of slippage</span>` : ` with <span style=\"color:${this.props.theme.colors.transactions.status.completed}\">${Math.abs(parseFloat(this.state.depositSlippage.times(100).toFixed(2)))}% of bonus</span>`) : '' }.`}\n                >\n                  {\n                    !this.props.account ? (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Input'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            Please connect with your wallet interact with Idle.\n                          </Text>\n                          <RoundButton\n                            buttonProps={{\n                              mt:2,\n                              width:[1,1/2]\n                            }}\n                            handleClick={this.props.connectAndValidateAccount}\n                          >\n                            Connect\n                          </RoundButton>\n                        </Flex>\n                      </DashboardCard>\n                    ) : (\n                      <DashboardCard\n                        cardProps={{\n                          p:3\n                        }}\n                      >\n                        {\n                          this.state.migrationSucceeded ? (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'DoneAll'}\n                                color={this.props.theme.colors.transactions.status.completed}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You have successfully deposited your {this.props.tokenConfig.idle.token} in the Curve Pool!\n                              </Text>\n                            </Flex>\n                          ) : (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'MoneyOff'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You don't have any {this.props.tokenConfig.idle.token} in your wallet.\n                              </Text>\n                            </Flex>\n                          )\n                        }\n                      </DashboardCard>\n                    )\n                  }\n                </Migrate>\n              </Box>\n            ) : null\n            */\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveDeposit;","import theme from '../theme';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\n// import { linearGradientDef } from '@nivo/core'\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport ChartCustomTooltip from '../ChartCustomTooltip/ChartCustomTooltip';\nimport ChartCustomTooltipRow from '../ChartCustomTooltipRow/ChartCustomTooltipRow';\n\nclass PortfolioEquityCurve extends Component {\n  state = {\n    startDate:null,\n    chartData:null,\n    chartProps:null,\n    chartwidth:null,\n    chartHeight:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentDidMount(){\n    this.loadUtils();\n    this.loadChartData();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    const quickDateSelectionChanged = prevProps.quickDateSelection !== this.props.quickDateSelection;\n    const tokenChanged = JSON.stringify(prevProps.enabledTokens) !== JSON.stringify(this.props.enabledTokens);\n    if (tokenChanged || quickDateSelectionChanged){\n      this.setState({\n        chartData:null\n      },() => {\n        this.componentDidMount();\n      });\n    }\n\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (mobileChanged){\n      this.loadChartData();\n    }\n  }\n\n  async loadChartData() {\n\n    let enabledTokens = this.props.enabledTokens;\n    if (!enabledTokens || !enabledTokens.length){\n      enabledTokens = Object.keys(this.props.availableTokens);\n    }\n\n    const curveTxs = await this.functionsUtil.getCurveTxs(this.props.account,0,'latest',enabledTokens);\n\n    const chartData = [];\n    let tokensBalance = [];\n    const processedTxs = {};\n    let firstTxTimestamp = null;\n    let totalBalance = this.functionsUtil.BNify(0);\n    const curvePoolContract = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    if (curveTxs && curveTxs.length){\n\n      curveTxs.forEach((tx,index) => {\n\n        if (!processedTxs[tx.hash]){\n          processedTxs[tx.hash] = [];\n        }\n\n        if (processedTxs[tx.hash].includes(tx.action)){\n          return;\n        }\n        \n        firstTxTimestamp = firstTxTimestamp ? Math.min(firstTxTimestamp,parseInt(tx.timeStamp)) : parseInt(tx.timeStamp);\n\n        const curveTokens = this.functionsUtil.BNify(tx.curveTokens);\n\n        switch (tx.action){\n          case 'CurveIn':\n          case 'CurveZapIn':\n          case 'CurveDepositIn':\n          case 'CurveTransferIn':\n            totalBalance = totalBalance.plus(curveTokens);\n          break;\n          case 'CurveOut':\n          case 'CurveZapOut':\n          case 'CurveDepositOut':\n          case 'CurveTransferOut':\n            totalBalance = totalBalance.minus(curveTokens);\n          break;\n          default:\n          break;\n        }\n\n        // Reset totalBalance if below zero\n        if (totalBalance.lt(0)){\n          totalBalance = this.functionsUtil.BNify(0);\n        }\n\n        const action = tx.action;\n        const balance = totalBalance;\n        const timeStamp = parseInt(tx.timeStamp);\n        const curveTokenPrice = this.functionsUtil.fixTokenDecimals(tx.curveTokenPrice,curvePoolContract.decimals);\n\n        // console.log(this.functionsUtil.strToMoment(timeStamp*1000).format('YYYY/MM/DD HH:mm'),tx.hash,tx.action,curveTokens.toString(),totalBalance.toString());\n\n        if (!curveTokenPrice.isNaN() && !curveTokenPrice.isNaN()){\n          tokensBalance.push({\n            action,\n            balance,\n            timeStamp,\n            curveTokens,\n            curveTokenPrice\n          });\n\n          processedTxs[tx.hash].push(action);\n        }\n      });\n    }\n\n    // Calculate Start Date\n    let startDate = null;\n    const currentDate = this.functionsUtil.strToMoment(new Date());\n\n    switch (this.props.quickDateSelection){\n      case 'week':\n        startDate = currentDate.clone().subtract(1,'week');\n      break;\n      case 'month':\n        startDate = currentDate.clone().subtract(1,'month');\n      break;\n      case 'month3':\n        startDate = currentDate.clone().subtract(3,'month');\n      break;\n      case 'month6':\n        startDate = currentDate.clone().subtract(6,'month');\n      break;\n      default:\n        startDate = null;\n      break;\n    }\n\n    const days = {};\n    let prevBalances = {};\n    let prevTimestamp = null;\n    let minChartValue = null;\n    let maxChartValue = null;\n    const aggregatedBalancesKeys = {};\n    const tokensBalancesPerDate = {};\n    let aggregatedBalance = this.functionsUtil.BNify(0);\n    // let curveTokenBalance = this.functionsUtil.BNify(0);\n    const currTimestamp = parseInt(new Date().getTime()/1000)+86400;\n\n    const tokensData = await this.functionsUtil.getTokenApiData(Object.values(this.props.availableTokens)[0].address,false,firstTxTimestamp,null,false,3600);\n\n    for (let timeStamp=firstTxTimestamp;timeStamp<=currTimestamp;timeStamp+=this.props.frequencySeconds){\n\n      let foundBalances = {};\n      let tokensBalances = {};\n      timeStamp = Math.min(currTimestamp,timeStamp);\n      let momentDate = this.functionsUtil.strToMoment(timeStamp*1000);\n\n      // eslint-disable-next-line\n      const filteredTokenData = tokensData.filter(tx => (tx.timestamp>=prevTimestamp && tx.timestamp<=timeStamp));\n\n      // eslint-disable-next-line\n      let filteredBalances = tokensBalance.filter(tx => (tx.timeStamp<=timeStamp && (!prevTimestamp || tx.timeStamp>prevTimestamp)));\n      \n      if (!filteredBalances.length){\n        if (prevBalances){\n          filteredBalances = prevBalances;\n          const lastFilteredTx = Object.values(filteredBalances).pop();\n          const currentBalance = parseFloat(lastFilteredTx.balance);\n\n          const lastTokenData = Object.values(filteredTokenData).pop();\n          let curveTokenPrice = null;\n          if (lastTokenData){\n            curveTokenPrice = await this.functionsUtil.getCurveTokenPrice(lastTokenData.blocknumber);\n          }\n\n          // Take idleToken price from API and calculate new balance\n          if (currentBalance>0 && timeStamp>firstTxTimestamp && curveTokenPrice){\n            // Set new curveTokenPrice\n            lastFilteredTx.curveTokenPrice = curveTokenPrice;\n            filteredBalances = [lastFilteredTx];\n          }\n        } else {\n          filteredBalances = [{\n            balance:this.functionsUtil.BNify(0),\n            curveTokenPrice:this.functionsUtil.BNify(0)\n          }];\n        }\n      }\n\n      const lastTx = Object.assign([],filteredBalances).pop();\n      let lastTxBalance = this.functionsUtil.BNify(lastTx.balance).times(lastTx.curveTokenPrice);\n\n      tokensBalances[curvePoolContract.token] = this.functionsUtil.BNify(lastTx.balance);\n      aggregatedBalance = lastTxBalance;\n\n      foundBalances = filteredBalances;\n\n      // console.log(momentDate.format('YYYY/MM/DD 00:00'),lastTx.balance.toString(),lastTx.curveTokenPrice.toString(),lastTxBalance.toString());\n\n      if (startDate === null || momentDate.isSameOrAfter(startDate)){\n        \n        if (momentDate.isAfter(new Date(),'day')){\n          momentDate = this.functionsUtil.strToMoment(new Date());\n        }\n\n        // Force date to midnight\n        const formattedDate = momentDate.format('YYYY/MM/DD 00:00');\n\n        // Save days for axisBottom format\n        days[momentDate.format('YYYY/MM/DD')] = 1;\n\n        const aggregatedBalanceParsed = parseFloat(parseFloat(aggregatedBalance.toFixed(6)));\n\n        aggregatedBalancesKeys[formattedDate] = aggregatedBalanceParsed;\n        tokensBalancesPerDate[formattedDate] = tokensBalances;\n\n        // console.log(formattedDate,tokensBalances);\n\n        minChartValue = minChartValue === null ? aggregatedBalanceParsed : Math.min(minChartValue,aggregatedBalanceParsed);\n        maxChartValue = maxChartValue === null ? aggregatedBalanceParsed : Math.max(maxChartValue,aggregatedBalanceParsed);\n      }\n\n      prevTimestamp = timeStamp;\n      prevBalances = foundBalances;\n    }\n\n    const aggregatedBalances = Object.keys(aggregatedBalancesKeys).map(date => ({\n      x:date,\n      y:aggregatedBalancesKeys[date],\n      balances:tokensBalancesPerDate[date]\n    }));\n\n    let itemIndex = 0;\n    aggregatedBalances.forEach( (item,index) => {\n      const itemPos = Math.floor(itemIndex/aggregatedBalances.length*100);\n      aggregatedBalances[index].itemPos = itemPos;\n      itemIndex++;\n    });\n\n    /*\n    aggregatedBalances.push({\n      x:momentDate.format('YYYY/MM/DD HH:mm'),\n      y:aggregatedBalance\n    });\n    */\n\n    // Add day before to start with zero balance\n    /*\n    const firstTxMomentDate = this.functionsUtil.strToMoment(firstTxTimestamp*1000);\n    if ((startDate === null || startDate.isSameOrBefore(firstTxMomentDate)) && aggregatedBalances.length){\n      const firstItem = aggregatedBalances[0];\n      const firstDate = this.functionsUtil.strToMoment(firstItem.x,'YYYY/MM/DD HH:mm');\n      firstDate.subtract(1,'day');\n      aggregatedBalances.unshift({\n        x:firstDate.format('YYYY/MM/DD HH:mm'),\n        y:0\n      });\n    }\n    */\n\n    // Add token Data\n    chartData.push({\n      id:'USD',\n      color: 'hsl('+ this.functionsUtil.getGlobalConfig(['stats','tokens','USD','color','hsl']).join(',')+')',\n      data:aggregatedBalances\n    });\n\n    let yFormatDecimals = 2;\n    if (maxChartValue-minChartValue<1){\n      yFormatDecimals = 4;\n    }\n\n    if (maxChartValue === minChartValue){\n      minChartValue = Math.max(0,maxChartValue-1);\n    }\n\n    const maxGridLines = 5;\n    const gridYStep = (maxChartValue-minChartValue)/maxGridLines;\n    const gridYValues = [];\n    for (let i=0;i<=maxGridLines;i++){\n      const gridYValue = parseFloat(parseFloat(minChartValue+(i*gridYStep)).toFixed(6));\n      gridYValues.push(gridYValue);\n    }\n    \n    const axisBottomMaxValues = 10;\n    const daysCount = Object.values(days).length;    \n    const daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n    const chartProps = {\n      xScale:{\n        type: 'time',\n        format: '%Y/%m/%d %H:%M',\n      },\n      yScale:{\n        type: 'linear',\n        stacked: false,\n        min: minChartValue,\n        max: maxChartValue\n      },\n      xFormat:'time:%b %d %Y',\n      yFormat:value => this.functionsUtil.formatMoney(value,yFormatDecimals),\n      axisBottom: this.props.isMobile ? null : {\n        legend: '',\n        tickSize:0,\n        format: '%b %d',\n        tickPadding: 15,\n        orient: 'bottom',\n        legendOffset: 36,\n        legendPosition: 'middle',\n        tickValues:'every '+daysFrequency+' days'\n      },\n      gridYValues,\n      pointSize:0,\n      useMesh:true,\n      axisLeft: this.props.isMobile ? null : {\n        legend: '',\n        tickSize: 0,\n        orient: 'left',\n        tickPadding: 10,\n        tickRotation: 0,\n        legendOffset: -70,\n        tickValues:gridYValues,\n        legendPosition: 'middle',\n        format: v => this.functionsUtil.abbreviateNumber(v,2),\n      },\n      animate:true,\n      pointLabel:'y',\n      areaOpacity:0.1,\n      enableArea:true,\n      enableSlices:'x',\n      enableGridY:true,\n      curve:'monotoneX',\n      enableGridX:false,\n      pointBorderWidth:1,\n      colors:d => d.color,\n      pointLabelYOffset:-12,\n      areaBaselineValue:minChartValue,\n      pointColor:{ from: 'color', modifiers: []},\n      theme:{\n        axis: {\n          ticks: {\n            text: {\n              fontSize:12,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '8 4'\n          }\n        },\n      },\n      /*\n      defs:[\n        linearGradientDef('gradientA', [\n          { offset: 0, color: 'inherit' },\n          { offset: 100, color: 'inherit', opacity: 0 },\n        ]),\n      ],\n      fill:[{ match: '*', id: 'gradientA' }],\n      */\n      margin: this.props.isMobile ? { top: 20, right: 25, bottom: 25, left: 20 } : { top: 30, right: 50, bottom: 45, left: 50 },\n      sliceTooltip:(slideData) => {\n        const { slice } = slideData;\n        const point = slice.points[0];\n        return (\n          <ChartCustomTooltip\n            point={point}\n          >\n            <ChartCustomTooltipRow\n              color={point.color}\n              label={point.serieId}\n              value={`$ ${point.data.yFormatted}`}\n            />\n            {\n            typeof point.data.balances === 'object' && Object.keys(point.data.balances).length>0 &&\n              Object.keys(point.data.balances).map(token => {\n                if (token === point.serieId){\n                  return null;\n                }\n                const tokenInfo = this.functionsUtil.getGlobalConfig(['stats','tokens',token]);\n                if (tokenInfo){\n                  const tokenName = tokenInfo.name ? tokenInfo.name : token;\n                  const color = tokenInfo.color.hex;\n                  const balance = point.data.balances[token];\n                  let formattedBalance = this.functionsUtil.formatMoney(balance,2);\n                  if (parseFloat(balance)>=0.01){\n                    return (\n                      <ChartCustomTooltipRow\n                        label={tokenName}\n                        color={color}\n                        key={`row_${token}`}\n                        value={`${formattedBalance}`}\n                      />\n                    );\n                  }\n                }\n                return null;\n              })\n            }\n          </ChartCustomTooltip>\n        );\n      }\n    };\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  render() {\n    return (\n      <GenericChart\n        type={Line}\n        showLoader={true}\n        {...this.state.chartProps}\n        data={this.state.chartData}\n        parentId={this.props.parentId}\n        height={this.props.chartHeight}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default PortfolioEquityCurve;","import theme from '../theme';\nimport Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Flex, Heading, Text } from \"rimble-ui\";\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport PortfolioEquityCurve from '../PortfolioEquityCurve/PortfolioEquityCurve';\n\nclass FundsOverviewCurve extends Component {\n\n  state = {\n    compAPR:null,\n    aggregatedValues:[],\n    govTokensUserBalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    await this.functionsUtil.getCurveAvgBuyPrice();\n\n    // debugger;\n\n    await this.functionsUtil.getCurveAvgSlippage();\n\n    // debugger;\n    /*\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const [govTokensUserBalance,avgAPY,days] = await Promise.all([\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,'DAI'),\n      this.functionsUtil.loadAssetField('avgAPY',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '-') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    let [tokenAllocation,compAPR] = await Promise.all([\n      this.functionsUtil.getTokenAllocation(this.props.tokenConfig,false,false),\n      this.functionsUtil.getCompAPR(this.props.selectedToken,this.props.tokenConfig)\n    ]);\n\n    if (tokenAllocation){\n      const compoundInfo = this.props.tokenConfig.protocols.find( p => (p.name === 'compound') );\n      if (compoundInfo){\n        if (tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()]){\n          const compoundAllocationPerc = tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()];\n          compAPR = compAPR.times(compoundAllocationPerc);\n        }\n      }\n    }\n\n    this.setState({\n      compAPR,\n      aggregatedValues,\n      govTokensUserBalance\n    });\n    */\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Text\n                          mt={2}\n                          fontWeight={2}\n                          fontSize={[1,2]}\n                          color={'cellText'}\n                        >\n                          {v.props.title}\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquityCurve\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLentCurve',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPercCurve',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            {\n              /*\n              <Flex\n                mb={[2,0]}\n                width={[1,1/5]}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'flex-start'}\n              >\n                <Title\n                  mb={2}\n                  fontSize={[3,4]}\n                  component={Heading.h3}\n                >\n                  Fees\n                </Title>\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'feesCounter',\n                    props:{\n                      decimals:7,\n                      maxPrecision:8,\n                      style:{\n                        fontWeight:300,\n                        fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                        color:theme.colors.counter\n                      },\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n              */\n            }\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveApy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Avg Slippage\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveAvgSlippage',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverviewCurve;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport { Box, Flex, Text, Icon } from \"rimble-ui\";\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport CurveDeposit from '../CurveDeposit/CurveDeposit';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport TransactionField from '../TransactionField/TransactionField';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport FundsOverviewCurve from '../FundsOverviewCurve/FundsOverviewCurve';\n\nclass AssetPage extends Component {\n\n  state = {\n    inputValue:{},\n    processing:{},\n    tokenFees:null,\n    canRedeem:null,\n    canDeposit:null,\n    action:'deposit',\n    activeModal:null,\n    tokenConfig:null,\n    tokenBalance:null,\n    tokenApproved:null,\n    selectedToken:null,\n    availableTokens:{},\n    redeemBalance:null,\n    depositBalance:null,\n    buttonDisabled:false,\n    curveTokenPrice:null,\n    depositSlippage:null,\n    idleTokenBalance:null,\n    withdrawSlippage:null,\n    govTokensBalance:null,\n    curveZapContract:null,\n    curveTokenConfig:null,\n    curveTokensAmounts:{},\n    govTokensDisabled:null,\n    componentMounted:false,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    redeemableBalance:null,\n    fastBalanceSelector:{},\n    curveAvailableTokens:{},\n    tokenFeesPercentage:null,\n    redeemUnevenAmounts:false,\n    curveDepositContract:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  changeFromToken = (selectedToken) => {\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    this.props.goToSection(`${curveConfig.params.route}/${selectedToken}`);\n  }\n\n  getSelectedToken(){\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    return this.props.urlParams.param1 && curveAvailableTokens[this.props.urlParams.param1] ? this.props.urlParams.param1 : Object.keys(curveAvailableTokens)[0];\n  }\n\n  setSelectedToken = async (selectedToken) => {\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n    this.setState({\n      tokenConfig,\n      selectedToken,\n      availableTokens,\n      curveTokenConfig\n    });\n  }\n\n  loadTokensInfo = async () => {\n\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    this.setState({\n      curveAvailableTokens\n    });\n\n    const selectedToken = this.getSelectedToken();\n    // Check if token is set the query params\n    if (selectedToken && selectedToken !== this.props.urlParams.param1){\n      this.changeFromToken(selectedToken);\n      return await this.setSelectedToken(selectedToken);\n    } else if (selectedToken !== this.state.selectedToken){\n      await this.setSelectedToken(selectedToken);\n    }\n\n    const newState = {...this.state};\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n\n    if (newState.selectedToken !== selectedToken){\n      newState.selectedToken = selectedToken;\n    }\n\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n\n    const [\n      curveZapContract,\n      curvePoolContract,\n      curveSwapContract,\n      curveDepositContract\n    ] = await Promise.all([\n      this.functionsUtil.getCurveZapContract(),\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract()\n    ]);\n\n    newState.curveZapContract = curveZapContract;\n    newState.curvePoolContract = curvePoolContract;\n    newState.curveSwapContract = curveSwapContract;\n    newState.curveDepositContract = curveDepositContract;\n\n    newState.availableTokens = availableTokens;\n\n\n    // console.log('curveTokenPrice',newState.curveTokenPrice.toFixed(6),'curveTokenBalance',newState.curveTokenBalance.toFixed(6),'redeemableBalance',newState.redeemableBalance.toFixed(20),'tokenBalance',newState.tokenBalance.toFixed(20));\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[selectedToken] = tokenConfig;\n\n    newState.tokenConfig = tokenConfig;\n    newState.curveTokenConfig = curveTokenConfig;\n\n    if (this.props.account){\n      [\n        newState.curveTokenPrice,\n        newState.curveTokenBalance,\n        newState.tokenFeesPercentage,\n        newState.tokenFees,\n        newState.tokenBalance,\n        newState.idleTokenBalance,\n        newState.tokenApproved,\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokenPrice(),\n        this.functionsUtil.getCurveTokenBalance(),\n        this.functionsUtil.getTokenFees(tokenConfig),\n        this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n        this.functionsUtil.getTokenBalance(selectedToken,this.props.account),\n        this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n        this.functionsUtil.checkTokenApproved(selectedToken,curveDepositContract.address,this.props.account),\n      ]);\n\n\n      newState.processing = {\n        redeem:{\n          txHash:null,\n          loading:false\n        },\n        deposit:{\n          txHash:null,\n          loading:false\n        },\n        approve:{\n          txHash:null,\n          loading:false\n        },\n      };\n      newState.inputValue = {\n        redeem:null,\n        deposit:null\n      };\n      newState.fastBalanceSelector = {\n        redeem:null,\n        deposit:null\n      };\n\n      newState.componentMounted = true;\n      newState.depositBalance = newState.tokenBalance;\n      newState.redeemBalance = newState.redeemableBalance;\n      newState.govTokensDisabled = tokenConfig.govTokensDisabled;\n      newState.canRedeem = newState.curveTokenBalance && newState.curveTokenBalance.gt(0);\n      newState.canDeposit = newState.idleTokenBalance && newState.idleTokenBalance.gt(0);\n      newState.redeemableBalance = newState.curveTokenBalance ? newState.curveTokenBalance.times(newState.curveTokenPrice) : this.functionsUtil.BNify(0);\n    }\n\n    this.setState(newState);\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async calculateSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,this.state.curvePoolContract.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositBalance = amount;\n        newState.depositSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      case 'redeem':\n        newState.redeemBalance = amount;\n        newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.urlParams.param1 !== this.props.urlParams.param1;\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n\n    if (accountChanged || transactionsChanged || tokenChanged){\n      await this.loadTokensInfo();\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const redeemUnevenAmountsChanged = this.state.redeemUnevenAmounts !== prevState.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n    if (actionChanged || fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    if (actionChanged){\n      this.updateAssetSelector();\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  updateAssetSelector = async () => {\n    const newState = {};\n    switch (this.state.action){\n      case 'deposit':\n        this.loadTokensInfo();\n      break;\n      case 'redeem':\n        // this.loadTokensInfo();\n        const tokenConfig = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n        newState.curveAvailableTokens = {};\n        newState.curveTokenConfig = tokenConfig;\n        newState.selectedToken = tokenConfig.token;\n        newState.curveAvailableTokens[tokenConfig.token] = tokenConfig;\n      break;\n      default:\n      break;\n    }\n\n    this.setState(newState);\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.state.tokenBalance ? this.functionsUtil.BNify(this.state.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          amount = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n        } else {\n          amount = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  changeInputValue = (e) => {\n    if (!this.state.action){\n      return false;\n    }\n\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.state.tokenBalance));\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.curveTokenBalance)) );\n        } else {\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.redeemableBalance)) );\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = this.state.tokenApproved;\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.state.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.functionsUtil.enableERC20(this.state.selectedToken,this.state.curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    let loading = true;\n\n    switch (this.state.action){\n      // Handle deposit in curve\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.state.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if (this.state.metaTransactionsEnabled && txError){\n            this.setState({\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,tokensToDeposit);\n        const minMintAmount = await this.functionsUtil.genericContractCall(this.state.curveSwapContract.name,'calc_token_amount',[amounts,true]);\n        const depositParams = [amounts,minMintAmount];\n\n        // No need for callback atm\n        contractSendResult = await this.props.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n      break;\n      case 'redeem':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        let curveTokensToRedeem = null;\n        if (selectedPercentage){\n          curveTokensToRedeem = this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage);\n        } else {\n          curveTokensToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals));\n          if (!this.state.redeemUnevenAmounts){\n            const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n            curveTokensToRedeem = curveTokensToRedeem.div(curveTokenPrice);\n          }\n        }\n\n        if (!curveTokensToRedeem){\n          return false;\n        }\n\n        const callbackRedeem = (tx,error) => {\n          const txSucceeded = tx.status === 'success';\n\n          // Send Google Analytics event\n          const eventData = {\n            eventLabel: tx.status,\n            eventCategory: `CurveRedeem`,\n            eventAction: this.state.selectedToken,\n            eventValue: curveTokensToRedeem.toFixed()\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          }\n        };\n\n        const callbackReceiptRedeem = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const _amount = this.functionsUtil.normalizeTokenAmount(curveTokensToRedeem,this.state.curvePoolContract.decimals).toString();\n        let min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,0);\n\n        const contractName = this.state.curveDepositContract.name;\n        if (this.state.redeemUnevenAmounts){\n          console.log('remove_liquidity_imbalance',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_imbalance', [min_amounts, _amount], null, callbackRedeem, callbackReceiptRedeem);\n        } else {\n          min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,_amount);\n          console.log('remove_liquidity',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts], null, callbackRedeem, callbackReceiptRedeem);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    // console.log('contractSendResult',contractSendResult);\n\n    if (contractSendResult !== false){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    const userHasFunds = this.props.account && this.state.curveTokenBalance && this.functionsUtil.BNify(this.state.curveTokenBalance).gt(0);\n    const canPerformAction = true;\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            {\n              <Breadcrumb\n                {...this.props}\n                isMobile={this.props.isMobile}\n                path={['Boost',this.state.selectedToken]}\n                handleClick={ e => this.props.goToSection('best') }\n                text={this.functionsUtil.getGlobalConfig(['strategies','best','title'])}\n              />\n            }\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Curve Pool\n        </Title>\n        <Flex\n          width={1}\n        >\n          <Flex\n            width={1}\n            alignItems={'center'}\n            flexDirection={'column'}\n            justifyContent={'center'}\n          >\n            <Flex\n              width={[1,0.36]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Box\n                width={1}\n              >\n                <Text\n                  mb={1}\n                >\n                  Select your asset:\n                </Text>\n                <AssetSelector\n                  {...this.props}\n                  id={'token-from'}\n                  onChange={this.changeFromToken}\n                  selectedToken={this.state.selectedToken}\n                  tokenConfig={this.state.curveTokenConfig}\n                  showBalance={this.state.action === 'deposit'}\n                  availableTokens={this.state.curveAvailableTokens}\n                />\n              </Box>\n              <Box\n                width={1}\n              >\n                {\n                  canPerformAction ? (\n                    <Flex\n                      mt={2}\n                      flexDirection={'column'}\n                    >\n                      <Text\n                        mb={2}\n                      >\n                        Choose the action:\n                      </Text>\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('deposit');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'deposit' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'deposit'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Deposit\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('redeem');\n                            }\n                          }}\n                          isInteractive={true}\n                          isDisabled={ !this.state.canRedeem }\n                          isActive={ this.state.action === 'redeem' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'redeem'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Redeem\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </Flex>\n                  ) : (\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    >\n                      <Icon\n                        size={'2.3em'}\n                        name={'MoneyOff'}\n                        color={'cellText'}\n                      />\n                      <Text\n                        mt={2}\n                        fontSize={2}\n                        color={'cellText'}\n                        textAlign={'center'}\n                      >\n                        You don't have any {this.state.tokenConfig.idle.token} in your wallet.\n                      </Text>\n                    </Flex>\n                  )\n                }\n              </Box>\n            </Flex>\n            <Flex\n              width={1}\n              mt={ this.props.account ? 3 : 0 }\n            >\n            {\n              this.state.action === 'deposit' ? (\n                <CurveDeposit\n                  {...this.props}\n                  {...this.state}\n                />\n              ) : this.state.action === 'redeem' && (\n                <CurveRedeem\n                  {...this.props}\n                  {...this.state}\n                />\n              )\n            }\n            </Flex>\n          </Flex>\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverviewCurve\n                {...this.props}\n                tokenFees={this.state.tokenFees}\n                tokenConfig={this.state.tokenConfig}\n                selectedToken={this.state.selectedToken}\n                availableTokens={this.state.availableTokens}\n                enabledTokens={Object.keys(this.state.availableTokens)}\n              />\n            </Flex>\n        }\n        {\n          /*\n          this.props.account && !this.state.govTokensDisabled[this.state.selectedToken] && Object.keys(availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id=\"earnings-estimation\"\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(availableGovTokens)}\n                handleClick={(props) => {}}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.33,0.22]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.26],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    props:{\n                      width:[0.33,0.26],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                      {\n                        name:'tooltip',\n                        props:{\n                          placement:'bottom',\n                          message:'The shown balance may be lower than the real one.',\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    mobile:false,\n                    props:{\n                      width: 0.26,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                ]}\n                {...this.props}\n                availableTokens={availableGovTokens}\n              />\n            </Flex>\n          */\n        }\n        {\n          /*\n          this.props.account && \n            <Flex\n              mb={[3,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'estimated-earnings-container'}\n            >\n              <Title my={[3,4]}>Estimated earnings</Title>\n              <EstimatedEarnings\n                {...this.props}\n              />\n            </Flex>\n          */\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              availableTokens={this.state.availableTokens}\n              enabledTokens={Object.keys(this.state.availableTokens)}\n              enabledActions={['CurveIn','CurveOut','CurveZapIn','CurveZapOut','CurveTransferIn','CurveTransferOut','CurveDepositIn','CurveDepositOut']}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.state.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Button,\n  Form,\n  Icon,\n  Flex,\n  Link\n} from \"rimble-ui\";\nimport axios from 'axios';\nimport colors from '../../colors';\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\nimport globalConfigs from '../../configs/globalConfigs';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass WelcomeModal extends React.Component {\n\n  state = {\n    email:null,\n    error:false,\n    subscribed:false,\n    sendingForm:false\n  };\n\n  functionsUtil = null;\n\n  constructor(props) {\n    super(props);\n    this.functionsUtil = new FunctionsUtil(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleValidation = this.handleValidation.bind(this);\n  }\n\n  componentDidUpdate = async () => {\n    this.functionsUtil.setProps(this.props);\n  }\n\n  sendUserInfo = (sendEmail=true) => {\n    const walletProvider = this.functionsUtil.getWalletProvider();\n    const userInfo = {\n      address: this.props.account,\n      provider: walletProvider\n    };\n\n    if (sendEmail && this.state.email !== null){\n      userInfo.email = this.state.email;\n    }\n\n    this.functionsUtil.simpleIDPassUserInfo(userInfo);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if (!this.state.email){\n      return false;\n    }\n\n    const callback = () => {\n      this.setState({\n        sendingForm:false,\n        subscribed:true\n      });\n      window.setTimeout(this.props.closeModal,2500);\n    };\n\n    this.sendUserInfo();\n\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'send_email',\n      eventLabel: 'WelcomeModal'\n    });\n\n    axios.post(globalConfigs.newsletterSubscription.endpoint, {\n      'email': this.state.email\n    }).then(r => {\n      callback();\n    })\n    .catch(err => {\n      callback();\n    });\n\n    // Set signedUp in the localStorage\n    if (localStorage){\n      const walletAddress = this.props.account.toLowerCase();\n      let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : null;\n      if (lastLogin && lastLogin[walletAddress] && !lastLogin[walletAddress].signedUp){\n        lastLogin[walletAddress].signedUp = true;\n        this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n      }\n    }\n\n    this.setState({\n      sendingForm:true\n    })\n  };\n\n  closeModal = async () => {\n\n    const closeModal = () => {\n      this.props.closeModal();\n    };\n\n    try{\n      // Prevent sending email\n      this.sendUserInfo(false);\n\n      // Send Google Analytics event\n      if (globalConfigs.analytics.google.events.enabled){\n        this.functionsUtil.sendGoogleAnalyticsEvent({\n          eventCategory: 'UI',\n          eventAction: 'continue_without_email',\n          eventLabel: 'WelcomeModal'\n        },closeModal);\n\n        // Call callback after 1 second if stuck\n        setTimeout(closeModal,1000);\n      } else {\n        closeModal();\n      }\n    } catch (err) {\n      closeModal();\n    }\n  }\n\n  handleValidation(e) {\n    if (e && e.target) {\n      this.setState({ email: e.target.value });\n      e.target.parentNode.classList.add(\"was-validated\");\n    }\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        {\n          this.state.subscribed ? (\n            <ModalCard\n              closeFunc={this.closeModal}\n            >\n              <ModalCard.Header title={'All done'} icon={`images/done.svg`}></ModalCard.Header>\n              <ModalCard.Body>\n                <Flex width={1} flexDirection={'column'} mb={3}>\n                  <Text color={'dark-gray'} textAlign={'center'} fontSize={3} my={0}>\n                    Thanks for subscribing!\n                  </Text>\n                  <Button\n                    my={3}\n                    width={'100%'}\n                    borderRadius={4}\n                    onClick={this.closeModal}\n                  >\n                    CLOSE\n                  </Button>\n                </Flex>\n              </ModalCard.Body>\n            </ModalCard>\n          ) : (\n            <ModalCard closeFunc={this.closeModal}>\n              <ModalCard.Header title={'Stay up-to-date!'} icon={`images/notification.svg`}>\n              </ModalCard.Header>\n              <ModalCard.Body>\n                <Form onSubmit={this.handleSubmit}>\n                  <Flex width={1} flexDirection={'column'} mb={3}>\n                    <Text color={'mid-gray'} textAlign={'left'} fontSize={3} my={0}>\n                      Add your e-mail to receive updates about:\n                    </Text>\n                  </Flex>\n                  <Flex width={1} flexDirection={'column'} mt={2}>\n                    <Flex my={2} flexDirection={'row'} alignItems={'center'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Performance reports\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        New Protocols & Tokens\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Latest updates\n                      </Text>\n                    </Flex>\n                    <Form.Field width={1} label={''}>\n                      <Form.Input\n                        type=\"email\"\n                        name=\"EMAIL\"\n                        width={1}\n                        outline={'none'}\n                        border={0}\n                        px={3}\n                        py={4}\n                        fontSize={3}\n                        textAlign={['center','left']}\n                        placeholder={'Enter your e-mail'}\n                        onChange={this.handleValidation}\n                        required\n                      />\n                    </Form.Field>\n                    <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n                      <ButtonLoader\n                        buttonText={'SUBMIT'}\n                        isLoading={this.state.sendingForm}\n                        buttonProps={{className:header_styles.gradientButton,width:'100%',type:'submit'}}\n                      >\n                      </ButtonLoader>\n                      <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without e-mail</Link>\n                    </Flex>\n                  </Flex>\n                </Form>\n              </ModalCard.Body>\n            </ModalCard>\n          )\n        }\n      </Modal>\n    );\n  }\n}\n\nexport default WelcomeModal;\n","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\n\nclass MigrateModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'continue_without_migrate',\n        eventLabel: 'MigrateModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowMigrateModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowMigrateModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = () => {\n    const tokenMigrationRoute = this.functionsUtil.getGlobalConfig(['tools','tokenMigration','route']);\n    this.props.goToSection('tools/'+tokenMigrationRoute);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            iconHeight={'40px'}\n            title={'Migrate to Idle'}\n            icon={`images/migrate.svg`}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={3}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                You can migrate your funds from Compound, Aave, Fulcrum, Yearn and Idle V2 with just one transaction.\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                my={2}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.protocolsTokensBalances && Object.keys(this.props.protocolsTokensBalances).map( token => (\n                    <Flex\n                      mb={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      key={`token_${token}`}\n                      justifyContent={'space-between'}\n                    >\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'icon',\n                          props:{\n                            mr:2,\n                            height:'2.3em'\n                          }\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                      <SmartNumber\n                        mr={2}\n                        {...fieldProps}\n                        minPrecision={5}\n                        number={this.props.protocolsTokensBalances[token].balance} \n                      />\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'tokenName',\n                          props:fieldProps\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                    </Flex>\n                  ) )\n                }\n                <Text\n                  mb={0}\n                  fontSize={1}\n                  color={'red'}\n                  fontWeight={500}\n                  textAlign={'center'}\n                >\n                  Please be aware that by migrating your tokens from other protocols, your open positions might be liquidated if collateralized with migrated tokens.\n                </Text>\n              </Flex>\n              <Flex\n                mb={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <ButtonLoader\n                  buttonText={'MIGRATE'}\n                  handleClick={this.migrate}\n                  isLoading={this.state.sendingForm}\n                  buttonProps={{\n                    width:['100%','50%'],\n                    className:header_styles.gradientButton\n                  }}\n                >\n                </ButtonLoader>\n                {\n                /*\n                <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without migrate</Link>\n                */\n                }\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default MigrateModal;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass UpgradeModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'close_upgrade_modal',\n        eventLabel: 'UpgradeModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowUpgradeModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowUpgradeModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = async (token,strategy=null) => {\n\n    if (!strategy){\n      strategy = this.props.selectedStrategy;\n    }\n\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  convert = async (token) => {\n    const convertTool = this.functionsUtil.getGlobalConfig(['tools','tokenMigration']);\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n\n    if (!this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            icon={`images/migrate.svg`}\n            title={'Upgrade Available'}\n            iconHeight={['35px','40px']}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={[2,3]}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                Idle now supports yield farming and governance tokens distribution, migrate now your portfolio with just one click!\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n              >\n                <Flex\n                  fontSize={[2,3]}\n                  width={[0.5,0.28]}\n                  fontWeight={[4,5]}\n                  color={'copyColor'}\n                >\n                  {\n                    this.props.isMobile ? 'ASSET' : 'ASSET TO MIGRATE'\n                  }\n                </Flex>\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      BALANCE\n                    </Flex>\n                  )\n                }\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      OLD APY\n                    </Flex>\n                  )\n                }\n                <Flex\n                  fontSize={[2,3]}\n                  fontWeight={[4,5]}\n                  width={[0.25,0.19]}\n                  color={'copyColor'}\n                  justifyContent={'center'}\n                >\n                  {\n                    this.props.isMobile ? 'APY' : 'NEW APY'\n                  }\n                </Flex>\n                <Flex\n                  width={[0.25,0.15]}\n                >\n                  \n                </Flex>\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.tokensToMigrate && Object.keys(this.props.tokensToMigrate).map( tokenKey => {\n                    const token = this.props.tokensToMigrate[tokenKey].token;\n                    const strategy = this.props.tokensToMigrate[tokenKey].strategy;\n                    const tokenConfig = this.props.tokensToMigrate[tokenKey].tokenConfig;\n                    const balance = this.props.tokensToMigrate[tokenKey].oldContractBalanceFormatted;\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${tokenKey}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={[0.5,0.28]}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:['1.8em','2.3em']\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                        </Flex>\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <SmartNumber\n                                {...fieldProps}\n                                minPrecision={5}\n                                number={balance}\n                                flexProps={{\n                                  justifyContent:'center'\n                                }}\n                              />\n                            </Flex>\n                          )\n                        }\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <AssetField\n                                {...this.props}\n                                fieldInfo={{\n                                  name:'oldApy',\n                                  props:fieldProps\n                                }}\n                                token={token}\n                                tokenConfig={tokenConfig}\n                              />\n                            </Flex>\n                          )\n                        }\n                        <Flex\n                          width={[0.25,0.19]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={token}\n                            tokenConfig={tokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={[0.25,0.15]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.migrate(token,strategy) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.oldIdleTokensToMigrate && Object.keys(this.props.oldIdleTokensToMigrate).map( token => {\n                    const tokenConfig = this.props.oldIdleTokensToMigrate[token].tokenConfig;\n\n                    if (!tokenConfig){\n                      return null;\n                    }\n\n                    const balance = this.props.oldIdleTokensToMigrate[token].balance;\n                    let newTokenConfig = null;\n\n                    if (tokenConfig.availableStrategies && !this.props.availableTokens[tokenConfig.baseToken]){\n                      newTokenConfig = this.props.availableStrategies[tokenConfig.availableStrategies[0]][tokenConfig.baseToken];\n                    } else {\n                      newTokenConfig = this.props.availableTokens[tokenConfig.baseToken];\n                    }\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${token}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={0.28}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:'2.3em'\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <SmartNumber\n                            {...fieldProps}\n                            minPrecision={5}\n                            number={balance}\n                            flexProps={{\n                              justifyContent:'center'\n                            }}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'oldApy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.15}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.convert(token) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                my={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <RoundButton\n                  handleClick={this.closeModal}\n                  buttonProps={{\n                    fontSize:[2,3],\n                    width:['100%','40%'],\n                  }}\n                >\n                  MIGRATE LATER\n                </RoundButton>\n                {\n                  <Checkbox\n                    mt={2}\n                    required={false}\n                    color={'mid-gray'}\n                    checked={this.state.dontShowAgain}\n                    label={`Don't show this popup again`}\n                    onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                  />\n                }\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default UpgradeModal;","import React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport { Flex, Card, Icon, Text } from 'rimble-ui';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardMenu from '../DashboardMenu/DashboardMenu';\n\n// Import page components\nimport Stats from '../Stats/Stats';\nimport Utils from '../Utils/Utils';\nimport AssetPage from '../AssetPage/AssetPage';\nimport RoundButton from '../RoundButton/RoundButton';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CurveStrategy from '../CurveStrategy/CurveStrategy';\nimport WelcomeModal from \"../utilities/components/WelcomeModal\";\nimport TooltipModal from \"../utilities/components/TooltipModal\";\nimport MigrateModal from \"../utilities/components/MigrateModal\";\nimport UpgradeModal from \"../utilities/components/UpgradeModal\";\nimport DashboardHeader from '../DashboardHeader/DashboardHeader';\n\nclass Dashboard extends Component {\n  state = {\n    menu:[],\n    baseRoute:null,\n    clickEvent:null,\n    activeModal:null,\n    currentRoute:null,\n    pageComponent:null,\n    currentSection:null,\n    selectedSection:null,\n    tokensToMigrate:null,\n    showResetButton:false,\n    selectedSubsection:null,\n    oldIdleTokensToMigrate:null,\n    protocolsTokensBalances:null,\n  };\n\n  timeoutId = null;\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    window.functionsUtil = this.functionsUtil;\n  }\n\n  async loadMenu() {\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n    const menu = Object.keys(strategies).filter( s => ( !strategies[s].comingSoon ) ).map(strategy => ({\n        submenu:[],\n        color:'#fff',\n        selected:false,\n        route:baseRoute+'/'+strategy,\n        label:strategies[strategy].title,\n        image:strategies[strategy].icon,\n        bgColor:strategies[strategy].color,\n        component:strategies[strategy].component,\n        imageInactive:strategies[strategy].iconInactive,\n        imageInactiveDark:strategies[strategy].iconInactiveDark\n      })\n    );\n\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n\n    // Add Curve\n    if (curveConfig.enabled){\n      const curveParams = Object.assign({\n        submenu:[],\n        selected:false,\n        component:CurveStrategy,\n      },curveConfig.params);\n\n      menu.push(curveParams);\n    }\n\n    // Add Stats\n    menu.push(\n      {\n        icon:'Equalizer',\n        label:'Stats',\n        bgColor:'#21f36b',\n        color:'dark-gray',\n        component:Stats,\n        selected:false,\n        route:'/dashboard/stats',\n        submenu:[]\n      }\n    );\n\n    // Add tools\n    menu.push(\n      {\n        icon:'Build',\n        label:'Tools',\n        color:'dark-gray',\n        component:Utils,\n        selected:false,\n        route:'/dashboard/tools',\n        bgColor:this.props.theme.colors.primary,\n        submenu:Object.values(this.functionsUtil.getGlobalConfig(['tools'])).filter( u => (u.enabled) )\n      }\n    );\n\n    // Add Forum\n    menu.push(\n      {\n        submenu:[],\n        icon:'Forum',\n        mobile:false,\n        label:'Forum',\n        selected:false,\n        component:null,\n        color:'dark-gray',\n        bgColor:'#ff0000',\n        isExternalLink:true,\n        route:this.functionsUtil.getGlobalConfig(['forumURL'])\n      }\n    );\n\n    await this.setState({\n      menu\n    });\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  openTooltipModal = (modalTitle,modalContent) => {\n\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: modalTitle,\n      eventLabel: 'TooltipModal'\n    });\n\n    this.setState({\n      modalTitle,\n      modalContent\n    },() => {\n      this.setActiveModal('tooltip');\n    })\n  }\n\n  setActiveModal = (activeModal) => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadParams() {\n    const { match: { params } } = this.props;\n\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    let currentRoute = baseRoute;\n\n    let pageComponent = null;\n    let selectedToken = null;\n    let currentSection = null;\n    let selectedStrategy = null;\n\n    // Set strategy\n    if (params.section){\n      currentSection = params.section;\n      const param1 = params.param1;\n      const param2 = params.param2;\n\n      const section_is_strategy = Object.keys(this.props.availableStrategies).includes(currentSection.toLowerCase());\n      const param1_is_strategy = param1 && Object.keys(this.props.availableStrategies).includes(param1.toLowerCase());\n\n      if (section_is_strategy || param1_is_strategy){\n        selectedStrategy = section_is_strategy ? currentSection : param1;\n        currentRoute += '/'+selectedStrategy;\n\n        // Set token\n        const param1_is_token = param1 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param1.toUpperCase());\n        const param2_is_token = param2 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param2.toUpperCase());\n        if (param1_is_token || param2_is_token){\n          selectedToken = param1_is_token ? param1.toUpperCase() : param2.toUpperCase();\n          currentRoute += '/'+selectedToken;\n\n          if (section_is_strategy){\n            pageComponent = AssetPage;\n          }\n        }\n      } else {\n        currentRoute += '/'+params.section;\n\n        if (params.param1 && params.param1.length){\n          currentRoute += '/'+params.param1;\n        }\n\n        // if (params.param2 && params.param2.length){\n        //   currentRoute += '/'+params.param2;\n        // }\n      }\n    }\n\n    const menu = this.state.menu;\n\n    let selectedSection = null;\n    let selectedSubsection = null;\n\n    menu.forEach(m => {\n      m.selected = false;\n      const sectionRoute = baseRoute+'/'+params.section;\n      if (currentRoute.toLowerCase() === m.route.toLowerCase() || ( !m.submenu.length && m.route.toLowerCase() === sectionRoute.toLowerCase() )){\n        m.selected = true;\n        if (pageComponent === null){\n          pageComponent = m.component;\n        }\n      } else if (m.submenu.length) {\n        m.submenu.forEach(subm => {\n          subm.selected = false;\n          const submRoute = m.route+'/'+subm.route;\n          if (submRoute.toLowerCase() === currentRoute.toLowerCase()){\n            m.selected = true;\n            subm.selected = true;\n\n            // Set component, if null use parent\n            if (pageComponent === null){\n              if (subm.component){\n                pageComponent = subm.component;\n              } else {\n                pageComponent = m.component;\n              }\n            }\n          }\n\n          // Set selected subsection\n          if (subm.selected){\n            selectedSubsection = subm;\n          }\n\n        });\n      }\n\n      // Set selected section\n      if (m.selected){\n        selectedSection = m;\n      }\n    });\n\n    // console.log('pageComponent',params,pageComponent);\n\n    // Exit if no strategy and token selected\n    if (!pageComponent){\n      return this.goToSection('/',false);\n    }\n\n    // console.log('loadParams',selectedStrategy,selectedToken);\n    await this.props.setStrategyToken(selectedStrategy,selectedToken);\n\n    await this.setState({\n      menu,\n      params,\n      baseRoute,\n      currentRoute,\n      pageComponent,\n      currentSection,\n      selectedSection,\n      selectedSubsection\n    });\n  }\n\n  componentWillUnmount(){\n    if (this.timeoutId){\n      window.clearTimeout(this.timeoutId);\n    }\n  }\n\n  async componentWillMount() {\n\n    this.props.setCurrentSection('dashboard');\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n  }\n\n  async componentDidMount() {\n\n    this.timeoutId = window.setTimeout(() => {\n      if (!this.props.accountInizialized || !this.props.contractsInitialized){\n        this.setState({\n          showResetButton:true\n        });\n      }\n    },20000);\n\n    if (!this.props.web3){\n      return this.props.initWeb3();\n    } else if (!this.props.accountInizialized){\n      return this.props.initAccount();\n    } else if (!this.props.contractsInitialized){\n      return this.props.initializeContracts();\n    }\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n    this.checkModals();\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n\n    this.loadUtils();\n\n    const prevParams = prevProps.match.params;\n    const params = this.props.match.params;\n\n    if (JSON.stringify(prevParams) !== JSON.stringify(params)){\n      await this.setState({\n        pageComponent:null\n      }, () => {\n        this.loadParams();\n      });\n    }\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const strategyChanged = this.props.selectedStrategy && prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const accountInizialized = this.props.accountInizialized && prevProps.accountInizialized !== this.props.accountInizialized;\n    const contractsInitialized = this.props.contractsInitialized && prevProps.contractsInitialized !== this.props.contractsInitialized;\n\n    if (accountChanged || accountInizialized || contractsInitialized || strategyChanged){\n      this.checkModals();\n    }\n  }\n\n  async checkModals(){\n\n    if (this.props.selectedToken || !this.props.accountInizialized || !this.props.contractsInitialized || !this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    await this.checkTokensToMigrate();\n    await this.checkWelcomeModal();\n    await this.checkProtocolsTokensBalances();\n  }\n\n  async checkTokensToMigrate(){\n\n    const showUpgradeModal = this.functionsUtil.getStoredItem('dontShowUpgradeModal',false,null) !== null ? false : true;\n    if (this.props.selectedToken || !showUpgradeModal || !this.props.availableTokens){\n      return null;\n    }\n\n    const tokensToMigrate = await this.functionsUtil.getTokensToMigrate();\n    const oldIdleTokensToMigrate = await this.functionsUtil.getProtocolsTokensBalances('idle');\n\n    // console.log('tokensToMigrate',tokensToMigrate);\n    \n    if ((tokensToMigrate && Object.keys(tokensToMigrate).length>0) || (oldIdleTokensToMigrate && Object.keys(oldIdleTokensToMigrate).length>0)){\n      const activeModal = 'upgrade';\n      if (activeModal !== this.state.activeModal){\n        this.setState({\n          activeModal,\n          tokensToMigrate,\n          oldIdleTokensToMigrate\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkWelcomeModal(){\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show welcome modal\n    if (this.props.account && this.state.activeModal === null){\n      let welcomeIsOpen = false;\n\n      const welcomeModalProps = this.functionsUtil.getGlobalConfig(['modals','welcome']);\n\n      if (welcomeModalProps.enabled && localStorage){\n\n        // Check the last login of the wallet\n        const currTime = new Date().getTime();\n        const walletAddress = this.props.account.toLowerCase();\n        let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : {};\n\n        // First login\n        if (!lastLogin[walletAddress]){\n          lastLogin[walletAddress] = {\n            'signedUp':false,\n            'lastTime':currTime\n          };\n          welcomeIsOpen = true;\n        // User didn't sign up\n        } else if (!lastLogin[walletAddress].signedUp) {\n          const lastTime = parseInt(lastLogin[walletAddress].lastTime);\n          const timeFromLastLogin = (currTime-lastTime)/1000;\n          welcomeIsOpen = timeFromLastLogin>=welcomeModalProps.frequency; // 1 day since last login\n        }\n\n        if (welcomeIsOpen){\n          lastLogin[walletAddress].lastTime = currTime;\n          this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n        }\n      }\n\n      const activeModal = welcomeIsOpen ? 'welcome' : this.state.activeModal;\n      if (this.state.activeModal !== activeModal){\n        this.setState({\n          activeModal\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkProtocolsTokensBalances() {\n\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show migration modal if no other modals are opened\n    const migrateModalEnabled = this.functionsUtil.getGlobalConfig(['modals','migrate','enabled']);\n    const showMigrateModal = this.functionsUtil.getStoredItem('dontShowMigrateModal',false,null) !== null ? false : true;\n\n    if (this.state.activeModal === null && migrateModalEnabled && showMigrateModal && !this.state.protocolsTokensBalances){\n      const protocolsTokensBalances = await this.functionsUtil.getProtocolsTokensBalances();\n      const activeModal = protocolsTokensBalances && Object.keys(protocolsTokensBalances).length>0 ? 'migrate' : null;\n      const newState = {\n        activeModal,\n        protocolsTokensBalances\n      };\n      this.setState(newState);\n      return activeModal;\n    }\n\n    return null;\n  }\n\n  goToSection(section,isDashboard=true){\n\n    // Remove dashboard route\n    if (isDashboard){\n      section = section.replace(this.state.baseRoute +'/','');\n    }\n\n    const newRoute = isDashboard ? this.state.baseRoute +'/' + section : section;\n    window.location.hash=newRoute;\n\n    // Send GA event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'goToSection',\n      eventLabel: newRoute\n    });\n\n    window.scrollTo(0, 0);\n  }\n\n  logout = async () => {\n    this.props.setConnector('Infura','Infura');\n    await this.props.initWeb3('Infura');\n  }\n\n  changeToken(selectedToken){\n    selectedToken = selectedToken.toUpperCase();\n    if (Object.keys(this.props.availableTokens).includes(selectedToken)){\n      const routeParts = [];\n\n      // Add section\n      if (this.state.currentSection.toLowerCase() !== this.props.selectedStrategy.toLowerCase()){\n        routeParts.push(this.state.currentSection);\n      }\n\n      // Add strategy\n      routeParts.push(this.props.selectedStrategy); \n\n      // Add token\n      routeParts.push(selectedToken);\n\n      this.goToSection(routeParts.join('/'));\n    }\n  }\n\n  propagateClickEvent(clickEvent){\n    this.setState({\n      clickEvent:clickEvent.target\n    });\n  }\n\n  render() {\n    const PageComponent = this.state.pageComponent ? this.state.pageComponent : null;\n    return (\n      <Flex\n        width={'100%'}\n        position={'fixed'}\n        flexDirection={'row'}\n        backgroundColor={['dashboardBg','white']}\n        /*onClick={ e => this.propagateClickEvent(e) }*/\n        height={[(window.innerHeight-61)+'px','100vh']}\n      >\n        <Flex\n          bottom={0}\n          zIndex={99999}\n          width={[1,1/6]}\n          flexDirection={'column'}\n          position={['fixed','relative']}\n        >\n          <Card\n            p={[0,3]}\n            border={0}\n            width={['100vw','auto']}\n            height={['auto','100vh']}\n            backgroundColor={'menuBg'}\n            borderColor={this.props.theme.colors.menuRightBorder}\n            borderRight={`1px solid ${this.props.theme.colors.menuRightBorder}`}\n            >\n            <DashboardMenu\n              {...this.props}\n              menu={this.state.menu}\n            />\n          </Card>\n        </Flex>\n        <Flex\n          py={3}\n          mb={0}\n          px={[3,5]}\n          width={[1,5/6]}\n          style={{\n            overflowY:'scroll',\n            overflowX:'hidden'\n          }}\n          height={['92vh','auto']}\n          flexDirection={'columns'}\n          backgroundColor={'dashboardBg'}\n        >\n          {\n            !this.props.accountInizialized || !this.props.contractsInitialized || !PageComponent ? (\n              <Flex\n                width={1}\n                minHeight={'50vg'}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                {\n                  !this.state.showResetButton ? (\n                    <FlexLoader\n                      textProps={{\n                        textSize:4,\n                        fontWeight:2\n                      }}\n                      loaderProps={{\n                        mb:3,\n                        size:'40px'\n                      }}\n                      flexProps={{\n                        my:3,\n                        flexDirection:'column'\n                      }}\n                      text={ !this.props.accountInizialized ? 'Loading account...' : ( !this.props.contractsInitialized ? 'Loading contracts...' : 'Loading assets...' )}\n                    />\n                  ) : (\n                    <DashboardCard\n                      cardProps={{\n                        p:3,\n                        mt:3,\n                        width:[1,0.35]\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Icon\n                          size={'2.3em'}\n                          name={'Warning'}\n                          color={'cellText'}\n                        />\n                        <Text\n                          mt={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          Idle can't connect to your wallet!<br />Make sure that your wallet is unlocked and try again.\n                        </Text>\n                        <RoundButton\n                          buttonProps={{\n                            mt:3,\n                            width:[1,1/2]\n                          }}\n                          handleClick={this.logout.bind(this)}\n                        >\n                          Logout\n                        </RoundButton>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n              </Flex>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardHeader\n                  clickEvent={this.state.clickEvent}\n                  goToSection={this.goToSection.bind(this)}\n                  {...this.props}\n                />\n                {\n                  PageComponent &&\n                    <PageComponent\n                      {...this.props}\n                      match={{ params:{} }}\n                      urlParams={this.state.params}\n                      changeToken={this.changeToken.bind(this)}\n                      goToSection={this.goToSection.bind(this)}\n                      selectedSection={this.state.selectedSection}\n                      selectedSubsection={this.state.selectedSubsection}\n                      openTooltipModal={this.openTooltipModal.bind(this)}\n                      />\n                }\n              </Flex>\n            )\n          }\n        </Flex>\n        <UpgradeModal\n          {...this.props}\n          closeModal={this.resetModal}\n          goToSection={this.goToSection.bind(this)}\n          tokensToMigrate={this.state.tokensToMigrate}\n          isOpen={this.state.activeModal === 'upgrade'}\n          oldIdleTokensToMigrate={this.state.oldIdleTokensToMigrate}\n        />\n        <MigrateModal\n          {...this.props}\n          closeModal={this.resetModal}\n          goToSection={this.goToSection.bind(this)}\n          isOpen={this.state.activeModal === 'migrate'}\n          protocolsTokensBalances={this.state.protocolsTokensBalances}\n        />\n        <TooltipModal\n          closeModal={this.resetModal}\n          title={this.state.modalTitle}\n          content={this.state.modalContent}\n          isOpen={this.state.activeModal === 'tooltip'}\n        >\n        </TooltipModal>\n        <WelcomeModal\n          closeModal={this.resetModal}\n          account={this.props.account}\n          simpleID={this.props.simpleID}\n          network={this.props.network.current}\n          tokenName={this.props.selectedToken}\n          initSimpleID={this.props.initSimpleID}\n          baseTokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'welcome'}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default Dashboard;"],"sourceRoot":""}