{"version":3,"sources":["TransactionListFilters/TransactionListFilters.js","TransactionsList/TransactionsList.js","RoundIconButton/RoundIconButton.js","Breadcrumb/Breadcrumb.js","TableCellHeader/TableCellHeader.js","TableRow/TableRow.js","TableHeader/TableHeader.js","TableCellHeader/TableCellHeader.module.scss","ChartCustomTooltip/ChartCustomTooltip.js","ChartCustomTooltipRow/ChartCustomTooltipRow.js","TransactionListFilters/TransactionListFilters.module.scss","CurveRedeem/CurveRedeem.js","CurveDeposit/CurveDeposit.js","PortfolioEquityCurve/PortfolioEquityCurve.js","FundsOverviewCurve/FundsOverviewCurve.js","CurveStrategy/CurveStrategy.js"],"names":["TransactionListFilters","state","maxWidth","minWidth","maxHeight","isOpened","activeFilters","status","assets","actions","setFilter","filter","value","_this","setState","prevState","Object","objectSpread","defineProperty","applyFilters","toggle","arguments","length","undefined","props","toggleOpened","resetFilter","resetFilters","_this2","this","react_default","a","createElement","index_es","mb","top","width","zIndex","flexDirection","alignItems","justifyContent","position","DashboardCard","cardProps","py","px","style","transition","isInteractive","handleClick","cursor","onClick","fontSize","fontWeight","color","size","isMobile","name","overflow","mt","borderTop","concat","theme","colors","divider","keys","filters","map","filterCategory","filterValues","key","flexBasis","flex","TableCellHeader","pb","toUpperCase","filterValue","filterLabel","isChecked","my","label","checked","className","styles","radioBtn","onChange","e","Text","mainColor","ml","values","v","filterName","mr","textTransform","hoverColor","textAlign","Component","TransactionsList","page","prevTxs","txsPerPage","loading","totalTxs","totalPages","deposit","redeem","send","receive","migrate","swap","swapout","withdraw","completed","pending","failed","renderedTxs","processedTxs","lastBlockNumber","functionsUtil","processTxs","availableActions","action","toLowerCase","txsIndexes","tx","parseFloat","token","includes","sort","b","timeStamp","Math","ceil","forEach","i","selectedToken","tokenConfig","availableTokens","decimals","min","date","Date","getTxAction","parsedValue","tokenAmount","amount","toFixed","momentDate","strToMoment","push","setProps","FunctionsUtil","preventDefault","max","loadUtils","loadTxs","prevProps","transactionsChanged","JSON","stringify","transactions","enabledTokens","count","account","firstBlockNumber","getGlobalConfig","enabledActions","getEtherscanTxs","etherscanTxs","hashKey","lastTx","pop","blockNumber","parseInt","_this3","_this4","hasActiveFilters","m","FlexLoader","flexProps","minHeight","height","loaderProps","textProps","text","id","pt","src_TransactionListFilters_TransactionListFilters","assign","bind","TableHeader","cols","index","txHash","hash","txHashKey","TableRow","rowProps","transaction","window","open","rowId","cardId","fieldComponent","TransactionField","prevPage","nextPage","h3","fontFamily","RoundIconButton","buttonProps","p","boxShadow","borderRadius","disabled","react__WEBPACK_IMPORTED_MODULE_6___default","_RoundButton_RoundButton__WEBPACK_IMPORTED_MODULE_7__","rimble_ui__WEBPACK_IMPORTED_MODULE_5__","iconName","iconSize","Breadcrumb","showPathMobile","rimble_ui__WEBPACK_IMPORTED_MODULE_7__","_RoundIconButton_RoundIconButton__WEBPACK_IMPORTED_MODULE_8__","path","link","pathLink","Link","pl","whiteSpace","textOverflow","borderLeft","goToSection","ColTitle","react__WEBPACK_IMPORTED_MODULE_5___default","h4","lineHeight","children","desc","openTooltipModal","title","placement","message","tooltip","FieldComponent","_DashboardCard_DashboardCard__WEBPACK_IMPORTED_MODULE_7__","colInfo","colIndex","visible","mobile","parentProps","fields","fieldInfo","fieldIndex","colProps","parentId","_TableCellHeader_TableCellHeader__WEBPACK_IMPORTED_MODULE_7__","module","exports","ChartCustomTooltip","react__WEBPACK_IMPORTED_MODULE_8___default","_DashboardCard_DashboardCard__WEBPACK_IMPORTED_MODULE_9__","point","left","data","itemPos","xFormatted","ChartCustomTooltipRow","react__WEBPACK_IMPORTED_MODULE_7___default","rimble_ui__WEBPACK_IMPORTED_MODULE_8__","pr","backgroundColor","dangerouslySetInnerHTML","__html","CurveRedeem","processing","inputValue","maxSlippage","unevenAmounts","buttonDisabled","showMaxSlippage","redeemUnderlying","curveTokenConfig","curvePoolContract","curveSwapContract","curveTokenBalance","curveTokensAmounts","fastBalanceSelector","redeemUnevenAmounts","curveRedeemableIdleTokens","toggleUnevenAmounts","checkButtonDisabled","gt","changeInputValue","target","isNaN","BNify","setFastBalanceSelector","setMaxSlippage","initToken","max_slippage","lte","normalizedAmount","normalizeTokenAmount","withdrawSlippage","curveIdleTokensAmounts","Promise","all","getCurveTokensAmounts","getCurveIdleTokensAmounts","getCurveSlippage","idle","getCurveTokenPrice","curveTokenPrice","redeemableBalance","times","minus","plus","div","redeemUnevenAmountsChanged","setInputValue","inputChanged","maxSlippageChanged","tokenConfigChanged","calculateSlippage","loadSelectedTokenConfig","selectedPercentage","curveConfig","getCurvePoolContract","getCurveSwapContract","getCurveTokenBalance","getCurveRedeemableIdleTokens","getCurveAvailableTokens","callbackRedeem","error","txSucceeded","eventData","eventLabel","eventCategory","eventAction","eventValue","getTransactionError","sendGoogleAnalyticsEvent","callbackReceiptRedeem","transactionHash","_Users_samuelecester_Desktop_git_idle_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","contractName","_amount","min_amounts","console","log","toString","contractMethodSendWrapper","coin_index","migrationParams","coinIndex","min_amount","showSlippage","curveTokenName","react__WEBPACK_IMPORTED_MODULE_9___default","rimble_ui__WEBPACK_IMPORTED_MODULE_19__","_DashboardCard_DashboardCard__WEBPACK_IMPORTED_MODULE_17__","_TxProgressBar_TxProgressBar__WEBPACK_IMPORTED_MODULE_16__","web3","endMessage","cancelTransaction","waitText","required","join","_AssetSelector_AssetSelector__WEBPACK_IMPORTED_MODULE_15__","showBalance","selectDestinationToken","flexWrap","balance","mx","_AssetField_AssetField__WEBPACK_IMPORTED_MODULE_10__","_SmartNumber_SmartNumber__WEBPACK_IMPORTED_MODULE_12__","maxPrecision","number","slippage","_FastBalanceSelector_FastBalanceSelector__WEBPACK_IMPORTED_MODULE_18__","percentage","onMouseDown","isActive","abs","type","placeholder","border","_RoundButton_RoundButton__WEBPACK_IMPORTED_MODULE_13__","display","_FlexLoader_FlexLoader__WEBPACK_IMPORTED_MODULE_11__","CurveDeposit","depositSlippage","migrationContract","curveTokensBalance","migrationSucceeded","migrationContractApproved","idleTokenBalance","getFastBalanceSelector","approve","_callee","callbackApprove","callbackReceiptApprove","regenerator_default","wrap","_context","prev","next","checkMigrationContractApproved","sent","checkMigration","enableERC20","address","stop","_callee2","callbackDeposit","callbackReceiptDeposit","depositParams","_context2","abrupt","getMigrationParams","_callee3","_context3","approveCallback","migrationCallback","accountChanged","idleTokenBalanceChanged","toMigrate","n_coins","getCurveAmounts","amounts","getCurveTokenAmount","minMintAmount","integerValue","underlyingBalanceToDeposit","getIdleTokenPrice","idleTokenPrice","normalizeIdleTokenBalance","checkTokenApproved","hasCurveTokens","TxProgressBar","FastBalanceSelector","RoundButton","PortfolioEquityCurve","startDate","chartData","chartProps","chartwidth","chartHeight","loadChartData","quickDateSelectionChanged","quickDateSelection","componentDidMount","getCurveTxs","curveTxs","tokensBalance","firstTxTimestamp","totalBalance","curveTokens","lt","fixTokenDecimals","currentDate","clone","subtract","days","prevBalances","prevTimestamp","minChartValue","maxChartValue","aggregatedBalancesKeys","tokensBalancesPerDate","aggregatedBalance","currTimestamp","getTime","getTokenApiData","tokensData","foundBalances","tokensBalances","filteredTokenData","timestamp","filteredBalances","lastFilteredTx","currentBalance","lastTokenData","blocknumber","lastTxBalance","isSameOrAfter","isAfter","formattedDate","format","aggregatedBalanceParsed","frequencySeconds","aggregatedBalances","x","y","balances","itemIndex","item","floor","yFormatDecimals","gridYStep","gridYValues","gridYValue","daysCount","daysFrequency","xScale","yScale","stacked","xFormat","yFormat","formatMoney","axisBottom","legend","tickSize","tickPadding","orient","legendOffset","legendPosition","tickValues","pointSize","useMesh","axisLeft","tickRotation","abbreviateNumber","animate","pointLabel","areaOpacity","enableArea","enableSlices","enableGridY","curve","enableGridX","pointBorderWidth","d","pointLabelYOffset","areaBaselineValue","pointColor","from","modifiers","axis","ticks","fill","fonts","sansSerif","grid","line","stroke","strokeDasharray","margin","right","bottom","sliceTooltip","slideData","slice","points","serieId","yFormatted","tokenInfo","tokenName","hex","formattedBalance","GenericChart","Line","showLoader","parentIdHeight","FundsOverviewCurve","compAPR","aggregatedValues","govTokensUserBalance","getCurveAvgBuyPrice","getCurveAvgSlippage","src_PortfolioEquityCurve_PortfolioEquityCurve","getFrequencySeconds","Title","component","Heading","AssetField","counter","AssetPage","tokenFees","canRedeem","canDeposit","activeModal","tokenBalance","tokenApproved","redeemBalance","depositBalance","govTokensBalance","curveZapContract","govTokensDisabled","componentMounted","curveAvailableTokens","tokenFeesPercentage","curveDepositContract","resetModal","setActiveModal","changeFromToken","params","route","setSelectedToken","baseToken","loadTokensInfo","newState","_ref3","_ref4","_ref5","_ref6","getSelectedToken","urlParams","param1","getCurveZapContract","getCurveDepositContract","slicedToArray","getTokenFees","getUserTokenFees","getTokenBalance","updateAssetSelector","t0","_callee4","_context4","approveToken","_callee5","_context5","executeAction","_callee6","contractSendResult","tokensToDeposit","curveTokensToRedeem","_context6","txError","metaTransactionsEnabled","genericContractCall","setAction","tokenChanged","actionChanged","fastBalanceSelectorChanged","userHasFunds","AssetSelector","isDisabled","src_CurveDeposit_CurveDeposit","src_FundsOverviewCurve_FundsOverviewCurve","BuyModal","closeModal","buyToken","isOpen"],"mappings":"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","file":"static/js/20.8217661c.chunk.js","sourcesContent":["import theme from '../theme';\nimport React, { Component } from 'react';\nimport styles from './TransactionListFilters.module.scss';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport TableCellHeader from '../TableCellHeader/TableCellHeader';\nimport { Flex, Text, Icon, Radio, Button, Link } from \"rimble-ui\";\n\nclass TransactionListFilters extends Component {\n\n  state = {\n    maxWidth:0.4,\n    minWidth:0.18,\n    maxHeight:425,\n    isOpened:false,\n    activeFilters:{\n      status:null,\n      assets:null,\n      actions:null\n    }\n  }\n\n  setFilter = (filter,value) => {\n    this.setState((prevState) => ({\n      activeFilters:{\n        ...prevState.activeFilters,\n        [filter]:value\n      }\n    }));\n  }\n\n  applyFilters = (toggle=true) => {\n    if (typeof this.props.applyFilters === 'function'){\n      this.props.applyFilters(this.state.activeFilters);\n    }\n    if (toggle){\n      this.toggleOpened();\n    }\n  }\n\n  resetFilter = (filter) => {\n    this.setState((prevState) => ({\n      activeFilters:{\n        ...prevState.activeFilters,\n        [filter]:null\n      }\n    }),() => {\n      this.applyFilters(false);\n    });\n  }\n\n  resetFilters = (toggle=true) => {\n    this.setState({\n      activeFilters:{\n        status:null,\n        assets:null,\n        actions:null\n      }\n    },() => {\n      if (typeof this.props.resetFilters === 'function'){\n        this.props.resetFilters();\n      }\n      if (toggle){\n        this.toggleOpened();\n      }\n    })\n  }\n\n  toggleOpened = () => {\n    this.setState((prevState) => ({\n      isOpened: !prevState.isOpened\n    }));\n  }\n\n  render() {\n    return (\n      <Flex\n        mb={3}\n        top={0}\n        width={1}\n        zIndex={1}\n        flexDirection={'column'}\n        alignItems={'flex-start'}\n        justifyContent={'center'}\n        position={['relative','absolute']}\n      >\n        <DashboardCard\n          cardProps={{\n            py:2,\n            px:3,\n            width:[1, this.state.isOpened ? this.state.maxWidth : this.state.minWidth ],\n            style:{\n              transition:'width 0.3s ease-in-out'\n            }\n          }}\n          isInteractive={ !this.state.isOpened }\n          handleClick={ !this.state.isOpened ? this.toggleOpened : null }\n        >\n          <Flex\n            width={1}\n            style={{\n              cursor:'pointer'\n            }}\n            alignItems={'center'}\n            flexDirection={'row'}\n            justifyContent={'space-between'}\n            onClick={ this.state.isOpened ? this.toggleOpened : null }\n          >\n            <Text\n              fontSize={2}\n              fontWeight={500}\n              color={'copyColor'}\n            >\n              Filters\n            </Text>\n            <Icon\n              color={'copyColor'}\n              size={ this.props.isMobile ? '1.3em' : '1.5em'}\n              name={ this.state.isOpened ? 'Close' : 'Tune' }\n            />\n          </Flex>\n          <Flex\n            flexDirection={'column'}\n            style={{\n              overflow:'hidden',\n              transition:'max-height 0.3s ease-in-out',\n              maxHeight:this.state.isOpened ? this.state.maxHeight : 0\n            }}\n          >\n            <Flex\n              mt={2}\n              py={2}\n              width={1}\n              flexDirection={'row'}\n              borderTop={`1px solid ${theme.colors.divider}`}\n            >\n              {\n                Object.keys(this.props.filters).map((filterCategory) => {\n                  const filterValues = this.props.filters[filterCategory];\n                  return (\n                    <Flex\n                      flexDirection={'column'}\n                      key={`filter_${filterCategory}`}\n                      style={{\n                        flexBasis:'0',\n                        flex:'1 1 0px'\n                      }}\n                    >\n                      <TableCellHeader\n                        pb={2}\n                        fontWeight={3}\n                        fontSize={[0,2]}\n                        color={'cellText'}\n                      >\n                        {filterCategory.toUpperCase()}\n                      </TableCellHeader>\n                      {\n                        Object.keys(filterValues).map((filterValue) => {\n                          const filterLabel = filterValues[filterValue];\n                          const isChecked = this.state.activeFilters[filterCategory]===filterValue;\n                          return (\n                            <Radio\n                              my={2}\n                              fontSize={[0,2]}\n                              label={filterLabel}\n                              checked={isChecked}\n                              className={styles.radioBtn}\n                              key={`filter_${filterCategory}_${filterValue}`}\n                              onChange={ e => this.setFilter(filterCategory,filterValue) }\n                            />\n                          );\n                        })\n                      }\n                    </Flex>\n                  );\n                })\n              }\n            </Flex>\n            <Flex\n              flexDirection={'row'}\n            >\n              <Button.Text\n                fontWeight={4}\n                fontSize={[2,3]}\n                mainColor={'copyColor'}\n                onClick={this.applyFilters}\n              >\n                Apply filters\n              </Button.Text>\n              <Button.Text\n                ml={3}\n                fontWeight={4}\n                fontSize={[2,3]}\n                mainColor={'copyColor'}\n                onClick={this.resetFilters}\n              >\n                Reset\n              </Button.Text>\n            </Flex>\n          </Flex>\n        </DashboardCard>\n        {\n          !this.state.isOpened && this.props.activeFilters && Object.values(this.props.activeFilters).filter( v => (v !== null) ).length>0 &&\n            <Flex\n              mt={3}\n              width={1}\n              flexDirection={['column','row']}\n              alignItems={['flex-start','flex-end']}\n              justifyContent={['flex-end','flex-start']}\n            >\n              {\n                Object.keys(this.props.activeFilters).map((filterName) => {\n                  const filterValue = this.props.activeFilters[filterName];\n                  if (filterValue !== null){\n                    const filterLabel = this.props.filters[filterName][filterValue];\n                    return (\n                      <DashboardCard\n                        cardProps={{\n                          py:2,\n                          px:3,\n                          mb:[2,0],\n                          mr:[0,3],\n                          width:[1,this.state.minWidth]\n                        }}\n                        isInteractive={true}\n                        key={`filter_${filterName}`}\n                      >\n                        <Flex\n                          width={1}\n                          style={{\n                            cursor:'pointer'\n                          }}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'space-between'}\n                          onClick={e => this.resetFilter(filterName)}\n                        >\n                          <Text\n                            fontSize={2}\n                            fontWeight={500}\n                            color={'cellText'}\n                            style={{\n                              textTransform:'capitalize'\n                            }}\n                          >\n                            {filterLabel}\n                          </Text>\n                          <Icon\n                            name={'Close'}\n                            color={'cellText'}\n                            size={ this.props.isMobile ? '1.3em' : '1.5em'}\n                          />\n                        </Flex>\n                      </DashboardCard>\n                    );\n                  }\n                  return null;\n                })\n              }\n              <Link\n                mt={[2,0]}\n                fontSize={[3,2]}\n                fontWeight={[3]}\n                color={'dark-gray'}\n                hoverColor={'copyColor'}\n                textAlign={['center','left']}\n                onClick={ e => this.resetFilters(false) }\n              >\n                Clear all filters\n              </Link>\n            </Flex>\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default TransactionListFilters;","import React, { Component } from 'react';\n// import style from './TransactionsList.module.scss';\nimport TableRow from '../TableRow/TableRow';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport TableHeader from '../TableHeader/TableHeader';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport { Flex, Heading, Text, Link, Icon } from \"rimble-ui\";\nimport TransactionField from '../TransactionField/TransactionField';\nimport TransactionListFilters from '../TransactionListFilters/TransactionListFilters';\n\nclass TransactionsList extends Component {\n\n  state = {\n    page:1,\n    prevTxs:{},\n    txsPerPage:5,\n    loading:false,\n    totalTxs:null,\n    totalPages:null,\n    activeFilters:{\n      status:null,\n      assets:null,\n      actions:null,\n    },\n    filters:{\n      actions:{\n        deposit:'Deposit',\n        redeem:'Redeem',\n        send:'Send',\n        receive:'Receive',\n        migrate:'Migrate',\n        swap:'Swap-In',\n        swapout:'Swap-Out',\n        withdraw:'Withdraw',\n        // curvein:'CurveIn',\n        // curveout:'CurveOut',\n        // curvezapin:'CurveZapIn',\n        // curvezapout:'CurveZapOut',\n      },\n      status:{\n        completed:'Completed',\n        pending:'Pending',\n        failed:'Failed'\n      },\n      assets:{}\n    },\n    renderedTxs:null,\n    processedTxs:null,\n    lastBlockNumber:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  prevPage(e){\n    if (e){\n      e.preventDefault();\n    }\n    const page = Math.max(1,this.state.page-1);\n    this.setState({\n      page\n    });\n  }\n\n  nextPage(e){\n    if (e){\n      e.preventDefault();\n    }\n    const page = Math.min(this.state.totalPages,this.state.page+1);this.processTxs(page);\n    this.setState({\n      page\n    });\n  }\n\n  async componentDidMount(){\n    this.loadUtils();\n    this.loadTxs();\n  }\n\n  applyFilters = activeFilters => {\n    this.setState({\n      activeFilters\n    },() => {\n      this.processTxs();\n    });\n  }\n\n  resetFilters = () => {\n    this.setState({\n      activeFilters:{\n        status:null,\n        assets:null,\n        actions:null,\n      }\n    },() => {\n      this.processTxs();\n    });\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const transactionsChanged = JSON.stringify(prevProps.transactions) !== JSON.stringify(this.props.transactions);\n    const tokenChanged = JSON.stringify(prevProps.enabledTokens) !== JSON.stringify(this.props.enabledTokens);\n\n    if (tokenChanged || transactionsChanged){\n      this.setState({\n        page:1,\n        prevTxs:{}\n      },()=>{\n        this.loadTxs();\n      })\n      return false;\n    }\n    const pageChanged = prevState.page !== this.state.page;\n    if (pageChanged){\n      this.processTxs();\n    }\n  }\n\n  async loadTxs(count,endBlockNumber='latest'){\n    if (!this.props.account){\n      return false;\n    }\n\n    count = count ? count : 0;\n\n    this.setState({\n      loading:true\n    });\n\n    const firstBlockNumber = this.functionsUtil.getGlobalConfig(['network','firstBlockNumber']);\n\n    // Take last block number, is null take first block number\n    let prevTxs = {...this.state.prevTxs};\n    let lastBlockNumber = Math.max(firstBlockNumber,this.state.lastBlockNumber);\n\n    let enabledTokens = this.props.enabledTokens;\n    if (!enabledTokens || !enabledTokens.length){\n      enabledTokens = Object.keys(this.props.availableTokens);\n    }\n\n    const assets = {...this.state.filters.assets};\n\n    enabledTokens.forEach((token) => {\n      assets[token] = token;\n    });\n\n    let actions = {...this.state.filters.actions};\n    \n    const enabledActions = typeof this.props.enabledActions !== 'undefined' ? this.props.enabledActions : [];\n\n    if (enabledActions.length){\n      actions = {};\n      enabledActions.forEach( action => {\n        actions[action.toLowerCase()] = action;\n      });\n    }\n\n    const etherscanTxs = await this.functionsUtil.getEtherscanTxs(this.props.account,lastBlockNumber,'latest',enabledTokens);\n\n    // Merge new txs with previous ones\n    if (etherscanTxs && etherscanTxs.length){\n      etherscanTxs.forEach((tx) => {\n        if (tx.hashKey){\n          prevTxs[tx.hashKey] = tx;\n        } else {\n          prevTxs[`t${tx.timeStamp}`] = tx;\n        }\n      });\n    }\n\n    const lastTx = Object.values(prevTxs).pop();\n\n    // Update last block number\n    if (lastTx && lastTx.blockNumber && (!this.state.lastBlockNumber || lastTx.blockNumber>this.state.lastBlockNumber)){\n      lastBlockNumber = parseInt(lastTx.blockNumber)+1;\n    }\n\n    return this.setState( prevState => ({\n      prevTxs,\n      loading:false,\n      lastBlockNumber,\n      filters:{\n        ...prevState.filters,\n        assets,\n        actions\n      }\n    }), () => {\n      this.processTxs()\n    });\n  };\n\n  processTxs = (page=null) => {\n\n    page = page ? page : this.state.page;\n\n    const availableActions = Object.keys(this.state.filters.actions).map( action => (action.toLowerCase()) );\n\n    // Sort prevTxs by timeStamp\n    const txsIndexes = Object.values(this.state.prevTxs)\n                        .filter(tx => (!!parseFloat(tx.value))) // Filter txs with value\n                        .filter(tx => (\n                          (this.state.activeFilters.status === null || tx.status.toLowerCase() === this.state.activeFilters.status.toLowerCase()) && \n                          (this.state.activeFilters.assets === null || tx.token.toLowerCase() === this.state.activeFilters.assets.toLowerCase()) &&\n                          ( availableActions.includes(tx.action.toLowerCase()) && (this.state.activeFilters.actions === null || (tx.action.toLowerCase() === this.state.activeFilters.actions.toLowerCase()) ))\n                        )) // Filter by activeFilters\n                        .sort((a,b) => (a.timeStamp > b.timeStamp) ? -1 : 1 );\n\n    // Calculate max number of pages\n    const totalTxs = txsIndexes.length;\n    const totalPages = Math.ceil(totalTxs/this.state.txsPerPage);\n\n    const processedTxs = [];\n\n    // console.log(this.state.prevTxs,txsIndexes);\n\n    txsIndexes.forEach((tx, i) => {\n      const selectedToken = tx.token;\n      const tokenConfig = this.props.availableTokens[selectedToken];\n      const decimals = Math.min(tokenConfig.decimals,8);\n      \n      const date = new Date(tx.timeStamp*1000);\n      const action = tx.action ? tx.action : this.functionsUtil.getTxAction(tx,tokenConfig);\n\n      const parsedValue = parseFloat(tx.tokenAmount);\n\n      const amount = parsedValue ? (this.props.isMobile ? parsedValue.toFixed(4) : parsedValue.toFixed(decimals)) : '-';\n      const momentDate = this.functionsUtil.strToMoment(date);\n\n      // Save new params\n      tx.status = tx.status ? tx.status : 'Completed';\n      tx.action = action;\n      tx.momentDate = momentDate;\n      tx.amount = amount;\n\n      if (i>=((page-1)*this.state.txsPerPage) && i<((page-1)*this.state.txsPerPage)+this.state.txsPerPage) {\n        processedTxs.push(tx);\n      }\n    });\n\n    // console.log('processedTxs',this.state.page,txsIndexes,processedTxs);\n\n    const loading = false;\n  \n    this.setState({\n      loading,\n      totalTxs,\n      totalPages,\n      processedTxs\n    });\n  }\n\n  render() {\n\n    const hasActiveFilters = Object.values(this.state.activeFilters).filter( v => (v !== null) ).length>0;\n\n    // console.log('processedTxs',this.state.processedTxs);\n    const processedTxs = this.state.processedTxs ? Object.values(this.state.processedTxs) : null;\n\n    return (\n      <Flex flexDirection={'column'} width={1} m={'0 auto'}>\n        {\n          this.state.loading ? (\n            <FlexLoader\n              flexProps={{\n                flexDirection:'row',\n                minHeight:this.props.height\n              }}\n              loaderProps={{\n                size:'30px'\n              }}\n              textProps={{\n                ml:2\n              }}\n              text={'Loading transactions...'}\n            />\n          ) : (\n            <Flex\n              width={1}\n              position={'relative'}\n              flexDirection={'column'}\n              id={'transactions-list-container'}\n              pt={[0, hasActiveFilters ? '116px' : 5]}\n            >\n              <TransactionListFilters\n                {...this.props}\n                filters={this.state.filters}\n                activeFilters={this.state.activeFilters}\n                resetFilters={this.resetFilters.bind(this)}\n                applyFilters={this.applyFilters.bind(this)}\n              />\n              {\n                processedTxs && processedTxs.length ? (\n                  <Flex\n                    width={1}\n                    flexDirection={'column'}\n                  >\n                    <TableHeader\n                      cols={this.props.cols}\n                      isMobile={this.props.isMobile}\n                    />\n                    <Flex\n                      id={'transactions-list'}\n                      flexDirection={'column'}\n                    >\n                      {\n                        processedTxs.map( (tx,index) => {\n                          const txHash = tx.hash;\n                          const txHashKey = tx.hashKey;\n                          const handleClick = (e) => {\n                            return (txHash ? window.open(`https://etherscan.io/tx/${txHash}`) : null);\n                          };\n\n                          return (\n                            <TableRow\n                              {...this.props}\n                              rowProps={{\n                                isInteractive:true\n                              }}\n                              hash={txHash}\n                              transaction={tx}\n                              key={`tx-${index}`}\n                              handleClick={handleClick}\n                              rowId={`tx-col-${txHashKey}`}\n                              cardId={`tx-card-${txHashKey}`}\n                              fieldComponent={TransactionField}\n                            />\n                          );\n                        })\n                      }\n                    </Flex>\n                    <Flex\n                      height={'50px'}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      justifyContent={'flex-end'}\n                      id={'transactions-list-pagination'}\n                    >\n                      <Flex mr={3}>\n                        <Link mr={1} onClick={ e => this.prevPage(e) }>\n                          <Icon\n                            name={'KeyboardArrowLeft'}\n                            size={'2em'}\n                            color={ this.state.page>1 ? '#4f4f4f' : '#d8d8d8' }\n                          />\n                        </Link>\n                        <Link onClick={ e => this.nextPage(e) }>\n                          <Icon\n                            name={'KeyboardArrowRight'}\n                            size={'2em'}\n                            color={ this.state.page<this.state.totalPages ? '#4f4f4f' : '#d8d8d8' }\n                          />\n                        </Link>\n                      </Flex>\n                      <Flex alignItems={'center'}>\n                        <Text \n                          fontSize={1}\n                          fontWeight={3}\n                          color={'cellText'}\n                        >\n                          Page {this.state.page} of {this.state.totalPages}\n                        </Text>\n                      </Flex>\n                    </Flex>\n                  </Flex>\n                ) : (\n                  <Heading.h3 textAlign={'center'} fontFamily={'sansSerif'} fontWeight={2} fontSize={[2]} color={'dark-gray'}>\n                    There are no transactions\n                  </Heading.h3>\n                )\n              }\n            </Flex>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default TransactionsList;\n","import { Icon } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport RoundButton from '../RoundButton/RoundButton';\n\nclass RoundIconButton extends Component {\n  render() {\n    const buttonProps = Object.assign({\n      p:0,\n      boxShadow:1,\n      width:'40px',\n      height:'40px',\n      mainColor:'white',\n      borderRadius:'50%',\n      disabled:this.props.disabled\n    },this.props.buttonProps);\n\n    buttonProps.minWidth = buttonProps.width;\n\n    return (\n       <RoundButton\n         buttonProps={buttonProps}\n         handleClick={this.props.handleClick}\n       >\n         <Icon\n           color={'copyColor'}\n           name={this.props.iconName}\n           size={ this.props.iconSize ? this.props.iconSize : '1.3em'}\n         />\n       </RoundButton>\n    );\n  }\n}\n\nexport default RoundIconButton;","import theme from '../theme';\nimport React, { Component } from 'react';\nimport { Flex, Link, Text } from \"rimble-ui\";\nimport RoundIconButton from '../RoundIconButton/RoundIconButton';\n\nclass Breadcrumb extends Component {\n  render() {\n\n    const showPathMobile = !!this.props.showPathMobile;\n\n    return (\n      <Flex\n        width={1}\n        id={'breadcrumb'}\n        alignItems={'center'}\n      >\n        {\n          this.props.handleClick && \n           <RoundIconButton\n             buttonProps={{\n               width:'35px',\n               height:'35px'\n             }}\n             iconSize={'1.2em'}\n             iconName={'ArrowBack'}\n             handleClick={this.props.handleClick}\n           />\n        }\n        {\n          this.props.text && this.props.text.length>0 &&\n           <Link\n             ml={[2,3]}\n             fontSize={[1,2]}\n             fontWeight={3}\n             color={'cellText'}\n             hoverColor={'copyColor'}\n             onClick={this.props.handleClick}\n           >\n            {this.props.text}\n           </Link>\n        }\n        {\n          (!this.props.isMobile || showPathMobile) && this.props.path && this.props.path.length>0 &&\n            this.props.path.map((path,index) => {\n              const link = this.props.pathLink ? (this.props.pathLink[index] || null) : null;\n              const Component = link ? Link : Text;\n              return (\n                <Component\n                  pl={[1,3]}\n                  ml={[1,3]}\n                  fontWeight={3}\n                  fontSize={[1,2]}\n                  hoverColor={'copyColor'}\n                  style={ !this.props.isMobile ? {\n                    maxWidth:'30%',\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap',\n                    textOverflow: 'ellipsis',\n                    borderLeft: `1px solid ${theme.colors.divider}`\n                  } : null }\n                  key={`breadcrumb_path_${index}`}\n                  color={link ? 'cellText' : 'statValue'}\n                  onClick={link ? e => this.props.goToSection(link) : null}\n                >\n                  {path}\n                </Component>\n              );\n          })\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default Breadcrumb;","import React, { Component } from 'react';\nimport styles from './TableCellHeader.module.scss';\nimport { Flex, Heading, Icon, Link, Tooltip } from \"rimble-ui\";\n\nclass TableCellHeader extends Component {\n  render() {\n\n    const ColTitle = (props) => (\n      <Heading.h4\n        fontWeight={[3,4]}\n        color={'cellTitle'}\n        style={{\n          width:'100%',\n          whiteSpace:'nowrap'\n        }}\n        fontSize={['10px',3]}\n        lineHeight={'initial'}\n        {...props}\n      >\n        {props.children}\n      </Heading.h4>\n    );\n\n    return (\n      <Flex\n        width={this.props.width}\n      >\n        {\n          (this.props.desc && this.props.desc.length>1) ? (\n            <Flex\n              alignItems={'center'}\n            >\n              <ColTitle\n                {...this.props}\n              />\n              <Link\n                style={{\n                  cursor:'pointer'\n                }}\n                onClick={ e => this.props.openTooltipModal(this.props.title,this.props.desc) }\n              >\n                <Tooltip\n                  placement={'top'}\n                  message={'Click to read the description'}\n                >\n                  <Icon\n                    ml={1}\n                    name={\"Info\"}\n                    color={'cellTitle'}\n                    className={styles.tooltip}\n                    size={ this.props.isMobile ? '1em' : '1.2em'}\n                  />\n                </Tooltip>\n              </Link>\n            </Flex>\n          ) : (\n            <ColTitle\n              {...this.props}\n            />\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default TableCellHeader;\n","import { Flex } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass TableRow extends Component {\n  render() {\n    const FieldComponent = this.props.fieldComponent;\n    const isInteractive = typeof this.props.handleClick === 'function';\n    return (\n      <DashboardCard\n        cardProps={{\n          mb:2,\n          width:1,\n          px:[2,4],\n          py:[2,'12px']\n        }}\n        id={this.props.cardId}\n        {...this.props.rowProps}\n        className={this.props.token}\n        isInteractive={isInteractive}\n        handleClick={ isInteractive ? e => this.props.handleClick(this.props) : null }\n      >\n        <Flex\n          flexDirection={'row'}\n          id={this.props.rowId}\n        >\n          {\n            this.props.cols.map((colInfo,colIndex) => {\n              if (colInfo.visible === false || (colInfo.mobile === false && this.props.isMobile)){\n                return null;\n              }\n              return (\n                <Flex\n                  key={`col-${colIndex}`}\n                  {...colInfo.props}\n                >\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    {...colInfo.parentProps}\n                  >\n                    {\n                      colInfo.fields.map((fieldInfo,fieldIndex) => {\n                        if (fieldInfo.visible === false || (fieldInfo.mobile === false && this.props.isMobile)){\n                          return null;\n                        }\n                        return (\n                          <Flex\n                            height={'100%'}\n                            flexDirection={'column'}\n                            alignItems={'flex-start'}\n                            justifyContent={'center'}\n                            {...fieldInfo.parentProps}\n                            style={ fieldInfo.style ? fieldInfo.style : {\n                              overflow:'hidden'\n                            }}\n                            width={colInfo.fields.length>1 ? 'auto' : 1}\n                            id={`field-${colIndex}-${fieldIndex}-${fieldInfo.name}`}\n                            key={`field-${colIndex}-${fieldIndex}-${fieldInfo.name}`}\n                          >\n                            <FieldComponent\n                              {...this.props}\n                              fieldInfo={fieldInfo}\n                              colProps={colInfo.props}\n                              parentId={`field-${colIndex}-${fieldIndex}-${fieldInfo.name}`}\n                            />\n                          </Flex>\n                        );\n                      })\n                    }\n                  </Flex>\n                </Flex>\n              )\n            })\n          }\n        </Flex>\n      </DashboardCard>\n    );\n  }\n}\n\nexport default TableRow;\n","import { Flex } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport TableCellHeader from '../TableCellHeader/TableCellHeader';\n\nclass TableHeader extends Component {\n  render() {\n    return (\n      <Flex\n        width={1}\n        px={[2,4]}\n        pb={[2,3]}\n        flexDirection={'row'}\n      >\n        {\n          this.props.cols.map((colInfo,colIndex) => {\n            // Skip non-mobile columns\n            if (colInfo.visible === false || (colInfo.mobile === false && this.props.isMobile)){\n              return null;\n            }\n\n            return (colInfo.title && colInfo.title.length) ? (\n              <TableCellHeader\n                {...this.props}\n                {...colInfo.props}\n                desc={colInfo.desc}\n                title={colInfo.title}\n                key={`col-header-${colIndex}`}\n              >\n                {colInfo.title}\n              </TableCellHeader>\n            ) : (\n              <Flex key={`col-header-${colIndex}`} {...colInfo.props}></Flex>\n            )\n          })\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default TableHeader;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tooltip\":\"TableCellHeader_tooltip__3xM3k\"};","import { Flex, Text } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass ChartCustomTooltip extends Component {\n\n  async componentWillMount(){\n\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    \n  }\n\n  render() {\n    return (\n      <DashboardCard\n        key={this.props.point.id}\n        cardProps={{\n          py:2,\n          px:3,\n          width:1,\n          left: this.props.point.data.itemPos && this.props.point.data.itemPos>50 ? '-110%' : '0'\n        }}\n      >\n        <Flex\n          width={1}\n          flexDirection={'column'}\n        >\n          {\n            this.props.point.data.xFormatted && \n              <Text\n                mb={2}\n                fontSize={1}\n                fontWeight={3}\n                color={'cellText'}\n                textAlign={'left'}\n              >\n                {this.props.point.data.xFormatted}\n              </Text>\n          }\n          {this.props.children}\n        </Flex>\n      </DashboardCard>\n    );\n  }\n}\n\nexport default ChartCustomTooltip;\n","import React, { Component } from 'react';\nimport { Flex, Box, Text } from \"rimble-ui\";\n\nclass ChartCustomTooltipRow extends Component {\n\n  async componentWillMount(){\n    \n  }\n\n  async componentDidUpdate(prevProps,prevState){\n\n  }\n\n  render() {\n    return (\n      <Flex\n        mb={2}\n        width={1}\n        alignItems={'center'}\n        flexDirection={'row'}\n      >\n        <Flex\n          pr={2}\n          style={{\n            flexBasis:'0',\n            flex:'1 1 0px'\n          }}\n          alignItems={'center'}\n          justifyContent={'flex-start'}\n        > \n          {\n            this.props.color && \n            <Box\n              mr={2}\n              width={'10px'}\n              height={'10px'}\n              borderRadius={'50%'}\n              backgroundColor={this.props.color}\n            >\n            </Box>\n          }\n          <Text\n            fontSize={1}\n            fontWeight={2}\n            textAlign={'left'}\n            color={'dark-gray'}\n            style={{\n              textTransform:'capitalize'\n            }}\n          >\n            {this.props.label}\n          </Text>\n        </Flex>\n        <Flex\n          style={{\n            flexBasis:'0',\n            flex:'1 1 0px'\n          }}\n          alignItems={'center'}\n          justifyContent={'flex-end'}\n        >\n          <Text\n            fontSize={1}\n            fontWeight={3}\n            color={'cellText'}\n            textAlign={'right'}\n            style={{\n              whiteSpace:'nowrap'\n            }}\n            dangerouslySetInnerHTML={{\n              __html: this.props.value\n            }}\n          >\n          </Text>\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default ChartCustomTooltipRow;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"radioBtn\":\"TransactionListFilters_radioBtn__1vgHa\"};","import React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Icon, Checkbox, Box, Link, Input, Tooltip } from \"rimble-ui\";\n\nclass CurveRedeem extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    tokenConfig:null,\n    unevenAmounts:null,\n    selectedToken:null,\n    availableTokens:null,\n    buttonDisabled:false,\n    showMaxSlippage:false,\n    redeemUnderlying:true,\n    curveTokenConfig:null,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    curveTokensAmounts:null,\n    fastBalanceSelector:null,\n    redeemUnevenAmounts:false,\n    curveRedeemableIdleTokens:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.initToken();\n  }\n\n  showMaxSlippage(){\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  async calculateSlippage(max_slippage=null){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (!inputValue || inputValue.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    let withdrawSlippage = null;\n    let curveTokensAmounts = null;\n    let curveIdleTokensAmounts = null;\n    if (this.state.redeemUnevenAmounts){\n      [\n        curveTokensAmounts,\n        curveIdleTokensAmounts\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokensAmounts(this.props.account,normalizedAmount,true),\n        this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,normalizedAmount)\n      ]);\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false,curveIdleTokensAmounts);\n    } else {\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false);\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const redeemableBalance = inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.times(100).plus(this.state.maxSlippage || this.functionsUtil.BNify(0)).div(100)));\n      curveTokensAmounts = {};\n      curveTokensAmounts[this.state.selectedToken] = redeemableBalance;\n    }\n\n    if (withdrawSlippage){\n      withdrawSlippage = withdrawSlippage.times(100);\n    }\n\n    this.setState({\n      withdrawSlippage,\n      curveTokensAmounts,\n      curveIdleTokensAmounts\n    });\n\n    // Add max slippage but don't save in state\n    if (withdrawSlippage && max_slippage){\n      withdrawSlippage = withdrawSlippage.plus(max_slippage);\n    }\n\n    return withdrawSlippage;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.tokenConfig.idle.token !== this.props.tokenConfig.idle.token;\n    if (tokenChanged){\n      await this.initToken();\n    }\n\n    const redeemUnevenAmountsChanged = prevState.redeemUnevenAmounts !== this.state.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    const inputChanged = prevState.inputValue !== this.state.inputValue;\n    const maxSlippageChanged = parseFloat(prevState.maxSlippage) !== parseFloat(this.state.maxSlippage);\n    const tokenConfigChanged = JSON.stringify(prevState.tokenConfig) !== JSON.stringify(this.state.tokenConfig);\n    if (inputChanged || tokenConfigChanged || maxSlippageChanged){\n      this.calculateSlippage();\n    }\n\n    const selectedTokenChanged = prevState.selectedToken !== this.state.selectedToken;\n    if (selectedTokenChanged){\n      this.loadSelectedTokenConfig();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    let buttonDisabled = false;\n\n    // if (this.state.redeemUnevenAmounts){\n      buttonDisabled = !amount || amount.gt(this.state.curveTokenBalance);\n    // } else {\n      // buttonDisabled = !amount || amount.gt(this.state.redeemableBalance);\n    // }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    let inputValue = null;\n\n    // if (this.state.redeemUnevenAmounts){\n    inputValue = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n    // } else {\n      // inputValue = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n    // }\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  selectDestinationToken(selectedToken){\n    this.setState({\n      selectedToken\n    });\n  }\n\n  async loadSelectedTokenConfig(){\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const tokenConfig = this.state.availableTokens[this.state.selectedToken];\n    const curveTokenConfig = curveConfig.availableTokens[tokenConfig.idle.token];\n    this.setState({\n      tokenConfig,\n      curveTokenConfig\n    });\n  }\n\n  async initToken(){\n    const [curvePoolContract,curveSwapContract] = await Promise.all([\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract()\n    ]);\n\n    const [\n      curveTokenPrice,\n      curveTokenBalance,\n      curveRedeemableIdleTokens,\n    ] = await Promise.all([\n      this.functionsUtil.getCurveTokenPrice(),\n      this.functionsUtil.getCurveTokenBalance(this.props.account),\n      this.functionsUtil.getCurveRedeemableIdleTokens(this.props.account)\n    ]);\n\n    const unevenAmounts = [];\n    const redeemableBalance = curveTokenBalance ? curveTokenBalance.times(curveTokenPrice) : this.functionsUtil.BNify(0);\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();;\n    const selectedToken = Object.keys(availableTokens)[0];\n\n    this.setState({\n      selectedToken,\n      unevenAmounts,\n      curveTokenPrice,\n      availableTokens,\n      curvePoolContract,\n      curveSwapContract,\n      curveTokenBalance,\n      redeemableBalance,\n      curveRedeemableIdleTokens\n    });\n  }\n\n  async redeem(){\n\n    if (!this.state.curveTokenBalance){\n      return false;\n    }\n\n    const callbackRedeem = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveRedeem`,\n        eventAction: this.props.selectedToken,\n        eventValue: this.state.curveTokenBalance.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackRedeem === 'function' && txSucceeded){\n        this.props.callbackRedeem(tx);\n      }\n    };\n\n    const callbackReceiptRedeem = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.curveSwapContract.name;\n    const withdrawSlippage = await this.calculateSlippage(this.state.maxSlippage);\n    const max_slippage = this.functionsUtil.BNify(this.state.maxSlippage).div(100);\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    // const curveTokenBalance = this.functionsUtil.normalizeTokenAmount(this.state.curveTokenBalance,this.state.curvePoolContract.decimals);\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    if (this.state.redeemUnevenAmounts){\n      const min_amounts = this.state.redeemUnderlying ? await this.functionsUtil.getCurveTokensAmounts(this.props.account,_amount,false,true) : await this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,_amount,max_slippage);\n      console.log('remove_liquidity',_amount.toString(),min_amounts);\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    } else {\n      const coin_index = this.state.curveTokenConfig.migrationParams.coinIndex;\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.div(100))),this.state.tokenConfig.decimals);\n      // const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.minus(inputValue.times(withdrawSlippage.div(100))),this.state.curveTokenConfig.decimals);\n      // let _token_amount = await this.functionsUtil.getCurveTokenAmount(amounts,false);\n      // _token_amount = this.functionsUtil.BNify(_token_amount).isGreaterThan(curveTokenBalance) ? curveTokenBalance : this.functionsUtil.BNify(_token_amount);\n\n      console.log('remove_liquidity_one_coin',_amount, coin_index, min_amount);\n\n      // debugger;\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_one_coin', [_amount, coin_index, min_amount, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    }\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  getFastBalanceSelector(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n\n  render() {\n\n    const showSlippage = !this.state.buttonDisabled && this.state.withdrawSlippage;\n    const curveTokenName = this.functionsUtil.getGlobalConfig(['curve','poolContract','token']);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          {\n            !this.state.curveTokenBalance ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3,\n                  minHeight:'195px',\n                  style:{\n                    display:'flex',\n                    alignItems:'center',\n                    justifyContent:'center'\n                  }\n                }}\n              >\n                <FlexLoader\n                  flexProps={{\n                    flexDirection:'row'\n                  }}\n                  loaderProps={{\n                    size:'30px'\n                  }}\n                  textProps={{\n                    ml:2\n                  }}\n                  text={'Checking Curve Pool...'}\n                />\n              </DashboardCard>\n            ) : this.state.processing.loading ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3\n                }}\n              >\n                <Flex\n                  flexDirection={'column'}\n                >\n                  <TxProgressBar\n                    web3={this.props.web3}\n                    hash={this.state.processing.txHash}\n                    endMessage={`Finalizing redeem request...`}\n                    cancelTransaction={this.cancelTransaction.bind(this)}\n                    waitText={ this.props.waitText ? this.props.waitText : 'Redeem estimated in'}\n                  />\n                </Flex>\n              </DashboardCard>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    mb:2\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'1.8em'}\n                      color={'cellText'}\n                      name={'FileUpload'}\n                    />\n                    <Text\n                      mt={1}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Withdraw from the Curve Pool in a specific token or in uneven amounts of tokens (with no slippage).\n                    </Text>\n                    <Flex\n                      mt={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                    >\n                      <Checkbox\n                        required={false}\n                        label={`Redeem with no slippage`}\n                        checked={this.state.redeemUnevenAmounts}\n                        onChange={ e => this.toggleUnevenAmounts(e.target.checked) }\n                      />\n                      <Tooltip\n                        placement={'top'}\n                        message={`You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.`}\n                      >\n                        <Icon\n                          size={'1em'}\n                          color={'cellTitle'}\n                          name={\"InfoOutline\"}\n                        />\n                      </Tooltip>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n                {\n                  !this.state.redeemUnevenAmounts/* && (!this.props.selectedToken || (this.state.showMaxSlippage && showSlippage))*/ && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      {\n                        this.state.tokenConfig && \n                          <Box\n                            width={1}\n                          >\n                            <Text\n                              mb={1}\n                            >\n                              Select destination token:\n                            </Text>\n                            <AssetSelector\n                              {...this.props}\n                              id={'token-from'}\n                              showBalance={false}\n                              tokenConfig={this.state.tokenConfig}\n                              selectedToken={this.state.selectedToken}\n                              availableTokens={this.state.availableTokens}\n                              onChange={this.selectDestinationToken.bind(this)}\n                            />\n                          </Box>\n                      }\n                    </Box>\n                  )\n                }\n                {\n                  this.state.curveTokensAmounts && !this.state.buttonDisabled && (\n                    <DashboardCard\n                      cardProps={{\n                        mt:1,\n                        mb:2,\n                        py:2,\n                        px:1\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Text\n                          mt={1}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          You will receive:\n                        </Text>\n                        <Flex\n                          mt={2}\n                          width={1}\n                          boxShadow={0}\n                          style={{\n                            flexWrap:'wrap'\n                          }}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                          >\n                            {\n                              Object.keys(this.state.curveTokensAmounts).map( token => {\n                                const balance = this.state.curveTokensAmounts[token];\n                                return (\n                                  <Flex\n                                    mb={1}\n                                    mx={1}\n                                    width={'auto'}\n                                    flexDirection={'row'}\n                                    key={`tokenBalance_${token}`}\n                                    justifyContent={'flex-start'}\n                                  >\n                                    <AssetField\n                                      token={token}\n                                      tokenConfig={{\n                                        token:token\n                                      }}\n                                      fieldInfo={{\n                                        name:'icon',\n                                        props:{\n                                          mr:1,\n                                          width:['1.4em','1.6em'],\n                                          height:['1.4em','1.6em']\n                                        }\n                                      }}\n                                    />\n                                    <SmartNumber\n                                      ml={1}\n                                      fontSize={[0,1]}\n                                      fontWeight={500}\n                                      maxPrecision={4}\n                                      color={'cellText'}\n                                      number={balance.toString()}\n                                    />\n                                  </Flex>\n                                );\n                            })\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n                {\n                  this.state.showMaxSlippage && showSlippage && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Text>\n                          Choose max slippage:\n                        </Text>\n                        <Tooltip\n                          placement={'top'}\n                          message={`Max additional slippage on top of the one shown below`}\n                        >\n                          <Icon\n                            ml={1}\n                            size={'1em'}\n                            color={'cellTitle'}\n                            name={\"InfoOutline\"}\n                          />\n                        </Tooltip>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        {\n                          [0.2,0.5,1,5].map( slippage => (\n                            <FastBalanceSelector\n                              cardProps={{\n                                p:1\n                              }}\n                              textProps={{\n                                fontSize:1\n                              }}\n                              percentage={slippage}\n                              key={`selector_${slippage}`}\n                              onMouseDown={()=>this.setMaxSlippage(slippage)}\n                              isActive={this.state.maxSlippage === parseFloat(slippage)}\n                            />\n                          ))\n                        }\n                      </Flex>\n                    </Box>\n                  )\n                }\n                <Flex\n                  mb={3}\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  <Flex\n                    mb={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'flex-end'}\n                  >\n                    {\n                      showSlippage && (\n                        <Flex\n                          width={1}\n                          maxWidth={'40%'}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            textAlign={'right'}\n                            style={{\n                              whiteSpace:'nowrap'\n                            }}\n                            color={ parseFloat(this.state.withdrawSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                          >\n                            {\n                              parseFloat(this.state.withdrawSlippage.toFixed(3)) === 0 ?\n                                'No Slippage'\n                              : `${ this.state.withdrawSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.withdrawSlippage.abs().toFixed(3)}%`\n                            }\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={ this.state.redeemUnevenAmounts ? `You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.` : this.state.withdrawSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                          {\n                            !this.state.redeemUnevenAmounts &&\n                              <Link\n                                ml={1}\n                                color={'copyColor'}\n                                hoverColor={'primary'}\n                                onClick={this.showMaxSlippage.bind(this)}\n                              >\n                                change\n                              </Link>\n                          }\n                        </Flex>\n                      )\n                    }\n                    <Flex\n                      width={1}\n                      maxWidth={'60%'}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      justifyContent={'flex-end'}\n                    >\n                      <Link\n                        fontSize={1}\n                        fontWeight={3}\n                        color={'dark-gray'}\n                        textAlign={'right'}\n                        hoverColor={'copyColor'}\n                        onClick={ (e) => this.setFastBalanceSelector(100) }\n                        style={{\n                          maxWidth:'100%',\n                          overflow:'hidden',\n                          whiteSpace:'nowrap',\n                          textOverflow:'ellipsis'\n                        }}\n                      >\n                        {this.state.curveTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {curveTokenName}\n                      </Link>\n                    </Flex>\n                  </Flex>\n                  <Input\n                    min={0}\n                    type={\"number\"}\n                    required={true}\n                    height={'3.4em'}\n                    borderRadius={2}\n                    fontWeight={500}\n                    boxShadow={'none !important'}\n                    placeholder={`Insert amount`}\n                    onChange={this.changeInputValue.bind(this)}\n                    border={`1px solid ${this.props.theme.colors.divider}`}\n                    value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                  />\n                  <Flex\n                    mt={2}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      [25,50,75,100].map( percentage => (\n                        <FastBalanceSelector\n                          percentage={percentage}\n                          key={`selector_${percentage}`}\n                          onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                          isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                        />\n                      ))\n                    }\n                  </Flex>\n                </Flex>\n                <Flex\n                  justifyContent={'center'}\n                >\n                  <RoundButton\n                    buttonProps={{\n                      mt:2,\n                      width:[1,1/2],\n                      disabled:this.state.buttonDisabled\n                    }}\n                    handleClick={this.redeem.bind(this)}\n                  >\n                    Redeem\n                  </RoundButton>\n                </Flex>\n              </Flex>\n            )\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveRedeem;","import React, { Component } from 'react';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Box, Text, Icon, Tooltip, Link, Input } from \"rimble-ui\";\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\n\nclass CurveDeposit extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    depositSlippage:null,\n    redeemableBalance:null,\n    migrationContract:null,\n    curveTokensBalance:null,\n    migrationSucceeded:false,\n    fastBalanceSelector:null,\n    migrationContractApproved:false,\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    await this.initToken();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const idleTokenBalanceChanged = prevProps.idleTokenBalance !== this.props.idleTokenBalance;\n    if (accountChanged || idleTokenBalanceChanged){\n      await this.initToken();\n    }\n    \n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = this.state.inputValue !== prevState.inputValue;\n    if (inputValueChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  setInputValue = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    const inputValue = this.props.idleTokenBalance ? this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage) : null;\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    const buttonDisabled = !amount || amount.gt(this.state.idleTokenBalance);\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  approve = async () => {\n    const migrationContract = this.state.migrationContract;\n    if (migrationContract){\n\n      // Check if the migration contract is approved\n      const migrationContractApproved = await this.checkMigrationContractApproved();\n\n      if (!migrationContractApproved){\n\n        const callbackApprove = (tx,error) => {\n          // Send Google Analytics event\n          const eventData = {\n            eventAction: 'approve',\n            eventCategory: 'CurveDeposit',\n            eventLabel: tx ? tx.status : null\n          };\n\n          const txSucceeded = tx && tx.status === 'success';\n\n          // console.log('callbackApprove',tx,error);\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            migrationContractApproved: txSucceeded, // True\n            processing: {\n              ...prevState.processing,\n              txHash:null,\n              loading:false\n            }\n          }));\n\n          if (typeof this.props.callbackApprove === 'function' && txSucceeded){\n            this.props.callbackApprove(tx);\n          }\n\n          this.checkMigration();\n        };\n\n        const callbackReceiptApprove = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              txHash\n            }\n          }));\n        };\n\n        this.functionsUtil.enableERC20(this.props.selectedToken,migrationContract.address,callbackApprove,callbackReceiptApprove);\n\n        this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            txHash:null,\n            loading:true\n          },\n          migrationContractApproved:false\n        }));\n      } else {\n        this.setState({\n          migrationContractApproved:true\n        });\n      }\n    }\n  }\n\n  deposit = async () => {\n\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    if (!inputValue){\n      return false;\n    }\n\n    const callbackDeposit = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveDeposit`,\n        eventAction: this.props.selectedToken,\n        eventValue: inputValue.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackDeposit === 'function' && txSucceeded){\n        this.props.callbackDeposit(tx);\n      }\n    };\n\n    const callbackReceiptDeposit = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.migrationContract.name;\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n    const depositParams = await this.getMigrationParams(_amount);\n\n    this.props.contractMethodSendWrapper(contractName, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  cancelTransaction = async () => {\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  async getMigrationParams(toMigrate){\n    const migrationParams = [];\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.selectedToken]);\n\n    if (!curveTokenConfig){\n      return false;\n    }\n    \n    const migrationContractParams = curveTokenConfig.migrationParams;\n    if (migrationContractParams.n_coins){\n      const amounts = await this.functionsUtil.getCurveAmounts(this.props.selectedToken,toMigrate,true);\n      let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n\n      if (this.state.maxSlippage){\n        minMintAmount = this.functionsUtil.BNify(minMintAmount);\n        minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n        minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n      }\n\n      migrationParams.push(amounts);\n      migrationParams.push(minMintAmount);\n    }\n\n    return migrationParams;\n  }\n\n  async calculateSlippage(){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (inputValue){\n      let underlyingBalanceToDeposit = inputValue;\n      if (underlyingBalanceToDeposit){\n        const idleTokenPrice = await this.functionsUtil.getIdleTokenPrice(this.props.tokenConfig);\n        if (idleTokenPrice){\n          underlyingBalanceToDeposit = underlyingBalanceToDeposit.times(idleTokenPrice);\n        }\n      } else {\n        underlyingBalanceToDeposit = this.functionsUtil.BNify(0);\n      }\n\n      const normalizeIdleTokenBalance = this.functionsUtil.normalizeTokenAmount(underlyingBalanceToDeposit,this.props.tokenConfig.decimals);\n      let depositSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizeIdleTokenBalance);\n      if (depositSlippage){\n        depositSlippage = depositSlippage.times(100);\n      }\n\n      this.setState({\n        depositSlippage\n      });\n    }\n  }\n\n  async checkMigrationContractApproved(){\n    const migrationContract = this.state.migrationContract || await this.functionsUtil.getCurveSwapContract();\n    if (migrationContract){\n      return await this.functionsUtil.checkTokenApproved(this.props.tokenConfig.idle.token,migrationContract.address,this.props.account);\n    }\n    return false;\n  }\n\n  async initToken(){\n\n    // Init and check migration contract\n    const migrationContract = await this.functionsUtil.getCurveSwapContract();\n    const migrationContractApproved = await this.checkMigrationContractApproved();\n\n    this.setState({\n      migrationContract,\n      migrationContractApproved\n    });\n  }\n\n  approveCallback = () => {\n    this.initToken();\n  }\n\n  migrationCallback = () => {\n    this.setState({\n      migrationSucceeded:true\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken){\n      return null;\n    }\n\n    // const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const hasCurveTokens = this.state.curveTokensBalance && this.state.curveTokensBalance.gt(0);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n            {\n              this.props.idleTokenBalance && this.props.idleTokenBalance.gt(0) && (\n                <Box\n                  width={1}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:3,\n                      px:[2,4]\n                    }}\n                  >\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    > \n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ this.state.migrationContractApproved ? 'CheckBox' : 'LooksOne'}\n                          color={ this.state.migrationContractApproved ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Approve the Curve contract\n                        </Text>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ hasCurveTokens ? 'CheckBox' : 'LooksTwo'}\n                          color={ hasCurveTokens ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Deposit your {this.props.tokenConfig.idle.token}\n                        </Text>\n                      </Flex>\n                    </Flex>\n                  </DashboardCard>\n                  {\n                    !this.state.migrationContractApproved ?\n                      this.state.processing.loading ? (\n                        <Flex\n                          mt={3}\n                          flexDirection={'column'}\n                        >\n                          <TxProgressBar\n                            web3={this.props.web3}\n                            waitText={`Approve estimated in`}\n                            hash={this.state.processing.txHash}\n                            endMessage={`Finalizing approve request...`}\n                            cancelTransaction={this.cancelTransaction.bind(this)}\n                          />\n                        </Flex>\n                      ) : (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3,\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'2.3em'}\n                              name={'LockOpen'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={1}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              To deposit your {this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt:3,\n                                width:[1,1/2]\n                              }}\n                              handleClick={this.approve.bind(this)}\n                            >\n                              Approve\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      )\n                    : this.state.processing.loading ? (\n                      <Flex\n                        mt={3}\n                        flexDirection={'column'}\n                      >\n                        <TxProgressBar\n                          web3={this.props.web3}\n                          waitText={`Deposit estimated in`}\n                          hash={this.state.processing.txHash}\n                          endMessage={`Finalizing deposit request...`}\n                          cancelTransaction={this.cancelTransaction.bind(this)}\n                        />\n                      </Flex>\n                    ) : (\n                      <Box\n                        mt={2}\n                        width={1}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text>\n                            Choose max slippage:\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={`Max additional slippage on top of the one shown below`}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'space-between'}\n                        >\n                          {\n                            [0.2,0.5,1,5].map( slippage => (\n                              <FastBalanceSelector\n                                cardProps={{\n                                  p:1\n                                }}\n                                textProps={{\n                                  fontSize:1\n                                }}\n                                percentage={slippage}\n                                key={`selector_${slippage}`}\n                                onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                isActive={this.state.maxSlippage === parseFloat(slippage)}\n                              />\n                            ))\n                          }\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                        >\n                          <Flex\n                            mb={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={this.state.depositSlippage ? 'space-between' : 'flex-end'}\n                          >\n                            {\n                              this.state.depositSlippage && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    textAlign={'right'}\n                                    style={{\n                                      whiteSpace:'nowrap'\n                                    }}\n                                    color={ parseFloat(this.state.depositSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                  >\n                                    {\n                                      parseFloat(this.state.depositSlippage.toFixed(3)) === 0 ?\n                                        'No Slippage'\n                                      : `${ this.state.depositSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositSlippage.abs().toFixed(3)}%`\n                                    }\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.state.depositSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              )\n                            }\n                            {\n                              this.props.idleTokenBalance && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'flex-end'}\n                                >\n                                  <Link\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'right'}\n                                    hoverColor={'copyColor'}\n                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                    style={{\n                                      maxWidth:'100%',\n                                      overflow:'hidden',\n                                      whiteSpace:'nowrap',\n                                      textOverflow:'ellipsis'\n                                    }}\n                                  >\n                                    {this.props.idleTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {this.props.selectedToken}\n                                  </Link>\n                                </Flex>\n                              )\n                            }\n                          </Flex>\n                          <Input\n                            min={0}\n                            type={\"number\"}\n                            required={true}\n                            height={'3.4em'}\n                            borderRadius={2}\n                            fontWeight={500}\n                            boxShadow={'none !important'}\n                            placeholder={`Insert amount`}\n                            onChange={this.changeInputValue.bind(this)}\n                            border={`1px solid ${this.props.theme.colors.divider}`}\n                            value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                          />\n                          <Flex\n                            mt={2}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            {\n                              [25,50,75,100].map( percentage => (\n                                <FastBalanceSelector\n                                  percentage={percentage}\n                                  key={`selector_${percentage}`}\n                                  onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                  isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                                />\n                              ))\n                            }\n                          </Flex>\n                          <Flex\n                            mt={2}\n                            justifyContent={'center'}\n                          >\n                            <RoundButton\n                              buttonProps={{\n                                mt:2,\n                                width:[1,1/2],\n                                disabled:this.state.buttonDisabled\n                              }}\n                              handleClick={this.deposit.bind(this)}\n                            >\n                              Deposit\n                            </RoundButton>\n                          </Flex>\n                        </Flex>\n                      </Box>\n                    )\n                  }\n                </Box>\n              )\n            }\n          {\n            /*\n            this.state.tokenConfig && this.state.redeemableBalance ? (\n              <Box width={1}>\n                <Migrate\n                  {...this.props}\n                  showActions={false}\n                  getTokenPrice={false}\n                  migrationTextProps={{\n                    fontWeight:500\n                  }}\n                  isMigrationTool={true}\n                  migrationImage={{\n                    mb:1,\n                    height:'1.8em',\n                    src:curveConfig.params.image\n                  }}\n                  showBalanceSelector={true}\n                  waitText={'Deposit estimated in'}\n                  tokenConfig={this.state.tokenConfig}\n                  callbackApprove={this.approveCallback.bind(this)}\n                  migrationParams={this.getMigrationParams.bind(this)}\n                  migrationCallback={this.migrationCallback.bind(this)}\n                  approveText={`To deposit your ${this.props.tokenConfig.idle.token} you need to approve Curve smart-contract first.`}\n                  migrationText={`You can deposit ${this.state.redeemableBalance.toFixed(4)} ${this.props.tokenConfig.idle.token} in the Curve Pool${ this.state.depositSlippage ? (this.state.depositSlippage.gte(0) ? ` with <span style=\"color:${this.props.theme.colors.transactions.status.failed}\">${this.state.depositSlippage.times(100).toFixed(2)}% of slippage</span>` : ` with <span style=\"color:${this.props.theme.colors.transactions.status.completed}\">${Math.abs(parseFloat(this.state.depositSlippage.times(100).toFixed(2)))}% of bonus</span>`) : '' }.`}\n                >\n                  {\n                    !this.props.account ? (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Input'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            Please connect with your wallet interact with Idle.\n                          </Text>\n                          <RoundButton\n                            buttonProps={{\n                              mt:2,\n                              width:[1,1/2]\n                            }}\n                            handleClick={this.props.connectAndValidateAccount}\n                          >\n                            Connect\n                          </RoundButton>\n                        </Flex>\n                      </DashboardCard>\n                    ) : (\n                      <DashboardCard\n                        cardProps={{\n                          p:3\n                        }}\n                      >\n                        {\n                          this.state.migrationSucceeded ? (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'DoneAll'}\n                                color={this.props.theme.colors.transactions.status.completed}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You have successfully deposited your {this.props.tokenConfig.idle.token} in the Curve Pool!\n                              </Text>\n                            </Flex>\n                          ) : (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'MoneyOff'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You don't have any {this.props.tokenConfig.idle.token} in your wallet.\n                              </Text>\n                            </Flex>\n                          )\n                        }\n                      </DashboardCard>\n                    )\n                  }\n                </Migrate>\n              </Box>\n            ) : null\n            */\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveDeposit;","import theme from '../theme';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\n// import { linearGradientDef } from '@nivo/core'\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport ChartCustomTooltip from '../ChartCustomTooltip/ChartCustomTooltip';\nimport ChartCustomTooltipRow from '../ChartCustomTooltipRow/ChartCustomTooltipRow';\n\nclass PortfolioEquityCurve extends Component {\n  state = {\n    startDate:null,\n    chartData:null,\n    chartProps:null,\n    chartwidth:null,\n    chartHeight:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentDidMount(){\n    this.loadUtils();\n    this.loadChartData();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    const quickDateSelectionChanged = prevProps.quickDateSelection !== this.props.quickDateSelection;\n    const tokenChanged = JSON.stringify(prevProps.enabledTokens) !== JSON.stringify(this.props.enabledTokens);\n    if (tokenChanged || quickDateSelectionChanged){\n      this.setState({\n        chartData:null\n      },() => {\n        this.componentDidMount();\n      });\n    }\n\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (mobileChanged){\n      this.loadChartData();\n    }\n  }\n\n  async loadChartData() {\n\n    let enabledTokens = this.props.enabledTokens;\n    if (!enabledTokens || !enabledTokens.length){\n      enabledTokens = Object.keys(this.props.availableTokens);\n    }\n\n    const curveTxs = await this.functionsUtil.getCurveTxs(this.props.account,0,'latest',enabledTokens);\n\n    const chartData = [];\n    let tokensBalance = [];\n    const processedTxs = {};\n    let firstTxTimestamp = null;\n    let totalBalance = this.functionsUtil.BNify(0);\n    const curvePoolContract = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    if (curveTxs && curveTxs.length){\n\n      curveTxs.forEach((tx,index) => {\n\n        if (!processedTxs[tx.hash]){\n          processedTxs[tx.hash] = [];\n        }\n\n        if (processedTxs[tx.hash].includes(tx.action)){\n          return;\n        }\n        \n        firstTxTimestamp = firstTxTimestamp ? Math.min(firstTxTimestamp,parseInt(tx.timeStamp)) : parseInt(tx.timeStamp);\n\n        const curveTokens = this.functionsUtil.BNify(tx.curveTokens);\n\n        switch (tx.action){\n          case 'CurveIn':\n          case 'CurveZapIn':\n          case 'CurveDepositIn':\n          case 'CurveTransferIn':\n            totalBalance = totalBalance.plus(curveTokens);\n          break;\n          case 'CurveOut':\n          case 'CurveZapOut':\n          case 'CurveDepositOut':\n          case 'CurveTransferOut':\n            totalBalance = totalBalance.minus(curveTokens);\n          break;\n          default:\n          break;\n        }\n\n        // Reset totalBalance if below zero\n        if (totalBalance.lt(0)){\n          totalBalance = this.functionsUtil.BNify(0);\n        }\n\n        const action = tx.action;\n        const balance = totalBalance;\n        const timeStamp = parseInt(tx.timeStamp);\n        const curveTokenPrice = this.functionsUtil.fixTokenDecimals(tx.curveTokenPrice,curvePoolContract.decimals);\n\n        // console.log(this.functionsUtil.strToMoment(timeStamp*1000).format('YYYY/MM/DD HH:mm'),tx.hash,tx.action,curveTokens.toString(),totalBalance.toString());\n\n        if (!curveTokenPrice.isNaN() && !curveTokenPrice.isNaN()){\n          tokensBalance.push({\n            action,\n            balance,\n            timeStamp,\n            curveTokens,\n            curveTokenPrice\n          });\n\n          processedTxs[tx.hash].push(action);\n        }\n      });\n    }\n\n    // Calculate Start Date\n    let startDate = null;\n    const currentDate = this.functionsUtil.strToMoment(new Date());\n\n    switch (this.props.quickDateSelection){\n      case 'week':\n        startDate = currentDate.clone().subtract(1,'week');\n      break;\n      case 'month':\n        startDate = currentDate.clone().subtract(1,'month');\n      break;\n      case 'month3':\n        startDate = currentDate.clone().subtract(3,'month');\n      break;\n      case 'month6':\n        startDate = currentDate.clone().subtract(6,'month');\n      break;\n      default:\n        startDate = null;\n      break;\n    }\n\n    const days = {};\n    let prevBalances = {};\n    let prevTimestamp = null;\n    let minChartValue = null;\n    let maxChartValue = null;\n    const aggregatedBalancesKeys = {};\n    const tokensBalancesPerDate = {};\n    let aggregatedBalance = this.functionsUtil.BNify(0);\n    // let curveTokenBalance = this.functionsUtil.BNify(0);\n    const currTimestamp = parseInt(new Date().getTime()/1000)+86400;\n\n    const tokensData = await this.functionsUtil.getTokenApiData(Object.values(this.props.availableTokens)[0].address,false,firstTxTimestamp,null,false,3600);\n\n    for (let timeStamp=firstTxTimestamp;timeStamp<=currTimestamp;timeStamp+=this.props.frequencySeconds){\n\n      let foundBalances = {};\n      let tokensBalances = {};\n      timeStamp = Math.min(currTimestamp,timeStamp);\n      let momentDate = this.functionsUtil.strToMoment(timeStamp*1000);\n\n      // eslint-disable-next-line\n      const filteredTokenData = tokensData.filter(tx => (tx.timestamp>=prevTimestamp && tx.timestamp<=timeStamp));\n\n      // eslint-disable-next-line\n      let filteredBalances = tokensBalance.filter(tx => (tx.timeStamp<=timeStamp && (!prevTimestamp || tx.timeStamp>prevTimestamp)));\n      \n      if (!filteredBalances.length){\n        if (prevBalances){\n          filteredBalances = prevBalances;\n          const lastFilteredTx = Object.values(filteredBalances).pop();\n          const currentBalance = parseFloat(lastFilteredTx.balance);\n\n          const lastTokenData = Object.values(filteredTokenData).pop();\n          let curveTokenPrice = null;\n          if (lastTokenData){\n            curveTokenPrice = await this.functionsUtil.getCurveTokenPrice(lastTokenData.blocknumber);\n          }\n\n          // Take idleToken price from API and calculate new balance\n          if (currentBalance>0 && timeStamp>firstTxTimestamp && curveTokenPrice){\n            // Set new curveTokenPrice\n            lastFilteredTx.curveTokenPrice = curveTokenPrice;\n            filteredBalances = [lastFilteredTx];\n          }\n        } else {\n          filteredBalances = [{\n            balance:this.functionsUtil.BNify(0),\n            curveTokenPrice:this.functionsUtil.BNify(0)\n          }];\n        }\n      }\n\n      const lastTx = Object.assign([],filteredBalances).pop();\n      let lastTxBalance = this.functionsUtil.BNify(lastTx.balance).times(lastTx.curveTokenPrice);\n\n      tokensBalances[curvePoolContract.token] = this.functionsUtil.BNify(lastTx.balance);\n      aggregatedBalance = lastTxBalance;\n\n      foundBalances = filteredBalances;\n\n      // console.log(momentDate.format('YYYY/MM/DD 00:00'),lastTx.balance.toString(),lastTx.curveTokenPrice.toString(),lastTxBalance.toString());\n\n      if (startDate === null || momentDate.isSameOrAfter(startDate)){\n        \n        if (momentDate.isAfter(new Date(),'day')){\n          momentDate = this.functionsUtil.strToMoment(new Date());\n        }\n\n        // Force date to midnight\n        const formattedDate = momentDate.format('YYYY/MM/DD 00:00');\n\n        // Save days for axisBottom format\n        days[momentDate.format('YYYY/MM/DD')] = 1;\n\n        const aggregatedBalanceParsed = parseFloat(parseFloat(aggregatedBalance.toFixed(6)));\n\n        aggregatedBalancesKeys[formattedDate] = aggregatedBalanceParsed;\n        tokensBalancesPerDate[formattedDate] = tokensBalances;\n\n        // console.log(formattedDate,tokensBalances);\n\n        minChartValue = minChartValue === null ? aggregatedBalanceParsed : Math.min(minChartValue,aggregatedBalanceParsed);\n        maxChartValue = maxChartValue === null ? aggregatedBalanceParsed : Math.max(maxChartValue,aggregatedBalanceParsed);\n      }\n\n      prevTimestamp = timeStamp;\n      prevBalances = foundBalances;\n    }\n\n    const aggregatedBalances = Object.keys(aggregatedBalancesKeys).map(date => ({\n      x:date,\n      y:aggregatedBalancesKeys[date],\n      balances:tokensBalancesPerDate[date]\n    }));\n\n    let itemIndex = 0;\n    aggregatedBalances.forEach( (item,index) => {\n      const itemPos = Math.floor(itemIndex/aggregatedBalances.length*100);\n      aggregatedBalances[index].itemPos = itemPos;\n      itemIndex++;\n    });\n\n    /*\n    aggregatedBalances.push({\n      x:momentDate.format('YYYY/MM/DD HH:mm'),\n      y:aggregatedBalance\n    });\n    */\n\n    // Add day before to start with zero balance\n    /*\n    const firstTxMomentDate = this.functionsUtil.strToMoment(firstTxTimestamp*1000);\n    if ((startDate === null || startDate.isSameOrBefore(firstTxMomentDate)) && aggregatedBalances.length){\n      const firstItem = aggregatedBalances[0];\n      const firstDate = this.functionsUtil.strToMoment(firstItem.x,'YYYY/MM/DD HH:mm');\n      firstDate.subtract(1,'day');\n      aggregatedBalances.unshift({\n        x:firstDate.format('YYYY/MM/DD HH:mm'),\n        y:0\n      });\n    }\n    */\n\n    // Add token Data\n    chartData.push({\n      id:'USD',\n      color: 'hsl('+ this.functionsUtil.getGlobalConfig(['stats','tokens','USD','color','hsl']).join(',')+')',\n      data:aggregatedBalances\n    });\n\n    let yFormatDecimals = 2;\n    if (maxChartValue-minChartValue<1){\n      yFormatDecimals = 4;\n    }\n\n    if (maxChartValue === minChartValue){\n      minChartValue = Math.max(0,maxChartValue-1);\n    }\n\n    const maxGridLines = 5;\n    const gridYStep = (maxChartValue-minChartValue)/maxGridLines;\n    const gridYValues = [];\n    for (let i=0;i<=maxGridLines;i++){\n      const gridYValue = parseFloat(parseFloat(minChartValue+(i*gridYStep)).toFixed(6));\n      gridYValues.push(gridYValue);\n    }\n    \n    const axisBottomMaxValues = 10;\n    const daysCount = Object.values(days).length;    \n    const daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n    const chartProps = {\n      xScale:{\n        type: 'time',\n        format: '%Y/%m/%d %H:%M',\n      },\n      yScale:{\n        type: 'linear',\n        stacked: false,\n        min: minChartValue,\n        max: maxChartValue\n      },\n      xFormat:'time:%b %d %Y',\n      yFormat:value => this.functionsUtil.formatMoney(value,yFormatDecimals),\n      axisBottom: this.props.isMobile ? null : {\n        legend: '',\n        tickSize:0,\n        format: '%b %d',\n        tickPadding: 15,\n        orient: 'bottom',\n        legendOffset: 36,\n        legendPosition: 'middle',\n        tickValues:'every '+daysFrequency+' days'\n      },\n      gridYValues,\n      pointSize:0,\n      useMesh:true,\n      axisLeft: this.props.isMobile ? null : {\n        legend: '',\n        tickSize: 0,\n        orient: 'left',\n        tickPadding: 10,\n        tickRotation: 0,\n        legendOffset: -70,\n        tickValues:gridYValues,\n        legendPosition: 'middle',\n        format: v => this.functionsUtil.abbreviateNumber(v,2),\n      },\n      animate:true,\n      pointLabel:'y',\n      areaOpacity:0.1,\n      enableArea:true,\n      enableSlices:'x',\n      enableGridY:true,\n      curve:'monotoneX',\n      enableGridX:false,\n      pointBorderWidth:1,\n      colors:d => d.color,\n      pointLabelYOffset:-12,\n      areaBaselineValue:minChartValue,\n      pointColor:{ from: 'color', modifiers: []},\n      theme:{\n        axis: {\n          ticks: {\n            text: {\n              fontSize:12,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '8 4'\n          }\n        },\n      },\n      /*\n      defs:[\n        linearGradientDef('gradientA', [\n          { offset: 0, color: 'inherit' },\n          { offset: 100, color: 'inherit', opacity: 0 },\n        ]),\n      ],\n      fill:[{ match: '*', id: 'gradientA' }],\n      */\n      margin: this.props.isMobile ? { top: 20, right: 25, bottom: 25, left: 20 } : { top: 30, right: 50, bottom: 45, left: 50 },\n      sliceTooltip:(slideData) => {\n        const { slice } = slideData;\n        const point = slice.points[0];\n        return (\n          <ChartCustomTooltip\n            point={point}\n          >\n            <ChartCustomTooltipRow\n              color={point.color}\n              label={point.serieId}\n              value={`$ ${point.data.yFormatted}`}\n            />\n            {\n            typeof point.data.balances === 'object' && Object.keys(point.data.balances).length>0 &&\n              Object.keys(point.data.balances).map(token => {\n                if (token === point.serieId){\n                  return null;\n                }\n                const tokenInfo = this.functionsUtil.getGlobalConfig(['stats','tokens',token]);\n                if (tokenInfo){\n                  const tokenName = tokenInfo.name ? tokenInfo.name : token;\n                  const color = tokenInfo.color.hex;\n                  const balance = point.data.balances[token];\n                  let formattedBalance = this.functionsUtil.formatMoney(balance,2);\n                  if (parseFloat(balance)>=0.01){\n                    return (\n                      <ChartCustomTooltipRow\n                        label={tokenName}\n                        color={color}\n                        key={`row_${token}`}\n                        value={`${formattedBalance}`}\n                      />\n                    );\n                  }\n                }\n                return null;\n              })\n            }\n          </ChartCustomTooltip>\n        );\n      }\n    };\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  render() {\n    return (\n      <GenericChart\n        type={Line}\n        showLoader={true}\n        {...this.state.chartProps}\n        data={this.state.chartData}\n        parentId={this.props.parentId}\n        height={this.props.chartHeight}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default PortfolioEquityCurve;","import theme from '../theme';\nimport Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Flex, Heading, Text } from \"rimble-ui\";\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport PortfolioEquityCurve from '../PortfolioEquityCurve/PortfolioEquityCurve';\n\nclass FundsOverviewCurve extends Component {\n\n  state = {\n    compAPR:null,\n    aggregatedValues:[],\n    govTokensUserBalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    await this.functionsUtil.getCurveAvgBuyPrice();\n\n    // debugger;\n\n    await this.functionsUtil.getCurveAvgSlippage();\n\n    // debugger;\n    /*\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const [govTokensUserBalance,avgAPY,days] = await Promise.all([\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,'DAI'),\n      this.functionsUtil.loadAssetField('avgAPY',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '-') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    let [tokenAllocation,compAPR] = await Promise.all([\n      this.functionsUtil.getTokenAllocation(this.props.tokenConfig,false,false),\n      this.functionsUtil.getCompAPR(this.props.selectedToken,this.props.tokenConfig)\n    ]);\n\n    if (tokenAllocation){\n      const compoundInfo = this.props.tokenConfig.protocols.find( p => (p.name === 'compound') );\n      if (compoundInfo){\n        if (tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()]){\n          const compoundAllocationPerc = tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()];\n          compAPR = compAPR.times(compoundAllocationPerc);\n        }\n      }\n    }\n\n    this.setState({\n      compAPR,\n      aggregatedValues,\n      govTokensUserBalance\n    });\n    */\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Text\n                          mt={2}\n                          fontWeight={2}\n                          fontSize={[1,2]}\n                          color={'cellText'}\n                        >\n                          {v.props.title}\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquityCurve\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLentCurve',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPercCurve',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            {\n              /*\n              <Flex\n                mb={[2,0]}\n                width={[1,1/5]}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'flex-start'}\n              >\n                <Title\n                  mb={2}\n                  fontSize={[3,4]}\n                  component={Heading.h3}\n                >\n                  Fees\n                </Title>\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'feesCounter',\n                    props:{\n                      decimals:7,\n                      maxPrecision:8,\n                      style:{\n                        fontWeight:300,\n                        fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                        color:theme.colors.counter\n                      },\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n              */\n            }\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveApy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Avg Slippage\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveAvgSlippage',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverviewCurve;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport { Box, Flex, Text, Icon } from \"rimble-ui\";\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport CurveDeposit from '../CurveDeposit/CurveDeposit';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport TransactionField from '../TransactionField/TransactionField';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport FundsOverviewCurve from '../FundsOverviewCurve/FundsOverviewCurve';\n\nclass AssetPage extends Component {\n\n  state = {\n    inputValue:{},\n    processing:{},\n    tokenFees:null,\n    canRedeem:null,\n    canDeposit:null,\n    action:'deposit',\n    activeModal:null,\n    tokenConfig:null,\n    tokenBalance:null,\n    tokenApproved:null,\n    selectedToken:null,\n    availableTokens:{},\n    redeemBalance:null,\n    depositBalance:null,\n    buttonDisabled:false,\n    curveTokenPrice:null,\n    depositSlippage:null,\n    idleTokenBalance:null,\n    withdrawSlippage:null,\n    govTokensBalance:null,\n    curveZapContract:null,\n    curveTokenConfig:null,\n    curveTokensAmounts:{},\n    govTokensDisabled:null,\n    componentMounted:false,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    redeemableBalance:null,\n    fastBalanceSelector:{},\n    curveAvailableTokens:{},\n    tokenFeesPercentage:null,\n    redeemUnevenAmounts:false,\n    curveDepositContract:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  changeFromToken = (selectedToken) => {\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    this.props.goToSection(`${curveConfig.params.route}/${selectedToken}`);\n  }\n\n  getSelectedToken(){\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    return this.props.urlParams.param1 && curveAvailableTokens[this.props.urlParams.param1] ? this.props.urlParams.param1 : Object.keys(curveAvailableTokens)[0];\n  }\n\n  setSelectedToken = async (selectedToken) => {\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n    this.setState({\n      tokenConfig,\n      selectedToken,\n      availableTokens,\n      curveTokenConfig\n    });\n  }\n\n  loadTokensInfo = async () => {\n\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    this.setState({\n      curveAvailableTokens\n    });\n\n    const selectedToken = this.getSelectedToken();\n    // Check if token is set the query params\n    if (selectedToken && selectedToken !== this.props.urlParams.param1){\n      this.changeFromToken(selectedToken);\n      return await this.setSelectedToken(selectedToken);\n    } else if (selectedToken !== this.state.selectedToken){\n      await this.setSelectedToken(selectedToken);\n    }\n\n    const newState = {...this.state};\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n\n    if (newState.selectedToken !== selectedToken){\n      newState.selectedToken = selectedToken;\n    }\n\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n\n    const [\n      curveZapContract,\n      curvePoolContract,\n      curveSwapContract,\n      curveDepositContract\n    ] = await Promise.all([\n      this.functionsUtil.getCurveZapContract(),\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract()\n    ]);\n\n    newState.curveZapContract = curveZapContract;\n    newState.curvePoolContract = curvePoolContract;\n    newState.curveSwapContract = curveSwapContract;\n    newState.curveDepositContract = curveDepositContract;\n\n    newState.availableTokens = availableTokens;\n\n\n    // console.log('curveTokenPrice',newState.curveTokenPrice.toFixed(6),'curveTokenBalance',newState.curveTokenBalance.toFixed(6),'redeemableBalance',newState.redeemableBalance.toFixed(20),'tokenBalance',newState.tokenBalance.toFixed(20));\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[selectedToken] = tokenConfig;\n\n    newState.tokenConfig = tokenConfig;\n    newState.curveTokenConfig = curveTokenConfig;\n\n    if (this.props.account){\n      [\n        newState.curveTokenPrice,\n        newState.curveTokenBalance,\n        newState.tokenFeesPercentage,\n        newState.tokenFees,\n        newState.tokenBalance,\n        newState.idleTokenBalance,\n        newState.tokenApproved,\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokenPrice(),\n        this.functionsUtil.getCurveTokenBalance(),\n        this.functionsUtil.getTokenFees(tokenConfig),\n        this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n        this.functionsUtil.getTokenBalance(selectedToken,this.props.account),\n        this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n        this.functionsUtil.checkTokenApproved(selectedToken,curveDepositContract.address,this.props.account),\n      ]);\n\n\n      newState.processing = {\n        redeem:{\n          txHash:null,\n          loading:false\n        },\n        deposit:{\n          txHash:null,\n          loading:false\n        },\n        approve:{\n          txHash:null,\n          loading:false\n        },\n      };\n      newState.inputValue = {\n        redeem:null,\n        deposit:null\n      };\n      newState.fastBalanceSelector = {\n        redeem:null,\n        deposit:null\n      };\n\n      newState.componentMounted = true;\n      newState.depositBalance = newState.tokenBalance;\n      newState.redeemBalance = newState.redeemableBalance;\n      newState.govTokensDisabled = tokenConfig.govTokensDisabled;\n      newState.canRedeem = newState.curveTokenBalance && newState.curveTokenBalance.gt(0);\n      newState.canDeposit = newState.idleTokenBalance && newState.idleTokenBalance.gt(0);\n      newState.redeemableBalance = newState.curveTokenBalance ? newState.curveTokenBalance.times(newState.curveTokenPrice) : this.functionsUtil.BNify(0);\n    }\n\n    this.setState(newState);\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async calculateSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,this.state.curvePoolContract.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositBalance = amount;\n        newState.depositSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      case 'redeem':\n        newState.redeemBalance = amount;\n        newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.urlParams.param1 !== this.props.urlParams.param1;\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n\n    if (accountChanged || transactionsChanged || tokenChanged){\n      await this.loadTokensInfo();\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const redeemUnevenAmountsChanged = this.state.redeemUnevenAmounts !== prevState.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n    if (actionChanged || fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    if (actionChanged){\n      this.updateAssetSelector();\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  updateAssetSelector = async () => {\n    const newState = {};\n    switch (this.state.action){\n      case 'deposit':\n        this.loadTokensInfo();\n      break;\n      case 'redeem':\n        // this.loadTokensInfo();\n        const tokenConfig = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n        newState.curveAvailableTokens = {};\n        newState.curveTokenConfig = tokenConfig;\n        newState.selectedToken = tokenConfig.token;\n        newState.curveAvailableTokens[tokenConfig.token] = tokenConfig;\n      break;\n      default:\n      break;\n    }\n\n    this.setState(newState);\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.state.tokenBalance ? this.functionsUtil.BNify(this.state.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          amount = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n        } else {\n          amount = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  changeInputValue = (e) => {\n    if (!this.state.action){\n      return false;\n    }\n\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.state.tokenBalance));\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.curveTokenBalance)) );\n        } else {\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.redeemableBalance)) );\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = this.state.tokenApproved;\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.state.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.functionsUtil.enableERC20(this.state.selectedToken,this.state.curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    let loading = true;\n\n    switch (this.state.action){\n      // Handle deposit in curve\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.state.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if (this.state.metaTransactionsEnabled && txError){\n            this.setState({\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,tokensToDeposit);\n        const minMintAmount = await this.functionsUtil.genericContractCall(this.state.curveSwapContract.name,'calc_token_amount',[amounts,true]);\n        const depositParams = [amounts,minMintAmount];\n\n        // No need for callback atm\n        contractSendResult = await this.props.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n      break;\n      case 'redeem':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        let curveTokensToRedeem = null;\n        if (selectedPercentage){\n          curveTokensToRedeem = this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage);\n        } else {\n          curveTokensToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals));\n          if (!this.state.redeemUnevenAmounts){\n            const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n            curveTokensToRedeem = curveTokensToRedeem.div(curveTokenPrice);\n          }\n        }\n\n        if (!curveTokensToRedeem){\n          return false;\n        }\n\n        const callbackRedeem = (tx,error) => {\n          const txSucceeded = tx.status === 'success';\n\n          // Send Google Analytics event\n          const eventData = {\n            eventLabel: tx.status,\n            eventCategory: `CurveRedeem`,\n            eventAction: this.state.selectedToken,\n            eventValue: curveTokensToRedeem.toFixed()\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          }\n        };\n\n        const callbackReceiptRedeem = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const _amount = this.functionsUtil.normalizeTokenAmount(curveTokensToRedeem,this.state.curvePoolContract.decimals).toString();\n        let min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,0);\n\n        const contractName = this.state.curveDepositContract.name;\n        if (this.state.redeemUnevenAmounts){\n          console.log('remove_liquidity_imbalance',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_imbalance', [min_amounts, _amount], null, callbackRedeem, callbackReceiptRedeem);\n        } else {\n          min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,_amount);\n          console.log('remove_liquidity',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts], null, callbackRedeem, callbackReceiptRedeem);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    // console.log('contractSendResult',contractSendResult);\n\n    if (contractSendResult !== false){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    const userHasFunds = this.props.account && this.state.curveTokenBalance && this.functionsUtil.BNify(this.state.curveTokenBalance).gt(0);\n    const canPerformAction = true;\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            {\n              <Breadcrumb\n                isMobile={this.props.isMobile}\n                path={['Boost',this.state.selectedToken]}\n                handleClick={ e => this.props.goToSection('best') }\n                text={this.functionsUtil.getGlobalConfig(['strategies','best','title'])}\n              />\n            }\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Curve Pool\n        </Title>\n        <Flex\n          width={1}\n        >\n          <Flex\n            width={1}\n            alignItems={'center'}\n            flexDirection={'column'}\n            justifyContent={'center'}\n          >\n            <Flex\n              width={[1,0.36]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Box\n                width={1}\n              >\n                <Text\n                  mb={1}\n                >\n                  Select your asset:\n                </Text>\n                <AssetSelector\n                  {...this.props}\n                  id={'token-from'}\n                  onChange={this.changeFromToken}\n                  selectedToken={this.state.selectedToken}\n                  tokenConfig={this.state.curveTokenConfig}\n                  showBalance={this.state.action === 'deposit'}\n                  availableTokens={this.state.curveAvailableTokens}\n                />\n              </Box>\n              <Box\n                width={1}\n              >\n                {\n                  canPerformAction ? (\n                    <Flex\n                      mt={2}\n                      flexDirection={'column'}\n                    >\n                      <Text\n                        mb={2}\n                      >\n                        Choose the action:\n                      </Text>\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('deposit');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'deposit' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'deposit'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Deposit\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('redeem');\n                            }\n                          }}\n                          isInteractive={true}\n                          isDisabled={ !this.state.canRedeem }\n                          isActive={ this.state.action === 'redeem' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'redeem'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Redeem\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </Flex>\n                  ) : (\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    >\n                      <Icon\n                        size={'2.3em'}\n                        name={'MoneyOff'}\n                        color={'cellText'}\n                      />\n                      <Text\n                        mt={2}\n                        fontSize={2}\n                        color={'cellText'}\n                        textAlign={'center'}\n                      >\n                        You don't have any {this.state.tokenConfig.idle.token} in your wallet.\n                      </Text>\n                    </Flex>\n                  )\n                }\n              </Box>\n            </Flex>\n            <Flex\n              width={1}\n              mt={ this.props.account ? 3 : 0 }\n            >\n            {\n              this.state.action === 'deposit' ? (\n                <CurveDeposit\n                  {...this.props}\n                  {...this.state}\n                />\n              ) : this.state.action === 'redeem' && (\n                <CurveRedeem\n                  {...this.props}\n                  {...this.state}\n                />\n              )\n            }\n            </Flex>\n          </Flex>\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverviewCurve\n                {...this.props}\n                tokenFees={this.state.tokenFees}\n                tokenConfig={this.state.tokenConfig}\n                selectedToken={this.state.selectedToken}\n                availableTokens={this.state.availableTokens}\n                enabledTokens={Object.keys(this.state.availableTokens)}\n              />\n            </Flex>\n        }\n        {\n          /*\n          this.props.account && !this.state.govTokensDisabled[this.state.selectedToken] && Object.keys(availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id=\"earnings-estimation\"\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(availableGovTokens)}\n                handleClick={(props) => {}}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.33,0.22]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.26],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    props:{\n                      width:[0.33,0.26],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                      {\n                        name:'tooltip',\n                        props:{\n                          placement:'bottom',\n                          message:'The shown balance may be lower than the real one.',\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    mobile:false,\n                    props:{\n                      width: 0.26,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                ]}\n                {...this.props}\n                availableTokens={availableGovTokens}\n              />\n            </Flex>\n          */\n        }\n        {\n          /*\n          this.props.account && \n            <Flex\n              mb={[3,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'estimated-earnings-container'}\n            >\n              <Title my={[3,4]}>Estimated earnings</Title>\n              <EstimatedEarnings\n                {...this.props}\n              />\n            </Flex>\n          */\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              availableTokens={this.state.availableTokens}\n              enabledTokens={Object.keys(this.state.availableTokens)}\n              enabledActions={['CurveIn','CurveOut','CurveZapIn','CurveZapOut','CurveTransferIn','CurveTransferOut','CurveDepositIn','CurveDepositOut']}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.state.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;"],"sourceRoot":""}