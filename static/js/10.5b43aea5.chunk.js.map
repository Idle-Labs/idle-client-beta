{"version":3,"sources":["DashboardMenu/DashboardMenu.js","Dashboard/Dashboard.js"],"names":["DashboardMenu","state","buyModalOpened","functionsUtil","this","setProps","props","FunctionsUtil","setState","loadUtils","prevProps","prevState","_this2","menu","length","visibleLinks","filter","menuLink","showMobile","undefined","mobile","isMobile","react__WEBPACK_IMPORTED_MODULE_8___default","a","createElement","rimble_ui__WEBPACK_IMPORTED_MODULE_11__","p","flexDirection","mb","alignItems","justifyContent","react_router_dom__WEBPACK_IMPORTED_MODULE_9__","to","position","height","src","map","menuIndex","LinkComponent","isExternalLink","ExtLink","RouterLink","my","key","concat","width","route","href","style","textDecoration","borderRadius","backgroundColor","selected","boxShadow","image","mr","ml","align","imageInactive","icon","name","size","color","bgColor","fontWeight","textAlign","fontSize","whiteSpace","label","Component","Stats","React","lazy","Promise","all","__webpack_require__","e","then","bind","Utils","AssetPage","RoundButton","resolve","DashboardCard","CurveStrategy","WelcomeModal","TooltipModal","MigrateModal","UpgradeModal","DashboardHeader","Dashboard","baseRoute","clickEvent","activeModal","currentRoute","pageComponent","currentSection","selectedSection","tokensToMigrate","showResetButton","selectedSubsection","oldIdleTokensToMigrate","protocolsTokensBalances","timeoutId","resetModal","_this","openTooltipModal","modalTitle","modalContent","sendGoogleAnalyticsEvent","eventCategory","eventAction","eventLabel","setActiveModal","logout","_callee","_Users_samuelecester_Desktop_git_idle_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","wrap","_context","prev","next","setConnector","initWeb3","stop","window","getGlobalConfig","strategies","Object","keys","s","comingSoon","strategy","submenu","title","iconInactive","component","curveConfig","enabled","curveParams","assign","params","push","theme","colors","primary","values","u","match","selectedToken","selectedStrategy","section","param1","param2","section_is_strategy","availableStrategies","includes","toLowerCase","param1_is_strategy","param1_is_token","toUpperCase","param2_is_token","forEach","m","sectionRoute","subm","goToSection","setStrategyToken","clearTimeout","loadMenu","loadParams","setTimeout","accountInizialized","contractsInitialized","web3","initAccount","initializeContracts","checkModals","prevParams","JSON","stringify","_this3","accountChanged","account","strategyChanged","availableTokens","checkTokensToMigrate","checkWelcomeModal","checkProtocolsTokensBalances","showUpgradeModal","getStoredItem","getTokensToMigrate","getProtocolsTokensBalances","welcomeIsOpen","welcomeModalProps","localStorage","currTime","Date","getTime","walletAddress","lastLogin","getItem","parse","signedUp","lastTime","parseInt","frequency","setLocalStorage","migrateModalEnabled","showMigrateModal","newState","isDashboard","arguments","replace","newRoute","location","hash","scrollTo","routeParts","join","target","SuspenseLoader","react__WEBPACK_IMPORTED_MODULE_9___default","_FlexLoader_FlexLoader__WEBPACK_IMPORTED_MODULE_7__","textProps","textSize","loaderProps","flexProps","minHeight","aligItems","text","PageComponent","rimble_ui__WEBPACK_IMPORTED_MODULE_8__","innerHeight","bottom","zIndex","_DashboardMenu_DashboardMenu__WEBPACK_IMPORTED_MODULE_11__","py","px","overflowY","overflowX","react__WEBPACK_IMPORTED_MODULE_9__","fallback","urlParams","changeToken","cardProps","mt","buttonProps","handleClick","closeModal","isOpen","content","simpleID","network","current","tokenName","initSimpleID","baseTokenName"],"mappings":"gNAMMA,6MACJC,MAAQ,CACNC,gBAAe,KAIjBC,cAAgB,gFAGVC,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,iDAI9BJ,GAChBE,KAAKI,SAAS,CACZN,wKAKFE,KAAKK,iMAGkBC,EAAWC,mEAClCP,KAAKK,kJAGE,IAAAG,EAAAR,KACP,IAAKA,KAAKE,MAAMO,KAAKC,OACnB,OAAO,KAGT,IAAMC,EAAeX,KAAKE,MAAMO,KAAKG,OAAO,SAAAC,GAC1C,IAAMC,OAAiCC,IAApBF,EAASG,QAAwBH,EAASG,OAC7D,OAAQR,EAAKN,MAAMe,UAAYH,IAGjC,OAAKH,EAAaD,OAKhBQ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,EAAG,EACHC,cAAe,CAAC,MAAM,YAGnBvB,KAAKE,MAAMe,UACVC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,EAAG,EACHE,GAAI,EACJD,cAAe,MACfE,WAAY,SACZC,eAAgB,UAEhBR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAYC,GAAG,KACbV,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEQ,SAAU,WACVC,OAAQ,CAAC,OAAO,QAChBC,IAAI,+BAMZpB,EAAaqB,IAAI,SAACnB,EAASoB,GACzB,IACMC,EADiBrB,EAASsB,eACOC,IAAUC,IACjD,OACEnB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEiB,GAAI,CAAC,EAAE,GACPC,IAAG,QAAAC,OAAUP,GACbQ,MAAO,CAAC,EAAE9B,EAAaD,OAAO,SAE9BQ,EAAAC,EAAAC,cAACc,EAAD,CACEN,GAAIf,EAAS6B,MACbC,KAAM9B,EAAS6B,MACfE,MAAO,CAACC,eAAe,SAEvB3B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,EAAG,CAAC,EAAE,GACNwB,aAAc,CAAC,EAAE,GACjBvB,cAAe,MACfE,WAAY,SACZsB,gBAAkBlC,EAASmC,SAAW,UAAY,cAClDC,UAAWpC,EAASmC,SAAW,qCAAuC,MAEtE9B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEoB,MAAO,EACPhB,WAAY,SACZF,cAAe,CAAC,SAAS,OACzBG,eAAgB,CAAC,SAAS,eAEzBb,EAASqC,OACRhC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACE8B,GAAI,CAAC,EAAE,GACPC,GAAI,CAAC,EAAE,GACP5B,GAAI,CAAC,EAAE,GACP6B,MAAO,SACPtB,IAAMlB,EAASmC,SAAWnC,EAASqC,MAASrC,EAASyC,cAAgBzC,EAASyC,cAAgBzC,EAASqC,MACvGpB,OAAQ,CAAC,QAAQ,WAGpBjB,EAAS0C,MACRrC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACE8B,GAAI,CAAC,EAAE,GACPC,GAAI,CAAC,EAAE,GACP5B,GAAI,CAAC,EAAE,GACP6B,MAAO,SACPG,KAAM3C,EAAS0C,KACfE,KAAOjD,EAAKN,MAAMe,SAAW,QAAU,QACvCyC,MAAQ7C,EAASmC,SAAWnC,EAAS8C,QAAU,cAGnDzC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEuC,WAAY,EACZF,MAAO,YACPG,UAAW,SACXC,SAAU,CAAC,OAAO,GAClBlB,MAAO,CACLmB,WAAW,WAGZlD,EAASmD,cArFrB,YAzCeC,aAoNbrE,qKCnNTsE,EAAQC,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,MAAAC,KAAAF,EAAAG,KAAA,cACzBC,EAAQR,IAAMC,KAAK,kBAAMG,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,cACzBE,EAAYT,IAAMC,KAAK,kBAAMG,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,cAC7BG,EAAcV,IAAMC,KAAK,kBAAMC,QAAAS,UAAAL,KAAAF,EAAAG,KAAA,YAC/BK,EAAgBZ,IAAMC,KAAK,kBAAMC,QAAAS,UAAAL,KAAAF,EAAAG,KAAA,YACjCM,EAAgBb,IAAMC,KAAK,kBAAMG,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,cACjCO,EAAed,IAAMC,KAAK,kBAAMG,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,cAChCQ,EAAef,IAAMC,KAAK,kBAAMG,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,cAChCS,EAAehB,IAAMC,KAAK,kBAAMG,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,cAChCU,EAAejB,IAAMC,KAAK,kBAAMG,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,cAChCW,EAAkBlB,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,cAEnCY,6MACJzF,MAAQ,CACNY,KAAK,GACL8E,UAAU,KACVC,WAAW,KACXC,YAAY,KACZC,aAAa,KACbC,cAAc,KACdC,eAAe,KACfC,gBAAgB,KAChBC,gBAAgB,KAChBC,iBAAgB,EAChBC,mBAAmB,KACnBC,uBAAuB,KACvBC,wBAAwB,QAG1BC,UAAY,OAGZpG,cAAgB,OA0FhBqG,WAAa,WACXC,EAAKjG,SAAS,CACZqF,YAAa,UAIjBa,iBAAmB,SAACC,EAAWC,GAE7BH,EAAKtG,cAAc0G,yBAAyB,CAC1CC,cAAe,KACfC,YAAaJ,EACbK,WAAY,iBAGdP,EAAKjG,SAAS,CACZmG,aACAC,gBACA,WACAH,EAAKQ,eAAe,gBAIxBA,eAAiB,SAACpB,GAChBY,EAAKjG,SAAS,CACZqF,mBA2TJqB,4BAAS,SAAAC,IAAA,OAAAC,EAAA7F,EAAA8F,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACPf,EAAKnG,MAAMmH,aAAa,SAAS,UAD1BH,EAAAE,KAAA,EAEDf,EAAKnG,MAAMoH,SAAS,UAFnB,wBAAAJ,EAAAK,SAAAR,EAAA/G,oFA3aHA,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,OAG9CsH,OAAOzH,cAAgBC,KAAKD,8KAItBwF,EAAYvF,KAAKD,cAAc0H,gBAAgB,CAAC,YAAY,cAC5DC,EAAa1H,KAAKD,cAAc0H,gBAAgB,CAAC,eACjDhH,EAAOkH,OAAOC,KAAKF,GAAY9G,OAAQ,SAAAiH,GAAC,OAAOH,EAAWG,GAAGC,aAAe9F,IAAI,SAAA+F,GAAQ,MAAK,CAC/FC,QAAQ,GACRtE,MAAM,OACNV,UAAS,EACTN,MAAM6C,EAAU,IAAIwC,EACpB/D,MAAM0D,EAAWK,GAAUE,MAC3B/E,MAAMwE,EAAWK,GAAUxE,KAC3BD,cAAcoE,EAAWK,GAAUG,aACnCvE,QAAQ+D,EAAWK,GAAUrE,MAC7ByE,UAAUT,EAAWK,GAAUI,cAK7BC,EAAcpI,KAAKD,cAAc0H,gBAAgB,CAAC,WAGxCY,UACRC,EAAcX,OAAOY,OAAO,CAChCP,QAAQ,GACRhF,UAAS,EACTmF,UAAUnD,GACVoD,EAAYI,QAEd/H,EAAKgI,KAAKH,IAIZ7H,EAAKgI,KACH,CACElF,KAAK,YACLS,MAAM,QACNL,QAAQ,UACRD,MAAM,YACNyE,UAAUjE,EACVlB,UAAS,EACTN,MAAM,mBACNsF,QAAQ,KAKZvH,EAAKgI,KACH,CACElF,KAAK,QACLS,MAAM,QACNN,MAAM,YACNyE,UAAUxD,EACV3B,UAAS,EACTN,MAAM,mBACNiB,QAAQ3D,KAAKE,MAAMwI,MAAMC,OAAOC,QAChCZ,QAAQL,OAAOkB,OAAO7I,KAAKD,cAAc0H,gBAAgB,CAAC,WAAW7G,OAAQ,SAAAkI,GAAC,OAAKA,EAAET,YAKzF5H,EAAKgI,KACH,CACET,QAAQ,GACRzE,KAAK,QACLvC,QAAO,EACPgD,MAAM,QACNhB,UAAS,EACTmF,UAAU,KACVzE,MAAM,YACNC,QAAQ,UACRxB,gBAAe,EACfO,MAAM1C,KAAKD,cAAc0H,gBAAgB,CAAC,yBAIxCzH,KAAKI,SAAS,CAClBK,gSAiCe+H,EAAaxI,KAAKE,MAA3B6I,MAASP,OAEXjD,EAAYvF,KAAKD,cAAc0H,gBAAgB,CAAC,YAAY,cAC9D/B,EAAeH,EAEfI,EAAgB,KAChBqD,EAAgB,KAChBpD,EAAiB,KACjBqD,EAAmB,KAGnBT,EAAOU,UACTtD,EAAiB4C,EAAOU,QAClBC,EAASX,EAAOW,OAChBC,EAASZ,EAAOY,OAEhBC,EAAsB1B,OAAOC,KAAK5H,KAAKE,MAAMoJ,qBAAqBC,SAAS3D,EAAe4D,eAC1FC,EAAqBN,GAAUxB,OAAOC,KAAK5H,KAAKE,MAAMoJ,qBAAqBC,SAASJ,EAAOK,eAE7FH,GAAuBI,GAEzB/D,GAAgB,KADhBuD,EAAmBI,EAAsBzD,EAAiBuD,GAIpDO,EAAkBP,GAAUxB,OAAOC,KAAK5H,KAAKE,MAAMoJ,oBAAoBL,IAAmBM,SAASJ,EAAOQ,eAC1GC,EAAkBR,GAAUzB,OAAOC,KAAK5H,KAAKE,MAAMoJ,oBAAoBL,IAAmBM,SAASH,EAAOO,gBAC5GD,GAAmBE,KACrBZ,EAAgBU,EAAkBP,EAAOQ,cAAgBP,EAAOO,cAChEjE,GAAgB,IAAIsD,EAEhBK,IACF1D,EAAgBf,MAIpBc,GAAgB,IAAI8C,EAAOU,QAEvBV,EAAOW,QAAUX,EAAOW,OAAOzI,SACjCgF,GAAgB,IAAI8C,EAAOW,UAS3B1I,EAAOT,KAAKH,MAAMY,KAEpBoF,EAAkB,KAClBG,EAAqB,KAEzBvF,EAAKoJ,QAAQ,SAAAC,GACXA,EAAE9G,UAAW,EACb,IAAM+G,EAAexE,EAAU,IAAIiD,EAAOU,QACtCxD,EAAa8D,gBAAkBM,EAAEpH,MAAM8G,gBAAoBM,EAAE9B,QAAQtH,QAAUoJ,EAAEpH,MAAM8G,gBAAkBO,EAAaP,eACxHM,EAAE9G,UAAW,EACS,OAAlB2C,IACFA,EAAgBmE,EAAE3B,YAEX2B,EAAE9B,QAAQtH,QACnBoJ,EAAE9B,QAAQ6B,QAAQ,SAAAG,GAChBA,EAAKhH,UAAW,GACE8G,EAAEpH,MAAM,IAAIsH,EAAKtH,OACrB8G,gBAAkB9D,EAAa8D,gBAC3CM,EAAE9G,UAAW,EACbgH,EAAKhH,UAAW,EAGM,OAAlB2C,IAEAA,EADEqE,EAAK7B,UACS6B,EAAK7B,UAEL2B,EAAE3B,YAMpB6B,EAAKhH,WACPgD,EAAqBgE,KAOvBF,EAAE9G,WACJ6C,EAAkBiE,KAOjBnE,4CACI3F,KAAKiK,YAAY,KAAI,6BAIxBjK,KAAKE,MAAMgK,iBAAiBjB,EAAiBD,4BAE7ChJ,KAAKI,SAAS,CAClBK,OACA+H,SACAjD,YACAG,eACAC,gBACAC,iBACAC,kBACAG,yKAKEhG,KAAKmG,WACPqB,OAAO2C,aAAanK,KAAKmG,uKAM3BnG,KAAKK,qBACCL,KAAKoK,kBACXpK,KAAKqK,iRAKLrK,KAAKmG,UAAYqB,OAAO8C,WAAW,WAC5B9J,EAAKN,MAAMqK,oBAAuB/J,EAAKN,MAAMsK,sBAChDhK,EAAKJ,SAAS,CACZ2F,iBAAgB,KAGpB,KAEG/F,KAAKE,MAAMuK,8CACPzK,KAAKE,MAAMoH,sBACRtH,KAAKE,MAAMqK,4DACdvK,KAAKE,MAAMwK,yBACR1K,KAAKE,MAAMsK,+DACdxK,KAAKE,MAAMyK,sCAGpB3K,KAAKK,sBACCL,KAAKoK,mBACXpK,KAAKqK,aACLrK,KAAK4K,oMAGkBtK,EAAUC,6FAEjCP,KAAKK,YAECwK,EAAavK,EAAUyI,MAAMP,OAC7BA,EAASxI,KAAKE,MAAM6I,MAAMP,OAE5BsC,KAAKC,UAAUF,KAAgBC,KAAKC,UAAUvC,mCAC1CxI,KAAKI,SAAS,CAClBuF,cAAc,MACb,WACDqF,EAAKX,sBAIHY,EAAiB3K,EAAU4K,UAAYlL,KAAKE,MAAMgL,QAClDC,EAAkBnL,KAAKE,MAAM+I,kBAAoB3I,EAAU2I,mBAAqBjJ,KAAKE,MAAM+I,iBAC3FsB,EAAqBvK,KAAKE,MAAMqK,oBAAsBjK,EAAUiK,qBAAuBvK,KAAKE,MAAMqK,mBAClGC,EAAuBxK,KAAKE,MAAMsK,sBAAwBlK,EAAUkK,uBAAyBxK,KAAKE,MAAMsK,sBAE1GS,GAAkBV,GAAsBC,GAAwBW,IAClEnL,KAAK4K,sQAMH5K,KAAKE,MAAM8I,eAAkBhJ,KAAKE,MAAMqK,oBAAuBvK,KAAKE,MAAMsK,sBAAyBxK,KAAKE,MAAMoJ,qBAAwBtJ,KAAKE,MAAMkL,yDAC5I,6BAGHpL,KAAKqL,8CACLrL,KAAKsL,2CACLtL,KAAKuL,qSAKLC,EAA2F,OAAxExL,KAAKD,cAAc0L,cAAc,wBAAuB,EAAM,OACnFzL,KAAKE,MAAM8I,eAAkBwC,GAAqBxL,KAAKE,MAAMkL,yDACxD,6BAGqBpL,KAAKD,cAAc2L,mCAA3C5F,kBAC+B9F,KAAKD,cAAc4L,2BAA2B,kBAA7E1F,WAIDH,GAAmB6B,OAAOC,KAAK9B,GAAiBpF,OAAO,GAAOuF,GAA0B0B,OAAOC,KAAK3B,GAAwBvF,OAAO,uBAClH,sBACAV,KAAKH,MAAM4F,oCAC7BzF,KAAKI,SAAS,CACZqF,YAHgB,UAIhBK,kBACAG,6CALgB,4CAYf,kRAIFjG,KAAKE,MAAMgL,SAAYlL,KAAKE,MAAMqK,oBAAuBvK,KAAKE,MAAMsK,8DAChE,iBAILxK,KAAKE,MAAMgL,SAAsC,OAA3BlL,KAAKH,MAAM4F,gCAC/BmG,GAAgB,GAEdC,EAAoB7L,KAAKD,cAAc0H,gBAAgB,CAAC,SAAS,aAEjDY,SAAWyD,eAGzBC,GAAW,IAAIC,MAAOC,UACtBC,EAAgBlM,KAAKE,MAAMgL,QAAQ1B,eACrC2C,EAAYL,aAAaM,QAAQ,aAAetB,KAAKuB,MAAMP,aAAaM,QAAQ,cAAgB,IAGrFF,GAOHC,EAAUD,GAAeI,WAC7BC,EAAWC,SAASL,EAAUD,GAAeK,UAEnDX,GAD2BG,EAASQ,GAAU,KACXV,EAAkBY,YATrDN,EAAUD,GAAiB,CACzBI,UAAW,EACXC,SAAWR,GAEbH,GAAgB,GAQdA,IACFO,EAAUD,GAAeK,SAAWR,EACpC/L,KAAKD,cAAc2M,gBAAgB,YAAY5B,KAAKC,UAAUoB,MAI5D1G,EAAcmG,EAAgB,UAAY5L,KAAKH,MAAM4F,YACvDzF,KAAKH,MAAM4F,cAAgBA,0BAC7BzF,KAAKI,SAAS,CACZqF,kCAGKA,oCAIJ,yRAKFzF,KAAKE,MAAMgL,SAAYlL,KAAKE,MAAMqK,oBAAuBvK,KAAKE,MAAMsK,8DAChE,gBAIHmC,EAAsB3M,KAAKD,cAAc0H,gBAAgB,CAAC,SAAS,UAAU,YAC7EmF,EAA2F,OAAxE5M,KAAKD,cAAc0L,cAAc,wBAAuB,EAAM,MAExD,OAA3BzL,KAAKH,MAAM4F,cAAwBkH,IAAuBC,GAAqB5M,KAAKH,MAAMqG,yDACtDlG,KAAKD,cAAc4L,2CAAnDzF,SACAT,EAAcS,GAA2ByB,OAAOC,KAAK1B,GAAyBxF,OAAO,EAAI,UAAY,KACrGmM,EAAW,CACfpH,cACAS,2BAEFlG,KAAKI,SAASyM,qBACPpH,oCAGF,6IAGGyD,GAAyB,IAAjB4D,IAAiBC,UAAArM,OAAA,QAAAK,IAAAgM,UAAA,KAAAA,UAAA,GAG/BD,IACF5D,EAAUA,EAAQ8D,QAAQhN,KAAKH,MAAM0F,UAAW,IAAI,KAGtD,IAAM0H,EAAWH,EAAc9M,KAAKH,MAAM0F,UAAW,IAAM2D,EAAUA,EACrE1B,OAAO0F,SAASC,KAAKF,EAGrBjN,KAAKD,cAAc0G,yBAAyB,CAC1CC,cAAe,KACfC,YAAa,cACbC,WAAYqG,IAGdzF,OAAO4F,SAAS,EAAG,uCAQTpE,GAEV,GADAA,EAAgBA,EAAcW,cAC1BhC,OAAOC,KAAK5H,KAAKE,MAAMkL,iBAAiB7B,SAASP,GAAe,CAClE,IAAMqE,EAAa,GAGfrN,KAAKH,MAAM+F,eAAe4D,gBAAkBxJ,KAAKE,MAAM+I,iBAAiBO,eAC1E6D,EAAW5E,KAAKzI,KAAKH,MAAM+F,gBAI7ByH,EAAW5E,KAAKzI,KAAKE,MAAM+I,kBAG3BoE,EAAW5E,KAAKO,GAEhBhJ,KAAKiK,YAAYoD,EAAWC,KAAK,mDAIjB9H,GAClBxF,KAAKI,SAAS,CACZoF,WAAWA,EAAW+H,0CAKxB,IAAMC,EACJC,EAAAtM,EAAAC,cAACsM,EAAA,EAAD,CACEC,UAAW,CACTC,SAAS,EACThK,WAAW,GAEbiK,YAAa,CACXrM,GAAG,EACHiC,KAAK,QAEPqK,UAAW,CACTC,UAAU,OACVC,UAAU,SACVzM,cAAc,UAEhB0M,KAAM,yBAGJC,EAAgBlO,KAAKH,MAAM8F,cAAgB3F,KAAKH,MAAM8F,cAAgB,KAC5E,OACE8H,EAAAtM,EAAAC,cAAC+M,EAAA,EAAD,CACE1L,MAAO,OACPZ,SAAU,QACVN,cAAe,MACfwB,gBAAiB,CAAC,cAAc,SAEhCjB,OAAQ,CAAE0F,OAAO4G,YAAY,GAAI,KAAK,UAEtCX,EAAAtM,EAAAC,cAAC+M,EAAA,EAAD,CACEE,OAAQ,EACRC,OAAQ,EACR7L,MAAO,CAAC,EAAE,EAAE,GACZlB,cAAe,SACfM,SAAU,CAAC,QAAQ,aAEnB4L,EAAAtM,EAAAC,cAAC+M,EAAA,EAAD,CACE7M,EAAG,CAAC,EAAE,GACNmB,MAAO,CAAC,QAAQ,QAChBX,OAAQ,CAAC,OAAO,UAEhB2L,EAAAtM,EAAAC,cAACmN,EAAA,EAAD5G,OAAAY,OAAA,GACMvI,KAAKE,MADX,CAEEO,KAAMT,KAAKH,MAAMY,UAIvBgN,EAAAtM,EAAAC,cAAC+M,EAAA,EAAD,CACEK,GAAI,EACJC,GAAI,CAAC,EAAE,GACPjN,GAAI,EACJiB,MAAO,CAAC,EAAE,EAAE,GACZG,MAAO,CACL8L,UAAU,SACVC,UAAU,UAEZpN,cAAe,UACfwB,gBAAiB,eAEjB0K,EAAAtM,EAAAC,cAACwN,EAAA,SAAD,CACEC,SAAUrB,GAGPxN,KAAKE,MAAMqK,oBAAuBvK,KAAKE,MAAMsK,sBAAyB0D,EAiErET,EAAAtM,EAAAC,cAAC+M,EAAA,EAAD,CACE1L,MAAO,EACPlB,cAAe,UAEfkM,EAAAtM,EAAAC,cAACiE,EAADsC,OAAAY,OAAA,CACE/C,WAAYxF,KAAKH,MAAM2F,WACvByE,YAAajK,KAAKiK,YAAYvF,KAAK1E,OAC/BA,KAAKE,QAGTgO,GACET,EAAAtM,EAAAC,cAAC8M,EAADvG,OAAAY,OAAA,GACMvI,KAAKE,MADX,CAEE6I,MAAO,CAAEP,OAAO,IAChBsG,UAAW9O,KAAKH,MAAM2I,OACtBuG,YAAa/O,KAAK+O,YAAYrK,KAAK1E,MACnCiK,YAAajK,KAAKiK,YAAYvF,KAAK1E,MACnC6F,gBAAiB7F,KAAKH,MAAMgG,gBAC5BG,mBAAoBhG,KAAKH,MAAMmG,mBAC/BM,iBAAkBtG,KAAKsG,iBAAiB5B,KAAK1E,UAnFrDyN,EAAAtM,EAAAC,cAAC+M,EAAA,EAAD,CACE1L,MAAO,EACPsL,UAAW,OACXtM,WAAY,SACZF,cAAe,SACfG,eAAgB,UAGb1B,KAAKH,MAAMkG,gBAiBV0H,EAAAtM,EAAAC,cAAC2D,EAAD,CACEiK,UAAW,CACT1N,EAAE,EACF2N,GAAG,EACHxM,MAAM,CAAC,EAAE,OAGXgL,EAAAtM,EAAAC,cAAC+M,EAAA,EAAD,CACE1M,WAAY,SACZF,cAAe,UAEfkM,EAAAtM,EAAAC,cAAC+M,EAAA,EAAD,CACE1K,KAAM,QACND,KAAM,UACNE,MAAO,aAET+J,EAAAtM,EAAAC,cAAC+M,EAAA,EAAD,CACEc,GAAI,EACJnL,SAAU,EACVJ,MAAO,WACPG,UAAW,UAJb,qCAMoC4J,EAAAtM,EAAAC,cAAA,WANpC,yDAQAqM,EAAAtM,EAAAC,cAACyD,EAAD,CACEqK,YAAa,CACXD,GAAG,EACHxM,MAAM,CAAC,EAAE,KAEX0M,YAAanP,KAAK8G,OAAOpC,KAAK1E,OALhC,YAxCJyN,EAAAtM,EAAAC,cAACsM,EAAA,EAAD,CACEC,UAAW,CACTC,SAAS,EACThK,WAAW,GAEbiK,YAAa,CACXrM,GAAG,EACHiC,KAAK,QAEPqK,UAAW,CACTxL,GAAG,EACHf,cAAc,UAEhB0M,KAAQjO,KAAKE,MAAMqK,mBAA+CvK,KAAKE,MAAMsK,qBAAgD,oBAAzB,uBAA5D,0BAqExDiD,EAAAtM,EAAAC,cAACwN,EAAA,SAAD,CACEC,SAAU,MAEVpB,EAAAtM,EAAAC,cAACgE,EAADuC,OAAAY,OAAA,GACMvI,KAAKE,MADX,CAEEkP,WAAYpP,KAAKoG,WACjB6D,YAAajK,KAAKiK,YAAYvF,KAAK1E,MACnC8F,gBAAiB9F,KAAKH,MAAMiG,gBAC5BuJ,OAAmC,YAA3BrP,KAAKH,MAAM4F,YACnBQ,uBAAwBjG,KAAKH,MAAMoG,0BAErCwH,EAAAtM,EAAAC,cAAC+D,EAADwC,OAAAY,OAAA,GACMvI,KAAKE,MADX,CAEEkP,WAAYpP,KAAKoG,WACjB6D,YAAajK,KAAKiK,YAAYvF,KAAK1E,MACnCqP,OAAmC,YAA3BrP,KAAKH,MAAM4F,YACnBS,wBAAyBlG,KAAKH,MAAMqG,2BAEtCuH,EAAAtM,EAAAC,cAAC8D,EAAD,CACEkK,WAAYpP,KAAKoG,WACjB6B,MAAOjI,KAAKH,MAAM0G,WAClB+I,QAAStP,KAAKH,MAAM2G,aACpB6I,OAAmC,YAA3BrP,KAAKH,MAAM4F,cAGrBgI,EAAAtM,EAAAC,cAAC6D,EAAD,CACEmK,WAAYpP,KAAKoG,WACjB8E,QAASlL,KAAKE,MAAMgL,QACpBqE,SAAUvP,KAAKE,MAAMqP,SACrBC,QAASxP,KAAKE,MAAMsP,QAAQC,QAC5BC,UAAW1P,KAAKE,MAAM8I,cACtB2G,aAAc3P,KAAKE,MAAMyP,aACzBC,cAAe5P,KAAKE,MAAM8I,cAC1BqG,OAAmC,YAA3BrP,KAAKH,MAAM4F,uBA5pBPxB,aAoqBTqB","file":"static/js/10.5b43aea5.chunk.js","sourcesContent":["import ExtLink from '../ExtLink/ExtLink';\nimport React, { Component } from 'react';\nimport { Link as RouterLink } from \"react-router-dom\";\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport { Flex, Box, Icon, Text, Image } from 'rimble-ui';\n\nclass DashboardMenu extends Component {\n  state = {\n    buyModalOpened:false\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  setBuyModalOpened(buyModalOpened){\n    this.setState({\n      buyModalOpened\n    });\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n  }\n\n  render() {\n    if (!this.props.menu.length){\n      return null;\n    }\n\n    const visibleLinks = this.props.menu.filter(menuLink => {\n      const showMobile = menuLink.mobile === undefined || menuLink.mobile;\n      return !this.props.isMobile || showMobile;\n    });\n\n    if (!visibleLinks.length){\n      return null;\n    }\n\n    return (\n      <Flex\n        p={0}\n        flexDirection={['row','column']}\n      >\n        {\n          !this.props.isMobile &&\n            <Flex\n              p={3}\n              mb={3}\n              flexDirection={'row'}\n              alignItems={'center'}\n              justifyContent={'center'}\n            >\n              <RouterLink to=\"/\">\n                <Image\n                  position={'relative'}\n                  height={['35px','38px']}\n                  src=\"images/logo-gradient.svg\"\n                />\n              </RouterLink>\n            </Flex>\n        }\n        {\n          visibleLinks.map((menuLink,menuIndex) => {\n            const isExternalLink = menuLink.isExternalLink;\n            const LinkComponent = isExternalLink ? ExtLink : RouterLink;\n            return (\n              <Box\n                my={[0,3]}\n                key={`menu-${menuIndex}`}\n                width={[1/visibleLinks.length,'auto']}\n              >\n                <LinkComponent\n                  to={menuLink.route}\n                  href={menuLink.route}\n                  style={{textDecoration:'none'}}\n                >\n                  <Flex\n                    p={[2,3]}\n                    borderRadius={[0,2]}\n                    flexDirection={'row'}\n                    alignItems={'center'}\n                    backgroundColor={ menuLink.selected ? '#f3f6ff' : 'transparent' }\n                    boxShadow={menuLink.selected ? '0px 0px 0px 1px rgba(0,54,255,0.3)' : null}\n                  >\n                    <Flex\n                      width={1}\n                      alignItems={'center'}\n                      flexDirection={['column','row']}\n                      justifyContent={['center','flex-start']}\n                    >\n                      {menuLink.image &&\n                        <Image\n                          mr={[0,3]}\n                          ml={[0,2]}\n                          mb={[1,0]}\n                          align={'center'}\n                          src={ menuLink.selected ? menuLink.image : (menuLink.imageInactive ? menuLink.imageInactive : menuLink.image)}\n                          height={['1.2em','1.6em']}\n                        />\n                      }\n                      {menuLink.icon &&\n                        <Icon\n                          mr={[0,3]}\n                          ml={[0,2]}\n                          mb={[1,0]}\n                          align={'center'}\n                          name={menuLink.icon}\n                          size={ this.props.isMobile ? '1.4em' : '1.6em' }\n                          color={ menuLink.selected ? menuLink.bgColor : 'copyColor' }\n                        />\n                      }\n                      <Text\n                        fontWeight={3}\n                        color={'copyColor'}\n                        textAlign={'center'}\n                        fontSize={['11px',2]}\n                        style={{\n                          whiteSpace:'nowrap'\n                        }}\n                      >\n                        {menuLink.label}\n                      </Text>\n                    </Flex>\n                  </Flex>\n                </LinkComponent>\n                {\n                  /*\n                  menuLink.submenu.length>0 && (\n                    <Flex className={[styles.submenu]} style={{maxHeight:menuLink.selected ? menuLink.submenu.length*36+'px' : '0' }} flexDirection={'column'} borderLeft={ menuLink.selected ? '2px solid rgba(0,0,0,0.3)' : null }>\n                      {\n                        menuLink.submenu.map((submenuLink,submenuIndex) => {\n                          return (\n                            <RouterLink key={`submenu-${menuIndex}-${submenuIndex}`} to={`${menuLink.route}/${submenuLink.route}`} style={{textDecoration:'none'}}>\n                              <Flex py={2} pl={'40px'} flexDirection={'row'} alignItems={'center'}>\n                                <Text fontSize={'0.85rem'}>{submenuLink.label}</Text>\n                              </Flex>\n                            </RouterLink>\n                          )\n                        })\n                      }\n                    </Flex>\n                  )\n                  */\n                }\n              </Box>\n            );\n          })\n        }\n        {\n        /*\n        !this.props.isMobile  &&\n          <Box\n            width={'auto'}\n            borderTop={`1px solid ${theme.colors.divider}`}\n          >\n            <Flex\n              p={[2,3]}\n              style={{\n                cursor:'pointer'\n              }}\n              borderRadius={[0,2]}\n              flexDirection={'row'}\n              alignItems={'center'}\n              onClick={ e => this.setBuyModalOpened(true) }\n            >\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={['column','row']}\n                justifyContent={['center','flex-start']}\n              >\n                <Icon\n                  mr={[0,3]}\n                  ml={[0,2]}\n                  mb={[1,0]}\n                  size={'1.6em'}\n                  align={'center'}\n                  color={'copyColor'}\n                  name={'AddCircleOutline'}\n                />\n                <Text\n                  fontWeight={3}\n                  fontSize={[0,2]}\n                  color={'copyColor'}\n                  textAlign={'center'}\n                  style={{\n                    whiteSpace:'nowrap'\n                  }}\n                >\n                  Add Funds\n                </Text>\n              </Flex>\n            </Flex>\n          </Box>\n        <BuyModal\n          {...this.props}\n          isOpen={this.state.buyModalOpened}\n          closeModal={ e => this.setBuyModalOpened(false) }\n        />\n        */\n        }\n      </Flex>\n    )\n  }\n}\n\nexport default DashboardMenu;","import FlexLoader from '../FlexLoader/FlexLoader';\nimport { Flex, Card, Icon, Text } from 'rimble-ui';\nimport React, { Component, Suspense } from 'react';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardMenu from '../DashboardMenu/DashboardMenu';\n\n// Import page components\nconst Stats = React.lazy(() => import('../Stats/Stats'));\nconst Utils = React.lazy(() => import('../Utils/Utils'));\nconst AssetPage = React.lazy(() => import('../AssetPage/AssetPage'));\nconst RoundButton = React.lazy(() => import('../RoundButton/RoundButton'));\nconst DashboardCard = React.lazy(() => import('../DashboardCard/DashboardCard'));\nconst CurveStrategy = React.lazy(() => import('../CurveStrategy/CurveStrategy'));\nconst WelcomeModal = React.lazy(() => import(\"../utilities/components/WelcomeModal\"));\nconst TooltipModal = React.lazy(() => import(\"../utilities/components/TooltipModal\"));\nconst MigrateModal = React.lazy(() => import(\"../utilities/components/MigrateModal\"));\nconst UpgradeModal = React.lazy(() => import(\"../utilities/components/UpgradeModal\"));\nconst DashboardHeader = React.lazy(() => import('../DashboardHeader/DashboardHeader'));\n\nclass Dashboard extends Component {\n  state = {\n    menu:[],\n    baseRoute:null,\n    clickEvent:null,\n    activeModal:null,\n    currentRoute:null,\n    pageComponent:null,\n    currentSection:null,\n    selectedSection:null,\n    tokensToMigrate:null,\n    showResetButton:false,\n    selectedSubsection:null,\n    oldIdleTokensToMigrate:null,\n    protocolsTokensBalances:null,\n  };\n\n  timeoutId = null;\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    window.functionsUtil = this.functionsUtil;\n  }\n\n  async loadMenu() {\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n    const menu = Object.keys(strategies).filter( s => ( !strategies[s].comingSoon ) ).map(strategy => ({\n        submenu:[],\n        color:'#fff',\n        selected:false,\n        route:baseRoute+'/'+strategy,\n        label:strategies[strategy].title,\n        image:strategies[strategy].icon,\n        imageInactive:strategies[strategy].iconInactive,\n        bgColor:strategies[strategy].color,\n        component:strategies[strategy].component\n      })\n    );\n\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n\n    // Add Curve\n    if (curveConfig.enabled){\n      const curveParams = Object.assign({\n        submenu:[],\n        selected:false,\n        component:CurveStrategy,\n      },curveConfig.params);\n\n      menu.push(curveParams);\n    }\n\n    // Add Stats\n    menu.push(\n      {\n        icon:'Equalizer',\n        label:'Stats',\n        bgColor:'#21f36b',\n        color:'dark-gray',\n        component:Stats,\n        selected:false,\n        route:'/dashboard/stats',\n        submenu:[]\n      }\n    );\n\n    // Add tools\n    menu.push(\n      {\n        icon:'Build',\n        label:'Tools',\n        color:'dark-gray',\n        component:Utils,\n        selected:false,\n        route:'/dashboard/tools',\n        bgColor:this.props.theme.colors.primary,\n        submenu:Object.values(this.functionsUtil.getGlobalConfig(['tools'])).filter( u => (u.enabled) )\n      }\n    );\n\n    // Add Forum\n    menu.push(\n      {\n        submenu:[],\n        icon:'Forum',\n        mobile:false,\n        label:'Forum',\n        selected:false,\n        component:null,\n        color:'dark-gray',\n        bgColor:'#ff0000',\n        isExternalLink:true,\n        route:this.functionsUtil.getGlobalConfig(['forumURL'])\n      }\n    );\n\n    await this.setState({\n      menu\n    });\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  openTooltipModal = (modalTitle,modalContent) => {\n\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: modalTitle,\n      eventLabel: 'TooltipModal'\n    });\n\n    this.setState({\n      modalTitle,\n      modalContent\n    },() => {\n      this.setActiveModal('tooltip');\n    })\n  }\n\n  setActiveModal = (activeModal) => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadParams() {\n    const { match: { params } } = this.props;\n\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    let currentRoute = baseRoute;\n\n    let pageComponent = null;\n    let selectedToken = null;\n    let currentSection = null;\n    let selectedStrategy = null;\n\n    // Set strategy\n    if (params.section){\n      currentSection = params.section;\n      const param1 = params.param1;\n      const param2 = params.param2;\n\n      const section_is_strategy = Object.keys(this.props.availableStrategies).includes(currentSection.toLowerCase());\n      const param1_is_strategy = param1 && Object.keys(this.props.availableStrategies).includes(param1.toLowerCase());\n\n      if (section_is_strategy || param1_is_strategy){\n        selectedStrategy = section_is_strategy ? currentSection : param1;\n        currentRoute += '/'+selectedStrategy;\n\n        // Set token\n        const param1_is_token = param1 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param1.toUpperCase());\n        const param2_is_token = param2 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param2.toUpperCase());\n        if (param1_is_token || param2_is_token){\n          selectedToken = param1_is_token ? param1.toUpperCase() : param2.toUpperCase();\n          currentRoute += '/'+selectedToken;\n\n          if (section_is_strategy){\n            pageComponent = AssetPage;\n          }\n        }\n      } else {\n        currentRoute += '/'+params.section;\n\n        if (params.param1 && params.param1.length){\n          currentRoute += '/'+params.param1;\n        }\n\n        // if (params.param2 && params.param2.length){\n        //   currentRoute += '/'+params.param2;\n        // }\n      }\n    }\n\n    const menu = this.state.menu;\n\n    let selectedSection = null;\n    let selectedSubsection = null;\n\n    menu.forEach(m => {\n      m.selected = false;\n      const sectionRoute = baseRoute+'/'+params.section;\n      if (currentRoute.toLowerCase() === m.route.toLowerCase() || ( !m.submenu.length && m.route.toLowerCase() === sectionRoute.toLowerCase() )){\n        m.selected = true;\n        if (pageComponent === null){\n          pageComponent = m.component;\n        }\n      } else if (m.submenu.length) {\n        m.submenu.forEach(subm => {\n          subm.selected = false;\n          const submRoute = m.route+'/'+subm.route;\n          if (submRoute.toLowerCase() === currentRoute.toLowerCase()){\n            m.selected = true;\n            subm.selected = true;\n\n            // Set component, if null use parent\n            if (pageComponent === null){\n              if (subm.component){\n                pageComponent = subm.component;\n              } else {\n                pageComponent = m.component;\n              }\n            }\n          }\n\n          // Set selected subsection\n          if (subm.selected){\n            selectedSubsection = subm;\n          }\n\n        });\n      }\n\n      // Set selected section\n      if (m.selected){\n        selectedSection = m;\n      }\n    });\n\n    // console.log('pageComponent',params,pageComponent);\n\n    // Exit if no strategy and token selected\n    if (!pageComponent){\n      return this.goToSection('/',false);\n    }\n\n    // console.log('loadParams',selectedStrategy,selectedToken);\n    await this.props.setStrategyToken(selectedStrategy,selectedToken);\n\n    await this.setState({\n      menu,\n      params,\n      baseRoute,\n      currentRoute,\n      pageComponent,\n      currentSection,\n      selectedSection,\n      selectedSubsection\n    });\n  }\n\n  componentWillUnmount(){\n    if (this.timeoutId){\n      window.clearTimeout(this.timeoutId);\n    }\n  }\n\n  async componentWillMount() {\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n  }\n\n  async componentDidMount() {\n\n    this.timeoutId = window.setTimeout(() => {\n      if (!this.props.accountInizialized || !this.props.contractsInitialized){\n        this.setState({\n          showResetButton:true\n        });\n      }\n    },20000);\n\n    if (!this.props.web3){\n      return this.props.initWeb3();\n    } else if (!this.props.accountInizialized){\n      return this.props.initAccount();\n    } else if (!this.props.contractsInitialized){\n      return this.props.initializeContracts();\n    }\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n    this.checkModals();\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n\n    this.loadUtils();\n\n    const prevParams = prevProps.match.params;\n    const params = this.props.match.params;\n\n    if (JSON.stringify(prevParams) !== JSON.stringify(params)){\n      await this.setState({\n        pageComponent:null\n      }, () => {\n        this.loadParams();\n      });\n    }\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const strategyChanged = this.props.selectedStrategy && prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const accountInizialized = this.props.accountInizialized && prevProps.accountInizialized !== this.props.accountInizialized;\n    const contractsInitialized = this.props.contractsInitialized && prevProps.contractsInitialized !== this.props.contractsInitialized;\n\n    if (accountChanged || accountInizialized || contractsInitialized || strategyChanged){\n      this.checkModals();\n    }\n  }\n\n  async checkModals(){\n\n    if (this.props.selectedToken || !this.props.accountInizialized || !this.props.contractsInitialized || !this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    await this.checkTokensToMigrate();\n    await this.checkWelcomeModal();\n    await this.checkProtocolsTokensBalances();\n  }\n\n  async checkTokensToMigrate(){\n\n    const showUpgradeModal = this.functionsUtil.getStoredItem('dontShowUpgradeModal',false,null) !== null ? false : true;\n    if (this.props.selectedToken || !showUpgradeModal || !this.props.availableTokens){\n      return null;\n    }\n\n    const tokensToMigrate = await this.functionsUtil.getTokensToMigrate();\n    const oldIdleTokensToMigrate = await this.functionsUtil.getProtocolsTokensBalances('idle');\n\n    // console.log('tokensToMigrate',tokensToMigrate);\n    \n    if ((tokensToMigrate && Object.keys(tokensToMigrate).length>0) || (oldIdleTokensToMigrate && Object.keys(oldIdleTokensToMigrate).length>0)){\n      const activeModal = 'upgrade';\n      if (activeModal !== this.state.activeModal){\n        this.setState({\n          activeModal,\n          tokensToMigrate,\n          oldIdleTokensToMigrate\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkWelcomeModal(){\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show welcome modal\n    if (this.props.account && this.state.activeModal === null){\n      let welcomeIsOpen = false;\n\n      const welcomeModalProps = this.functionsUtil.getGlobalConfig(['modals','welcome']);\n\n      if (welcomeModalProps.enabled && localStorage){\n\n        // Check the last login of the wallet\n        const currTime = new Date().getTime();\n        const walletAddress = this.props.account.toLowerCase();\n        let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : {};\n\n        // First login\n        if (!lastLogin[walletAddress]){\n          lastLogin[walletAddress] = {\n            'signedUp':false,\n            'lastTime':currTime\n          };\n          welcomeIsOpen = true;\n        // User didn't sign up\n        } else if (!lastLogin[walletAddress].signedUp) {\n          const lastTime = parseInt(lastLogin[walletAddress].lastTime);\n          const timeFromLastLogin = (currTime-lastTime)/1000;\n          welcomeIsOpen = timeFromLastLogin>=welcomeModalProps.frequency; // 1 day since last login\n        }\n\n        if (welcomeIsOpen){\n          lastLogin[walletAddress].lastTime = currTime;\n          this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n        }\n      }\n\n      const activeModal = welcomeIsOpen ? 'welcome' : this.state.activeModal;\n      if (this.state.activeModal !== activeModal){\n        this.setState({\n          activeModal\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkProtocolsTokensBalances() {\n\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show migration modal if no other modals are opened\n    const migrateModalEnabled = this.functionsUtil.getGlobalConfig(['modals','migrate','enabled']);\n    const showMigrateModal = this.functionsUtil.getStoredItem('dontShowMigrateModal',false,null) !== null ? false : true;\n\n    if (this.state.activeModal === null && migrateModalEnabled && showMigrateModal && !this.state.protocolsTokensBalances){\n      const protocolsTokensBalances = await this.functionsUtil.getProtocolsTokensBalances();\n      const activeModal = protocolsTokensBalances && Object.keys(protocolsTokensBalances).length>0 ? 'migrate' : null;\n      const newState = {\n        activeModal,\n        protocolsTokensBalances\n      };\n      this.setState(newState);\n      return activeModal;\n    }\n\n    return null;\n  }\n\n  goToSection(section,isDashboard=true){\n\n    // Remove dashboard route\n    if (isDashboard){\n      section = section.replace(this.state.baseRoute +'/','');\n    }\n\n    const newRoute = isDashboard ? this.state.baseRoute +'/' + section : section;\n    window.location.hash=newRoute;\n\n    // Send GA event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'goToSection',\n      eventLabel: newRoute\n    });\n\n    window.scrollTo(0, 0);\n  }\n\n  logout = async () => {\n    this.props.setConnector('Infura','Infura');\n    await this.props.initWeb3('Infura');\n  }\n\n  changeToken(selectedToken){\n    selectedToken = selectedToken.toUpperCase();\n    if (Object.keys(this.props.availableTokens).includes(selectedToken)){\n      const routeParts = [];\n\n      // Add section\n      if (this.state.currentSection.toLowerCase() !== this.props.selectedStrategy.toLowerCase()){\n        routeParts.push(this.state.currentSection);\n      }\n\n      // Add strategy\n      routeParts.push(this.props.selectedStrategy); \n\n      // Add token\n      routeParts.push(selectedToken);\n\n      this.goToSection(routeParts.join('/'));\n    }\n  }\n\n  propagateClickEvent(clickEvent){\n    this.setState({\n      clickEvent:clickEvent.target\n    });\n  }\n\n  render() {\n    const SuspenseLoader = (\n      <FlexLoader\n        textProps={{\n          textSize:4,\n          fontWeight:2\n        }}\n        loaderProps={{\n          mb:3,\n          size:'40px'\n        }}\n        flexProps={{\n          minHeight:'50vh',\n          aligItems:'center',\n          flexDirection:'column'\n        }}\n        text={'Loading Dashboard...'}\n      />\n    );\n    const PageComponent = this.state.pageComponent ? this.state.pageComponent : null;\n    return (\n      <Flex\n        width={'100%'}\n        position={'fixed'}\n        flexDirection={'row'}\n        backgroundColor={['dashboardBg','white']}\n        /*onClick={ e => this.propagateClickEvent(e) }*/\n        height={[(window.innerHeight-61)+'px','100vh']}\n      >\n        <Flex\n          bottom={0}\n          zIndex={1}\n          width={[1,1/6]}\n          flexDirection={'column'}\n          position={['fixed','relative']}\n        >\n          <Card\n            p={[0,3]}\n            width={['100vw','auto']}\n            height={['auto','100vh']}\n            >\n            <DashboardMenu\n              {...this.props}\n              menu={this.state.menu}\n            />\n          </Card>\n        </Flex>\n        <Flex\n          py={3}\n          px={[3,5]}\n          mb={0}\n          width={[1,5/6]}\n          style={{\n            overflowY:'scroll',\n            overflowX:'hidden'\n          }}\n          flexDirection={'columns'}\n          backgroundColor={'dashboardBg'}\n        >\n          <Suspense\n            fallback={SuspenseLoader}\n          >\n            {\n              !this.props.accountInizialized || !this.props.contractsInitialized || !PageComponent ? (\n                <Flex\n                  width={1}\n                  minHeight={'50vh'}\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  {\n                    !this.state.showResetButton ? (\n                      <FlexLoader\n                        textProps={{\n                          textSize:4,\n                          fontWeight:2\n                        }}\n                        loaderProps={{\n                          mb:3,\n                          size:'40px'\n                        }}\n                        flexProps={{\n                          my:3,\n                          flexDirection:'column'\n                        }}\n                        text={ !this.props.accountInizialized ? 'Loading account...' : ( !this.props.contractsInitialized ? 'Loading contracts...' : 'Loading assets...' )}\n                      />\n                    ) : (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3,\n                          width:[1,0.35]\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Warning'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            Idle can't connect to your wallet!<br />Make sure that your wallet is unlocked and try again.\n                          </Text>\n                          <RoundButton\n                            buttonProps={{\n                              mt:3,\n                              width:[1,1/2]\n                            }}\n                            handleClick={this.logout.bind(this)}\n                          >\n                            Logout\n                          </RoundButton>\n                        </Flex>\n                      </DashboardCard>\n                    )\n                  }\n                </Flex>\n              ) : (\n                <Flex\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  <DashboardHeader\n                    clickEvent={this.state.clickEvent}\n                    goToSection={this.goToSection.bind(this)}\n                    {...this.props}\n                  />\n                  {\n                    PageComponent &&\n                      <PageComponent\n                        {...this.props}\n                        match={{ params:{} }}\n                        urlParams={this.state.params}\n                        changeToken={this.changeToken.bind(this)}\n                        goToSection={this.goToSection.bind(this)}\n                        selectedSection={this.state.selectedSection}\n                        selectedSubsection={this.state.selectedSubsection}\n                        openTooltipModal={this.openTooltipModal.bind(this)}\n                        />\n                  }\n                </Flex>\n              )\n            }\n          </Suspense>\n        </Flex>\n        <Suspense\n          fallback={null}\n        >\n          <UpgradeModal\n            {...this.props}\n            closeModal={this.resetModal}\n            goToSection={this.goToSection.bind(this)}\n            tokensToMigrate={this.state.tokensToMigrate}\n            isOpen={this.state.activeModal === 'upgrade'}\n            oldIdleTokensToMigrate={this.state.oldIdleTokensToMigrate}\n          />\n          <MigrateModal\n            {...this.props}\n            closeModal={this.resetModal}\n            goToSection={this.goToSection.bind(this)}\n            isOpen={this.state.activeModal === 'migrate'}\n            protocolsTokensBalances={this.state.protocolsTokensBalances}\n          />\n          <TooltipModal\n            closeModal={this.resetModal}\n            title={this.state.modalTitle}\n            content={this.state.modalContent}\n            isOpen={this.state.activeModal === 'tooltip'}\n          >\n          </TooltipModal>\n          <WelcomeModal\n            closeModal={this.resetModal}\n            account={this.props.account}\n            simpleID={this.props.simpleID}\n            network={this.props.network.current}\n            tokenName={this.props.selectedToken}\n            initSimpleID={this.props.initSimpleID}\n            baseTokenName={this.props.selectedToken}\n            isOpen={this.state.activeModal === 'welcome'}\n          />\n        </Suspense>\n      </Flex>\n    );\n  }\n}\n\nexport default Dashboard;"],"sourceRoot":""}