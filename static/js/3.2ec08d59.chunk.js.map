{"version":3,"sources":["AssetsUnderManagement/AssetsUnderManagement.js","DepositRedeem/DepositRedeem.module.scss","TwitterShareButton/TwitterShareButton.module.scss","Stats/StatsChart.js","Rebalance/Rebalance.js","utilities/components/DateRangeModal.js","ExecuteTransaction/ExecuteTransaction.js","Stats/Stats.js","Utils/Utils.js","FundsOverview/FundsOverview.js","CurveRedeem/CurveRedeem.js","TwitterShareButton/TwitterShareButton.js","utilities/components/ShareModal.js","DepositRedeem/DepositRedeem.js","EstimatedEarnings/EstimatedEarnings.js","AssetPage/AssetPage.js","CurveDeposit/CurveDeposit.js","PortfolioEquityCurve/PortfolioEquityCurve.js","FundsOverviewCurve/FundsOverviewCurve.js","CurveStrategy/CurveStrategy.js","utilities/components/WelcomeModal.js","utilities/components/MigrateModal.js","utilities/components/UpgradeModal.js","Dashboard/Dashboard.js"],"names":["AssetsUnderManagement","state","totalAUM","totalAUMEndOfYear","functionsUtil","this","setProps","props","FunctionsUtil","loadUtils","loadTotalAUM","prevProps","prevState","contractsInitialized","availableStrategies","JSON","stringify","getAggregatedStats","avgAPY","plus","times","div","setState","_this2","react__WEBPACK_IMPORTED_MODULE_9___default","a","createElement","rimble_ui__WEBPACK_IMPORTED_MODULE_10__","width","react_countup__WEBPACK_IMPORTED_MODULE_8___default","delay","decimals","decimal","separator","useEasing","duration","start","parseFloat","end","formattingFn","n","formatMoney","_ref2","countUpRef","style","counterStyle","display","color","whiteSpace","fontFamily","theme","fonts","counter","fontWeight","fontWeights","textAlign","isMobile","fontSize","fontSizes","ref","subtitle","_Title_Title__WEBPACK_IMPORTED_MODULE_7__","Object","assign","subtitleProps","span","size","Component","module","exports","input","twitterIcon","StatsChart","chartProps","chartType","chartData","chartWidth","parseAum","value","parseInt","toFixed","_this","selectedToken","loadApiData","_callee3","CustomTooltipRow","CustomTooltip","maxGridLines","apiResults","apiResults_unfiltered","totalItems","protocols","versionInfo","keys","tempData","gridYStep","itemIndex","gridYValues","maxChartValue","axisBottomIndex","idleChartData","firstIdleBlock","divergingData","startTimestamp","endTimestamp","timestamp","date","lastRow","maxRange","i","_i","_i2","_i3","prevValue","_i4","prevApr","prevData","startBalance","currentBalance","avgApy","_i5","firstTokenPrice","_i6","regenerator_default","wrap","_context3","prev","next","tokenConfig","chartMode","abrupt","react_default","index_es","mb","alignItems","flexDirection","pr","flexBasis","flex","justifyContent","mr","height","borderRadius","backgroundColor","textTransform","label","dangerouslySetInnerHTML","__html","DashboardCard","key","point","id","cardProps","py","px","left","data","itemPos","xFormatted","children","length","globalConfigs","stats","versions","idleVersion","Line","t0","moment","_d","getTime","format","deposits","redeems","forEach","row","idleTokens","fixTokenDecimals","idleSupply","idleTokensPrev","eq","diff","minus","gte","Math","max","abs","values","filter","v","Bar","push","indexBy","enableLabel","minValue","maxValue","d","axisBottom","tickSize","legend","tickPadding","orient","legendOffset","legendPosition","tickValues","axisLeft","axisRight","tickRotation","abbreviateNumber","markers","axis","lineStyle","strokeOpacity","textStyle","fill","colors","transactions","action","deposit","legendOrientation","legendOffsetX","stroke","strokeDasharray","redeem","padding","labelTextColor","labelSkipWidth","labelSkipHeight","pointSize","useMesh","animate","pointLabel","curve","enableArea","enableSlices","enableGridX","enableGridY","pointBorderWidth","pointLabelYOffset","legends","dataFrom","itemWidth","itemHeight","translateX","translateY","symbolSize","itemsSpacing","direction","anchor","symbolShape","itemTextColor","effects","on","ticks","text","sansSerif","grid","line","lineChartStroke","tooltip","container","boxShadow","background","pointColor","from","modifiers","margin","top","right","bottom","strToMoment","indexValue","depositFormatted","redeemFormatted","tokens","hsl","join","map","idlePrice","aum","x","y","toString","p","j","protocolsData","protocolAllocation","protocolAddr","toLowerCase","address","z","BNify","rate","allocation","foundItem","item","pos","indexOf","allocations","name","undefined","xScale","type","xFormat","yFormat","yScale","stacked","showAdvanced","sliceTooltip","slideData","slice","points","serieId","serieColor","yFormatted","protocolName","protocolColor","protocolAllocationFormatted","protocolAllocationPerc","concat","protocolData","protocolPaused","foundProtocol","find","capitalize","_ref3","borderCollapse","totalAllocation","reduce","accumulator","allocationPerc","_ref4","_ref5","idle","idleRate","protocolEarning","defiScore","isNaN","idleScore","apy","apr","days","earnings","earning","blocknumber","floor","additionalProtocols","additionalProtocol","protocolInfo","protocol","enabled","unshift","rateField","chartRow","baseProfit","firstProtocolData","firstProtocolBlock","pData","protocolRate","acc","field","idlePerformance","d1","rowData","protocolApy","tokenPrice","asyncForEach","_ref6","asyncToGenerator","mark","_callee2","lastRowData","lastTokenPrice","_context2","_ref7","_callee","tokenExchangeRate","tokenPriceFixed","lastYDiff","_context","price","lt","stop","_x2","apply","arguments","_x","showAdvancedChanged","apiResultsChanged","tokenChanged","componentDidMount","GenericChart","showLoader","parentId","parentIdHeight","Rebalance","loading","processing","rebalance","txHash","shouldRebalance","checkRebalance","sent","e","callback","callback_receipt","preventDefault","tx","error","eventData","eventCategory","eventAction","eventLabel","status","getTransactionError","sendGoogleAnalyticsEvent","window","toastProvider","addMessage","secondaryMessage","colorTheme","actionHref","actionText","variant","objectSpread","transactionHash","contractMethodSendWrapper","token","accountChanged","account","minHeight","FlexLoader","flexProps","loaderProps","textProps","ml","TxProgressBar","web3","waitText","endMessage","hash","mt","RoundButton","buttonProps","disabled","handleClick","DateRangeModal","quickSelection","ranges","startDate","Date","endDate","componentDidUpdate","selection","target","clone","subtract","closeModal","newState","handleSelect","startTimestampObj","endTimestampObj","_this3","isOpen","ModalCard","closeFunc","Header","title","Body","required","onChange","handleQuickSelect","bind","options","dist","minDate","maxDate","Footer","my","mx","onClick","React","ExecuteTransaction","txStatus","contractName","methodName","params","ExecuteComponent","parentProps","cancelTransaction","execute","componentProps","Stats","delta","carouselMax","rebalances","buttonGroups","carouselIndex","statsVersions","minStartTime","govTokensPool","unlentBalance","carouselOffsetLeft","showRefreshIdleSpeed","dateRangeModalOpened","quickSelections","day","week","weeks","month","componentUnmounted","setDateRange","isSameOrAfter","isSame","add","isBefore","isAfter","maxEndDate","setStateSafe","toggleAdvancedCharts","setDateRangeModal","filterTokenData","r","setIdleVersion","isRisk","firstResult","lastResult","firstIdlePrice","lastIdlePrice","compoundInfo","firstCompoundData","lastCompoundData","compoundWithCOMPInfo","compoundAvgApr","firstCompoundPrice","lastCompoundPrice","compoundApr","includes","selectedStrategy","getTokenApiData","pop","convertTokenBalance","sum","compoundWithCOMP","compoundData","compoundRate","index","prevRow","prevTotalAllocation","hasRebalanced","prevP","prevAllocation","getGovTokenPool","getUnlentBalance","selectToken","strategy","setStrategyToken","changeToken","handleCarousel","$element","jQuery","position","loadParams","latestVersion","version","enabledStrategies","strategiesParams","versionInfoExtra","param","match","currentNetworkAvailableTokens","availableTokens","customToken","toUpperCase","getLatestAvailableVersion","getVersionInfo","newEndTimestampObj","newStartTimestampObj","initWeb3","document","innerHTML","body","appendChild","loadCarousel","strategyChanged","dateChanged","versionChanged","idleTokenEnabled","getGlobalConfig","apyLong","textSize","versionsOptions","enabledTokens","performanceTooltip","versionDefaultValue","Breadcrumb","showPathMobile","goToSection","path","GenericSelector","innerProps","defaultValue","AssetSelector","isInteractive","StatsCard","labelTooltip","VariationNumber","iconPos","iconSize","lineHeight","description","Stats_StatsChart","contracts","pb","pt","AllocationChart","src_Rebalance_Rebalance","pl","h4","RoundIconButton","iconName","transition","titleParentProps","components_DateRangeModal","strategies","statsTokens","statsProtocols","strategyInfo","Title","titlePostfix","AssetsList","cols","fields","mobile","overflow","desc","showTooltip","mainColor","rgb","hoverColor","src_ExecuteTransaction_ExecuteTransaction","Button","completed","Utils","SubComponent","selectedSubsection","subComponent","selectedSection","route","directProps","toolProps","flexWrap","submenu","tool","toolIndex","image","src","icon","FundsOverview","govTokensAprs","aggregatedValues","govTokensTotalApr","govTokensUserBalance","govTokensDistribution","govTokensTotalBalance","govTokensTotalAprTooltip","idleTokenUserDistribution","govTokensDistributionTooltip","govTokensTotalBalanceTooltip","idleGovToken","getIdleGovToken","govTokenAvailableTokens","Promise","all","getGovTokensAprs","getUserDistribution","getGovTokensUserBalances","loadAssetField","totBalance","govTokenBalance","govToken","balance","gt","totApr","govTokenApr","AssetField","fieldInfo","PortfolioEquity","chartHeight","chartToken","frequencySeconds","getFrequencySeconds","component","Heading","h3","maxPrecision","govTokenIndex","tokenName","distributionFrequency","CurveRedeem","inputValue","maxSlippage","unevenAmounts","buttonDisabled","showMaxSlippage","redeemUnderlying","curveTokenConfig","curvePoolContract","curveSwapContract","curveTokenBalance","curveTokensAmounts","fastBalanceSelector","redeemUnevenAmounts","curveRedeemableIdleTokens","toggleUnevenAmounts","checkButtonDisabled","amount","changeInputValue","setFastBalanceSelector","setMaxSlippage","initToken","max_slippage","lte","normalizedAmount","normalizeTokenAmount","withdrawSlippage","curveIdleTokensAmounts","getCurveTokensAmounts","getCurveIdleTokensAmounts","getCurveSlippage","getCurveTokenPrice","curveTokenPrice","redeemableBalance","redeemUnevenAmountsChanged","setInputValue","inputChanged","maxSlippageChanged","tokenConfigChanged","calculateSlippage","loadSelectedTokenConfig","selectedPercentage","curveConfig","getCurvePoolContract","getCurveSwapContract","getCurveTokenBalance","getCurveRedeemableIdleTokens","getCurveAvailableTokens","callbackRedeem","txSucceeded","eventValue","callbackReceiptRedeem","_amount","min_amounts","console","log","coin_index","migrationParams","coinIndex","min_amount","showSlippage","curveTokenName","checked","placement","message","showBalance","selectDestinationToken","SmartNumber","number","slippage","FastBalanceSelector","percentage","onMouseDown","isActive","maxWidth","failed","textOverflow","min","placeholder","border","divider","TwitterShareButton","share","parent","w","innerWidth","open","tweet","contrastColor","className","styles","ShareModal","getGlobalConfigs","analytics","google","events","escape","customText","confettiEnabled","react_confetti_default","zIndex","run","recycle","innerHeight","src_TwitterShareButton_TwitterShareButton","DepositRedeem","txError","tokenAPY","curveAPY","canRedeem","canDeposit","directMint","activeModal","showBuyFlow","tokenApproved","skipMigration","showRedeemFlow","contractPaused","canRedeemCurve","redeemGovTokens","canDepositCurve","actionProxyContract","migrationEnabled","componentMounted","redeemCurveEnabled","depositCurveBalance","depositCurveEnabled","showAdvancedOptions","depositCurveSlippage","metaTransactionsEnabled","setShowRedeemFlow","setShowBuyFlow","toggleShowAdvancedOptions","toggleSkipMigration","toggleRedeemCurve","toggleDepositCurve","toggleSkipMint","toggleRedeemGovTokens","toggleMetaTransactionsEnabled","resetModal","setActiveModal","approveContract","callbackApprove","callbackReceiptApprove","curveDepositContract","proxyContract","enableERC20","biconomy","checkTokenApproved","approveToken","approve","loadTokenInfo","_callee4","curveTokenEnabled","_context4","checkContractPaused","getCurveDepositContract","checkMigration","slicedToArray","tokenBalance","idleTokenBalance","boost","checkAction","loadAPY","_callee5","_context5","defineProperty","executeAction","_callee6","contractSendResult","callbackDeposit","callbackReceiptDeposit","curvePoolContractInfo","tokensToDeposit","amounts","minMintAmount","depositParams","_tokensToDeposit","depositMetaTransactionsEnabled","_depositParams","mintProxyContractInfo","mintProxyContract","_mintProxyContract$me","functionSignature","_skipMint","_ref9","_ref10","maxUnlentPerc","depositPerc","txData","idleTokenToRedeem","idleTokenPrice","_callbackRedeem","_callbackReceiptRedeem","redeemParams","_context6","getFastBalanceSelector","localStorage","setLocalStorage","lendingProcessing","lendAmount","genericError","getCurveAmounts","getCurveTokenAmount","integerValue","contract","methods","function","toConsumableArray","encodeABI","sendBiconomyTxWithPersonalSign","skipMintForDeposit","genericContractCall","setAction","loadProxyContracts","actions","_ref11","_callee9","hasProxyContract","_context9","initContract","abi","approved","_x3","getTokenAprs","tokenAprs","getCurveAPY","tokenBalanceChanged","actionChanged","fastBalanceSelectorChanged","depositCurveChanged","calculateCurveSlippage","govTokensDisabled","govTokensEnabled","skipMintForDepositEnabled","skipMintCheckboxEnabled","redeemGovTokenEnabled","metaTransactionsAvailable","useMetaTx","totalBalance","migrateText","migration","depositCurve","showDepositOptions","canPerformAction","showDepositCurve","showRedeemCurve","showActionFlow","showCurveSlippage","showRebalanceOption","showAdvancedDepositOptions","batchDepositInfo","batchDepositEnabled","batchDepositDepositEnabled","depositEnabled","showBatchDeposit","isMigrationTool","Migrate","migrateTextBefore","TransactionField","transaction","isDisabled","openTooltipModal","isRainbow","getWalletProvider","primary","href","govTokensBalance","tokenFeesPercentage","borderColor","minWidth","ConnectBox","src_CurveRedeem_CurveRedeem","BuyModal","showInline","availableMethods","buyToken","components_ShareModal","EstimatedEarnings","tokenApy","maxInputValue","loadChart","getTokenApy","earningsYear","amountMonth","amount3Months","amount6Months","amountYear","perc","monthColor","month3","month3Color","month6","month6Color","year","yearColor","labelTextColorModifiers","gridYValue","_ref","labels","showAPYDisclaimer","verticalAlign","AssetPage","tokenFees","availableGovTokens","getTokenFees","getTokenBalance","getUserTokenFees","getGovTokensUserTotalBalance","getTokenGovTokens","loadTokensInfo","transactionsChanged","userHasFunds","CardIconButton","src_DepositRedeem_DepositRedeem","src_FundsOverview_FundsOverview","src_EstimatedEarnings_EstimatedEarnings","TransactionsList","CurveDeposit","depositSlippage","migrationContract","curveTokensBalance","migrationSucceeded","migrationContractApproved","checkMigrationContractApproved","getMigrationParams","approveCallback","migrationCallback","idleTokenBalanceChanged","toMigrate","n_coins","underlyingBalanceToDeposit","getIdleTokenPrice","normalizeIdleTokenBalance","hasCurveTokens","PortfolioEquityCurve","chartwidth","loadChartData","quickDateSelectionChanged","quickDateSelection","getCurveTxs","curveTxs","tokensBalance","processedTxs","firstTxTimestamp","timeStamp","curveTokens","currentDate","prevBalances","prevTimestamp","minChartValue","aggregatedBalancesKeys","tokensBalancesPerDate","aggregatedBalance","currTimestamp","tokensData","foundBalances","tokensBalances","momentDate","filteredTokenData","filteredBalances","lastFilteredTx","lastTokenData","lastTx","lastTxBalance","formattedDate","aggregatedBalanceParsed","aggregatedBalances","balances","yFormatDecimals","daysCount","daysFrequency","ceil","areaOpacity","areaBaselineValue","ChartCustomTooltip","ChartCustomTooltipRow","tokenInfo","hex","formattedBalance","FundsOverviewCurve","compAPR","getCurveAvgBuyPrice","getCurveAvgSlippage","src_PortfolioEquityCurve_PortfolioEquityCurve","redeemBalance","depositBalance","curveZapContract","curveAvailableTokens","changeFromToken","setSelectedToken","baseToken","getSelectedToken","urlParams","param1","getCurveZapContract","updateAssetSelector","curveTokensToRedeem","src_CurveDeposit_CurveDeposit","src_FundsOverviewCurve_FundsOverviewCurve","enabledActions","WelcomeModal","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","email","subscribed","sendingForm","sendUserInfo","sendEmail","walletProvider","userInfo","provider","simpleIDPassUserInfo","setTimeout","err","handleSubmit","assertThisInitialized","handleValidation","axios","post","newsletterSubscription","endpoint","then","catch","walletAddress","lastLogin","getItem","parse","signedUp","parentNode","classList","onSubmit","green","Field","Input","outline","ButtonLoader","buttonText","isLoading","header_styles","gradientButton","MigrateModal","dontShowAgain","toggleDontShowAgain","removeStoredItem","migrate","tokenMigrationRoute","fieldProps","iconHeight","protocolsTokensBalances","minPrecision","UpgradeModal","_args3","convert","convertTool","tokensToMigrate","tokenKey","oldContractBalanceFormatted","oldIdleTokensToMigrate","newTokenConfig","Dashboard","menu","baseRoute","clickEvent","currentRoute","pageComponent","currentSection","showResetButton","timeoutId","modalTitle","modalContent","logout","setConnector","s","comingSoon","selected","bgColor","imageInactive","iconInactive","imageInactiveDark","iconInactiveDark","curveParams","CurveStrategy","u","isExternalLink","section","param2","section_is_strategy","param1_is_strategy","param1_is_token","param2_is_token","m","sectionRoute","subm","clearTimeout","setCurrentSection","loadMenu","accountInizialized","initAccount","initializeContracts","checkModals","prevParams","checkTokensToMigrate","checkWelcomeModal","checkProtocolsTokensBalances","showUpgradeModal","getStoredItem","getTokensToMigrate","getProtocolsTokensBalances","welcomeIsOpen","welcomeModalProps","currTime","lastTime","frequency","migrateModalEnabled","showMigrateModal","isDashboard","replace","newRoute","location","scrollTo","routeParts","PageComponent","DashboardMenu","overflowY","overflowX","DashboardHeader","components_UpgradeModal","components_MigrateModal","TooltipModal","content","components_WelcomeModal","simpleID","network","current","initSimpleID","baseTokenName"],"mappings":"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","file":"static/js/3.2ec08d59.chunk.js","sourcesContent":["import Title from '../Title/Title';\nimport CountUp from 'react-countup';\nimport React, { Component } from 'react';\nimport { Box, Text, Loader } from \"rimble-ui\";\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass AssetsUnderManagement extends Component {\n\n  state = {\n    totalAUM:null,\n    totalAUMEndOfYear:null\n  }\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.loadTotalAUM();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const availableStrategiesChanged = !prevProps.availableStrategies && JSON.stringify(prevProps.availableStrategies) !== JSON.stringify(this.props.availableStrategies);\n    if (availableStrategiesChanged || contractsInitialized){\n      this.loadTotalAUM();\n    }\n  }\n\n  async loadTotalAUM(){\n\n    if (!this.props.availableStrategies || !this.props.contractsInitialized){\n      return true;\n    }\n\n    const {\n      avgAPY,\n      totalAUM\n    } = await this.functionsUtil.getAggregatedStats();\n\n    const totalAUMEndOfYear = totalAUM.plus(totalAUM.times(avgAPY.div(100)));\n\n    this.setState({\n      totalAUM,\n      totalAUMEndOfYear\n    });\n  }\n\n  render() {\n    return this.state.totalAUM ? (\n      <Box\n        width={1}\n      >\n        <CountUp\n          delay={0}\n          decimals={4}\n          decimal={'.'}\n          separator={''}\n          useEasing={false}\n          duration={31536000}\n          start={parseFloat(this.state.totalAUM)}\n          end={parseFloat(this.state.totalAUMEndOfYear)}\n          formattingFn={ n => '$ '+this.functionsUtil.formatMoney(n,4) }\n        >\n          {({ countUpRef, start }) => (\n            <span\n              style={ this.props.counterStyle ? this.props.counterStyle : {\n                display:'block',\n                color:'dark-gray',\n                whiteSpace:'nowrap',\n                fontFamily:this.props.theme.fonts.counter,\n                fontWeight:this.props.theme.fontWeights[5],\n                textAlign: this.props.isMobile ? 'center' : 'right',\n                fontSize: this.props.isMobile ? '1.6em' : this.props.theme.fontSizes[6]\n              }}\n              ref={countUpRef}\n            />\n          )}\n        </CountUp>\n        {\n          (typeof this.props.subtitle === 'undefined' || this.props.subtitle) && (\n            <Title\n              fontWeight={3}\n              fontSize={[2,2]}\n              color={'cellTitle'}\n              textAlign={['center','right']}\n              {...this.props.subtitleProps}\n            >\n              {\n                this.props.subtitle ? this.props.subtitle : (\n                  <Text.span fontWeight={'inherit'} color={'inherit'} fontSize={'inherit'}>Assets Under Management <Text.span color={'cellTitle'} fontWeight={3} fontSize={'70%'}>(V3 + V4)</Text.span></Text.span>\n                )\n              }\n            </Title>\n          )\n        }\n      </Box>\n    ) : (<Loader size=\"30px\" />);\n  }\n}\n\nexport default AssetsUnderManagement;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"DepositRedeem_input__28jp2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"twitterIcon\":\"TwitterShareButton_twitterIcon__2QCmn\"};","import moment from 'moment';\nimport theme from '../theme';\nimport { Bar } from '@nivo/bar';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\nimport { Flex, Text, Box } from 'rimble-ui';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass StatsChart extends Component {\n  state = {\n    chartProps:{},\n    chartType:null,\n    chartData:null,\n    chartWidth:null\n  };\n\n  async componentDidMount() {\n    this.setState({\n      chartData:null,\n      chartType:null,\n      chartProps:null,\n    });\n    this.loadUtils();\n    this.loadApiData();\n  }\n\n  async componentDidUpdate(prevProps) {\n    const showAdvancedChanged = prevProps.showAdvanced !== this.props.showAdvanced;\n    const apiResultsChanged = prevProps.apiResults !== this.props.apiResults;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    if (apiResultsChanged || showAdvancedChanged || tokenChanged){\n      this.componentDidMount();\n    }\n  }\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  parseAum = value => {\n    return (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.tokenConfig || !this.props.selectedToken || !this.props.chartMode || !this.props.apiResults){\n      return false;\n    }\n\n    const CustomTooltipRow = props => (\n      <Flex\n        mb={2}\n        width={1}\n        alignItems={'center'}\n        flexDirection={'row'}\n      >\n        <Flex\n          pr={2}\n          style={{\n            flexBasis:'0',\n            flex:'1 1 0px'\n          }}\n          alignItems={'center'}\n          justifyContent={'flex-start'}\n        > \n          {\n            props.color && \n            <Box\n              mr={2}\n              width={'10px'}\n              height={'10px'}\n              borderRadius={'50%'}\n              backgroundColor={props.color}\n            >\n            </Box>\n          }\n          <Text\n            fontSize={1}\n            fontWeight={2}\n            textAlign={'left'}\n            color={'dark-gray'}\n            style={{\n              textTransform:'capitalize'\n            }}\n          >\n            {props.label}\n          </Text>\n        </Flex>\n        <Flex\n          style={{\n            flexBasis:'0',\n            flex:'1 1 0px'\n          }}\n          alignItems={'center'}\n          justifyContent={'flex-end'}\n        >\n          <Text\n            fontSize={1}\n            fontWeight={3}\n            color={'cellText'}\n            textAlign={'right'}\n            style={{\n              whiteSpace:'nowrap'\n            }}\n            dangerouslySetInnerHTML={{\n              __html: props.value\n            }}\n          >\n          </Text>\n        </Flex>\n      </Flex>\n    );\n\n    const CustomTooltip = props => {\n      return (\n        <DashboardCard\n          key={props.point.id}\n          cardProps={{\n            py:2,\n            px:3,\n            width:1,\n            left: props.point.data.itemPos>50 ? '-110%' : '0'\n          }}\n        >\n          <Flex\n            width={1}\n            flexDirection={'column'}\n          >\n            {\n              props.point.data.xFormatted && \n                <Text\n                  mb={2}\n                  fontSize={1}\n                  fontWeight={3}\n                  color={'cellText'}\n                  textAlign={'left'}\n                >\n                  {props.point.data.xFormatted}\n                </Text>\n            }\n            {props.children}\n          </Flex>\n        </DashboardCard>\n      );\n    };\n\n    const maxGridLines = 4;\n    const apiResults = this.props.apiResults;\n    const apiResults_unfiltered = this.props.apiResults_unfiltered;\n    const totalItems = apiResults.length;\n    const protocols = Object.assign([],this.props.tokenConfig.protocols);\n    // const compoundProtocol = this.props.tokenConfig.protocols.find( p => (p.name === 'compound'));\n\n    const versionInfo = globalConfigs.stats.versions[this.props.idleVersion];\n\n    let keys = {};\n    let tempData = {};\n    let gridYStep = 0;\n    let itemIndex = 0;\n    let chartData = [];\n    let chartProps = {};\n    let chartType = Line;\n    let gridYValues = [];\n    let maxChartValue = 0;\n    let axisBottomIndex = 0;\n    let idleChartData = null;\n    let firstIdleBlock = null;\n\n    switch (this.props.chartMode){\n      case 'VOL':\n        let divergingData = {};\n\n        const startTimestamp = parseInt(apiResults_unfiltered[0].timestamp);\n        const endTimestamp = parseInt(moment()._d.getTime()/1000);\n\n        for (let timestamp=startTimestamp;timestamp<=endTimestamp;timestamp+=86400){\n          const date = moment(timestamp*1000).format(\"YYYY/MM/DD\");\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n        }\n\n        let lastRow = null;\n        apiResults_unfiltered.forEach(row => {\n          const date = moment(row.timestamp*1000).format(\"YYYY/MM/DD\");\n          const idleTokens = this.functionsUtil.fixTokenDecimals(row.idleSupply,18);\n\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp:row.timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n\n          if (lastRow){\n            const idleTokensPrev = this.functionsUtil.fixTokenDecimals(lastRow.idleSupply,18);\n            const idleTokensDiff = !idleTokens.eq(idleTokensPrev);\n            if (idleTokensDiff){\n              const diff = idleTokens.minus(idleTokensPrev);\n              // Deposits\n              if (diff.gte(0)){\n                divergingData[date].deposits+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,divergingData[date].deposits);\n              } else {\n                divergingData[date].redeems+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,Math.abs(divergingData[date].deposits));\n              }\n            }\n\n          } else {\n            divergingData[date].deposits+=parseFloat(idleTokens);\n          }\n\n          lastRow = row;\n        });\n\n        chartData = Object.values(divergingData).filter(v => {\n          return (!this.props.startTimestamp || v.timestamp>=this.props.startTimestamp) && (!this.props.endTimestamp || v.timestamp<=this.props.endTimestamp);\n        });\n\n        let maxRange = 0;\n        chartData.forEach(v => {\n          maxRange = Math.max(maxRange,Math.abs(v.deposits),Math.abs(v.redeems));\n        })\n\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          indexBy: 'date',\n          enableLabel: false,\n          minValue:-maxRange,\n          maxValue:maxRange,\n          label: d => {\n            return Math.abs(d.value);\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days',\n          },\n          axisLeft: null,\n          axisRight: {\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:8,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(Math.abs(v),0)\n          },\n          markers: [\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { strokeOpacity: 0 },\n              textStyle: { fill: theme.colors.transactions.action.deposit },\n              legend: 'deposits',\n              legendPosition: 'top-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { stroke: theme.colors['dark-gray'], strokeDasharray: '5 3' },\n              textStyle: { fill: theme.colors.transactions.action.redeem },\n              legend: 'redeems',\n              legendPosition: 'bottom-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n          ],\n          keys:['deposits','redeems'],\n          padding:0.4,\n          colors:[theme.colors.transactions.action.deposit, theme.colors.transactions.action.redeem],\n          labelTextColor: 'inherit:darker(1.4)',\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 80 : 100,\n              itemHeight: 18,\n              translateX: 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            },\n            tooltip:{\n              container:{\n                boxShadow:null,\n                background:null\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 50, bottom: 45, left: 50 } : { top: 20, right: 70, bottom: 70, left: 50 },\n          tooltip:(data) => {\n            const xFormatted = this.functionsUtil.strToMoment(data.indexValue).format('MMM DD');\n            const point = {\n              id:data.id,\n              data:{\n                xFormatted\n              }\n            };\n            const depositFormatted = this.functionsUtil.abbreviateNumber(data.data.deposits,2)+' '+this.props.selectedToken;\n            const redeemFormatted = this.functionsUtil.abbreviateNumber(data.data.redeems,2)+' '+this.props.selectedToken;\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                <CustomTooltipRow\n                  label={'Deposits'}\n                  color={theme.colors.deposit}\n                  value={depositFormatted}\n                />\n                <CustomTooltipRow\n                  label={'Redeem'}\n                  color={theme.colors.redeem}\n                  value={redeemFormatted}\n                />\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      /*\n      case 'AUM_ALL':\n        await this.functionsUtil.asyncForEach(Object.keys(availableTokens[globalConfigs.network.requiredNetwork]),async (tokenName,i) => {\n          const tokenConfig = availableTokens[globalConfigs.network.requiredNetwork][tokenName];\n          const tokenDataApi = await this.props.getTokenData(tokenConfig.address);\n          chartData.push({\n            id:tokenName,\n            color: tokenConfig.color,\n            data: tokenDataApi.map((d,i) => {\n              const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n              const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,tokenConfig.decimals);\n              const aum = idleTokens.times(idlePrice);\n              return {\n                x: moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\"),\n                y: parseInt(aum.toString())\n              };\n            })\n          });\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken,\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v),\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            legendPosition: 'middle'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            format: '%b %d',\n            tickValues: this.props.isMobile ? 'every 4 days' : 'every 3 days',\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 36,\n            legendPosition: 'middle'\n          },\n          enableArea:false,\n          curve:\"linear\",\n          enableSlices:'x',\n          enableGridX:true,\n          enableGridY:false,\n          colors:d => d.color,\n          pointSize:0,\n          pointColor:{ from: 'color', modifiers: []},\n          pointBorderWidth:1,\n          pointLabel:\"y\",\n          pointLabelYOffset:-12,\n          useMesh:true,\n          animate:false,\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 60, bottom: 40, left: 60 },\n        };\n      break;\n      */\n      case 'AUM':\n\n        maxChartValue = 0;\n\n        chartData.push({\n          id:'AUM',\n          color: 'hsl('+globalConfigs.stats.tokens[this.props.selectedToken].color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n            const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n            const aum = idleTokens.times(idlePrice);\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(aum.toString());\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x,y };\n          })\n        });\n\n        // Add allocation\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          apiResults.map((d,i) => {\n            return d.protocolsData.filter((protocolAllocation,x) => {\n                return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            })\n            .map((protocolAllocation,z) => {\n              const protocolPaused = this.functionsUtil.BNify(protocolAllocation.rate).eq(0);\n              if (!protocolPaused){\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals));\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                let foundItem = chartData[0].data.filter(item => { return item.x === x });\n                if (foundItem){\n                  foundItem = foundItem[0];\n                  const pos = chartData[0].data.indexOf(foundItem);\n                  if (!foundItem.allocations){\n                    foundItem.allocations = {};\n                  }\n                  foundItem.allocations[p.name] = y;\n                  chartData[0].data[pos] = foundItem;\n                }\n              }\n              return undefined;\n            })[0]\n          }).filter((v) => { return v !== undefined; } )\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:v => this.functionsUtil.formatMoney(v,v<1 ? 3 :0),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:true,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            if (typeof point === 'object' && typeof point.data === 'object'){\n              return (\n                <CustomTooltip\n                  point={point}\n                >\n                  <CustomTooltipRow\n                    label={point.serieId}\n                    color={point.serieColor}\n                    value={point.data.yFormatted}\n                  />\n                  {\n                    point.data.allocations && typeof point.data.allocations === 'object' &&\n                      Object.keys(point.data.allocations).map(protocolName => {\n                        const protocolColor = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n                        const protocolAllocation = point.data.allocations[protocolName];\n                        const protocolAllocationFormatted = this.functionsUtil.formatMoney(protocolAllocation,protocolAllocation<1 ? 3 : 0);\n                        const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                        return (\n                          <CustomTooltipRow\n                            label={protocolName}\n                            color={protocolColor}\n                            key={`${point.id}_${protocolName}`}\n                            value={`${protocolAllocationFormatted} (${protocolAllocationPerc})`}\n                          />\n                        );\n                      })\n                  }\n                </CustomTooltip>\n              );\n              /*\n              return (\n                <div\n                    key={point.id}\n                    style={{\n                      background: 'white',\n                      color: 'inherit',\n                      fontSize: 'inherit',\n                      borderRadius: '2px',\n                      boxShadow: 'rgba(0, 0, 0, 0.25) 0px 1px 2px',\n                      padding: '5px 9px'\n                    }}\n                >\n                  <div>\n                    <table style={{width:'100%',borderCollapse:'collapse'}}>\n                      <tbody>\n                        <tr>\n                          <td style={{padding:'3px 5px'}}>\n                            <span style={{display:'block', width: '12px', height: '12px', background: point.serieColor}}></span>\n                          </td>\n                          <td style={{padding:'3px 5px'}}>{point.serieId}</td>\n                          <td style={{padding:'3px 5px'}}><strong>{point.data.yFormatted}</strong></td>\n                        </tr>\n                        {\n                          point.data.allocations && typeof point.data.allocations === 'object' &&\n                            Object.keys(point.data.allocations).map(protocolName => {\n                              const protocolColor = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n                              const protocolAllocation = this.functionsUtil.formatMoney(point.data.allocations[protocolName],0);\n                              const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                              return (\n                                <tr key={`${point.id}_${protocolName}`}>\n                                  <td style={{padding:'3px 5px'}}>\n                                    <span style={{display:'block', width: '12px', height: '12px', background: protocolColor}}></span>\n                                  </td>\n                                  <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{protocolName}</td>\n                                  <td style={{padding:'3px 5px'}}><strong>{protocolAllocation}</strong> ({protocolAllocationPerc})</td>\n                                </tr>\n                              );\n                            })\n                        }\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              );\n              */\n            }\n\n            return null;\n          }\n        };\n      break;\n      case 'ALL':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\");\n\n          let row = {\n            date\n          };\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const foundProtocol = this.props.tokenConfig.protocols.find((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() });\n            if (foundProtocol){\n              const protocolName = this.functionsUtil.capitalize(foundProtocol.name);\n              if (!protocolPaused){\n                let allocation = parseFloat(this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals));\n                keys[protocolName] = 1;\n                row[protocolName] = allocation;\n                row[`${protocolName}Color`] = 'hsl('+globalConfigs.stats.protocols[protocolName.toLowerCase()].color.hsl.join(',')+')';\n                // console.log(protocolName,this.functionsUtil.BNify(protocolData.allocation).toString(),this.props.tokenConfig.decimals,allocation);\n                maxChartValue = Math.max(maxChartValue,allocation);\n              } else {\n                row[protocolName] = 0;\n              }\n            }\n          });\n\n\n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n            orient: 'left',\n            tickSize: 0,\n            tickPadding: 10,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            tickValues:gridYValues,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickSize: 0,\n            tickPadding: 10,\n            orient: 'bottom-left',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize:this.props.isMobile ? 12 : 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize:this.props.isMobile ? 12 : 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 60 },\n          tooltip:({ id, value, color }) => {\n            const allocation = this.functionsUtil.formatMoney(value,0);\n            return (\n              <table style={{width:'100%',borderCollapse:'collapse'}}>\n                <tbody>\n                  <tr>\n                    <td style={{padding:'3px 5px'}}>\n                      <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                    </td>\n                    <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                    <td style={{padding:'3px 5px'}}><strong>{allocation} {this.props.selectedToken}</strong></td>\n                  </tr>\n                </tbody>\n              </table>\n            )\n          }\n        }\n      break;\n      case 'ALL_PERC':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\")\n          let row = {\n            date:moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\")\n          };\n          if (tempData[date]){\n            row = tempData[date];\n          }\n\n          const totalAllocation = d.protocolsData.reduce((accumulator,protocolAllocation) => {\n            const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n            return this.functionsUtil.BNify(accumulator).plus(allocation);\n          },0);\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const protocolName = this.props.tokenConfig.protocols.filter((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() })[0].name;\n            if (!protocolPaused){\n              const allocation = this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals);\n              const allocationPerc = parseFloat(allocation.div(totalAllocation).times(100));\n              keys[protocolName] = 1;\n              row[protocolName] = allocationPerc;\n              row[`${protocolName}Color`] = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n            } else if (typeof row[protocolName] !== undefined) {\n              row[protocolName] = 0;\n            } \n          });\n          \n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          data: chartData,\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 40, bottom: 40, left: 60 },\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => parseInt(v)+'%'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            orient: 'bottom',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          tooltip:({ id, value, color }) => {\n            const allocation = parseInt(value)===100 ? this.functionsUtil.formatMoney(value,0) : this.functionsUtil.formatMoney(value,2);\n            return (\n              <table style={{width:'100%',borderCollapse:'collapse'}}>\n                <tbody>\n                  <tr>\n                    <td style={{padding:'3px 5px'}}>\n                      <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                    </td>\n                    <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                    <td style={{padding:'3px 5px'}}><strong>{allocation}%</strong></td>\n                  </tr>\n                </tbody>\n              </table>\n            )\n          }\n        }\n      break;\n      case 'APR':\n\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n          chartData.push({\n            id:p.name,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                const protocolPaused = this.functionsUtil.BNify(protocolAllocation.rate).eq(0);\n                if (!protocolPaused){\n                  const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                  const y = parseFloat(this.functionsUtil.fixTokenDecimals(protocolAllocation.rate,18));\n\n                  maxChartValue = Math.max(maxChartValue,y);\n\n                  return { x, y };\n                }\n                return undefined;\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(this.functionsUtil.fixTokenDecimals(d.idleRate,18));\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x, y };\n          })\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(2)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    // const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'SCORE':\n\n        let prevValue = 0;\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n\n          chartData.push({\n            id:p.name,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(protocolAllocation.defiScore);\n\n                y = isNaN(y) || !y ? prevValue : y;\n                prevValue = y;\n                maxChartValue = Math.max(maxChartValue,y);\n\n                return { x, y };\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            let y = parseFloat(d.idleScore);\n            y = isNaN(y) || !y ? prevValue : y;\n            prevValue = y;\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x, y };\n          })\n        });\n\n        // debugger;\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(1),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE_V4':\n\n        itemIndex = 0;\n        maxChartValue = 0;\n        // let prevApy = null;\n        let prevApr = null;\n        let prevData = null;\n        let startBalance = this.functionsUtil.BNify(1);\n        let currentBalance = this.functionsUtil.BNify(1);\n        let avgApy = this.functionsUtil.BNify(0);\n\n        // console.log('PRICE_V4',apiResults);\n\n        idleChartData = apiResults.map((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const apr = this.functionsUtil.fixTokenDecimals(d.idleRate,18).div(100);\n          // const apy = this.functionsUtil.apr2apy(apr);\n          \n          avgApy = avgApy.plus(apr.times(100));\n\n          if (prevApr){\n            const days = (d.timestamp-prevData.timestamp)/86400;\n            // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n            const earnings = currentBalance.times(prevApr.times(days).div(365));\n            currentBalance = currentBalance.plus(earnings);\n\n            const earning = currentBalance.div(startBalance).minus(1).times(100);\n            y = parseFloat(earning);\n\n            // apy = earning.times(365).div(totDays).toFixed(2);\n            apy = avgApy.div(i+1).toFixed(2);\n          }\n\n          prevData = d;\n          // prevApy = apy;\n          prevApr = apr;\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          return { x, y, apy, blocknumber, itemPos };\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        protocols.forEach( p => {\n\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          // prevApy = null;\n          prevApr = null;\n          prevData = null;\n          let baseProfit = 0;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n          avgApy = this.functionsUtil.BNify(0);\n          startBalance = this.functionsUtil.BNify(1);\n          currentBalance = this.functionsUtil.BNify(1);\n\n          apiResults.forEach( (d,i) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              const protocolRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n                if (protocolData[field]){\n                  return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(protocolData[field]));\n                }\n                return this.functionsUtil.BNify(acc);\n              },0) : this.functionsUtil.BNify(protocolData[rateField]);\n\n              const protocolPaused = protocolRate.eq(0);\n              if (!protocolPaused){\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null){\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => (d1.blocknumber>=firstProtocolBlock) );\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                    }\n                  }\n                }\n\n                let rowData = {};\n\n                let y = 0;\n                let apy = 0;\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                const apr = this.functionsUtil.fixTokenDecimals(protocolRate,18).div(100);\n\n                avgApy = avgApy.plus(apr.times(100));\n                // const apy = this.functionsUtil.apr2apy(apr);\n\n                if (prevData){\n                  const days = (d.timestamp-prevData.timestamp)/86400;\n                  // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n                  const earnings = currentBalance.times(prevApr.times(days).div(365));\n                  currentBalance = currentBalance.plus(earnings);\n\n                  const earning = currentBalance.div(startBalance).minus(1).times(100);\n                  y = parseFloat(earning)+baseProfit;\n\n                  apy = avgApy.div(i+1).toFixed(2);\n                }\n\n                prevData = d;\n                prevApr = apr;\n\n                if (firstIdleBlock === null){\n                  firstIdleBlock = parseInt(d.blocknumber);\n                }\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n                // const blocknumber = d.blocknumber;\n\n                itemIndex++;\n\n                rowData = {\n                  x,\n                  y,\n                  apy,\n                  itemPos\n                };\n\n                itemIndex++;\n                chartRow.data.push(rowData);\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: idleChartData\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              itemWidth: this.props.isMobile ? 70 : 100,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE':\n        // let prevTokenPrice = null;\n        maxChartValue = 0;\n        let firstTokenPrice = null;\n\n        idleChartData = apiResults.map((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          let days = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const tokenPrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n\n          if (!firstTokenPrice){\n            firstTokenPrice = tokenPrice;\n          } else {\n            y = parseFloat(tokenPrice.div(firstTokenPrice).minus(1).times(100));\n\n            days = (d.timestamp-apiResults[0].timestamp)/86400;\n            const earning = tokenPrice.div(firstTokenPrice).minus(1).times(100);\n            apy = earning.times(365).div(days).toFixed(2);\n\n            // console.log(firstTokenPrice.toString(),tokenPrice.toString(),earning.toString(),days,y,apy);\n          }\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          return { x, y, apy, blocknumber, itemPos };\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        await this.functionsUtil.asyncForEach(protocols,async (p) => {\n\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          let baseProfit = 0;\n          firstTokenPrice = null;\n          let lastRowData = null;\n          let lastTokenPrice = null;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n\n          await this.functionsUtil.asyncForEach(apiResults,async (d) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData && protocolData[rateField]){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              const protocolPaused = this.functionsUtil.BNify(protocolData[rateField]).eq(0);\n              if (!protocolPaused){\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null){\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => {\n                      return d1.blocknumber>=firstProtocolBlock;\n                    });\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                    }\n                  }\n                }\n\n                let rowData = {};\n                let tokenExchangeRate = protocolData.price;\n                let tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n                // Take data from\n                if (protocolInfo && protocolInfo.data && protocolInfo.data[p.address.toLowerCase()] && protocolInfo.data[p.address.toLowerCase()][d.blocknumber]){\n                  tokenExchangeRate = this.functionsUtil.BNify(globalConfigs.stats.protocols[p.name].data[p.address.toLowerCase()][d.blocknumber]);\n                  tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                }/* else if (p.name === 'aave'){\n                  // Token holders (aDAI = 0xc025c03e10f656d3ee76685d53d236824d8ef3da , aUSDC = 0xd2c734fbd8f5d1c809185e014016dd4097e94711)\n                  let aaveTokenBalance = await this.functionsUtil.genericContractCall(p.token,'balanceOf',['0xd2c734fbd8f5d1c809185e014016dd4097e94711'],{},d.blocknumber);\n                  if (aaveTokenBalance){\n                    if (!Object.values(aave_data).length){\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(1,p.decimals);\n                      aave_data[d.blocknumber] = aaveTokenBalance.toString();\n                    } else {\n                      const firstBalance = Object.values(aave_data)[0];\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(this.functionsUtil.BNify(aaveTokenBalance).div(this.functionsUtil.BNify(firstBalance)).toFixed(p.decimals),p.decimals);\n                      aave_data[d.blocknumber] = tokenExchangeRate.toString();\n                    }\n                  }\n                }\n                */\n\n                let y = baseProfit;\n                let apy = 0;\n\n                if (!firstTokenPrice){\n                  firstTokenPrice = tokenPriceFixed;\n                } else {\n                  if (tokenPriceFixed.lt(lastTokenPrice)){\n                    firstTokenPrice = tokenPriceFixed;\n                    const lastYDiff = chartRow.data[chartRow.data.length-1].y-chartRow.data[chartRow.data.length-2].y;\n                    y = lastRowData.y+lastYDiff;\n                    baseProfit = y;\n                  } else {\n                    y += parseFloat(tokenPriceFixed.div(firstTokenPrice).minus(1).times(100));\n                  }\n\n                  const days = (d.timestamp-apiResults[0].timestamp)/86400;\n                  const earning = tokenPriceFixed.div(firstTokenPrice).minus(1).times(100);\n                  apy = earning.times(365).div(days).toFixed(2);\n                }\n\n                y = Math.max(0,y);\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n\n                rowData = {\n                  x,\n                  y,\n                  apy,\n                  itemPos\n                };\n\n                itemIndex++;\n                lastRowData = rowData;\n                chartRow.data.push(rowData);\n                lastTokenPrice = tokenPriceFixed;\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: idleChartData\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              itemWidth: this.props.isMobile ? 70 : 100,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      chartType,\n      chartProps,\n      chartData\n    });\n  }\n\n  render() {\n    return(\n      <GenericChart\n        showLoader={true}\n        {...this.state.chartProps}\n        height={this.props.height}\n        type={this.state.chartType}\n        data={this.state.chartData}\n        width={this.state.chartWidth}\n        isMobile={this.props.isMobile}\n        parentId={this.props.parentId}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default StatsChart;","import { Flex, Text } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass Rebalance extends Component {\n\n  state = {\n    loading:true,\n    processing:{\n      rebalance:{\n        txHash:null,\n        loading:false\n      },\n    },\n    shouldRebalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.checkRebalance();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged || accountChanged){\n      this.checkRebalance();\n    }\n  }\n\n  checkRebalance = async () => {\n    this.setState({\n      loading:true,\n    });\n\n    const shouldRebalance = await this.functionsUtil.checkRebalance(this.props.tokenConfig);\n\n    this.setState({\n      loading:false,\n      shouldRebalance\n    });\n  }\n\n  rebalance = async (e) => {\n    e.preventDefault();\n\n    const callback = (tx,error) => {\n\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Rebalance',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      let txDenied = false;\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      if (tx.status === 'success'){\n        // Toast message\n        window.toastProvider.addMessage(`Rebalance completed`, {\n          secondaryMessage: `Now the pool is balanced!`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"success\",\n        });\n\n      } else if (!txDenied){\n        window.toastProvider.addMessage(`Rebalance error`, {\n          secondaryMessage: `The rebalance has failed, try again...`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"failure\",\n        });\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          rebalance:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n\n      this.checkRebalance();\n    }\n\n    const callback_receipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            rebalance:{\n              ...prevState.processing.rebalance,\n              txHash\n            }\n          }\n        })\n      );\n    };\n\n    this.props.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'rebalance', [], null , callback, callback_receipt);\n\n    this.setState({\n      processing:{\n        rebalance:{\n          txHash:null,\n          loading:true\n        }\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Flex\n        px={3}\n        width={1}\n        minHeight={'100px'}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n      {\n        this.state.loading ? (\n          <FlexLoader\n            flexProps={{\n              flexDirection:'row'\n            }}\n            loaderProps={{\n              size:'30px'\n            }}\n            textProps={{\n              ml:2\n            }}\n            text={'Checking rebalance...'}\n          />\n        ) : (\n          this.state.processing.rebalance.loading ? (\n            <TxProgressBar web3={this.props.web3} waitText={`Rebalance estimated in`} endMessage={`Finalizing rebalance request...`} hash={this.state.processing.rebalance.txHash} />\n          ) : (\n            <Flex\n              width={1}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                mt={0}\n                mb={3}\n                textAlign={'center'}\n              >\n                {this.state.shouldRebalance ? 'Rebalance the entire pool. All users will bless you.' : 'The pool is already balanced.'}\n              </Text>\n              <RoundButton\n                buttonProps={{\n                  width:'auto',\n                  disabled:!this.state.shouldRebalance\n                }}\n                handleClick={e => this.rebalance(e)}\n              >\n                Rebalance\n              </RoundButton>\n            </Flex>\n          )\n        )\n      }\n      </Flex>\n    )\n  }\n}\n\nexport default Rebalance;","import React from \"react\";\nimport {\n  Modal,\n  Button,\n  Flex,\n  Field,\n  Select\n} from \"rimble-ui\";\nimport moment from 'moment';\nimport ModalCard from './ModalCard';\nimport 'react-date-range/dist/styles.css';\nimport { DateRange } from 'react-date-range';\nimport 'react-date-range/dist/theme/default.css';\n\nclass DateRangeModal extends React.Component {\n\n  state = {\n    quickSelection:'',\n    ranges:{\n      startDate: this.props.startDate ? this.props.startDate : new Date(),\n      endDate: this.props.endDate ? this.props.endDate : new Date(),\n      key: 'selection'\n    }\n  }\n\n  handleSelect(ranges){\n    this.setState({\n      quickSelection:'',\n      ranges:ranges.selection\n    });\n  }\n\n  handleQuickSelect(e){\n    let startDate = null;\n    let endDate = moment(new Date());\n    const quickSelection = e.target.value;\n\n    switch (quickSelection){\n      case 'day':\n        startDate = endDate.clone().subtract(1,'day');\n      break;\n      case 'week':\n        startDate = endDate.clone().subtract(1,'week');\n      break;\n      case 'weeks':\n        startDate = endDate.clone().subtract(2,'week');\n      break;\n      case 'month':\n        startDate = endDate.clone().subtract(1,'month');\n      break;\n      default:\n        startDate = null;\n        endDate = null;\n      break;\n    }\n\n    if (startDate && endDate){\n      startDate = startDate._d;\n      endDate = endDate._d;\n\n      const ranges = {\n        startDate,\n        endDate,\n        key:'selection'\n      };\n\n      this.setState({\n        ranges,\n        quickSelection\n      }, () => {\n        this.closeModal();\n      });\n    }\n  }\n\n  componentDidUpdate = (prevProps) => {\n    if (prevProps.startDate !== this.props.startDate || prevProps.endDate !== this.props.endDate){\n      this.setState({\n        ranges:{\n          startDate: this.props.startDate ? this.props.startDate : new Date(),\n          endDate: this.props.endDate ? this.props.endDate : new Date(),\n          key: 'selection'\n        }\n      });\n    }\n  }\n\n  closeModal(){\n    const newState = this.props.handleSelect(this.state.ranges,this.state.quickSelection);\n    const ranges = {\n      startDate:newState.startTimestampObj ? newState.startTimestampObj._d : new Date(),\n      endDate:newState.endTimestampObj ? newState.endTimestampObj._d : new Date(),\n      key: 'selection'\n    };\n    this.setState({\n      ranges\n    });\n    this.props.closeModal();\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          <ModalCard.Header title={'Select Date Range'}>\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex width={1} flexDirection={'column'} alignItems={'center'}>\n              <Field label=\"Quick Date Selection\" style={{display:'flex',width:'100%',alignItems:'stretch',justifyContent:'center'}}>\n                <Select\n                  style={{\n                    color:'#7d888d',\n                    fontSize:'14px',\n                    height:'2.5em',\n                    boxShadow:'none'\n                  }}\n                  width={'100%'}\n                  required={true}\n                  onChange={this.handleQuickSelect.bind(this)}\n                  value={this.state.quickSelection}\n                  options={[\n                    { value: '', label: \"Select an option\" },\n                    { value: \"day\", label: \"Last day\" },\n                    { value: \"week\", label: \"Last week\" },\n                    { value: \"weeks\", label: \"Last 2 weeks\" },\n                    { value: \"month\", label: \"Last month\" }\n                  ]}\n                />\n              </Field>\n              <DateRange\n                ranges={[this.state.ranges]}\n                minDate={this.props.minDate}\n                maxDate={this.props.maxDate}\n                onChange={this.handleSelect.bind(this)}\n              />\n            </Flex>\n          </ModalCard.Body>\n          <ModalCard.Footer>\n            <Flex px={[2,0]} flexDirection={['column', 'row']} width={1} justifyContent={'center'}>\n              <Button\n                borderRadius={4}\n                my={2}\n                mx={[0, 2]}\n                size={this.props.isMobile ? 'small' : 'medium'}\n                onClick={ e => this.closeModal(e) }\n              >\n              APPLY\n              </Button>\n            </Flex>\n          </ModalCard.Footer>\n        </ModalCard>\n      </Modal>\n    );\n  }\n\n}\n\nexport default DateRangeModal;","import { Flex } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass ExecuteTransaction extends Component {\n\n  state = {\n    txStatus:null,\n    processing:{\n      txHash:null,\n      loading:false\n    }\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  execute(){\n\n    const callback = (tx,error) => {\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Transaction',\n        eventLabel: this.props.methodName,\n        eventAction: this.props.contractName\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      const txSucceeded = tx.status === 'success';\n      if (txSucceeded){\n        if (typeof this.props.callback === 'function'){\n          this.props.callback();\n        }\n      }\n\n      this.setState({\n        txStatus:tx.status,\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      });\n    };\n\n    const callbackReceipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        txStatus:'processing',\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    this.functionsUtil.contractMethodSendWrapper(this.props.contractName,this.props.methodName,this.props.params,callback,callbackReceipt);\n\n    this.setState((prevState) => ({\n      txStatus:'loading',\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  render() {\n    const ExecuteComponent = this.props.Component;\n    return (\n      <Flex\n        {...this.props.parentProps}\n      >\n        {\n          this.state.txStatus === 'success' && this.props.children ?\n            this.props.children\n          : this.state.processing && this.state.processing.loading ? (\n            <TxProgressBar\n              web3={this.props.web3}\n              hash={this.state.processing.txHash}\n              waitText={`${this.props.action} estimated in`}\n              cancelTransaction={this.cancelTransaction.bind(this)}\n              endMessage={`Finalizing ${this.props.action} request...`}\n            />\n          ) : (\n            <ExecuteComponent\n              onClick={this.execute.bind(this)}\n              {...this.props.componentProps}\n            >\n              {this.props.componentProps.value}\n            </ExecuteComponent>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default ExecuteTransaction;\n","import moment from 'moment';\nimport Title from '../Title/Title';\nimport StatsChart from './StatsChart';\nimport React, { Component } from 'react';\nimport Rebalance from '../Rebalance/Rebalance';\nimport StatsCard from '../StatsCard/StatsCard';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport GenericSelector from '../GenericSelector/GenericSelector';\nimport RoundIconButton from '../RoundIconButton/RoundIconButton';\nimport VariationNumber from '../VariationNumber/VariationNumber';\nimport AllocationChart from '../AllocationChart/AllocationChart';\nimport DateRangeModal from '../utilities/components/DateRangeModal';\nimport { Flex, Text, Heading, Box, Icon, Button, Link } from 'rimble-ui';\nimport ExecuteTransaction from '../ExecuteTransaction/ExecuteTransaction';\nimport AssetsUnderManagement from '../AssetsUnderManagement/AssetsUnderManagement';\n\nclass Stats extends Component {\n  state = {\n    aum:null,\n    apr:null,\n    days:'-',\n    delta:null,\n    earning:null,\n    minDate:null,\n    maxDate:null,\n    carouselMax:1,\n    rebalances:'-',\n    buttonGroups:[],\n    apiResults:null,\n    carouselIndex:0,\n    idleVersion:null,\n    statsVersions:{},\n    minStartTime:null,\n    endTimestamp:null,\n    showAdvanced:true,\n    govTokensPool:null,\n    unlentBalance:null,\n    quickSelection:null,\n    startTimestamp:null,\n    endTimestampObj:null,\n    shouldRebalance:null,\n    carouselOffsetLeft:0,\n    startTimestampObj:null,\n    showRefreshIdleSpeed:false,\n    apiResults_unfiltered:null,\n    dateRangeModalOpened:false\n  };\n\n  quickSelections = {\n    day:'Last day',\n    week:'Last week',\n    weeks:'Last 2 weeks',\n    month:'Last month'\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount() {\n    this.loadUtils();\n    await this.loadParams();\n  }\n\n  componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  showRefreshIdleSpeed(){\n    this.setState({\n      showRefreshIdleSpeed:true\n    });\n  }\n\n  getLatestAvailableVersion(){\n    const statsVersions = globalConfigs.stats.versions;\n    let latestVersion = null;\n    Object.keys(statsVersions).forEach( version => {\n      const versionInfo = statsVersions[version];\n      if (versionInfo.enabledStrategies.includes(this.props.selectedStrategy)){\n        latestVersion = version;\n      }\n    });\n\n    return latestVersion;\n  }\n\n  getVersionInfo(version){\n    if (!version){\n      version = this.state.idleVersion;\n    }\n\n    if (!globalConfigs.stats.versions[version]){\n      return null;\n    }\n\n    const versionInfo = Object.assign({},globalConfigs.stats.versions[version]);\n\n    if (versionInfo.strategiesParams && versionInfo.strategiesParams[this.props.selectedStrategy]){\n      const versionInfoExtra = versionInfo.strategiesParams[this.props.selectedStrategy];\n      Object.keys(versionInfoExtra).forEach( param => {\n        versionInfo[param] = versionInfoExtra[param];\n      });\n    }\n\n    return versionInfo;\n  }\n\n  async loadParams() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    const newState = {};\n    const { match: { params } } = this.props;\n\n    const currentNetworkAvailableTokens = Object.keys(this.props.availableTokens);\n\n    if (!!params.customToken && currentNetworkAvailableTokens.indexOf(params.customToken.toUpperCase()) !== -1 ){\n      newState.selectedToken = params.customToken.toUpperCase();\n    } else {\n      newState.selectedToken = this.props.selectedToken.toUpperCase();\n    }\n\n    newState.tokenConfig = this.props.availableTokens[newState.selectedToken];\n    newState.minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp,'YYYY-MM-DD');\n    newState.maxEndDate = moment();\n\n    newState.endTimestampObj = moment(moment().format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    newState.latestVersion = this.getLatestAvailableVersion();\n    newState.idleVersion = this.state.idleVersion === null ? newState.latestVersion : this.state.idleVersion;\n\n    const versionInfo = this.getVersionInfo(newState.idleVersion);\n\n    // console.log('loadParams',newState.latestVersion,newState.idleVersion,versionInfo);\n\n    if (newState.idleVersion && versionInfo.endTimestamp){\n      const newEndTimestampObj = moment(moment(versionInfo.endTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.endTimestampObj.isAfter(newEndTimestampObj)){\n        newState.endTimestampObj = newEndTimestampObj;\n        newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n      }\n\n      if (!newState.maxEndDate || newState.maxEndDate.isAfter(newEndTimestampObj)){\n        newState.maxEndDate = newEndTimestampObj;\n      }\n    }\n\n    newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n\n    // Set start date\n    newState.startTimestampObj = newState.endTimestampObj.clone().subtract(1,'month');\n    newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n\n    if (newState.idleVersion && versionInfo.startTimestamp){\n      const newStartTimestampObj = moment(moment(versionInfo.startTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.startTimestampObj.isBefore(newStartTimestampObj)){\n        newState.startTimestampObj = newStartTimestampObj;\n        newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n      }\n\n      if (newState.minStartTime.isBefore(newStartTimestampObj)){\n        newState.minStartTime = newStartTimestampObj;\n      }\n    }\n\n    newState.minDate = newState.minStartTime._d;\n    newState.maxDate = newState.maxEndDate._d;\n\n    if (newState !== this.state){\n      await this.setStateSafe(newState);\n    }\n  }\n\n  setDateRange = (ranges,quickSelection=null) => {\n\n    const minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp);\n\n    let startTimestampObj = moment(ranges.startDate).isSameOrAfter(minStartTime) ? moment(ranges.startDate) : minStartTime;\n    let endTimestampObj = moment(ranges.endDate);\n\n    if (startTimestampObj.isSame(endTimestampObj)){\n      endTimestampObj.add(1,'day');\n    }\n\n    endTimestampObj = moment(endTimestampObj.format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    if (startTimestampObj.isBefore(this.state.minStartTime)){\n      startTimestampObj = this.state.minStartTime;\n    }\n\n    if (endTimestampObj.isAfter(this.state.maxEndDate)){\n      endTimestampObj = this.state.maxEndDate;\n    }\n\n    const startTimestamp = parseInt(startTimestampObj._d.getTime()/1000);\n    const endTimestamp = parseInt(endTimestampObj._d.getTime()/1000);\n\n    const newState = {\n      minStartTime,\n      endTimestamp,\n      quickSelection,\n      startTimestamp,\n      endTimestampObj,\n      startTimestampObj\n    };\n\n    this.setStateSafe(newState);\n\n    return newState;\n  }\n\n  toggleAdvancedCharts = (e) => {\n    e.preventDefault();\n    this.setStateSafe({\n      showAdvanced:!this.state.showAdvanced\n    });\n  }\n\n  setDateRangeModal = (dateRangeModalOpened) => {\n    if (dateRangeModalOpened !== this.state.dateRangeModalOpened){\n      this.setStateSafe({\n        dateRangeModalOpened\n      });\n    }\n  }\n\n  async componentDidMount() {\n\n    if (!this.props.web3){\n      this.props.initWeb3();\n      return false;\n    }\n\n    const style = document.createElement('style');\n    style.id = 'crisp-custom-style';\n    style.type = 'text/css';\n    style.innerHTML = `\n    .crisp-client{\n      display:none !important;\n    }`;\n    document.body.appendChild(style);\n\n    this.loadUtils();\n    await this.loadParams();\n    this.loadApiData();\n    this.loadCarousel();\n  }\n\n  loadCarousel(){\n    const carouselMax = this.props.isMobile ? 3 : 2;\n    this.setStateSafe({\n      carouselMax\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const strategyChanged = prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    const dateChanged = prevState.startTimestamp !== this.state.startTimestamp || prevState.endTimestamp !== this.state.endTimestamp;\n    const versionChanged = prevState.idleVersion !== this.state.idleVersion;\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n\n    if (mobileChanged){\n      this.loadCarousel();\n    }\n\n    if (contractsInitialized || tokenChanged || strategyChanged || versionChanged){\n      // console.log('componentDidUpdate',this.props.selectedStrategy,this.props.selectedToken);\n      await this.componentDidMount();\n    } else if (dateChanged){\n      this.loadApiData();\n    }\n  }\n\n  filterTokenData = (apiResults) => {\n    return apiResults.filter((r,i) => {\n      return (!this.state.startTimestamp || r.timestamp >= this.state.startTimestamp) && (!this.state.endTimestamp || r.timestamp <= this.state.endTimestamp);\n    });\n  }\n\n  setIdleVersion = idleVersion => {\n    this.setStateSafe({\n      idleVersion\n    });\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    // Get COMP APR\n    // const compAPR = await this.functionsUtil.getCompAPR(this.props.tokenConfig);\n    // console.log('compAPR',compAPR.toString());\n\n    const startTimestamp = this.state.minDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.minDate).format('DD/MM/YYYY 00:00:00'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n    const endTimestamp = this.state.maxDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.maxDate).format('DD/MM/YYYY 23:59:59'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n\n    const isRisk = ['v3','v4'].includes(this.state.idleVersion) && this.props.selectedStrategy === 'risk';\n    let apiResults_unfiltered = await this.functionsUtil.getTokenApiData(this.props.tokenConfig.address,isRisk,startTimestamp,endTimestamp,true,7200);\n\n    const apiResults = this.filterTokenData(apiResults_unfiltered);\n\n    // console.log('loadApiData',startTimestamp,endTimestamp,new Date(startTimestamp*1000),new Date(endTimestamp*1000),apiResults,apiResults_unfiltered);\n\n    if (!apiResults || !apiResults_unfiltered || !apiResults.length || !apiResults_unfiltered.length){\n      return false;\n    }\n\n    const firstResult = apiResults[0];\n    const lastResult = Object.values(apiResults).pop();\n\n    window.moment = moment;\n\n    let days = (lastResult.timestamp-firstResult.timestamp)/86400;\n    if (days === 0){\n      days = 1;\n    }\n\n    let apr = null;\n    let delta = 'N/A';\n\n    const idleTokens = this.functionsUtil.fixTokenDecimals(lastResult.idleSupply,18);\n    const firstIdlePrice = this.functionsUtil.fixTokenDecimals(firstResult.idlePrice,this.props.tokenConfig.decimals);\n    const lastIdlePrice = this.functionsUtil.fixTokenDecimals(lastResult.idlePrice,this.props.tokenConfig.decimals);\n\n    // Calculate AUM\n    let aum = idleTokens.times(lastIdlePrice);\n    // Convert Token balance\n    aum = await this.functionsUtil.convertTokenBalance(aum,this.props.selectedToken,this.props.tokenConfig,isRisk);\n\n    const compoundInfo = this.props.tokenConfig.protocols.filter((p) => { return p.name === 'compound' })[0];\n    const firstCompoundData = compoundInfo ? firstResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n    const lastCompoundData = compoundInfo ? lastResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n\n    if (this.state.idleVersion === 'v4') {\n\n      apr = apiResults.reduce( (sum,r) => {\n        const idleRate = this.functionsUtil.fixTokenDecimals(r.idleRate,18);\n        return this.functionsUtil.BNify(sum).plus(idleRate);\n      },0);\n\n      // Calculate average\n      apr = apr.div(apiResults.length);\n\n      if (compoundInfo){\n        const compoundWithCOMPInfo = globalConfigs.stats.protocols.compoundWithCOMP;\n        const rateField = compoundWithCOMPInfo.rateField ? compoundWithCOMPInfo.rateField : 'rate';\n\n        let compoundAvgApr = apiResults.reduce( (sum,r) => {\n\n          const compoundData = r.protocolsData.find((pData,x) => {\n            return pData.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase()\n          });\n\n          let compoundRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n            if (compoundData[field]){\n              return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(compoundData[field]));\n            }\n            return this.functionsUtil.BNify(acc);\n          },0) : this.functionsUtil.BNify(compoundData[rateField]);\n\n          compoundRate = this.functionsUtil.fixTokenDecimals(compoundRate,18);\n\n          return this.functionsUtil.BNify(sum).plus(compoundRate);\n        },0);\n\n        // Calculate average\n        compoundAvgApr = compoundAvgApr.div(apiResults.length);\n\n        // compoundAvgApr = this.functionsUtil.apr2apy(compoundAvgApr.div(100)).times(100);\n        // apr = this.functionsUtil.apr2apy(apr.div(100)).times(100);\n\n        delta = apr.minus(compoundAvgApr);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n\n      apr = apr.toFixed(2);\n\n    } else {\n      const earning = lastIdlePrice.div(firstIdlePrice).minus(1).times(100);\n      apr = earning.times(365).div(days).toFixed(2);\n      if (firstCompoundData && lastCompoundData){\n        const firstCompoundPrice = this.functionsUtil.fixTokenDecimals(firstCompoundData.price,this.props.tokenConfig.decimals);\n        const lastCompoundPrice = this.functionsUtil.fixTokenDecimals(lastCompoundData.price,this.props.tokenConfig.decimals);\n        const compoundApr = lastCompoundPrice.div(firstCompoundPrice).minus(1).times(100);\n        delta = earning.minus(compoundApr).times(365).div(days);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n    }\n\n    // Count rebalances\n    let rebalances = 0;\n    apiResults.forEach((row,index) => {\n      if (index){\n        const prevRow = apiResults[index-1];\n\n        const totalAllocation = row.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        const prevTotalAllocation = prevRow.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        let hasRebalanced = false;\n        row.protocolsData.forEach( p => {\n          if (hasRebalanced){\n            return;\n          }\n          const prevP = prevRow.protocolsData.find( prevP => (prevP.protocolAddr.toLowerCase() === p.protocolAddr.toLowerCase()) );\n          const allocation = this.functionsUtil.fixTokenDecimals(p.allocation,this.props.tokenConfig.decimals);\n          const prevAllocation = this.functionsUtil.fixTokenDecimals(prevP.allocation,this.props.tokenConfig.decimals);\n          const allocationPerc = parseInt(parseFloat(allocation.div(totalAllocation).times(100)));\n          const prevAllocationPerc = parseInt(parseFloat(prevAllocation.div(prevTotalAllocation).times(100)));\n          if (allocationPerc!==prevAllocationPerc){\n            rebalances++;\n            hasRebalanced = true;\n          }\n        });\n      }\n    });\n\n    // Add gov tokens balance to AUM\n    const govTokensPool = await this.functionsUtil.getGovTokenPool(null,null,'DAI');\n    if (govTokensPool){\n      aum = aum.plus(govTokensPool);\n    }\n\n    // Format AUM\n    aum = this.functionsUtil.formatMoney(parseFloat(aum));\n\n    let unlentBalance = await this.functionsUtil.getUnlentBalance(this.props.tokenConfig);\n    if (unlentBalance){\n      unlentBalance = this.functionsUtil.formatMoney(parseFloat(unlentBalance));\n    }\n\n    this.setStateSafe({\n      aum,\n      apr,\n      days,\n      delta,\n      apiResults,\n      rebalances,\n      govTokensPool,\n      unlentBalance,\n      apiResults_unfiltered\n    });\n  }\n\n  selectToken = async (strategy,token) => {\n    await this.props.setStrategyToken(strategy,token);\n    this.props.changeToken(token);\n  }\n\n  handleCarousel = action => {\n    let carouselIndex = this.state.carouselIndex;\n    if (action==='next' && carouselIndex<this.state.carouselMax){\n      carouselIndex++;\n    } else if (action==='back' && carouselIndex>0){\n      carouselIndex--;\n    }\n\n    const $element = window.jQuery(`#carousel-cursor > div:eq(${carouselIndex})`);\n    const carouselOffsetLeft = -parseFloat($element.position().left)+'px';\n\n    this.setStateSafe({\n      carouselIndex,\n      carouselOffsetLeft\n    });\n  }\n\n  render() {\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const apyLong = this.functionsUtil.getGlobalConfig(['messages','apyLong']);\n\n    if (!this.props.availableStrategies){\n      return (\n        <FlexLoader\n          textProps={{\n            textSize:4,\n            fontWeight:2\n          }}\n          loaderProps={{\n            mb:3,\n            size:'40px'\n          }}\n          flexProps={{\n            minHeight:'50vh',\n            flexDirection:'column'\n          }}\n          text={'Loading assets...'}\n        />\n      );\n    }\n\n    if (!this.props.selectedToken){\n      const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n      const enabledTokens = [];\n      const statsTokens = this.functionsUtil.getGlobalConfig(['stats','tokens']);\n      const statsProtocols = this.functionsUtil.getGlobalConfig(['stats','protocols']);\n      Object.keys(statsTokens).forEach(token => {\n        const tokenInfo = statsTokens[token];\n        if (tokenInfo.enabled){\n          enabledTokens.push(token);\n        }\n      });\n      return (\n        <Flex\n          mb={3}\n          width={1}\n          flexDirection={'column'}\n        >\n          <AssetsUnderManagement\n            {...this.props}\n          />\n          {\n            Object.keys(strategies).map(strategy => {\n              const strategyInfo = strategies[strategy];\n              const availableTokens = this.props.availableStrategies[strategy];\n              if (!availableTokens){\n                return false;\n              }\n              return (\n                <Box\n                  mb={2}\n                  width={1}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                  key={`strategy-container-${strategy}`}\n                >\n                  <Title\n                    mt={3}\n                    mb={[3,4]}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'baseline'}\n                      justifyContent={'center'}\n                    >\n                      {strategyInfo.title}\n                      {\n                        strategyInfo.titlePostfix &&\n                          <Text\n                            ml={2}\n                            fontWeight={3}\n                            fontSize={[2,4]}\n                            color={'dark-gray'}\n                          >\n                            {strategyInfo.titlePostfix}\n                          </Text>\n                      }\n                    </Flex>\n                  </Title>\n                  <AssetsList\n                    enabledTokens={enabledTokens}\n                    handleClick={(props) => this.selectToken(strategy,props.token)}\n                    cols={[\n                      {\n                        title:'CURRENCY',\n                        props:{\n                          width:[0.26,0.15]\n                        },\n                        fields:[\n                          {\n                            name:'icon',\n                            props:{\n                              mr:2,\n                              height:['1.4em','2.3em']\n                            }\n                          },\n                          {\n                            name:'tokenName'\n                          }\n                        ]\n                      },\n                      {\n                        title:'POOL',\n                        props:{\n                          width:[0.22,0.14],\n                        },\n                        fields:[\n                          {\n                            name:'allocationChart',\n                            mobile:false,\n                            parentProps:{\n                              width:0.3\n                            },\n                            style:{\n                              overflow:'visible'\n                            },\n                            showLoader:false,\n                          },\n                          {\n                            name:'pool',\n                            props:{\n                              ml:1\n                            },\n                            parentProps:{\n                              width:[1,0.7]\n                            }\n                          }\n                        ]\n                      },\n                      {\n                        title:'APY',\n                        desc:apyLong,\n                        props:{\n                          width: [0.29,0.14],\n                        },\n                        parentProps:{\n                          flexDirection:'column',\n                          alignItems:'flex-start',\n                        },\n                        fields:[\n                          {\n                            name:'apy',\n                            showTooltip:true\n                          },\n                          {\n                            name:'idleDistribution',\n                            showLoader:false,\n                            props:{\n                              decimals:this.props.isMobile ? 1 : 2,\n                              fontSize:this.props.isMobile ? '9px' : 0\n                            }\n                          },\n                        ]\n                      },\n                      {\n                        title:'RISK SCORE',\n                        desc:this.functionsUtil.getGlobalConfig(['messages','riskScore']),\n                        mobile:false,\n                        props:{\n                          width:[0.27,0.16],\n                        },\n                        fields:[\n                          {\n                            name:'score'\n                          }\n                        ]\n                      },\n                      {\n                        title:'APR LAST WEEK',\n                        mobile:false,\n                        props:{\n                          width: 0.25,\n                        },\n                        parentProps:{\n                          width:1,\n                          pr:[2,4]\n                        },\n                        fields:[\n                          {\n                            name:'aprChart',\n                          }\n                        ]\n                      },\n                      {\n                        title:'',\n                        props:{\n                          width:[0.23,0.16],\n                        },\n                        parentProps:{\n                          width:1\n                        },\n                        fields:[\n                          {\n                            name:'button',\n                            label:this.props.isMobile ? 'View' : 'View stats',\n                            props:{\n                              width:1,\n                              fontSize:3,\n                              fontWeight:3,\n                              height:'45px',\n                              borderRadius:4,\n                              boxShadow:null,\n                              mainColor:'redeem',\n                              size: this.props.isMobile ? 'small' : 'medium',\n                              handleClick:(props) => this.selectToken(strategy,props.token)\n                            }\n                          }\n                        ]\n                      }\n                    ]}\n                    {...this.props}\n                    selectedStrategy={strategy}\n                    availableTokens={availableTokens}\n                  />\n                  {\n                    !this.props.isMobile &&\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'flex-end'}\n                      >\n                        {\n                          Object.values(statsProtocols).filter( p => (p.legend) ).map( (p,index) => (\n                            <Flex\n                              mr={3}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              key={`legend_${index}`}\n                            >\n                              <Box\n                                mr={1}\n                                width={'10px'}\n                                height={'10px'}\n                                borderRadius={'50%'}\n                                backgroundColor={`rgb(${p.color.rgb.join(',')})`}\n                              >\n                              </Box>\n                              <Text.span\n                                fontSize={1}\n                                color={'cellText'}\n                              >\n                                {p.label}\n                              </Text.span>\n                            </Flex>\n                          ))\n                        }\n                      </Flex>\n                  }\n                </Box>\n              );\n            })\n          }\n          {\n            idleTokenEnabled && !this.state.showRefreshIdleSpeed ? (\n              <Flex\n                width={1}\n                my={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <Link\n                  hoverColor={'primary'}\n                  onClick={this.showRefreshIdleSpeed.bind(this)}\n                >\n                  Refresh Idle Speed\n                </Link>\n              </Flex>\n            ) : idleTokenEnabled && this.state.showRefreshIdleSpeed &&\n              <Flex\n                p={2}\n                width={1}\n                my={[2,3]}\n                borderRadius={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n                backgroundColor={'#f3f6ff'}\n                boxShadow={'0px 0px 0px 1px rgba(0,54,255,0.3)'}\n              >\n                <Text\n                  fontWeight={500}\n                  color={'#3f4e9a'}\n                  textAlign={'center'}\n                  fontSize={[1,'15px']}\n                >\n                  By executing this transaction you can adjust the IDLE distribution speed among the pools.\n                </Text>\n                <ExecuteTransaction\n                  action={'Refresh'}\n                  Component={Button}\n                  parentProps={{\n                    mt:1\n                  }}\n                  componentProps={{\n                    size:'small',\n                    value:'REFRESH IDLE SPEED'\n                  }}\n                  params={[]}\n                  contractName={'IdleController'}\n                  methodName={'refreshIdleSpeeds'}\n                  {...this.props}\n                >\n                  <Flex\n                    flexDirection={'row'}\n                    alignItems={'center'}\n                    justifyContent={'center'}\n                  >\n                    <Icon\n                      mr={1}\n                      name={'Done'}\n                      size={'1.4em'}\n                      color={this.props.theme.colors.transactions.status.completed}\n                    />\n                    <Text\n                      fontWeight={500}\n                      fontSize={'15px'}\n                      color={'copyColor'}\n                      textAlign={'center'}\n                    >\n                      Idle Speed Refreshed\n                    </Text>\n                  </Flex>\n                </ExecuteTransaction>\n              </Flex>\n          }\n        </Flex>\n      );\n    } else {\n      const versionsOptions = Object.keys(globalConfigs.stats.versions).filter( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return versionInfo.enabledTokens.includes(this.props.selectedToken) && versionInfo.enabledStrategies.includes(this.props.selectedStrategy);\n      }).map( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return {\n          value:version,\n          label:versionInfo.label\n        }\n      });\n\n      const versionInfo = this.getVersionInfo(this.state.idleVersion);\n\n      let performanceTooltip = null;\n      if (this.state.idleVersion && versionInfo){\n        const showPerformanceTooltip = this.functionsUtil.getGlobalConfig(['stats','versions',this.state.idleVersion,'showPerformanceTooltip']);\n        performanceTooltip = showPerformanceTooltip ? this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'performanceTooltip']) : null;\n      }\n\n      const versionDefaultValue = versionsOptions.find( v => (v.value === this.state.idleVersion) );\n\n      return (\n        <Flex\n          p={0}\n          width={1}\n          flexDirection={'column'}\n        >\n          {\n          /*\n          }\n          <Flex position={['absolute','relative']} left={0} px={[3,0]} zIndex={10} width={1} flexDirection={'row'} mb={[0,3]}>\n            <Flex alignItems={'center'} width={[2/3,1/2]}>\n              <RouterLink to=\"/\">\n                <Image src=\"images/logo-gradient.svg\"\n                  height={['35px','48px']}\n                  position={'relative'} />\n              </RouterLink>\n              <Heading.h3 color={'dark-gray'} textAlign={'left'} fontWeight={3} lineHeight={'initial'} fontSize={[4,5]} ml={[1,2]}>\n                <Text.span fontSize={'80%'}>|</Text.span> Stats\n              </Heading.h3>\n            </Flex>\n            <Flex flexDirection={'row'} width={[1/3,1/2]} justifyContent={'flex-end'} alignItems={'center'}>\n              {\n                this.state.buttonGroups && \n                  this.props.isMobile ? (\n                    <ButtonGroup\n                      isMobile={this.props.isMobile}\n                      components={ this.state.buttonGroups.reduce((components,array) => components.concat(array),[]) }\n                      theme={'light'}\n                    />\n                  ) :\n                  this.state.buttonGroups.map((buttonGroup,i) => (\n                    <ButtonGroup\n                      key={`buttonGroup_${i}`}\n                      isMobile={this.props.isMobile}\n                      components={buttonGroup}\n                      theme={'light'}\n                    />\n                  ))\n              }\n            </Flex>\n          </Flex>\n          */\n          }\n          <Box\n            mb={[3,4]}\n          >\n            <Flex\n              flexDirection={['column','row']}\n            >\n              <Flex\n                width={[1,0.4]}\n              >\n                <Breadcrumb\n                  {...this.props}\n                  showPathMobile={true}\n                  text={'ASSETS OVERVIEW'}\n                  isMobile={this.props.isMobile}\n                  handleClick={ e => this.props.goToSection('stats') }\n                  path={[this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])]}\n                />\n              </Flex>\n              <Flex\n                mt={[3,0]}\n                width={[1,0.6]}\n                flexDirection={['column','row']}\n                justifyContent={['center','space-between']}\n              >\n                <Flex\n                  width={[1,0.26]}\n                  flexDirection={'column'}\n                >\n                  <GenericSelector\n                    innerProps={{\n                      p:1,\n                      height:['100%','46px'],\n                    }}\n                    name={'idle-version'}\n                    options={versionsOptions}\n                    defaultValue={versionDefaultValue}\n                    onChange={ v => this.setIdleVersion(v) }\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.3]}\n                  flexDirection={'column'}\n                >\n                  <AssetSelector\n                    innerProps={{\n                      p:1\n                    }}\n                    {...this.props}\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.39]}\n                  flexDirection={'column'}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:1,\n                      display:'flex',\n                      alignItems:'center',\n                      height:['46px','100%'],\n                      justifyContent:'center'\n                    }}\n                    isInteractive={true}\n                    handleClick={ e => this.setDateRangeModal(true) }\n                  >\n                    <Text\n                      fontWeight={3}\n                      color={'copyColor'}\n                    >\n                    {\n                      this.state.quickSelection\n                      ?\n                        this.quickSelections[this.state.quickSelection]\n                      : this.state.startTimestampObj && this.state.endTimestampObj &&\n                        `${this.state.startTimestampObj.format('DD/MM/YY')} - ${this.state.endTimestampObj.format('DD/MM/YY')}`\n                    }\n                    </Text>\n                  </DashboardCard>\n                </Flex>\n              </Flex>\n            </Flex>\n          </Box>\n\n          {\n            this.state.idleVersion && (versionInfo.startTimestamp>parseInt(new Date().getTime()/1000)) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Idle Stats {this.state.idleVersion} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : (\n              <Box\n                width={1}\n              >\n                <Box\n                  mt={[3,0]}\n                  mb={[3,4]}\n                >\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    justifyContent={'center'}\n                    flexDirection={['column','row']}\n                  >\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        value={this.state.aum}\n                        title={'Asset Under Management'}\n                        label={ this.state.unlentBalance ? `Unlent funds: ${this.state.unlentBalance} ${this.props.selectedToken}` : this.props.selectedToken }\n                        labelTooltip={ this.state.unlentBalance ? this.functionsUtil.getGlobalConfig(['messages','cheapRedeem']) : null}\n                      />\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Avg APY'}\n                        label={'Annualized'}\n                      >\n                        <Flex\n                          width={1}\n                          alignItems={'center'}\n                          flexDirection={['column','row']}\n                        >\n                          <VariationNumber\n                            direction={'up'}\n                            iconPos={'right'}\n                            iconSize={'1.8em'}\n                            justifyContent={'flex-start'}\n                            width={1}\n                            >\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                              fontSize={[4,5]}\n                            >\n                              {this.state.apr}\n                              <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                            </Text>\n                          </VariationNumber>\n                        </Flex>\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Overperformance on Compound'}\n                        label={'Annualized'}\n                      >\n                        {\n                          this.state.delta && !isNaN(this.state.delta) ? (\n                            <VariationNumber\n                              direction={'up'}\n                              iconPos={'right'}\n                              iconSize={'1.8em'}\n                              justifyContent={'flex-start'}\n                              >\n                              <Text\n                                lineHeight={1}\n                                fontSize={[4,5]}\n                                fontWeight={[3,4]}\n                                color={'statValue'}\n                              >\n                                {this.state.delta}\n                                <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                              </Text>\n                            </VariationNumber>\n                          ) : (\n                            <Text\n                              lineHeight={1}\n                              fontSize={[4,5]}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                            >\n                              {this.state.delta}\n                            </Text>\n                          )\n                        }\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        label={' '}\n                        title={'Rebalances'}\n                        value={this.state.rebalances.toString()}\n                      />\n                    </Flex>\n                    {\n                    /*\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Current APR</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.currApr}\n                            <Text.span color={'copyColor'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Days Live</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.days}\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    */\n                    }\n                  </Flex>\n                </Box>\n\n                <DashboardCard\n                  title={'Historical Performance'}\n                  description={performanceTooltip}\n                  cardProps={{\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex id='chart-PRICE' width={1} mb={3}>\n                    <StatsChart\n                      height={ 350 }\n                      {...this.state}\n                      parentId={'chart-PRICE'}\n                      isMobile={this.props.isMobile}\n                      contracts={this.props.contracts}\n                      apiResults={this.state.apiResults}\n                      idleVersion={this.state.idleVersion}\n                      apiResults_unfiltered={this.state.apiResults_unfiltered}\n                      chartMode={this.state.idleVersion === this.state.latestVersion ? 'PRICE_V4' : 'PRICE'}\n                    />\n                  </Flex>\n                </DashboardCard>\n\n                <DashboardCard\n                  cardProps={{\n                    pb:3,\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex\n                    flexDirection={['column','row']}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      this.state.idleVersion === this.state.latestVersion && \n                      <Flex\n                        pt={2}\n                        width={[1,1/3]}\n                        id={'allocation-chart'}\n                        flexDirection={'column'}\n                        alignItems={'flex-start'}\n                        justifyContent={'flex-start'}\n                      >\n                        <AllocationChart\n                          height={310}\n                          {...this.props}\n                          parentId={'allocation-chart'}\n                        />\n                        <Rebalance\n                          {...this.props}\n                        />\n                      </Flex>\n                    }\n                    <Flex\n                      mb={[0,3]}\n                      id={'chart-ALL'}\n                      pl={[0,this.state.idleVersion === this.state.latestVersion ? 0 : 3]}\n                      width={[1, this.state.idleVersion === this.state.latestVersion ? 2/3 : 1]}\n                    >\n                      <Flex alignItems={'flex-start'} justifyContent={'flex-start'} flexDirection={'column'} width={1}>\n                        <Heading.h4\n                          mb={2}\n                          ml={3}\n                          mt={[3,4]}\n                          fontWeight={4}\n                          fontSize={[2,3]}\n                          textAlign={'left'}\n                          color={'dark-gray'}\n                          lineHeight={'initial'}\n                        >\n                          Allocations over time\n                        </Heading.h4>\n                        <StatsChart\n                          height={350}\n                          {...this.state}\n                          chartMode={'ALL'}\n                          parentId={'chart-ALL'}\n                          isMobile={this.props.isMobile}\n                          contracts={this.props.contracts}\n                          apiResults={this.state.apiResults}\n                          idleVersion={this.state.idleVersion}\n                          apiResults_unfiltered={this.state.apiResults_unfiltered}\n                        />\n                      </Flex>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n\n                <Flex\n                  position={'relative'}\n                >\n                  <Flex\n                    width={1}\n                    id={'carousel-container'}\n                    justifyContent={'flex-end'}\n                  >\n                    <RoundIconButton\n                      buttonProps={{\n                        mr:3\n                      }}\n                      iconName={'ArrowBack'}\n                      disabled={this.state.carouselIndex === 0}\n                      handleClick={ e => this.handleCarousel('back') }\n                    />\n                    <RoundIconButton\n                      iconName={'ArrowForward'}\n                      handleClick={ e => this.handleCarousel('next') }\n                      disabled={this.state.carouselIndex === this.state.carouselMax}\n                    />\n                  </Flex>\n                  <Flex\n                    mt={5}\n                    height={'400px'}\n                    position={'absolute'}\n                    id={'carousel-cursor'}\n                    width={['444%','200%']}\n                    justifyContent={'flex-start'}\n                    left={this.state.carouselOffsetLeft}\n                    style={{\n                      transition:'left 0.3s ease-in-out'\n                    }}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        id='chart-AUM'\n                      >\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            ml={3}\n                            mt={3}\n                            mb={2}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Asset Under Management\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'AUM'}\n                            parentId={'chart-AUM'}\n                            isMobile={this.props.isMobile}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-APR' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            APRs\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'APR'}\n                            parentId={'chart-APR'}\n                            isMobile={this.props.isMobile}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                      title={'Risk Score'}\n                      description={'Idle Risk Score is a weighted average of the underlying protocols risks assessed by DeFi Score'}\n                      titleParentProps={{\n                        ml:16,\n                        mt:16\n                      }}\n                    >\n                      <Flex id='chart-SCORE' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'SCORE'}\n                            parentId={'chart-SCORE'}\n                            isMobile={this.props.isMobile}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-VOL' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Volume\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'VOL'}\n                            parentId={'chart-VOL'}\n                            isMobile={this.props.isMobile}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                </Flex>\n              </Box>\n            )\n          }\n\n          <DateRangeModal\n            minDate={this.state.minDate}\n            maxDate={this.state.maxDate}\n            handleSelect={this.setDateRange}\n            isOpen={this.state.dateRangeModalOpened}\n            closeModal={e => this.setDateRangeModal(false)}\n            startDate={this.state.startTimestampObj ? this.state.startTimestampObj._d : null}\n            endDate={this.state.endTimestampObj ? this.state.endTimestampObj._d : null}\n          />\n        </Flex>\n      );\n    }\n  }\n}\n\nexport default Stats;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport { Flex, Icon, Text, Box, Image } from \"rimble-ui\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass Utils extends Component {\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    const SubComponent = this.props.selectedSubsection && this.props.selectedSubsection.subComponent ? this.props.selectedSubsection.subComponent : null;\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.props.selectedSubsection ? (\n            <Box\n              width={1}\n            >\n              <Flex\n                width={1}\n              >\n                <Breadcrumb\n                  {...this.props}\n                  showPathMobile={true}\n                  isMobile={this.props.isMobile}\n                  path={[this.props.selectedSubsection.label]}\n                  text={this.props.selectedSection.label.toUpperCase()}\n                  handleClick={ e => this.props.goToSection(this.props.selectedSection.route) }\n                />\n              </Flex>\n              <Flex\n                my={[2,3]}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <Title\n                  mb={2}\n                >\n                  {this.props.selectedSubsection.label}\n                </Title>\n                <Text\n                  textAlign={'center'}\n                >\n                  {this.props.selectedSubsection.desc}\n                </Text>\n              </Flex>\n              <SubComponent\n                {...this.props}\n                {...this.props.selectedSubsection.directProps}\n                toolProps={this.props.selectedSubsection.props}\n              />\n            </Box>\n          ) : (\n            <Flex\n              my={[2,3]}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Title\n                mb={3}\n              >\n                Tools\n              </Title>\n              <Flex\n                width={1}\n                style={{\n                  flexWrap:'wrap'\n                }}\n              >\n              {\n                this.props.selectedSection.submenu.map( (tool,toolIndex) => (\n                  <DashboardCard\n                    isInteractive={true}\n                    key={`tool_${toolIndex}`}\n                    cardProps={{\n                      p:[3,4],\n                      mb:[3,3],\n                      mr:[0,'2%'],\n                      style:{\n                        flex: this.props.isMobile ? '1 1 100%' : '0 0 31%'\n                      },\n                      alignItems:'center',\n                      flexDirection:'column',\n                      justifyContent:'center'\n                    }}\n                    handleClick={ e => this.props.goToSection(this.props.selectedSection.route+'/'+tool.route) }\n                  >\n                    <Text\n                      fontSize={[3,4]}\n                      textAlign={'center'}\n                    >\n                      {tool.label}\n                    </Text>\n                    <Flex\n                      justifyContent={'center'}\n                    >\n                      {\n                        tool.image ? (\n                          <Image\n                            my={[0,2]}\n                            height={'2.2em'}\n                            src={tool.image}\n                          />\n                        ) : tool.icon && (\n                          <Icon\n                            my={[0,2]}\n                            size={'3em'}\n                            name={tool.icon}\n                          />\n                        )\n                      }\n                    </Flex>\n                    <Text\n                      fontSize={[2,2]}\n                      textAlign={'center'}\n                    >\n                      {tool.desc}\n                    </Text>\n                  </DashboardCard>\n                ) )\n              }\n              </Flex>\n            </Flex>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default Utils;\n","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Flex, Heading, Text } from \"rimble-ui\";\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport PortfolioEquity from '../PortfolioEquity/PortfolioEquity';\n\nclass FundsOverview extends Component {\n\n  state = {\n    govTokensAprs:null,\n    aggregatedValues:[],\n    govTokensTotalApr:null,\n    govTokensUserBalance:null,\n    govTokensDistribution:null,\n    govTokensTotalBalance:null,\n    govTokensTotalAprTooltip:null,\n    idleTokenUserDistribution:null,\n    govTokensDistributionTooltip:null,\n    govTokensTotalBalanceTooltip:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  idleGovToken = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    this.idleGovToken = this.functionsUtil.getIdleGovToken();\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const [\n      govTokensAprs,\n      idleTokenUserDistribution,\n      govTokensUserBalance,\n      avgAPY,\n      days\n    ] = await Promise.all([\n      this.functionsUtil.getGovTokensAprs(this.props.selectedToken,this.props.tokenConfig),\n      this.idleGovToken.getUserDistribution(this.props.account,govTokenAvailableTokens,true),\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null),\n      this.functionsUtil.loadAssetField('avgAPY',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    const govTokensTotalBalance = govTokensUserBalance ? Object.values(govTokensUserBalance).reduce( (totBalance,govTokenBalance) => {\n      return totBalance.plus(this.functionsUtil.BNify(govTokenBalance));\n    },this.functionsUtil.BNify(0)) : null;\n\n    const govTokensTotalBalanceTooltip = govTokensUserBalance ? Object.keys(govTokensUserBalance).map( govToken => {\n      const balance = govTokensUserBalance[govToken];\n      if (balance.gt(0)){\n        return `+${balance.toFixed(2)} ${govToken}`;\n      } else {\n        return null;\n      }\n    }).filter(v => (v !== null)) : null;\n\n    // console.log(govTokensTotalBalance,govTokensUserBalance,govTokensTotalBalanceTooltip);\n\n    const govTokensTotalApr = govTokensAprs ? Object.values(govTokensAprs).reduce( (totApr,govTokenApr) => {\n      return totApr.plus(this.functionsUtil.BNify(govTokenApr));\n    },this.functionsUtil.BNify(0)) : null;\n\n    const govTokensTotalAprTooltip = govTokensAprs ? Object.keys(govTokensAprs).map( govToken => {\n      const apr = govTokensAprs[govToken];\n      if (apr.gt(0)){\n        return `${govToken}: ${apr.toFixed(2)}%`;\n      }\n      return null;\n    }).filter(v => (v !== null)) : null;\n\n    /*\n    const govTokensDistributionTooltip = govTokensUserDistribution ? Object.keys(govTokensUserDistribution).map( govToken => {\n      const speed = govTokensUserDistribution[govToken];\n      if (speed.gt(0)){\n        const distributionFrequency = this.functionsUtil.getGlobalConfig(['govTokens',govToken,'distributionFrequency']);\n        return `+${speed.toFixed(4)} ${govToken}/${distributionFrequency}`;\n      }\n      return null;\n    }).filter(v => (v !== null)) : null;\n    */\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '-') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    this.setState({\n      govTokensAprs,\n      aggregatedValues,\n      govTokensTotalApr,\n      govTokensUserBalance,\n      govTokensTotalBalance,\n      govTokensTotalAprTooltip,\n      idleTokenUserDistribution,\n      govTokensTotalBalanceTooltip\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Text\n                          mt={2}\n                          fontWeight={2}\n                          fontSize={[1,2]}\n                          color={'cellText'}\n                        >\n                          {v.props.title}\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquity\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              chartToken={this.props.selectedToken}\n              enabledTokens={[this.props.selectedToken]}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLent',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:this.props.theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPerc',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.govTokensTotalBalanceTooltip && this.state.govTokensTotalBalanceTooltip.length>0 && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      this.state.govTokensTotalBalanceTooltip.map((govTokenBalance,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          mt={govTokenIndex ? 1 : 0}\n                          key={`govToken_${govTokenIndex}`}\n                        >\n                          {govTokenBalance}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                )/* : this.state.govTokensUserBalance && Object.keys(this.state.govTokensUserBalance).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + ${this.state.govTokensTotalBalance.toFixed(4)}\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalBalanceTooltip.join(' / ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Fees\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'feesCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'apy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.idleTokenUserDistribution && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      mt={1}\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      {this.state.idleTokenUserDistribution.toFixed(4)} {this.idleGovToken.tokenName}/{this.idleGovToken.tokenConfig.distributionFrequency}\n                    </Text>\n                  </Flex>\n                )\n                /*\n                this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length===1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      Object.keys(this.state.govTokensAprs).map((govToken,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          ml={govTokenIndex ? 2 : 0}\n                          key={`govToken_${govToken}`}\n                        >\n                          {this.state.govTokensAprs[govToken].toFixed(2)}% {govToken}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                ) : this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + {this.state.govTokensTotalApr.toFixed(2)}%\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalAprTooltip.join('; ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Risk Score\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'score',\n                  props:{\n                    decimals:1,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverview;","import React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Icon, Checkbox, Box, Link, Input, Tooltip } from \"rimble-ui\";\n\nclass CurveRedeem extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    tokenConfig:null,\n    unevenAmounts:null,\n    selectedToken:null,\n    availableTokens:null,\n    buttonDisabled:false,\n    showMaxSlippage:false,\n    redeemUnderlying:true,\n    curveTokenConfig:null,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    curveTokensAmounts:null,\n    fastBalanceSelector:null,\n    redeemUnevenAmounts:false,\n    curveRedeemableIdleTokens:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.initToken();\n  }\n\n  showMaxSlippage(){\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  async calculateSlippage(max_slippage=null){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (!inputValue || inputValue.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    let withdrawSlippage = null;\n    let curveTokensAmounts = null;\n    let curveIdleTokensAmounts = null;\n    if (this.state.redeemUnevenAmounts){\n      [\n        curveTokensAmounts,\n        curveIdleTokensAmounts\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokensAmounts(this.props.account,normalizedAmount,true),\n        this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,normalizedAmount)\n      ]);\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false,curveIdleTokensAmounts);\n    } else {\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false);\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const redeemableBalance = inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.times(100).plus(this.state.maxSlippage || this.functionsUtil.BNify(0)).div(100)));\n      curveTokensAmounts = {};\n      curveTokensAmounts[this.state.selectedToken] = redeemableBalance;\n    }\n\n    if (withdrawSlippage){\n      withdrawSlippage = withdrawSlippage.times(100);\n    }\n\n    this.setState({\n      withdrawSlippage,\n      curveTokensAmounts,\n      curveIdleTokensAmounts\n    });\n\n    // Add max slippage but don't save in state\n    if (withdrawSlippage && max_slippage){\n      withdrawSlippage = withdrawSlippage.plus(max_slippage);\n    }\n\n    return withdrawSlippage;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.tokenConfig.idle.token !== this.props.tokenConfig.idle.token;\n    if (tokenChanged){\n      await this.initToken();\n    }\n\n    const redeemUnevenAmountsChanged = prevState.redeemUnevenAmounts !== this.state.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    const inputChanged = prevState.inputValue !== this.state.inputValue;\n    const maxSlippageChanged = parseFloat(prevState.maxSlippage) !== parseFloat(this.state.maxSlippage);\n    const tokenConfigChanged = JSON.stringify(prevState.tokenConfig) !== JSON.stringify(this.state.tokenConfig);\n    if (inputChanged || tokenConfigChanged || maxSlippageChanged){\n      this.calculateSlippage();\n    }\n\n    const selectedTokenChanged = prevState.selectedToken !== this.state.selectedToken;\n    if (selectedTokenChanged){\n      this.loadSelectedTokenConfig();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    let buttonDisabled = false;\n\n    // if (this.state.redeemUnevenAmounts){\n      buttonDisabled = !amount || amount.gt(this.state.curveTokenBalance);\n    // } else {\n      // buttonDisabled = !amount || amount.gt(this.state.redeemableBalance);\n    // }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    let inputValue = null;\n\n    // if (this.state.redeemUnevenAmounts){\n    inputValue = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n    // } else {\n      // inputValue = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n    // }\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  selectDestinationToken(selectedToken){\n    this.setState({\n      selectedToken\n    });\n  }\n\n  async loadSelectedTokenConfig(){\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const tokenConfig = this.state.availableTokens[this.state.selectedToken];\n    const curveTokenConfig = curveConfig.availableTokens[tokenConfig.idle.token];\n    this.setState({\n      tokenConfig,\n      curveTokenConfig\n    });\n  }\n\n  async initToken(){\n    const [curvePoolContract,curveSwapContract] = await Promise.all([\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract()\n    ]);\n\n    const [\n      curveTokenPrice,\n      curveTokenBalance,\n      curveRedeemableIdleTokens,\n    ] = await Promise.all([\n      this.functionsUtil.getCurveTokenPrice(),\n      this.functionsUtil.getCurveTokenBalance(this.props.account),\n      this.functionsUtil.getCurveRedeemableIdleTokens(this.props.account)\n    ]);\n\n    const unevenAmounts = [];\n    const redeemableBalance = curveTokenBalance ? curveTokenBalance.times(curveTokenPrice) : this.functionsUtil.BNify(0);\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();;\n    const selectedToken = Object.keys(availableTokens)[0];\n\n    this.setState({\n      selectedToken,\n      unevenAmounts,\n      curveTokenPrice,\n      availableTokens,\n      curvePoolContract,\n      curveSwapContract,\n      curveTokenBalance,\n      redeemableBalance,\n      curveRedeemableIdleTokens\n    });\n  }\n\n  async redeem(){\n\n    if (!this.state.curveTokenBalance){\n      return false;\n    }\n\n    const callbackRedeem = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveRedeem`,\n        eventAction: this.props.selectedToken,\n        eventValue: this.state.curveTokenBalance.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackRedeem === 'function' && txSucceeded){\n        this.props.callbackRedeem(tx);\n      }\n    };\n\n    const callbackReceiptRedeem = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.curveSwapContract.name;\n    const withdrawSlippage = await this.calculateSlippage(this.state.maxSlippage);\n    const max_slippage = this.functionsUtil.BNify(this.state.maxSlippage).div(100);\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    // const curveTokenBalance = this.functionsUtil.normalizeTokenAmount(this.state.curveTokenBalance,this.state.curvePoolContract.decimals);\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    if (this.state.redeemUnevenAmounts){\n      const min_amounts = this.state.redeemUnderlying ? await this.functionsUtil.getCurveTokensAmounts(this.props.account,_amount,false,true) : await this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,_amount,max_slippage);\n      console.log('remove_liquidity',_amount.toString(),min_amounts);\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    } else {\n      const coin_index = this.state.curveTokenConfig.migrationParams.coinIndex;\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.div(100))),this.state.tokenConfig.decimals);\n      // const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.minus(inputValue.times(withdrawSlippage.div(100))),this.state.curveTokenConfig.decimals);\n      // let _token_amount = await this.functionsUtil.getCurveTokenAmount(amounts,false);\n      // _token_amount = this.functionsUtil.BNify(_token_amount).isGreaterThan(curveTokenBalance) ? curveTokenBalance : this.functionsUtil.BNify(_token_amount);\n\n      console.log('remove_liquidity_one_coin',_amount, coin_index, min_amount);\n\n      // debugger;\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_one_coin', [_amount, coin_index, min_amount, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    }\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  getFastBalanceSelector(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n\n  render() {\n\n    const showSlippage = !this.state.buttonDisabled && this.state.withdrawSlippage;\n    const curveTokenName = this.functionsUtil.getGlobalConfig(['curve','poolContract','token']);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          {\n            !this.state.curveTokenBalance ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3,\n                  minHeight:'195px',\n                  style:{\n                    display:'flex',\n                    alignItems:'center',\n                    justifyContent:'center'\n                  }\n                }}\n              >\n                <FlexLoader\n                  flexProps={{\n                    flexDirection:'row'\n                  }}\n                  loaderProps={{\n                    size:'30px'\n                  }}\n                  textProps={{\n                    ml:2\n                  }}\n                  text={'Checking Curve Pool...'}\n                />\n              </DashboardCard>\n            ) : this.state.processing.loading ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3\n                }}\n              >\n                <Flex\n                  flexDirection={'column'}\n                >\n                  <TxProgressBar\n                    web3={this.props.web3}\n                    hash={this.state.processing.txHash}\n                    endMessage={`Finalizing redeem request...`}\n                    cancelTransaction={this.cancelTransaction.bind(this)}\n                    waitText={ this.props.waitText ? this.props.waitText : 'Redeem estimated in'}\n                  />\n                </Flex>\n              </DashboardCard>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    mb:2\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'1.8em'}\n                      color={'cellText'}\n                      name={'FileUpload'}\n                    />\n                    <Text\n                      mt={1}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Withdraw from the Curve Pool in a specific token or in uneven amounts of tokens (with no slippage).\n                    </Text>\n                    <Flex\n                      mt={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                    >\n                      <Checkbox\n                        required={false}\n                        label={`Redeem with no slippage`}\n                        checked={this.state.redeemUnevenAmounts}\n                        onChange={ e => this.toggleUnevenAmounts(e.target.checked) }\n                      />\n                      <Tooltip\n                        placement={'top'}\n                        message={`You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.`}\n                      >\n                        <Icon\n                          size={'1em'}\n                          color={'cellTitle'}\n                          name={\"InfoOutline\"}\n                        />\n                      </Tooltip>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n                {\n                  !this.state.redeemUnevenAmounts/* && (!this.props.selectedToken || (this.state.showMaxSlippage && showSlippage))*/ && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      {\n                        this.state.tokenConfig && \n                          <Box\n                            width={1}\n                          >\n                            <Text\n                              mb={1}\n                            >\n                              Select destination token:\n                            </Text>\n                            <AssetSelector\n                              {...this.props}\n                              id={'token-from'}\n                              showBalance={false}\n                              tokenConfig={this.state.tokenConfig}\n                              selectedToken={this.state.selectedToken}\n                              availableTokens={this.state.availableTokens}\n                              onChange={this.selectDestinationToken.bind(this)}\n                            />\n                          </Box>\n                      }\n                    </Box>\n                  )\n                }\n                {\n                  this.state.curveTokensAmounts && !this.state.buttonDisabled && (\n                    <DashboardCard\n                      cardProps={{\n                        mt:1,\n                        mb:2,\n                        py:2,\n                        px:1\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Text\n                          mt={1}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          You will receive:\n                        </Text>\n                        <Flex\n                          mt={2}\n                          width={1}\n                          boxShadow={0}\n                          style={{\n                            flexWrap:'wrap'\n                          }}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                          >\n                            {\n                              Object.keys(this.state.curveTokensAmounts).map( token => {\n                                const balance = this.state.curveTokensAmounts[token];\n                                return (\n                                  <Flex\n                                    mb={1}\n                                    mx={1}\n                                    width={'auto'}\n                                    flexDirection={'row'}\n                                    key={`tokenBalance_${token}`}\n                                    justifyContent={'flex-start'}\n                                  >\n                                    <AssetField\n                                      token={token}\n                                      tokenConfig={{\n                                        token:token\n                                      }}\n                                      fieldInfo={{\n                                        name:'icon',\n                                        props:{\n                                          mr:1,\n                                          width:['1.4em','1.6em'],\n                                          height:['1.4em','1.6em']\n                                        }\n                                      }}\n                                    />\n                                    <SmartNumber\n                                      ml={1}\n                                      fontSize={[0,1]}\n                                      fontWeight={500}\n                                      maxPrecision={4}\n                                      color={'cellText'}\n                                      number={balance.toString()}\n                                    />\n                                  </Flex>\n                                );\n                            })\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n                {\n                  this.state.showMaxSlippage && showSlippage && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Text>\n                          Choose max slippage:\n                        </Text>\n                        <Tooltip\n                          placement={'top'}\n                          message={`Max additional slippage on top of the one shown below`}\n                        >\n                          <Icon\n                            ml={1}\n                            size={'1em'}\n                            color={'cellTitle'}\n                            name={\"InfoOutline\"}\n                          />\n                        </Tooltip>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        {\n                          [0.2,0.5,1,5].map( slippage => (\n                            <FastBalanceSelector\n                              cardProps={{\n                                p:1\n                              }}\n                              textProps={{\n                                fontSize:1\n                              }}\n                              percentage={slippage}\n                              key={`selector_${slippage}`}\n                              onMouseDown={()=>this.setMaxSlippage(slippage)}\n                              isActive={this.state.maxSlippage === parseFloat(slippage)}\n                            />\n                          ))\n                        }\n                      </Flex>\n                    </Box>\n                  )\n                }\n                <Flex\n                  mb={3}\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  <Flex\n                    mb={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'flex-end'}\n                  >\n                    {\n                      showSlippage && (\n                        <Flex\n                          width={1}\n                          maxWidth={'40%'}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            textAlign={'right'}\n                            style={{\n                              whiteSpace:'nowrap'\n                            }}\n                            color={ parseFloat(this.state.withdrawSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                          >\n                            {\n                              parseFloat(this.state.withdrawSlippage.toFixed(3)) === 0 ?\n                                'No Slippage'\n                              : `${ this.state.withdrawSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.withdrawSlippage.abs().toFixed(3)}%`\n                            }\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={ this.state.redeemUnevenAmounts ? `You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.` : this.state.withdrawSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                          {\n                            !this.state.redeemUnevenAmounts &&\n                              <Link\n                                ml={1}\n                                color={'copyColor'}\n                                hoverColor={'primary'}\n                                onClick={this.showMaxSlippage.bind(this)}\n                              >\n                                change\n                              </Link>\n                          }\n                        </Flex>\n                      )\n                    }\n                    <Flex\n                      width={1}\n                      maxWidth={'60%'}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      justifyContent={'flex-end'}\n                    >\n                      <Link\n                        fontSize={1}\n                        fontWeight={3}\n                        color={'dark-gray'}\n                        textAlign={'right'}\n                        hoverColor={'copyColor'}\n                        onClick={ (e) => this.setFastBalanceSelector(100) }\n                        style={{\n                          maxWidth:'100%',\n                          overflow:'hidden',\n                          whiteSpace:'nowrap',\n                          textOverflow:'ellipsis'\n                        }}\n                      >\n                        {this.state.curveTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {curveTokenName}\n                      </Link>\n                    </Flex>\n                  </Flex>\n                  <Input\n                    min={0}\n                    type={\"number\"}\n                    required={true}\n                    height={'3.4em'}\n                    borderRadius={2}\n                    fontWeight={500}\n                    boxShadow={'none !important'}\n                    placeholder={`Insert amount`}\n                    onChange={this.changeInputValue.bind(this)}\n                    border={`1px solid ${this.props.theme.colors.divider}`}\n                    value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                  />\n                  <Flex\n                    mt={2}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      [25,50,75,100].map( percentage => (\n                        <FastBalanceSelector\n                          percentage={percentage}\n                          key={`selector_${percentage}`}\n                          onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                          isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                        />\n                      ))\n                    }\n                  </Flex>\n                </Flex>\n                <Flex\n                  justifyContent={'center'}\n                >\n                  <RoundButton\n                    buttonProps={{\n                      mt:2,\n                      width:[1,1/2],\n                      disabled:this.state.buttonDisabled\n                    }}\n                    handleClick={this.redeem.bind(this)}\n                  >\n                    Redeem\n                  </RoundButton>\n                </Flex>\n              </Flex>\n            )\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveRedeem;","import React, { Component } from 'react';\nimport {\n  Button,\n  Flex,\n  Box,\n  Text\n} from \"rimble-ui\";\nimport styles from './TwitterShareButton.module.scss';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass TwitterShareButton extends Component {\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate() {\n    this.loadUtils();\n  }\n\n  share = () => {\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'Share',\n      eventAction: 'twitter',\n      eventLabel: this.props.parent\n    });\n\n    const w = Math.min(window.innerWidth,600);\n    const h = 350;\n    const x = (window.innerWidth-w)/2;\n    const y = 150;\n    window.open(`https://twitter.com/intent/tweet?text=${this.props.tweet}`,\"_blank\",`toolbar=yes,scrollbars=no,resizable=no,top=${y},left=${x},width=${w},height=${h}`);\n  }\n\n  render() {\n    return (\n        <Button\n          borderRadius={1}\n          mainColor={'#2aa6f2'}\n          contrastColor={'white'}\n          onClick={ e => { this.share() } }\n        >\n          <Flex flexDirection={'row'} alignItems={'center'} justifyContent={'center'}>\n            <Box className={styles.twitterIcon} />\n            <Text color={'white'} fontWeight={3} ml={2}>{ this.props.text ? this.props.text : 'Tweet' }</Text>\n          </Flex>\n        </Button>\n    );\n  }\n}\n\nexport default TwitterShareButton;\n","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Link,\n  Flex\n} from \"rimble-ui\";\nimport ModalCard from './ModalCard';\nimport TwitterShareButton from '../../TwitterShareButton/TwitterShareButton.js';\nimport Confetti from 'react-confetti/dist/react-confetti';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass ShareModal extends React.Component {\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate() {\n    this.loadUtils();\n  }\n\n  closeModal = async (action) => {\n    const globalConfigs = this.functionsUtil.getGlobalConfigs();\n    // Send Google Analytics event\n    if (globalConfigs.analytics.google.events.enabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'Share',\n        eventAction: action,\n        eventLabel: 'ShareModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n    const tweet = window.escape(this.props.tweet);\n    const customText = {__html: this.props.text};\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          {\n            this.props.confettiEnabled &&\n            <Confetti\n              style={{ position: 'fixed','zIndex':9999 }}\n              run={true}\n              recycle={true}\n              width={window.innerWidth}\n              height={window.innerHeight}\n            />\n          }\n          <ModalCard.Header title={this.props.title} icon={this.props.icon}></ModalCard.Header>\n          <ModalCard.Body>\n            <Flex my={3} width={1} flexDirection={'column'} mx={'auto'}>\n              <Text color={'dark-gray'} textAlign={'center'} fontSize={3} mb={2} dangerouslySetInnerHTML={customText}></Text>\n            </Flex>\n            <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n              <TwitterShareButton tweet={tweet} text={'Share now'} parent={'ShareModal'} />\n              <Link mt={2} onClick={ e => this.closeModal('continue_without_sharing') } hoverColor={'blue'}>continue without sharing</Link>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default ShareModal;","import Migrate from '../Migrate/Migrate';\nimport React, { Component } from 'react';\nimport styles from './DepositRedeem.module.scss';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport ConnectBox from '../ConnectBox/ConnectBox';\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport ShareModal from '../utilities/components/ShareModal';\nimport TransactionField from '../TransactionField/TransactionField';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Input, Box, Icon, Link, Checkbox, Tooltip, Image } from \"rimble-ui\";\n\nclass DepositRedeem extends Component {\n\n  state = {\n    txError:{},\n    tokenAPY:'-',\n    inputValue:{},\n    processing:{},\n    curveAPY:null,\n    canRedeem:false,\n    maxSlippage:0.2,\n    canDeposit:false,\n    action:'deposit',\n    directMint:false,\n    activeModal:null,\n    showBuyFlow:false,\n    unlentBalance:null,\n    tokenApproved:false,\n    skipMigration:false,\n    showRedeemFlow:false,\n    contractPaused:false,\n    buttonDisabled:false,\n    canRedeemCurve:false,\n    showMaxSlippage:false,\n    redeemGovTokens:false,\n    canDepositCurve:false,\n    fastBalanceSelector:{},\n    actionProxyContract:{},\n    migrationEnabled:false,\n    componentMounted:false,\n    curveTokenBalance:null,\n    redeemCurveEnabled:false,\n    depositCurveBalance:null,\n    depositCurveEnabled:true,\n    showAdvancedOptions:false,\n    depositCurveSlippage:null,\n    metaTransactionsEnabled:true\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadProxyContracts();\n  }\n\n  async componentDidMount(){\n\n  }\n\n  setShowRedeemFlow = (showRedeemFlow) => {\n    this.setState({\n      showRedeemFlow\n    });\n  }\n\n  setShowBuyFlow = (showBuyFlow) => {\n    this.setState({\n      showBuyFlow\n    });\n  }\n\n  toggleShowAdvancedOptions = showAdvancedOptions => {\n    this.setState((prevState) => ({\n      showAdvancedOptions:!prevState.showAdvancedOptions\n    }));\n  }\n\n  toggleSkipMigration = skipMigration => {\n    this.setState({\n      skipMigration\n    });\n  }\n\n  toggleRedeemCurve = redeemCurveEnabled => {\n    this.setState({\n      redeemCurveEnabled\n    });\n  }\n\n  toggleDepositCurve = depositCurveEnabled => {\n    this.setState({\n      depositCurveEnabled\n    });\n  }\n\n  toggleSkipMint = (directMint) => {\n    this.setState({\n      directMint\n    });\n  }\n\n  toggleRedeemGovTokens = (redeemGovTokens) => {\n    this.setState({\n      redeemGovTokens\n    });\n  }\n\n  toggleMetaTransactionsEnabled = (metaTransactionsEnabled) => {\n    this.setState({\n      metaTransactionsEnabled\n    });\n  }\n\n  async loadProxyContracts(){\n    const actions = ['deposit','redeem'];\n    const newState = {\n      actionProxyContract:{}\n    };\n\n    await this.functionsUtil.asyncForEach(actions,async (action) => {\n      const mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'proxyContract']);\n      const hasProxyContract = mintProxyContractInfo && mintProxyContractInfo.enabled;\n      newState.actionProxyContract[action] = hasProxyContract ? mintProxyContractInfo : null;\n      if (hasProxyContract){\n        const proxyContract = await this.props.initContract(mintProxyContractInfo.name,mintProxyContractInfo.address,mintProxyContractInfo.abi);\n        newState.actionProxyContract[action].contract = proxyContract.contract;\n        newState.actionProxyContract[action].approved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,mintProxyContractInfo.address,this.props.account);\n      }\n    });\n\n    this.setState(newState);\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadAPY(){\n    const tokenAprs = await this.functionsUtil.getTokenAprs(this.props.tokenConfig);\n    if (tokenAprs && tokenAprs.avgApy !== null){\n      const tokenAPY = this.functionsUtil.BNify(tokenAprs.avgApy).toFixed(2);\n\n      let curveAPY = null;\n      if (this.state.canDepositCurve){\n        curveAPY = await this.functionsUtil.getCurveAPY();\n        // console.log('curveAPY',curveAPY);\n        if (curveAPY){\n          curveAPY = curveAPY.plus(tokenAPY);\n        }\n      }\n      this.setState({\n        tokenAPY,\n        curveAPY\n      });\n    }\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    if (this.props.tokenBalance === null){\n      return false;\n    }\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const tokenBalanceChanged = prevProps.tokenBalance !== this.props.tokenBalance && this.props.tokenBalance !== null;\n\n    if (tokenChanged || tokenBalanceChanged){\n      await this.loadProxyContracts();\n      this.loadTokenInfo();\n      return false;\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n\n    if (actionChanged || fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const redeemGovTokensChanged = prevState.redeemGovTokens !== this.state.redeemGovTokens;\n    if (redeemGovTokensChanged || actionChanged){\n      this.checkButtonDisabled();\n    }\n\n    const depositCurveChanged = prevState.depositCurveEnabled !== this.state.depositCurveEnabled;\n    const metaTransactionsChanged = prevState.metaTransactionsEnabled !== this.state.metaTransactionsEnabled;\n    if (metaTransactionsChanged || depositCurveChanged){\n      const tokenApproved = await this.checkTokenApproved();\n      this.setState({\n        tokenApproved\n      });\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateCurveSlippage();\n    }\n  }\n\n  async calculateCurveSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,curvePoolContractInfo.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositCurveBalance = amount;\n        newState.depositCurveSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      case 'redeem':\n        // newState.redeemBalance = amount;\n        // newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateCurveSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  approveContract = async (callbackApprove,callbackReceiptApprove) => {\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      this.functionsUtil.enableERC20(this.props.selectedToken,curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n    } else {\n      const proxyContract = this.state.actionProxyContract[this.state.action];\n      if (proxyContract && this.state.metaTransactionsEnabled && this.props.biconomy){\n        this.functionsUtil.enableERC20(this.props.selectedToken,proxyContract.address,callbackApprove,callbackReceiptApprove);\n      } else {\n        this.functionsUtil.enableERC20(this.props.selectedToken,this.props.tokenConfig.idle.address,callbackApprove,callbackReceiptApprove);\n      }\n    }\n  }\n\n  checkTokenApproved = async () => {\n\n    let tokenApproved = false;\n\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,curveDepositContract.address,this.props.account);\n    } else {\n      const proxyContract = this.state.actionProxyContract[this.state.action];\n      if (proxyContract && this.state.metaTransactionsEnabled && this.props.biconomy){\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,proxyContract.address,this.props.account);\n      } else {\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,this.props.tokenConfig.idle.address,this.props.account);\n      }\n    }\n\n    return tokenApproved;\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = await this.checkTokenApproved();\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.approveContract(callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  loadTokenInfo = async () => {\n\n    if (this.state.componentMounted){\n      this.setState({\n        componentMounted:false\n      });\n    }\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token]);\n    const curveTokenEnabled = curveConfig.enabled && curveTokenConfig && curveTokenConfig.enabled;\n\n    const [\n      tokenApproved,\n      contractPaused,\n      curveSwapContract,\n      curveDepositContract,\n      unlentBalance,\n      {migrationEnabled},\n      curveTokenBalance,\n    ] = await Promise.all([\n      this.checkTokenApproved(),\n      this.functionsUtil.checkContractPaused(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract(),\n      this.functionsUtil.getUnlentBalance(this.props.tokenConfig),\n      this.functionsUtil.checkMigration(this.props.tokenConfig,this.props.account),\n      curveTokenEnabled ? this.functionsUtil.getCurveTokenBalance(this.props.account) : null\n    ]);\n\n    const canDeposit = this.props.tokenBalance && this.functionsUtil.BNify(this.props.tokenBalance).gt(0);\n    const canRedeem = this.props.idleTokenBalance && this.functionsUtil.BNify(this.props.idleTokenBalance).gt(0);\n\n    const canDepositCurve = curveTokenEnabled && canDeposit;\n    const depositCurveEnabled = canDepositCurve;\n\n    const canRedeemCurve = curveTokenEnabled && curveTokenBalance && curveTokenBalance.gt(0);\n    const redeemCurveEnabled = canRedeemCurve;\n\n    const newState = {...this.state};\n\n    // Check curve deposit enabled\n    if (newState.depositCurveEnabled && !curveTokenEnabled){\n      newState.depositCurveEnabled = false;\n    }\n    \n    newState.canRedeem = canRedeem;\n    newState.canDeposit = canDeposit;\n    newState.unlentBalance = unlentBalance;\n    newState.tokenApproved = tokenApproved;\n    newState.contractPaused = contractPaused;\n    newState.canRedeemCurve = canRedeemCurve;\n    newState.canDepositCurve = canDepositCurve;\n    newState.migrationEnabled = migrationEnabled;\n    newState.curveTokenBalance = curveTokenBalance;\n    newState.curveSwapContract = curveSwapContract;\n    newState.redeemCurveEnabled = redeemCurveEnabled;\n    newState.depositCurveEnabled = depositCurveEnabled;\n    newState.curveDepositContract = curveDepositContract;\n\n    newState.txError = {\n      redeem:false,\n      deposit:false\n    };\n    newState.processing = {\n      redeem:{\n        txHash:null,\n        loading:false\n      },\n      deposit:{\n        txHash:null,\n        loading:false\n      },\n      approve:{\n        txHash:null,\n        loading:false\n      },\n      boost:{\n        txHash:null,\n        loading:false\n      }\n    };\n    newState.inputValue = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n    newState.fastBalanceSelector = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n\n    newState.componentMounted = true;\n\n    this.setState(newState,() => {\n      this.checkAction();\n      this.loadAPY();\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const redeemGovTokens = this.state.redeemGovTokens;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    let loading = true;\n\n    switch (this.state.action){\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        if (!this.state.tokenApproved){\n          return this.approveToken();\n        }\n\n        if (localStorage){\n          this.functionsUtil.setLocalStorage('redirectToFundsAfterLogged',0);\n        }\n\n        this.setState({\n          lendingProcessing: this.props.account,\n          lendAmount: '',\n          genericError: '',\n        });\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.props.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if (this.state.metaTransactionsEnabled && txError){\n            this.setState({\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n        const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n        // Handle Curve Deposit\n        if (curveTokenEnabled && this.state.depositCurveEnabled){\n\n          const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,curvePoolContractInfo.decimals);\n\n          const amounts = await this.functionsUtil.getCurveAmounts(this.props.tokenConfig.idle.token,tokensToDeposit);\n          let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n          if (this.state.maxSlippage){\n            minMintAmount = this.functionsUtil.BNify(minMintAmount);\n            minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n            minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n          }\n          \n          const depositParams = [amounts,minMintAmount];\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, callbackDeposit, callbackReceiptDeposit);\n        } else {\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n\n          const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']);\n          // const gasLimitDeposit = this.functionsUtil.BNify(1000000);\n          let depositParams = [];\n\n          // Use Proxy Contract if enabled\n          const mintProxyContractInfo = this.state.actionProxyContract[this.state.action];\n          if (depositMetaTransactionsEnabled && mintProxyContractInfo && this.props.biconomy && this.state.metaTransactionsEnabled){\n            const mintProxyContract = this.state.actionProxyContract[this.state.action].contract;\n            depositParams = [tokensToDeposit, this.props.tokenConfig.idle.address];\n            // console.log('mintProxyContract',mintProxyContractInfo.function,depositParams);\n            if (this.state.metaTransactionsEnabled){\n              const functionSignature = mintProxyContract.methods[mintProxyContractInfo.function](...depositParams).encodeABI();\n              contractSendResult = await this.functionsUtil.sendBiconomyTxWithPersonalSign(mintProxyContractInfo.name, functionSignature, callbackDeposit, callbackReceiptDeposit);\n            } else {\n              contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n            }\n          // Use main contract if no proxy contract exists\n          } else {\n            let _skipMint = !this.state.directMint && this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMint']);\n            _skipMint = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : _skipMint;\n\n            // Mint if someone mint over X amount\n            if (_skipMint){\n              let [\n                maxUnlentPerc,\n                totalAUM\n              ] = await Promise.all([\n                this.functionsUtil.genericContractCall('idleDAIYield', 'maxUnlentPerc'),\n                this.functionsUtil.loadAssetField('pool',this.props.selectedToken,this.props.tokenConfig,this.props.account)\n              ]);\n\n              if (maxUnlentPerc && totalAUM){\n                const depositPerc = inputValue.div(totalAUM).times(100);\n                maxUnlentPerc = this.functionsUtil.BNify(maxUnlentPerc).div(1e3);\n                if (depositPerc.gte(maxUnlentPerc.times(2))){\n                  _skipMint = false;\n                }\n                // console.log(maxUnlentPerc.toFixed(5),inputValue.toFixed(5),totalAUM.toFixed(5),depositPerc.toFixed(5),depositPerc.gte(maxUnlentPerc.times(2)),_skipMint);\n              }\n            }\n\n            depositParams = [tokensToDeposit, _skipMint, '0x0000000000000000000000000000000000000000'];\n            contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'mintIdleToken', depositParams, callbackDeposit, callbackReceiptDeposit);\n          }\n        }\n      break;\n      case 'redeem':\n\n        if (redeemGovTokens){\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_gov`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: 0\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', [0], callbackRedeem, callbackReceiptRedeem);\n          \n        } else {\n\n          if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n            return false;\n          }\n\n          const txData = {\n            value:this.functionsUtil.BNify(inputValue)\n          };\n\n          let idleTokenToRedeem = null;\n          if (selectedPercentage){\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage);\n          } else {\n            const idleTokenPrice = await this.functionsUtil.genericContractCall(this.props.tokenConfig.idle.token, 'tokenPrice');\n            idleTokenToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals)).div(idleTokenPrice);\n          }\n\n          // Normalize number\n          idleTokenToRedeem = this.functionsUtil.normalizeTokenAmount(idleTokenToRedeem,18);\n\n          if (!idleTokenToRedeem){\n            return false;\n          }\n\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_partial`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: parseInt(inputValue)\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          let redeemParams = [idleTokenToRedeem];\n          // console.log(redeemParams,idleTokenToRedeem);\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', redeemParams, callbackRedeem, callbackReceiptRedeem, txData);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    if (contractSendResult !== false){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  showMaxSlippage = () => {\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  checkAction = () => {\n    let action = this.state.action;\n\n    switch(action){\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = 'deposit';\n        }\n      break;\n      default:\n      break;\n    }\n\n    if (action !== this.state.action){\n      this.setState({\n        action\n      },() => {\n        this.checkButtonDisabled();\n      });\n    } else {\n      this.checkButtonDisabled();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.props.tokenBalance));\n      break;\n      case 'redeem':\n        buttonDisabled = !this.state.canRedeemCurve && !this.state.redeemGovTokens && ( buttonDisabled || (amount && amount.gt(this.props.redeemableBalance)) );\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.props.tokenBalance ? this.functionsUtil.BNify(this.props.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        amount = this.props.redeemableBalance ? this.functionsUtil.BNify(this.props.redeemableBalance).times(selectedPercentage) : null;\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  changeInputValue = (e) => {\n    if (!this.state.action){\n      return false;\n    }\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem && !this.state.canRedeemCurve){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const govTokensDisabled = this.props.tokenConfig.govTokensDisabled;\n    const govTokensEnabled = this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'govTokensEnabled']);\n    const skipMintForDepositEnabled = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : true;\n    const skipMintCheckboxEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMintCheckboxEnabled']) && skipMintForDepositEnabled;\n\n    const redeemGovTokenEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','redeemGovTokens','enabled']) && !govTokensDisabled && govTokensEnabled;\n    const redeemGovTokens = redeemGovTokenEnabled && this.state.redeemGovTokens && this.state.action === 'redeem';\n\n    const metaTransactionsAvailable = this.props.biconomy && this.state.actionProxyContract[this.state.action];\n    const useMetaTx = metaTransactionsAvailable && this.state.metaTransactionsEnabled;\n    const totalBalance = this.state.action === 'deposit' ? this.props.tokenBalance : this.props.redeemableBalance;\n    const migrateText = this.state.migrationEnabled && this.props.tokenConfig.migration.message !== undefined ? this.props.tokenConfig.migration.message : null;\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n    const depositCurve = curveTokenEnabled && this.state.depositCurveEnabled && this.state.action === 'deposit';\n\n    const showDepositOptions = this.state.action === 'deposit' && !this.state.contractPaused && (curveTokenEnabled || this.state.tokenApproved);\n\n    const canPerformAction = /*!depositCurve && !this.state.redeemCurveEnabled && */((this.state.action === 'deposit' && this.state.canDeposit) || (this.state.action === 'redeem' && this.state.canRedeem) || redeemGovTokens);\n    const showDepositCurve = showDepositOptions && curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canDepositCurve && this.state.action === 'deposit';\n    const showRedeemCurve = curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canRedeemCurve && this.state.action === 'redeem';\n\n    const showActionFlow = !redeemGovTokens && canPerformAction;\n    const showBuyFlow = this.state.componentMounted && (!showDepositCurve || this.state.showBuyFlow) && !this.state.depositCurveEnabled && this.state.tokenApproved && !this.state.contractPaused && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.action === 'deposit' && !this.state.canDeposit;\n    const showRedeemFlow = this.state.canRedeem && (!this.state.redeemCurveEnabled || this.state.showRedeemFlow);\n\n    const showCurveSlippage = depositCurve && this.state.depositCurveSlippage && this.state.depositCurveBalance && !this.state.buttonDisabled;\n\n    const showRebalanceOption = showDepositOptions && this.state.canDeposit && skipMintCheckboxEnabled && this.state.action === 'deposit';\n    const showAdvancedDepositOptions = showDepositCurve || showRebalanceOption;\n\n    const batchDepositInfo = this.functionsUtil.getGlobalConfig(['tools','batchDeposit']);\n    const batchDepositEnabled = batchDepositInfo.enabled && typeof batchDepositInfo.props.availableTokens[this.props.tokenConfig.idle.token] !== 'undefined';\n    const batchDepositDepositEnabled = batchDepositInfo.depositEnabled;\n\n    const showBatchDeposit = batchDepositEnabled && batchDepositDepositEnabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          <Box\n            width={1}\n          >\n            <Text mb={1}>\n              Select your asset:\n            </Text>\n            <AssetSelector\n              {...this.props}\n            />\n          </Box>\n          <Migrate\n            {...this.props}\n            migrateTextBefore={migrateText}\n            migrateText={migrateText !== null ? '' : null}\n            toggleSkipMigration={this.toggleSkipMigration.bind(this)}\n          >\n            {\n              !this.props.account ? (\n                <ConnectBox\n                  {...this.props}\n                />\n              ) :\n              this.state.componentMounted ? (\n                this.state.action ? (\n                  <Box width={1}>\n                    <Flex\n                      mt={2}\n                      flexDirection={'column'}\n                    >\n                      <Text mb={2}>\n                        Choose the action:\n                      </Text>\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('deposit');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'deposit' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'deposit'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:3\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Deposit\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('redeem');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'redeem' }\n                          isDisabled={ !this.state.canRedeem && !this.state.canRedeemCurve }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'redeem'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:3\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Redeem\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </Flex>\n                    {\n                      showAdvancedDepositOptions ? (\n                        <DashboardCard\n                          cardProps={{\n                            pt:2,\n                            px:2,\n                            mt:3,\n                            display:'flex',\n                            alignItems:'center',\n                            flexDirection:'column',\n                            justifyContent:'center',\n                            pb:this.state.showAdvancedOptions ? 3 : 2,\n                          }}\n                        >\n                          <Flex\n                            width={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <Link\n                              ml={1}\n                              mainColor={'primary'}\n                              hoverColor={'primary'}\n                              onClick={this.toggleShowAdvancedOptions}\n                            >\n                              { this.state.showAdvancedOptions ? 'Hide' : 'Show' } advanced options\n                            </Link>\n                            <Icon\n                              size={'1.8em'}\n                              color={'cellText'}\n                              name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                            />\n                          </Flex>\n                          {\n                            this.state.showAdvancedOptions &&\n                              <Flex\n                                mt={1}\n                                flexDirection={'column'}\n                              >\n                                {\n                                  showDepositCurve && \n                                    <Flex\n                                      alignItems={'center'}\n                                      justifyContent={'row'}\n                                    >\n                                      <Checkbox\n                                        required={false}\n                                        disabled={this.state.directMint}\n                                        label={`Deposit in the Curve Pool`}\n                                        checked={this.state.depositCurveEnabled}\n                                        onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                      />\n                                      <Link\n                                        mainColor={'primary'}\n                                        hoverColor={'primary'}\n                                        onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                      >\n                                        (read more)\n                                      </Link>\n                                    </Flex>\n                                }\n                                {\n                                  showRebalanceOption && \n                                    <Flex\n                                      alignItems={'center'}\n                                      justifyContent={'row'}\n                                    >\n                                      <Checkbox\n                                        required={false}\n                                        label={`Rebalance the pool`}\n                                        checked={this.state.directMint}\n                                        disabled={this.state.depositCurveEnabled}\n                                        onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                      />\n                                      <Tooltip\n                                        placement={'bottom'}\n                                        message={this.functionsUtil.getGlobalConfig(['messages','directMint'])}\n                                      >\n                                        <Icon\n                                          size={'1em'}\n                                          color={'cellTitle'}\n                                          name={\"InfoOutline\"}\n                                        />\n                                      </Tooltip>\n                                    </Flex>\n                                }\n                              </Flex>\n                          }\n                        </DashboardCard>\n                      ) : (\n                        <Flex\n                          width={1}\n                          flexDirection={'column'}\n                        >\n                          {\n                            showDepositCurve && (\n                              <Flex\n                                width={1}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <DashboardCard\n                                  isRainbow={true}\n                                  cardProps={{\n                                    py:3,\n                                    px:2,\n                                    mt:3,\n                                    display:'flex',\n                                    alignItems:'center',\n                                    flexDirection:'column',\n                                    justifyContent:'center',\n                                  }}\n                                >\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <Image\n                                      height={'1.8em'}\n                                      src={curveConfig.params.image}\n                                    />\n                                    <Text\n                                      mt={2}\n                                      px={2}\n                                      fontSize={1}\n                                      color={'dark-gray'}\n                                      textAlign={'center'}\n                                    >\n                                      Deposit your tokens in the Curve Pool and boost your APY up to {this.state.curveAPY ? this.state.curveAPY.toFixed(2) : '-'}%.\n                                      <Link\n                                        ml={1}\n                                        mainColor={'primary'}\n                                        hoverColor={'primary'}\n                                        onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                      >\n                                        Read More\n                                      </Link>\n                                    </Text>\n                                    <Checkbox\n                                      mt={2}\n                                      required={false}\n                                      label={`Deposit in Curve`}\n                                      checked={this.state.depositCurveEnabled}\n                                      onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                    />\n                                  </Flex>\n                                </DashboardCard>\n                                {\n                                  (!this.state.showBuyFlow && !this.state.depositCurveEnabled && !this.state.canDeposit) &&\n                                    <Link\n                                      textAlign={'center'}\n                                      hoverColor={'primary'}\n                                      onClick={ e => this.setShowBuyFlow(true) }\n                                    >\n                                      I just want to deposit more {this.props.selectedToken}\n                                    </Link>\n                                }\n                              </Flex>\n                            )\n                          }\n                          {\n                            showRebalanceOption && (\n                              <DashboardCard\n                                cardProps={{\n                                  py:3,\n                                  px:2,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    color={'cellText'}\n                                    name={'InfoOutline'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    px={2}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    By checking this flag you can rebalance the pool and help all users gain an additional APR\n                                  </Text>\n                                </Flex>\n                                <Checkbox\n                                  mt={2}\n                                  required={false}\n                                  label={`Rebalance the pool`}\n                                  checked={this.state.directMint}\n                                  onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                />\n                              </DashboardCard>\n                            )\n                          }\n                        </Flex>\n                      )\n                    }\n                    {\n                      (metaTransactionsAvailable && !showBuyFlow && !this.state.contractPaused) && \n                      <DashboardCard\n                        cardProps={{\n                          py:3,\n                          px:2,\n                          my:3,\n                          display:'flex',\n                          alignItems:'center',\n                          flexDirection:'column',\n                          justifyContent:'center',\n                        }}\n                      >\n                        {\n                          this.state.metaTransactionsEnabled && this.state.txError[this.state.action] && this.state.actionProxyContract[this.state.action].approved ? (\n                            <Flex\n                              width={1}\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <Icon\n                                size={'1.8em'}\n                                name={'Warning'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={1}\n                                fontSize={1}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                Seems like you are having some trouble with Meta-Transactions... Disable them by unchecking the box below and try again!\n                              </Text>\n                            </Flex>\n                          ) : this.functionsUtil.getWalletProvider() === 'WalletConnect' && this.state.metaTransactionsEnabled ? (\n                            <Flex\n                              width={1}\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <Icon\n                                size={'1.8em'}\n                                name={'Warning'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={1}\n                                fontSize={1}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                Please disable Meta-Transactions if you are using Argent Wallet to avoid failed transactions!\n                              </Text>\n                            </Flex>\n                          ) : (\n                            <Text\n                              mt={1}\n                              fontSize={1}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              Meta-Transactions are {this.state.metaTransactionsEnabled ? 'available' : 'disabled'} for {this.state.action}s!<br />\n                              {\n                                this.state.metaTransactionsEnabled && !this.state.actionProxyContract[this.state.action].approved && `Please either enable the Smart-Contract to enjoy gas-less ${this.state.action} or just disable meta-tx.`\n                              }\n                            </Text>\n                          )\n                        }\n                        <Checkbox\n                          mt={2}\n                          required={false}\n                          checked={this.state.metaTransactionsEnabled}\n                          onChange={ e => this.toggleMetaTransactionsEnabled(e.target.checked) }\n                          label={`${this.functionsUtil.capitalize(this.state.action)} with Meta-Transaction`}\n                        />\n                      </DashboardCard>\n                    }\n                    {\n                      showBatchDeposit &&\n                        <Flex\n                          p={2}\n                          mt={3}\n                          width={1}\n                          borderRadius={2}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'center'}\n                          backgroundColor={'DashboardCard'}\n                          border={`1px solid ${this.props.theme.colors.primary}`}\n                        >\n                          <Link\n                            textAlign={'center'}\n                            hoverColor={'primary'}\n                            href={`/#/dashboard/tools/${batchDepositInfo.route}/${this.props.tokenConfig.idle.token}`}\n                          >\n                            Gas fees too high? Save gas with our Batch Deposit!\n                          </Link>\n                          <Icon\n                            ml={1}\n                            size={'1em'}\n                            color={'primary'}\n                            name={'LocalGasStation'}\n                          />\n                        </Flex>\n                    }\n                    {\n                      showRedeemCurve && this.state.canRedeem && (\n                        <Flex\n                          width={1}\n                          flexDirection={'column'}\n                          justifyContent={'center'}\n                        >\n                          <DashboardCard\n                            isRainbow={true}\n                            cardProps={{\n                              py:3,\n                              px:2,\n                              mt:3,\n                              display:'flex',\n                              alignItems:'center',\n                              flexDirection:'column',\n                              justifyContent:'center',\n                            }}\n                          >\n                            <Flex\n                              width={1}\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <Image\n                                height={'1.8em'}\n                                src={curveConfig.params.image}\n                              />\n                              <Text\n                                mt={2}\n                                px={2}\n                                fontSize={1}\n                                color={'dark-gray'}\n                                textAlign={'center'}\n                              >\n                                Redeem your tokens from the Curve Pool.\n                                <Link\n                                  ml={1}\n                                  mainColor={'primary'}\n                                  hoverColor={'primary'}\n                                  onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                >\n                                  Read More\n                                </Link>\n                              </Text>\n                              {\n                                this.state.canRedeem &&\n                                  <Checkbox\n                                    mt={2}\n                                    required={false}\n                                    label={`Redeem from Curve`}\n                                    checked={this.state.redeemCurveEnabled}\n                                    onChange={ e => this.toggleRedeemCurve(e.target.checked) }\n                                  />\n                              }\n                            </Flex>\n                          </DashboardCard>\n                          {\n                            this.canRedeem &&\n                              <Link\n                                textAlign={'center'}\n                                hoverColor={'primary'}\n                                onClick={ e => this.setShowRedeemFlow(true) }\n                              >\n                                I just want to redeem my {this.props.selectedToken}\n                              </Link>\n                          }\n                        </Flex>\n                      )\n                    }\n                    {\n                      (this.state.action === 'redeem' && this.state.unlentBalance && showRedeemFlow) &&\n                        <DashboardCard\n                          cardProps={{\n                            py:2,\n                            px:2,\n                            mt:3,\n                            display:'flex',\n                            alignItems:'center',\n                            flexDirection:'column',\n                            justifyContent:'center',\n                          }}\n                        >\n                          <Flex\n                            width={1}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Icon\n                              size={'1.8em'}\n                              color={'cellText'}\n                              name={'LocalGasStation'}\n                            />\n                            <Text\n                              px={2}\n                              fontSize={1}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              Available balance for Cheap Redeem\n                            </Text>\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                            >\n                              <Text\n                                fontSize={1}\n                                fontWeight={3}\n                                color={'dark-gray'}\n                                textAlign={'center'}\n                                hoverColor={'copyColor'}\n                              >\n                                {this.state.unlentBalance.toFixed(4)} {this.props.selectedToken}\n                              </Text>\n                              <Tooltip\n                                placement={'top'}\n                                message={this.functionsUtil.getGlobalConfig(['messages','cheapRedeem'])}\n                              >\n                                <Icon\n                                  ml={1}\n                                  size={'1em'}\n                                  color={'cellTitle'}\n                                  name={\"InfoOutline\"}\n                                />\n                              </Tooltip>\n                            </Flex>\n                          </Flex>\n                        </DashboardCard>\n                    }\n                    {\n                      (this.state.action === 'redeem' && redeemGovTokenEnabled && showRedeemFlow) && (\n                        <DashboardCard\n                          cardProps={{\n                            py:3,\n                            px:2,\n                            mt:3,\n                            display:'flex',\n                            alignItems:'center',\n                            flexDirection:'column',\n                            justifyContent:'center',\n                          }}\n                        >\n                          <Flex\n                            width={1}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Icon\n                              size={'1.8em'}\n                              color={'cellText'}\n                              name={'InfoOutline'}\n                            />\n                            <Text\n                              mt={1}\n                              px={2}\n                              fontSize={1}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              By redeeming your {this.props.selectedToken} you will automatically get also the proportional amount of governance tokens accrued{ this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~ $${this.props.govTokensBalance.toFixed(2)})` : null }.\n                            </Text>\n                          </Flex>\n                          <Checkbox\n                            mt={2}\n                            required={false}\n                            checked={this.state.redeemGovTokens}\n                            label={`Redeem governance tokens only`}\n                            onChange={ e => this.toggleRedeemGovTokens(e.target.checked) }\n                          />\n                        </DashboardCard>\n                      )\n                    }\n                    {\n                      (this.state.contractPaused && this.state.action === 'deposit') ? (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'1.8em'}\n                              name={'Warning'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={1}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              Deposits for {this.props.selectedToken} are temporarily unavailable due to Smart-Contract maintenance. Redeems are always available.\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      ) : (!this.state.tokenApproved && this.state.action === 'deposit') ? (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3\n                          }}\n                        >\n                          {\n                            this.state.processing['approve'] && this.state.processing['approve'].loading ? (\n                              <Flex\n                                flexDirection={'column'}\n                              >\n                                <TxProgressBar\n                                  web3={this.props.web3}\n                                  waitText={`Approve estimated in`}\n                                  endMessage={`Finalizing approve request...`}\n                                  hash={this.state.processing['approve'].txHash}\n                                  cancelTransaction={this.cancelTransaction.bind(this)}\n                                />\n                              </Flex>\n                            ) : (\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'LockOpen'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={3}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  {\n                                    this.state.depositCurveEnabled ? \n                                      `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.`\n                                    : useMetaTx ?\n                                      `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle using Meta-Transaction you need to approve our Smart-Contract first.`\n                                    :\n                                      `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle you need to approve our Smart-Contract first.`\n                                  }\n                                </Text>\n                                <RoundButton\n                                  buttonProps={{\n                                    mt:3,\n                                    width:[1,1/2]\n                                  }}\n                                  handleClick={this.approveToken.bind(this)}\n                                >\n                                  Approve\n                                </RoundButton>\n                              </Flex>\n                            )\n                          }\n                        </DashboardCard>\n                      ) : (!showBuyFlow && canPerformAction) && (\n                        !this.state.processing[this.state.action].loading ? (\n                          <Flex\n                            mt={2}\n                            flexDirection={'column'}\n                          >\n                            {\n                              showActionFlow && (\n                                <Flex\n                                  mb={3}\n                                  width={1}\n                                  flexDirection={'column'}\n                                >\n                                  {\n                                    /*\n                                    showCurveSlippage &&\n                                      <DashboardCard\n                                        cardProps={{\n                                          p:3,\n                                          mb:2\n                                        }}\n                                      >\n                                        <Flex\n                                          alignItems={'center'}\n                                          flexDirection={'column'}\n                                        >\n                                          <Icon\n                                            size={'1.8em'}\n                                            color={'cellText'}\n                                            name={'FileUpload'}\n                                          />\n                                          <Text\n                                            mt={2}\n                                            fontSize={2}\n                                            color={'cellText'}\n                                            textAlign={'center'}\n                                          >\n                                            You can deposit {this.state.depositCurveBalance.toFixed(4)} {this.props.selectedToken} in the Curve Pool{ this.state.depositCurveSlippage ? (this.state.depositCurveSlippage.gt(0) ? ` with ${this.state.depositCurveSlippage.times(100).toFixed(2)}% of slippage` : ` with ${Math.abs(parseFloat(this.state.depositCurveSlippage.times(100).toFixed(2)))}% of bonus`) : '' }.\n                                          </Text>\n                                        </Flex>\n                                      </DashboardCard>\n                                    */\n                                  }\n                                  {\n                                    (totalBalance || this.props.tokenFeesPercentage) && (\n                                      <Box\n                                        mb={1}\n                                        width={1}\n                                      >\n                                        {\n                                          this.state.showMaxSlippage && showCurveSlippage && (\n                                            <Box\n                                              mb={2}\n                                              width={1}\n                                            >\n                                              <Flex\n                                                alignItems={'center'}\n                                                flexDirection={'row'}\n                                              >\n                                                <Text>\n                                                  Choose max slippage:\n                                                </Text>\n                                                <Tooltip\n                                                  placement={'top'}\n                                                  message={`Max additional slippage on top of the one shown below`}\n                                                >\n                                                  <Icon\n                                                    ml={1}\n                                                    size={'1em'}\n                                                    color={'cellTitle'}\n                                                    name={\"InfoOutline\"}\n                                                  />\n                                                </Tooltip>\n                                              </Flex>\n                                              <Flex\n                                                mt={2}\n                                                alignItems={'center'}\n                                                flexDirection={'row'}\n                                                justifyContent={'space-between'}\n                                              >\n                                                {\n                                                  [0.2,0.5,1,5].map( slippage => (\n                                                    <FastBalanceSelector\n                                                      cardProps={{\n                                                        p:1\n                                                      }}\n                                                      textProps={{\n                                                        fontSize:1\n                                                      }}\n                                                      percentage={slippage}\n                                                      key={`selector_${slippage}`}\n                                                      onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                                      isActive={this.state.maxSlippage === parseFloat(slippage)}\n                                                    />\n                                                  ))\n                                                }\n                                              </Flex>\n                                            </Box>\n                                          )\n                                        }\n                                        <Flex\n                                          width={1}\n                                          alignItems={'center'}\n                                          flexDirection={'row'}\n                                          justifyContent={'space-between'}\n                                        >\n                                        {\n                                          showCurveSlippage ? (\n                                            <Flex\n                                              width={1}\n                                              maxWidth={'50%'}\n                                              alignItems={'center'}\n                                              flexDirection={'row'}\n                                            >\n                                              <Text\n                                                fontSize={1}\n                                                fontWeight={3}\n                                                textAlign={'right'}\n                                                style={{\n                                                  whiteSpace:'nowrap'\n                                                }}\n                                                color={ this.state.depositCurveSlippage.gt(0) ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                              >\n                                                {\n                                                  parseFloat(this.state.depositCurveSlippage.times(100).toFixed(2)) === 0 ?\n                                                    'No Slippage'\n                                                  : `${ this.state.depositCurveSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositCurveSlippage.times(100).abs().toFixed(2)}%`\n                                                }\n                                              </Text>\n                                              <Tooltip\n                                                placement={'top'}\n                                                message={this.functionsUtil.getGlobalConfig(['messages','curveBonusSlippage'])}\n                                              >\n                                                <Icon\n                                                  ml={1}\n                                                  size={'1em'}\n                                                  color={'cellTitle'}\n                                                  name={\"InfoOutline\"}\n                                                />\n                                              </Tooltip>\n                                              <Link\n                                                ml={1}\n                                                color={'copyColor'}\n                                                hoverColor={'primary'}\n                                                onClick={this.showMaxSlippage}\n                                              >\n                                                change\n                                              </Link>\n                                            </Flex>\n                                          ) : this.props.tokenFeesPercentage && (\n                                            <Flex\n                                              alignItems={'center'}\n                                              flexDirection={'row'}\n                                            >\n                                              <Text\n                                                fontSize={1}\n                                                fontWeight={3}\n                                                color={'dark-gray'}\n                                                textAlign={'right'}\n                                                hoverColor={'copyColor'}\n                                              >\n                                                Performance fee: {this.props.tokenFeesPercentage.times(100).toFixed(2)}%\n                                              </Text>\n                                              <Tooltip\n                                                placement={'top'}\n                                                message={this.functionsUtil.getGlobalConfig(['messages','performanceFee'])}\n                                              >\n                                                <Icon\n                                                  ml={1}\n                                                  size={'1em'}\n                                                  color={'cellTitle'}\n                                                  name={\"InfoOutline\"}\n                                                />\n                                              </Tooltip>\n                                            </Flex>\n                                          )\n                                        }\n                                        {\n                                          totalBalance && (\n                                            <Link\n                                              fontSize={1}\n                                              fontWeight={3}\n                                              color={'dark-gray'}\n                                              textAlign={'right'}\n                                              hoverColor={'copyColor'}\n                                              onClick={ (e) => this.setFastBalanceSelector(100) }\n                                            >\n                                              {totalBalance.toFixed(6)} {this.props.selectedToken}\n                                            </Link>\n                                          )\n                                        }\n                                        </Flex>\n                                      </Box>\n                                    )\n                                  }\n                                  <Input\n                                    min={0}\n                                    type={\"number\"}\n                                    required={true}\n                                    height={'3.4em'}\n                                    borderRadius={2}\n                                    fontWeight={500}\n                                    className={styles.input}\n                                    borderColor={'cardBorder'}\n                                    backgroundColor={'cardBg'}\n                                    boxShadow={'none !important'}\n                                    placeholder={`Insert amount`}\n                                    onChange={this.changeInputValue.bind(this)}\n                                    border={`1px solid ${this.props.theme.colors.divider}`}\n                                    value={this.state.inputValue[this.state.action] !== null ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]).toFixed() : ''}\n                                  />\n                                  <Flex\n                                    mt={2}\n                                    alignItems={'center'}\n                                    flexDirection={'row'}\n                                    justifyContent={'space-between'}\n                                  >\n                                    {\n                                      [25,50,75,100].map( percentage => (\n                                        <FastBalanceSelector\n                                          percentage={percentage}\n                                          key={`selector_${percentage}`}\n                                          onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                          isActive={this.state.fastBalanceSelector[this.state.action] === parseInt(percentage)}\n                                        />\n                                      ))\n                                    }\n                                  </Flex>\n                                </Flex>\n                              )\n                            }\n                            {\n                              canPerformAction && \n                                <Flex\n                                  justifyContent={'center'}\n                                  mt={ redeemGovTokens ? 2 : 0 }\n                                >\n                                  <RoundButton\n                                    buttonProps={{\n                                      width:'auto',\n                                      minWidth:[1,1/2],\n                                      style:{\n                                        textTransform:'capitalize'\n                                      },\n                                      disabled:this.state.buttonDisabled\n                                    }}\n                                    handleClick={this.state.buttonDisabled ? null : this.executeAction.bind(this) }\n                                  >\n                                    {this.state.action}{ redeemGovTokens ? ' Gov Tokens' : '' /*(depositCurve ? ' in Curve' : '')*/ }\n                                  </RoundButton>\n                                </Flex>\n                            }\n                          </Flex>\n                        ) : (\n                          <Flex\n                            mt={4}\n                            flexDirection={'column'}\n                          >\n                            <TxProgressBar\n                              web3={this.props.web3}\n                              cancelTransaction={this.cancelTransaction.bind(this)}\n                              hash={this.state.processing[this.state.action].txHash}\n                              endMessage={`Finalizing ${this.state.action} request...`}\n                              waitText={`${this.functionsUtil.capitalize(this.state.action)} estimated in`}\n                            />\n                          </Flex>\n                        )\n                      )\n                    }\n                  </Box>\n                ) : null\n              ) : (\n                <Flex\n                  mt={4}\n                  flexDirection={'column'}\n                >\n                  <FlexLoader\n                    flexProps={{\n                      flexDirection:'row'\n                    }}\n                    loaderProps={{\n                      size:'30px'\n                    }}\n                    textProps={{\n                      ml:2\n                    }}\n                    text={'Loading asset info...'}\n                  />\n                </Flex>\n              )\n            }\n          </Migrate>\n        </Flex>\n        {\n          /*\n          showDepositCurve && this.state.depositCurveEnabled ? (\n            <CurveDeposit\n              {...this.props}\n            />\n          ) :\n          */\n          showRedeemCurve && this.state.redeemCurveEnabled && (\n            <Box\n              mt={3}\n              width={1}\n            >\n              <CurveRedeem\n                {...this.props}\n              />\n            </Box>\n          )\n        }\n        {\n          showBuyFlow &&\n            <Flex\n              mt={3}\n              width={[1,0.5]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <BuyModal\n                {...this.props}\n                showInline={true}\n                availableMethods={[]}\n                buyToken={this.props.selectedToken}\n              />\n            </Flex>\n        }\n\n        <ShareModal\n          confettiEnabled={true}\n          icon={`images/medal.svg`}\n          title={`Congratulations!`}\n          account={this.props.account}\n          closeModal={this.resetModal}\n          tokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'share'}\n          text={`You have successfully deposited in Idle!<br />Enjoy <strong>${this.state.tokenAPY}% APY</strong> on your <strong>${this.props.selectedToken}</strong>!`}\n          tweet={`I'm earning ${this.state.tokenAPY}% APY on my ${this.props.selectedToken} with @idlefinance! Go to ${this.functionsUtil.getGlobalConfig(['baseURL'])} and start earning now from your idle tokens!`}\n        />\n\n      </Flex>\n    );\n  }\n}\n\nexport default DepositRedeem;\n","import theme from '../theme';\nimport { Bar } from '@nivo/bar';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Text, Input, Icon, Tooltip } from \"rimble-ui\";\n\nclass EstimatedEarnings extends Component {\n\n  state = {\n    tokenApy:null,\n    chartData:null,\n    chartProps:null,\n    inputValue:1000,\n    maxInputValue:999999999999999\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    this.loadChart();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged){\n      this.loadChart();\n    }\n  }\n\n  async getTokenApy(){\n    const tokenApy = this.state.tokenApy || await this.functionsUtil.getTokenApy(this.props.tokenConfig);\n    if (this.state.tokenApy !== tokenApy){\n      this.setState({\n        tokenApy\n      });\n    }\n    return tokenApy;\n  }\n\n  async loadChart(){\n\n    const tokenApy = await this.getTokenApy();\n\n    const amount = this.functionsUtil.BNify(this.state.inputValue);\n    const earningsYear = amount.times(tokenApy.div(100));\n\n    const amountMonth = parseFloat(earningsYear.div(12));\n    const amount3Months = parseFloat(earningsYear.div(4));\n    const amount6Months = parseFloat(earningsYear.div(2));\n    const amountYear = parseFloat(earningsYear.div(1));\n\n    const chartData = [\n      {\n        perc:1/12,\n        label:'MONTH',\n        value:amountMonth,\n        month:amountMonth,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        monthColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:3/12,\n        label:'3 MONTHS',\n        value:amount3Months,\n        month3:amount3Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month3Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:6/12,\n        label:'6 MONTHS',\n        value:amount6Months,\n        month6:amount6Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month6Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:1,\n        label:'YEAR',\n        year:amountYear,\n        value:amountYear,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        yearColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      }\n    ];\n\n    let labelTextColorModifiers = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'chart','labelTextColorModifiers']);\n\n    const maxGridLines = 4;\n    const gridYStep = amountYear/maxGridLines;\n    const gridYValues = [0];\n    for (let i=1;i<=maxGridLines;i++){\n      const gridYValue = i*gridYStep;\n      gridYValues.push(gridYValue);\n    }\n\n    const chartProps = {\n      padding: 0.2,\n      animate: false,\n      indexBy: 'label',\n      // enableLabel: false,\n      labelSkipWidth: 16,\n      labelSkipHeight: 16,\n      keys: ['month','month3','month6','year'],\n      colors: ({ id, data }) => data[`${id}Color`],\n      label: d => this.functionsUtil.abbreviateNumber(d.value,2,4)+' '+this.props.selectedToken,\n      labelTextColor: labelTextColorModifiers ? { from: 'color', modifiers: [ labelTextColorModifiers ] } : null,\n      isInteractive:false,\n      minValue:0,\n      gridYValues,\n      // maxValue:amountYear,\n      axisLeft:{\n        format: v => this.functionsUtil.abbreviateNumber(v,1,3),\n        tickValues:gridYValues,\n        orient: 'left',\n        tickSize: 0,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendPosition: 'middle'\n      },\n      axisBottom:{\n        legend: '',\n        tickSize:0,\n        tickPadding: 15,\n        orient: 'bottom',\n      },\n      theme:{\n        labels:{\n          text:{\n            fontSize:15,\n            fontWeight:600,\n            fill:theme.colors.counter,\n            fontFamily: theme.fonts.sansSerif\n          }\n        },\n        axis: {\n          ticks: {\n            text: {\n              fontSize:14,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '9 5'\n          }\n        },\n      },\n      margin: this.props.isMobile ? { top: 0, right: 0, bottom: 30, left: 0 } : { top: 10, right: 0, bottom: 50, left: 65 }\n    }\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  changeInputValue(e){\n    let inputValue = e.target.value.length && !isNaN(e.target.value) ? Math.min(this.state.maxInputValue,parseFloat(e.target.value)) : 0;\n    inputValue = this.functionsUtil.BNify(inputValue);\n    this.setState({\n      inputValue\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const showAPYDisclaimer = idleTokenEnabled && this.functionsUtil.getGlobalConfig(['govTokens','IDLE','showAPR']);\n\n    return (\n      <DashboardCard\n        cardProps={{\n          p:[3,4]\n        }}\n      >\n        <Flex\n          width={1}\n          flexDirection={['column','row']}\n        >\n          <Flex\n            width={[1,0.3]}\n            flexDirection={'column'}\n            justifyContent={'flex-start'}\n          >\n            <Flex\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <AssetField\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'icon',\n                  props:{\n                    mb:2,\n                    height:'2.5em'\n                  }\n                }}\n              />\n              <Text\n                fontSize={2}\n                color={'cellText'}\n                textAlign={'center'}\n              >\n                Set the amount and see your estimated earnings on time based on the current APY: { this.state.tokenApy ? `${this.state.tokenApy.toFixed(2)}%` : null}\n                {\n                  showAPYDisclaimer && \n                    <Flex\n                      style={{\n                        display:'inline-flex',\n                        verticalAlign:'middle'\n                      }}\n                    >\n                      <Tooltip\n                        placement={'top'}\n                        message={this.functionsUtil.getGlobalConfig(['messages','apyLong'])}\n                      >\n                        <Icon\n                          ml={1}\n                          name={\"Info\"}\n                          size={'1em'}\n                          color={'cellTitle'}\n                        />\n                      </Tooltip>\n                    </Flex>\n                }\n              </Text>\n            </Flex>\n            <Flex\n              mt={3}\n              flexDirection={'column'}\n            >\n              <Input\n                min={0}\n                type={\"number\"}\n                required={true}\n                borderRadius={2}\n                fontWeight={500}\n                textAlign={'center'}\n                height={['3em','3.4em']}\n                borderColor={'cardBorder'}\n                boxShadow={'none !important'}\n                max={this.state.maxInputValue}\n                backgroundColor={'cardBgHover'}\n                onChange={this.changeInputValue.bind(this)}\n                border={`1px solid ${theme.colors.divider}`}\n                placeholder={`Insert ${this.props.selectedToken.toUpperCase()} amount`}\n                value={this.state.inputValue && !isNaN(this.state.inputValue) ? this.state.inputValue : ''}\n              />\n            </Flex>\n            <Flex\n              mt={3}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                buttonProps={{\n                  width:[1,1/2],\n                }}\n                handleClick={this.loadChart.bind(this)}\n              >\n                CALCULATE\n              </RoundButton>\n            </Flex>\n          </Flex>\n          <Flex\n            mt={[3,0]}\n            width={[1,0.7]}\n            id={'estimated-earnings-chart'}\n          >\n            {\n              this.props.isMobile ? (\n                <Flex\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  {\n                    this.state.chartData !== null && this.state.chartData.map((v,index) => (\n                      <Flex\n                        py={2}\n                        my={2}\n                        width={1}\n                        flexDirection={'row'}\n                        key={`earnings_${index}`}\n                      >\n                        <Flex\n                          width={0.35}\n                          alignItems={'center'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            color={'legend'}\n                          >\n                            {v.label}\n                          </Text>\n                        </Flex>\n                        <Flex\n                          width={0.65}\n                          position={'relative'}\n                          alignItems={'center'}\n                          minHeight={['20px','35px']}\n                          justifyContent={'center'}\n                        >\n                          <Flex\n                            zIndex={1}\n                            position={'relative'}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Text\n                              fontSize={1}\n                              fontWeight={3}\n                              color={'counter'}\n                            >\n                              {this.functionsUtil.abbreviateNumber(v.value,2,4)} {this.props.selectedToken}\n                            </Text>\n                          </Flex>\n                          <Flex\n                            right={0}\n                            width={v.perc}\n                            position={'absolute'}\n                            height={['20px','35px']}\n                            borderRadius={['20px 0 0 20px','35px 0 0 35px']}\n                            style={{background:`linear-gradient(-90deg, rgba(${v.color},0) 0%, rgba(${v.color},1) 100%)`}}\n                          ></Flex>\n                        </Flex>\n                      </Flex>\n                    ))\n                  }\n                </Flex>\n              ) : (\n                <GenericChart\n                  type={Bar}\n                  height={250}\n                  showLoader={true}\n                  {...this.state.chartProps}\n                  data={this.state.chartData}\n                  parentId={'estimated-earnings-chart'}\n                />\n              )\n            }\n          </Flex>\n        </Flex>\n      </DashboardCard>\n    );\n  }\n}\n\nexport default EstimatedEarnings;","import Title from '../Title/Title';\nimport { Box, Flex } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport FundsOverview from '../FundsOverview/FundsOverview';\nimport DepositRedeem from '../DepositRedeem/DepositRedeem';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport EstimatedEarnings from '../EstimatedEarnings/EstimatedEarnings';\n\nclass AssetPage extends Component {\n\n  state = {\n    tokenFees:{},\n    tokenBalance:{},\n    tokenApproved:{},\n    activeModal:null,\n    govTokensBalance:{},\n    idleTokenBalance:{},\n    redeemableBalance:{},\n    govTokensDisabled:{},\n    availableGovTokens:{},\n    tokenFeesPercentage:{},\n    componentMounted:false\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadTokensInfo(){\n    if (this.props.account){\n      const newState = {...this.state};\n      await this.functionsUtil.asyncForEach(Object.keys(this.props.availableTokens),async (token) => {\n        const tokenConfig = this.props.availableTokens[token];\n        const govTokenAvailableTokens = {};\n        govTokenAvailableTokens[token] = tokenConfig;\n\n        const [\n          tokenFeesPercentage,\n          tokenBalance,\n          tokenFees,\n          idleTokenPrice,\n          idleTokenBalance,\n          tokenApproved,\n          govTokensBalance\n        ] = await Promise.all([\n          this.functionsUtil.getTokenFees(tokenConfig),\n          this.functionsUtil.getTokenBalance(token,this.props.account),\n          this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n          this.functionsUtil.genericContractCall(tokenConfig.idle.token, 'tokenPrice'),\n          this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n          this.functionsUtil.checkTokenApproved(token,tokenConfig.idle.address,this.props.account),\n          this.functionsUtil.getGovTokensUserTotalBalance(this.props.account,govTokenAvailableTokens,'DAI')\n        ]);\n\n        newState.tokenFees[token] = tokenFees;\n        newState.tokenBalance[token] = tokenBalance;\n        newState.tokenApproved[token] = tokenApproved;\n        newState.idleTokenBalance[token] = idleTokenBalance;\n        newState.govTokensBalance[token] = govTokensBalance;\n        newState.tokenFeesPercentage[token] = tokenFeesPercentage;\n        newState.govTokensDisabled[token] = tokenConfig.govTokensDisabled;\n        newState.redeemableBalance[token] = idleTokenBalance ? this.functionsUtil.fixTokenDecimals(idleTokenBalance.times(idleTokenPrice),tokenConfig.decimals) : this.functionsUtil.BNify(0);\n      });\n\n      newState.availableGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n      newState.componentMounted = true;\n      this.setState(newState);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n    const accountChanged = prevProps.account !== this.props.account;\n    if (accountChanged || transactionsChanged){\n      this.loadTokensInfo();\n    }\n  }\n\n  render() {\n\n    const userHasFunds = this.props.account && this.state.idleTokenBalance[this.props.selectedToken] && this.functionsUtil.BNify(this.state.idleTokenBalance[this.props.selectedToken]).gt(0);\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            <Breadcrumb\n              {...this.props}\n              isMobile={this.props.isMobile}\n              path={[this.props.selectedToken]}\n              handleClick={ e => this.props.goToSection(this.props.selectedStrategy) }\n              text={this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])}\n            />\n          </Flex>\n          <Flex\n            width={0.5}\n            justifyContent={'flex-end'}\n          >\n            <CardIconButton\n              icon={'Add'}\n              {...this.props}\n              text={'Add funds'}\n              handleClick={ e => this.setActiveModal('buy') }\n            />\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Deposit / Redeem\n        </Title>\n        <Flex\n          width={1}\n        >\n          <DepositRedeem\n            {...this.props}\n            tokenFees={this.state.tokenFees[this.props.selectedToken]}\n            tokenBalance={this.state.tokenBalance[this.props.selectedToken]}\n            tokenApproved={this.state.tokenApproved[this.props.selectedToken]}\n            govTokensBalance={this.state.govTokensBalance[this.props.selectedToken]}\n            idleTokenBalance={this.state.idleTokenBalance[this.props.selectedToken]}\n            redeemableBalance={this.state.redeemableBalance[this.props.selectedToken]}\n            tokenFeesPercentage={this.state.tokenFeesPercentage[this.props.selectedToken]}\n          />\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverview\n                {...this.props}\n                tokenFees={this.state.tokenFees[this.props.selectedToken]}\n              />\n            </Flex>\n        }\n        {\n          userHasFunds && this.props.account && !this.state.govTokensDisabled[this.props.selectedToken] && Object.keys(this.state.availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id={\"yield-farming\"}\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(this.state.availableGovTokens)}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.30,0.15]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    mobile:false,\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.25],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenRedeemableBalance']),\n                    props:{\n                      width:[0.35,0.30],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                    ]\n                  },\n                  {\n                    title:'DISTRIBUTION',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','userDistributionSpeed']),\n                    props:{\n                      width:[0.35,0.30],\n                    },\n                    fields:[\n                      {\n                        name:'userDistributionSpeed',\n                        props:{\n                          decimals:6\n                        }\n                      }\n                    ]\n                  },\n                  /*\n                  {\n                    title:'APR',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenApr']),\n                    props:{\n                      width:[0.2,0.17],\n                    },\n                    fields:[\n                      {\n                        name:'apr',\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','tokenPrice']),\n                    mobile:false,\n                    props:{\n                      width: 0.17,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                  */\n                ]}\n                {...this.props}\n                availableTokens={this.state.availableGovTokens}\n              />\n            </Flex>\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'estimated-earnings-container'}\n          >\n            <Title my={[3,4]}>Estimated earnings</Title>\n            <EstimatedEarnings\n              {...this.props}\n            />\n          </Flex>\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              enabledTokens={[this.props.selectedToken]}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React, { Component } from 'react';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Box, Text, Icon, Tooltip, Link, Input } from \"rimble-ui\";\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\n\nclass CurveDeposit extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    depositSlippage:null,\n    redeemableBalance:null,\n    migrationContract:null,\n    curveTokensBalance:null,\n    migrationSucceeded:false,\n    fastBalanceSelector:null,\n    migrationContractApproved:false,\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    await this.initToken();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const idleTokenBalanceChanged = prevProps.idleTokenBalance !== this.props.idleTokenBalance;\n    if (accountChanged || idleTokenBalanceChanged){\n      await this.initToken();\n    }\n    \n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = this.state.inputValue !== prevState.inputValue;\n    if (inputValueChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  setInputValue = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    const inputValue = this.props.idleTokenBalance ? this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage) : null;\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    const buttonDisabled = !amount || amount.gt(this.state.idleTokenBalance);\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  approve = async () => {\n    const migrationContract = this.state.migrationContract;\n    if (migrationContract){\n\n      // Check if the migration contract is approved\n      const migrationContractApproved = await this.checkMigrationContractApproved();\n\n      if (!migrationContractApproved){\n\n        const callbackApprove = (tx,error) => {\n          // Send Google Analytics event\n          const eventData = {\n            eventAction: 'approve',\n            eventCategory: 'CurveDeposit',\n            eventLabel: tx ? tx.status : null\n          };\n\n          const txSucceeded = tx && tx.status === 'success';\n\n          // console.log('callbackApprove',tx,error);\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            migrationContractApproved: txSucceeded, // True\n            processing: {\n              ...prevState.processing,\n              txHash:null,\n              loading:false\n            }\n          }));\n\n          if (typeof this.props.callbackApprove === 'function' && txSucceeded){\n            this.props.callbackApprove(tx);\n          }\n\n          this.checkMigration();\n        };\n\n        const callbackReceiptApprove = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              txHash\n            }\n          }));\n        };\n\n        this.functionsUtil.enableERC20(this.props.selectedToken,migrationContract.address,callbackApprove,callbackReceiptApprove);\n\n        this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            txHash:null,\n            loading:true\n          },\n          migrationContractApproved:false\n        }));\n      } else {\n        this.setState({\n          migrationContractApproved:true\n        });\n      }\n    }\n  }\n\n  deposit = async () => {\n\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    if (!inputValue){\n      return false;\n    }\n\n    const callbackDeposit = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveDeposit`,\n        eventAction: this.props.selectedToken,\n        eventValue: inputValue.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackDeposit === 'function' && txSucceeded){\n        this.props.callbackDeposit(tx);\n      }\n    };\n\n    const callbackReceiptDeposit = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.migrationContract.name;\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n    const depositParams = await this.getMigrationParams(_amount);\n\n    this.props.contractMethodSendWrapper(contractName, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  cancelTransaction = async () => {\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  async getMigrationParams(toMigrate){\n    const migrationParams = [];\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.selectedToken]);\n\n    if (!curveTokenConfig){\n      return false;\n    }\n    \n    const migrationContractParams = curveTokenConfig.migrationParams;\n    if (migrationContractParams.n_coins){\n      const amounts = await this.functionsUtil.getCurveAmounts(this.props.selectedToken,toMigrate,true);\n      let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n\n      if (this.state.maxSlippage){\n        minMintAmount = this.functionsUtil.BNify(minMintAmount);\n        minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n        minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n      }\n\n      migrationParams.push(amounts);\n      migrationParams.push(minMintAmount);\n    }\n\n    return migrationParams;\n  }\n\n  async calculateSlippage(){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (inputValue){\n      let underlyingBalanceToDeposit = inputValue;\n      if (underlyingBalanceToDeposit){\n        const idleTokenPrice = await this.functionsUtil.getIdleTokenPrice(this.props.tokenConfig);\n        if (idleTokenPrice){\n          underlyingBalanceToDeposit = underlyingBalanceToDeposit.times(idleTokenPrice);\n        }\n      } else {\n        underlyingBalanceToDeposit = this.functionsUtil.BNify(0);\n      }\n\n      const normalizeIdleTokenBalance = this.functionsUtil.normalizeTokenAmount(underlyingBalanceToDeposit,this.props.tokenConfig.decimals);\n      let depositSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizeIdleTokenBalance);\n      if (depositSlippage){\n        depositSlippage = depositSlippage.times(100);\n      }\n\n      this.setState({\n        depositSlippage\n      });\n    }\n  }\n\n  async checkMigrationContractApproved(){\n    const migrationContract = this.state.migrationContract || await this.functionsUtil.getCurveSwapContract();\n    if (migrationContract){\n      return await this.functionsUtil.checkTokenApproved(this.props.tokenConfig.idle.token,migrationContract.address,this.props.account);\n    }\n    return false;\n  }\n\n  async initToken(){\n\n    // Init and check migration contract\n    const migrationContract = await this.functionsUtil.getCurveSwapContract();\n    const migrationContractApproved = await this.checkMigrationContractApproved();\n\n    this.setState({\n      migrationContract,\n      migrationContractApproved\n    });\n  }\n\n  approveCallback = () => {\n    this.initToken();\n  }\n\n  migrationCallback = () => {\n    this.setState({\n      migrationSucceeded:true\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken){\n      return null;\n    }\n\n    // const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const hasCurveTokens = this.state.curveTokensBalance && this.state.curveTokensBalance.gt(0);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n            {\n              this.props.idleTokenBalance && this.props.idleTokenBalance.gt(0) && (\n                <Box\n                  width={1}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:3,\n                      px:[2,4]\n                    }}\n                  >\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    > \n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ this.state.migrationContractApproved ? 'CheckBox' : 'LooksOne'}\n                          color={ this.state.migrationContractApproved ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Approve the Curve contract\n                        </Text>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ hasCurveTokens ? 'CheckBox' : 'LooksTwo'}\n                          color={ hasCurveTokens ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Deposit your {this.props.tokenConfig.idle.token}\n                        </Text>\n                      </Flex>\n                    </Flex>\n                  </DashboardCard>\n                  {\n                    !this.state.migrationContractApproved ?\n                      this.state.processing.loading ? (\n                        <Flex\n                          mt={3}\n                          flexDirection={'column'}\n                        >\n                          <TxProgressBar\n                            web3={this.props.web3}\n                            waitText={`Approve estimated in`}\n                            hash={this.state.processing.txHash}\n                            endMessage={`Finalizing approve request...`}\n                            cancelTransaction={this.cancelTransaction.bind(this)}\n                          />\n                        </Flex>\n                      ) : (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3,\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'2.3em'}\n                              name={'LockOpen'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={1}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              To deposit your {this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt:3,\n                                width:[1,1/2]\n                              }}\n                              handleClick={this.approve.bind(this)}\n                            >\n                              Approve\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      )\n                    : this.state.processing.loading ? (\n                      <Flex\n                        mt={3}\n                        flexDirection={'column'}\n                      >\n                        <TxProgressBar\n                          web3={this.props.web3}\n                          waitText={`Deposit estimated in`}\n                          hash={this.state.processing.txHash}\n                          endMessage={`Finalizing deposit request...`}\n                          cancelTransaction={this.cancelTransaction.bind(this)}\n                        />\n                      </Flex>\n                    ) : (\n                      <Box\n                        mt={2}\n                        width={1}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text>\n                            Choose max slippage:\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={`Max additional slippage on top of the one shown below`}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'space-between'}\n                        >\n                          {\n                            [0.2,0.5,1,5].map( slippage => (\n                              <FastBalanceSelector\n                                cardProps={{\n                                  p:1\n                                }}\n                                textProps={{\n                                  fontSize:1\n                                }}\n                                percentage={slippage}\n                                key={`selector_${slippage}`}\n                                onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                isActive={this.state.maxSlippage === parseFloat(slippage)}\n                              />\n                            ))\n                          }\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                        >\n                          <Flex\n                            mb={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={this.state.depositSlippage ? 'space-between' : 'flex-end'}\n                          >\n                            {\n                              this.state.depositSlippage && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    textAlign={'right'}\n                                    style={{\n                                      whiteSpace:'nowrap'\n                                    }}\n                                    color={ parseFloat(this.state.depositSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                  >\n                                    {\n                                      parseFloat(this.state.depositSlippage.toFixed(3)) === 0 ?\n                                        'No Slippage'\n                                      : `${ this.state.depositSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositSlippage.abs().toFixed(3)}%`\n                                    }\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.state.depositSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              )\n                            }\n                            {\n                              this.props.idleTokenBalance && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'flex-end'}\n                                >\n                                  <Link\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'right'}\n                                    hoverColor={'copyColor'}\n                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                    style={{\n                                      maxWidth:'100%',\n                                      overflow:'hidden',\n                                      whiteSpace:'nowrap',\n                                      textOverflow:'ellipsis'\n                                    }}\n                                  >\n                                    {this.props.idleTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {this.props.selectedToken}\n                                  </Link>\n                                </Flex>\n                              )\n                            }\n                          </Flex>\n                          <Input\n                            min={0}\n                            type={\"number\"}\n                            required={true}\n                            height={'3.4em'}\n                            borderRadius={2}\n                            fontWeight={500}\n                            boxShadow={'none !important'}\n                            placeholder={`Insert amount`}\n                            onChange={this.changeInputValue.bind(this)}\n                            border={`1px solid ${this.props.theme.colors.divider}`}\n                            value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                          />\n                          <Flex\n                            mt={2}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            {\n                              [25,50,75,100].map( percentage => (\n                                <FastBalanceSelector\n                                  percentage={percentage}\n                                  key={`selector_${percentage}`}\n                                  onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                  isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                                />\n                              ))\n                            }\n                          </Flex>\n                          <Flex\n                            mt={2}\n                            justifyContent={'center'}\n                          >\n                            <RoundButton\n                              buttonProps={{\n                                mt:2,\n                                width:[1,1/2],\n                                disabled:this.state.buttonDisabled\n                              }}\n                              handleClick={this.deposit.bind(this)}\n                            >\n                              Deposit\n                            </RoundButton>\n                          </Flex>\n                        </Flex>\n                      </Box>\n                    )\n                  }\n                </Box>\n              )\n            }\n          {\n            /*\n            this.state.tokenConfig && this.state.redeemableBalance ? (\n              <Box width={1}>\n                <Migrate\n                  {...this.props}\n                  showActions={false}\n                  getTokenPrice={false}\n                  migrationTextProps={{\n                    fontWeight:500\n                  }}\n                  isMigrationTool={true}\n                  migrationImage={{\n                    mb:1,\n                    height:'1.8em',\n                    src:curveConfig.params.image\n                  }}\n                  showBalanceSelector={true}\n                  waitText={'Deposit estimated in'}\n                  tokenConfig={this.state.tokenConfig}\n                  callbackApprove={this.approveCallback.bind(this)}\n                  migrationParams={this.getMigrationParams.bind(this)}\n                  migrationCallback={this.migrationCallback.bind(this)}\n                  approveText={`To deposit your ${this.props.tokenConfig.idle.token} you need to approve Curve smart-contract first.`}\n                  migrationText={`You can deposit ${this.state.redeemableBalance.toFixed(4)} ${this.props.tokenConfig.idle.token} in the Curve Pool${ this.state.depositSlippage ? (this.state.depositSlippage.gte(0) ? ` with <span style=\"color:${this.props.theme.colors.transactions.status.failed}\">${this.state.depositSlippage.times(100).toFixed(2)}% of slippage</span>` : ` with <span style=\"color:${this.props.theme.colors.transactions.status.completed}\">${Math.abs(parseFloat(this.state.depositSlippage.times(100).toFixed(2)))}% of bonus</span>`) : '' }.`}\n                >\n                  {\n                    !this.props.account ? (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Input'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            Please connect with your wallet interact with Idle.\n                          </Text>\n                          <RoundButton\n                            buttonProps={{\n                              mt:2,\n                              width:[1,1/2]\n                            }}\n                            handleClick={this.props.connectAndValidateAccount}\n                          >\n                            Connect\n                          </RoundButton>\n                        </Flex>\n                      </DashboardCard>\n                    ) : (\n                      <DashboardCard\n                        cardProps={{\n                          p:3\n                        }}\n                      >\n                        {\n                          this.state.migrationSucceeded ? (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'DoneAll'}\n                                color={this.props.theme.colors.transactions.status.completed}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You have successfully deposited your {this.props.tokenConfig.idle.token} in the Curve Pool!\n                              </Text>\n                            </Flex>\n                          ) : (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'MoneyOff'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You don't have any {this.props.tokenConfig.idle.token} in your wallet.\n                              </Text>\n                            </Flex>\n                          )\n                        }\n                      </DashboardCard>\n                    )\n                  }\n                </Migrate>\n              </Box>\n            ) : null\n            */\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveDeposit;","import theme from '../theme';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\n// import { linearGradientDef } from '@nivo/core'\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport ChartCustomTooltip from '../ChartCustomTooltip/ChartCustomTooltip';\nimport ChartCustomTooltipRow from '../ChartCustomTooltipRow/ChartCustomTooltipRow';\n\nclass PortfolioEquityCurve extends Component {\n  state = {\n    startDate:null,\n    chartData:null,\n    chartProps:null,\n    chartwidth:null,\n    chartHeight:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentDidMount(){\n    this.loadUtils();\n    this.loadChartData();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    const quickDateSelectionChanged = prevProps.quickDateSelection !== this.props.quickDateSelection;\n    const tokenChanged = JSON.stringify(prevProps.enabledTokens) !== JSON.stringify(this.props.enabledTokens);\n    if (tokenChanged || quickDateSelectionChanged){\n      this.setState({\n        chartData:null\n      },() => {\n        this.componentDidMount();\n      });\n    }\n\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (mobileChanged){\n      this.loadChartData();\n    }\n  }\n\n  async loadChartData() {\n\n    let enabledTokens = this.props.enabledTokens;\n    if (!enabledTokens || !enabledTokens.length){\n      enabledTokens = Object.keys(this.props.availableTokens);\n    }\n\n    const curveTxs = await this.functionsUtil.getCurveTxs(this.props.account,0,'latest',enabledTokens);\n\n    const chartData = [];\n    let tokensBalance = [];\n    const processedTxs = {};\n    let firstTxTimestamp = null;\n    let totalBalance = this.functionsUtil.BNify(0);\n    const curvePoolContract = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    if (curveTxs && curveTxs.length){\n\n      curveTxs.forEach((tx,index) => {\n\n        if (!processedTxs[tx.hash]){\n          processedTxs[tx.hash] = [];\n        }\n\n        if (processedTxs[tx.hash].includes(tx.action)){\n          return;\n        }\n        \n        firstTxTimestamp = firstTxTimestamp ? Math.min(firstTxTimestamp,parseInt(tx.timeStamp)) : parseInt(tx.timeStamp);\n\n        const curveTokens = this.functionsUtil.BNify(tx.curveTokens);\n\n        switch (tx.action){\n          case 'CurveIn':\n          case 'CurveZapIn':\n          case 'CurveDepositIn':\n          case 'CurveTransferIn':\n            totalBalance = totalBalance.plus(curveTokens);\n          break;\n          case 'CurveOut':\n          case 'CurveZapOut':\n          case 'CurveDepositOut':\n          case 'CurveTransferOut':\n            totalBalance = totalBalance.minus(curveTokens);\n          break;\n          default:\n          break;\n        }\n\n        // Reset totalBalance if below zero\n        if (totalBalance.lt(0)){\n          totalBalance = this.functionsUtil.BNify(0);\n        }\n\n        const action = tx.action;\n        const balance = totalBalance;\n        const timeStamp = parseInt(tx.timeStamp);\n        const curveTokenPrice = this.functionsUtil.fixTokenDecimals(tx.curveTokenPrice,curvePoolContract.decimals);\n\n        // console.log(this.functionsUtil.strToMoment(timeStamp*1000).format('YYYY/MM/DD HH:mm'),tx.hash,tx.action,curveTokens.toString(),totalBalance.toString());\n\n        if (!curveTokenPrice.isNaN() && !curveTokenPrice.isNaN()){\n          tokensBalance.push({\n            action,\n            balance,\n            timeStamp,\n            curveTokens,\n            curveTokenPrice\n          });\n\n          processedTxs[tx.hash].push(action);\n        }\n      });\n    }\n\n    // Calculate Start Date\n    let startDate = null;\n    const currentDate = this.functionsUtil.strToMoment(new Date());\n\n    switch (this.props.quickDateSelection){\n      case 'week':\n        startDate = currentDate.clone().subtract(1,'week');\n      break;\n      case 'month':\n        startDate = currentDate.clone().subtract(1,'month');\n      break;\n      case 'month3':\n        startDate = currentDate.clone().subtract(3,'month');\n      break;\n      case 'month6':\n        startDate = currentDate.clone().subtract(6,'month');\n      break;\n      default:\n        startDate = null;\n      break;\n    }\n\n    const days = {};\n    let prevBalances = {};\n    let prevTimestamp = null;\n    let minChartValue = null;\n    let maxChartValue = null;\n    const aggregatedBalancesKeys = {};\n    const tokensBalancesPerDate = {};\n    let aggregatedBalance = this.functionsUtil.BNify(0);\n    // let curveTokenBalance = this.functionsUtil.BNify(0);\n    const currTimestamp = parseInt(new Date().getTime()/1000)+86400;\n\n    const tokensData = await this.functionsUtil.getTokenApiData(Object.values(this.props.availableTokens)[0].address,false,firstTxTimestamp,null,false,3600);\n\n    for (let timeStamp=firstTxTimestamp;timeStamp<=currTimestamp;timeStamp+=this.props.frequencySeconds){\n\n      let foundBalances = {};\n      let tokensBalances = {};\n      timeStamp = Math.min(currTimestamp,timeStamp);\n      let momentDate = this.functionsUtil.strToMoment(timeStamp*1000);\n\n      // eslint-disable-next-line\n      const filteredTokenData = tokensData.filter(tx => (tx.timestamp>=prevTimestamp && tx.timestamp<=timeStamp));\n\n      // eslint-disable-next-line\n      let filteredBalances = tokensBalance.filter(tx => (tx.timeStamp<=timeStamp && (!prevTimestamp || tx.timeStamp>prevTimestamp)));\n      \n      if (!filteredBalances.length){\n        if (prevBalances){\n          filteredBalances = prevBalances;\n          const lastFilteredTx = Object.values(filteredBalances).pop();\n          const currentBalance = parseFloat(lastFilteredTx.balance);\n\n          const lastTokenData = Object.values(filteredTokenData).pop();\n          let curveTokenPrice = null;\n          if (lastTokenData){\n            curveTokenPrice = await this.functionsUtil.getCurveTokenPrice(lastTokenData.blocknumber);\n          }\n\n          // Take idleToken price from API and calculate new balance\n          if (currentBalance>0 && timeStamp>firstTxTimestamp && curveTokenPrice){\n            // Set new curveTokenPrice\n            lastFilteredTx.curveTokenPrice = curveTokenPrice;\n            filteredBalances = [lastFilteredTx];\n          }\n        } else {\n          filteredBalances = [{\n            balance:this.functionsUtil.BNify(0),\n            curveTokenPrice:this.functionsUtil.BNify(0)\n          }];\n        }\n      }\n\n      const lastTx = Object.assign([],filteredBalances).pop();\n      let lastTxBalance = this.functionsUtil.BNify(lastTx.balance).times(lastTx.curveTokenPrice);\n\n      tokensBalances[curvePoolContract.token] = this.functionsUtil.BNify(lastTx.balance);\n      aggregatedBalance = lastTxBalance;\n\n      foundBalances = filteredBalances;\n\n      // console.log(momentDate.format('YYYY/MM/DD 00:00'),lastTx.balance.toString(),lastTx.curveTokenPrice.toString(),lastTxBalance.toString());\n\n      if (startDate === null || momentDate.isSameOrAfter(startDate)){\n        \n        if (momentDate.isAfter(new Date(),'day')){\n          momentDate = this.functionsUtil.strToMoment(new Date());\n        }\n\n        // Force date to midnight\n        const formattedDate = momentDate.format('YYYY/MM/DD 00:00');\n\n        // Save days for axisBottom format\n        days[momentDate.format('YYYY/MM/DD')] = 1;\n\n        const aggregatedBalanceParsed = parseFloat(parseFloat(aggregatedBalance.toFixed(6)));\n\n        aggregatedBalancesKeys[formattedDate] = aggregatedBalanceParsed;\n        tokensBalancesPerDate[formattedDate] = tokensBalances;\n\n        // console.log(formattedDate,tokensBalances);\n\n        minChartValue = minChartValue === null ? aggregatedBalanceParsed : Math.min(minChartValue,aggregatedBalanceParsed);\n        maxChartValue = maxChartValue === null ? aggregatedBalanceParsed : Math.max(maxChartValue,aggregatedBalanceParsed);\n      }\n\n      prevTimestamp = timeStamp;\n      prevBalances = foundBalances;\n    }\n\n    const aggregatedBalances = Object.keys(aggregatedBalancesKeys).map(date => ({\n      x:date,\n      y:aggregatedBalancesKeys[date],\n      balances:tokensBalancesPerDate[date]\n    }));\n\n    let itemIndex = 0;\n    aggregatedBalances.forEach( (item,index) => {\n      const itemPos = Math.floor(itemIndex/aggregatedBalances.length*100);\n      aggregatedBalances[index].itemPos = itemPos;\n      itemIndex++;\n    });\n\n    /*\n    aggregatedBalances.push({\n      x:momentDate.format('YYYY/MM/DD HH:mm'),\n      y:aggregatedBalance\n    });\n    */\n\n    // Add day before to start with zero balance\n    /*\n    const firstTxMomentDate = this.functionsUtil.strToMoment(firstTxTimestamp*1000);\n    if ((startDate === null || startDate.isSameOrBefore(firstTxMomentDate)) && aggregatedBalances.length){\n      const firstItem = aggregatedBalances[0];\n      const firstDate = this.functionsUtil.strToMoment(firstItem.x,'YYYY/MM/DD HH:mm');\n      firstDate.subtract(1,'day');\n      aggregatedBalances.unshift({\n        x:firstDate.format('YYYY/MM/DD HH:mm'),\n        y:0\n      });\n    }\n    */\n\n    // Add token Data\n    chartData.push({\n      id:'USD',\n      color: 'hsl('+ this.functionsUtil.getGlobalConfig(['stats','tokens','USD','color','hsl']).join(',')+')',\n      data:aggregatedBalances\n    });\n\n    let yFormatDecimals = 2;\n    if (maxChartValue-minChartValue<1){\n      yFormatDecimals = 4;\n    }\n\n    if (maxChartValue === minChartValue){\n      minChartValue = Math.max(0,maxChartValue-1);\n    }\n\n    const maxGridLines = 5;\n    const gridYStep = (maxChartValue-minChartValue)/maxGridLines;\n    const gridYValues = [];\n    for (let i=0;i<=maxGridLines;i++){\n      const gridYValue = parseFloat(parseFloat(minChartValue+(i*gridYStep)).toFixed(6));\n      gridYValues.push(gridYValue);\n    }\n    \n    const axisBottomMaxValues = 10;\n    const daysCount = Object.values(days).length;    \n    const daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n    const chartProps = {\n      xScale:{\n        type: 'time',\n        format: '%Y/%m/%d %H:%M',\n      },\n      yScale:{\n        type: 'linear',\n        stacked: false,\n        min: minChartValue,\n        max: maxChartValue\n      },\n      xFormat:'time:%b %d %Y',\n      yFormat:value => this.functionsUtil.formatMoney(value,yFormatDecimals),\n      axisBottom: this.props.isMobile ? null : {\n        legend: '',\n        tickSize:0,\n        format: '%b %d',\n        tickPadding: 15,\n        orient: 'bottom',\n        legendOffset: 36,\n        legendPosition: 'middle',\n        tickValues:'every '+daysFrequency+' days'\n      },\n      gridYValues,\n      pointSize:0,\n      useMesh:true,\n      axisLeft: this.props.isMobile ? null : {\n        legend: '',\n        tickSize: 0,\n        orient: 'left',\n        tickPadding: 10,\n        tickRotation: 0,\n        legendOffset: -70,\n        tickValues:gridYValues,\n        legendPosition: 'middle',\n        format: v => this.functionsUtil.abbreviateNumber(v,2),\n      },\n      animate:true,\n      pointLabel:'y',\n      areaOpacity:0.1,\n      enableArea:true,\n      enableSlices:'x',\n      enableGridY:true,\n      curve:'monotoneX',\n      enableGridX:false,\n      pointBorderWidth:1,\n      colors:d => d.color,\n      pointLabelYOffset:-12,\n      areaBaselineValue:minChartValue,\n      pointColor:{ from: 'color', modifiers: []},\n      theme:{\n        axis: {\n          ticks: {\n            text: {\n              fontSize:12,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '8 4'\n          }\n        },\n      },\n      /*\n      defs:[\n        linearGradientDef('gradientA', [\n          { offset: 0, color: 'inherit' },\n          { offset: 100, color: 'inherit', opacity: 0 },\n        ]),\n      ],\n      fill:[{ match: '*', id: 'gradientA' }],\n      */\n      margin: this.props.isMobile ? { top: 20, right: 25, bottom: 25, left: 20 } : { top: 30, right: 50, bottom: 45, left: 50 },\n      sliceTooltip:(slideData) => {\n        const { slice } = slideData;\n        const point = slice.points[0];\n        return (\n          <ChartCustomTooltip\n            point={point}\n          >\n            <ChartCustomTooltipRow\n              color={point.color}\n              label={point.serieId}\n              value={`$ ${point.data.yFormatted}`}\n            />\n            {\n            typeof point.data.balances === 'object' && Object.keys(point.data.balances).length>0 &&\n              Object.keys(point.data.balances).map(token => {\n                if (token === point.serieId){\n                  return null;\n                }\n                const tokenInfo = this.functionsUtil.getGlobalConfig(['stats','tokens',token]);\n                if (tokenInfo){\n                  const tokenName = tokenInfo.name ? tokenInfo.name : token;\n                  const color = tokenInfo.color.hex;\n                  const balance = point.data.balances[token];\n                  let formattedBalance = this.functionsUtil.formatMoney(balance,2);\n                  if (parseFloat(balance)>=0.01){\n                    return (\n                      <ChartCustomTooltipRow\n                        label={tokenName}\n                        color={color}\n                        key={`row_${token}`}\n                        value={`${formattedBalance}`}\n                      />\n                    );\n                  }\n                }\n                return null;\n              })\n            }\n          </ChartCustomTooltip>\n        );\n      }\n    };\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  render() {\n    return (\n      <GenericChart\n        type={Line}\n        showLoader={true}\n        {...this.state.chartProps}\n        data={this.state.chartData}\n        parentId={this.props.parentId}\n        height={this.props.chartHeight}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default PortfolioEquityCurve;","import theme from '../theme';\nimport Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Flex, Heading, Text } from \"rimble-ui\";\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport PortfolioEquityCurve from '../PortfolioEquityCurve/PortfolioEquityCurve';\n\nclass FundsOverviewCurve extends Component {\n\n  state = {\n    compAPR:null,\n    aggregatedValues:[],\n    govTokensUserBalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    await this.functionsUtil.getCurveAvgBuyPrice();\n\n    // debugger;\n\n    await this.functionsUtil.getCurveAvgSlippage();\n\n    // debugger;\n    /*\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const [govTokensUserBalance,avgAPY,days] = await Promise.all([\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,'DAI'),\n      this.functionsUtil.loadAssetField('avgAPY',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '-') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    let [tokenAllocation,compAPR] = await Promise.all([\n      this.functionsUtil.getTokenAllocation(this.props.tokenConfig,false,false),\n      this.functionsUtil.getCompAPR(this.props.selectedToken,this.props.tokenConfig)\n    ]);\n\n    if (tokenAllocation){\n      const compoundInfo = this.props.tokenConfig.protocols.find( p => (p.name === 'compound') );\n      if (compoundInfo){\n        if (tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()]){\n          const compoundAllocationPerc = tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()];\n          compAPR = compAPR.times(compoundAllocationPerc);\n        }\n      }\n    }\n\n    this.setState({\n      compAPR,\n      aggregatedValues,\n      govTokensUserBalance\n    });\n    */\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Text\n                          mt={2}\n                          fontWeight={2}\n                          fontSize={[1,2]}\n                          color={'cellText'}\n                        >\n                          {v.props.title}\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquityCurve\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLentCurve',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPercCurve',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            {\n              /*\n              <Flex\n                mb={[2,0]}\n                width={[1,1/5]}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'flex-start'}\n              >\n                <Title\n                  mb={2}\n                  fontSize={[3,4]}\n                  component={Heading.h3}\n                >\n                  Fees\n                </Title>\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'feesCounter',\n                    props:{\n                      decimals:7,\n                      maxPrecision:8,\n                      style:{\n                        fontWeight:300,\n                        fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                        color:theme.colors.counter\n                      },\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n              */\n            }\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveApy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Avg Slippage\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveAvgSlippage',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverviewCurve;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport { Box, Flex, Text, Icon } from \"rimble-ui\";\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport CurveDeposit from '../CurveDeposit/CurveDeposit';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport TransactionField from '../TransactionField/TransactionField';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport FundsOverviewCurve from '../FundsOverviewCurve/FundsOverviewCurve';\n\nclass AssetPage extends Component {\n\n  state = {\n    inputValue:{},\n    processing:{},\n    tokenFees:null,\n    canRedeem:null,\n    canDeposit:null,\n    action:'deposit',\n    activeModal:null,\n    tokenConfig:null,\n    tokenBalance:null,\n    tokenApproved:null,\n    selectedToken:null,\n    availableTokens:{},\n    redeemBalance:null,\n    depositBalance:null,\n    buttonDisabled:false,\n    curveTokenPrice:null,\n    depositSlippage:null,\n    idleTokenBalance:null,\n    withdrawSlippage:null,\n    govTokensBalance:null,\n    curveZapContract:null,\n    curveTokenConfig:null,\n    curveTokensAmounts:{},\n    govTokensDisabled:null,\n    componentMounted:false,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    redeemableBalance:null,\n    fastBalanceSelector:{},\n    curveAvailableTokens:{},\n    tokenFeesPercentage:null,\n    redeemUnevenAmounts:false,\n    curveDepositContract:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  changeFromToken = (selectedToken) => {\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    this.props.goToSection(`${curveConfig.params.route}/${selectedToken}`);\n  }\n\n  getSelectedToken(){\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    return this.props.urlParams.param1 && curveAvailableTokens[this.props.urlParams.param1] ? this.props.urlParams.param1 : Object.keys(curveAvailableTokens)[0];\n  }\n\n  setSelectedToken = async (selectedToken) => {\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n    this.setState({\n      tokenConfig,\n      selectedToken,\n      availableTokens,\n      curveTokenConfig\n    });\n  }\n\n  loadTokensInfo = async () => {\n\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    this.setState({\n      curveAvailableTokens\n    });\n\n    const selectedToken = this.getSelectedToken();\n    // Check if token is set the query params\n    if (selectedToken && selectedToken !== this.props.urlParams.param1){\n      this.changeFromToken(selectedToken);\n      return await this.setSelectedToken(selectedToken);\n    } else if (selectedToken !== this.state.selectedToken){\n      await this.setSelectedToken(selectedToken);\n    }\n\n    const newState = {...this.state};\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n\n    if (newState.selectedToken !== selectedToken){\n      newState.selectedToken = selectedToken;\n    }\n\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n\n    const [\n      curveZapContract,\n      curvePoolContract,\n      curveSwapContract,\n      curveDepositContract\n    ] = await Promise.all([\n      this.functionsUtil.getCurveZapContract(),\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract()\n    ]);\n\n    newState.curveZapContract = curveZapContract;\n    newState.curvePoolContract = curvePoolContract;\n    newState.curveSwapContract = curveSwapContract;\n    newState.curveDepositContract = curveDepositContract;\n\n    newState.availableTokens = availableTokens;\n\n\n    // console.log('curveTokenPrice',newState.curveTokenPrice.toFixed(6),'curveTokenBalance',newState.curveTokenBalance.toFixed(6),'redeemableBalance',newState.redeemableBalance.toFixed(20),'tokenBalance',newState.tokenBalance.toFixed(20));\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[selectedToken] = tokenConfig;\n\n    newState.tokenConfig = tokenConfig;\n    newState.curveTokenConfig = curveTokenConfig;\n\n    if (this.props.account){\n      [\n        newState.curveTokenPrice,\n        newState.curveTokenBalance,\n        newState.tokenFeesPercentage,\n        newState.tokenFees,\n        newState.tokenBalance,\n        newState.idleTokenBalance,\n        newState.tokenApproved,\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokenPrice(),\n        this.functionsUtil.getCurveTokenBalance(),\n        this.functionsUtil.getTokenFees(tokenConfig),\n        this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n        this.functionsUtil.getTokenBalance(selectedToken,this.props.account),\n        this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n        this.functionsUtil.checkTokenApproved(selectedToken,curveDepositContract.address,this.props.account),\n      ]);\n\n\n      newState.processing = {\n        redeem:{\n          txHash:null,\n          loading:false\n        },\n        deposit:{\n          txHash:null,\n          loading:false\n        },\n        approve:{\n          txHash:null,\n          loading:false\n        },\n      };\n      newState.inputValue = {\n        redeem:null,\n        deposit:null\n      };\n      newState.fastBalanceSelector = {\n        redeem:null,\n        deposit:null\n      };\n\n      newState.componentMounted = true;\n      newState.depositBalance = newState.tokenBalance;\n      newState.redeemBalance = newState.redeemableBalance;\n      newState.govTokensDisabled = tokenConfig.govTokensDisabled;\n      newState.canRedeem = newState.curveTokenBalance && newState.curveTokenBalance.gt(0);\n      newState.canDeposit = newState.idleTokenBalance && newState.idleTokenBalance.gt(0);\n      newState.redeemableBalance = newState.curveTokenBalance ? newState.curveTokenBalance.times(newState.curveTokenPrice) : this.functionsUtil.BNify(0);\n    }\n\n    this.setState(newState);\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async calculateSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,this.state.curvePoolContract.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositBalance = amount;\n        newState.depositSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      case 'redeem':\n        newState.redeemBalance = amount;\n        newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.urlParams.param1 !== this.props.urlParams.param1;\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n\n    if (accountChanged || transactionsChanged || tokenChanged){\n      await this.loadTokensInfo();\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const redeemUnevenAmountsChanged = this.state.redeemUnevenAmounts !== prevState.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n    if (actionChanged || fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    if (actionChanged){\n      this.updateAssetSelector();\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  updateAssetSelector = async () => {\n    const newState = {};\n    switch (this.state.action){\n      case 'deposit':\n        this.loadTokensInfo();\n      break;\n      case 'redeem':\n        // this.loadTokensInfo();\n        const tokenConfig = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n        newState.curveAvailableTokens = {};\n        newState.curveTokenConfig = tokenConfig;\n        newState.selectedToken = tokenConfig.token;\n        newState.curveAvailableTokens[tokenConfig.token] = tokenConfig;\n      break;\n      default:\n      break;\n    }\n\n    this.setState(newState);\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.state.tokenBalance ? this.functionsUtil.BNify(this.state.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          amount = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n        } else {\n          amount = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  changeInputValue = (e) => {\n    if (!this.state.action){\n      return false;\n    }\n\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.state.tokenBalance));\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.curveTokenBalance)) );\n        } else {\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.redeemableBalance)) );\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = this.state.tokenApproved;\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.state.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.functionsUtil.enableERC20(this.state.selectedToken,this.state.curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    let loading = true;\n\n    switch (this.state.action){\n      // Handle deposit in curve\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.state.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if (this.state.metaTransactionsEnabled && txError){\n            this.setState({\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,tokensToDeposit);\n        const minMintAmount = await this.functionsUtil.genericContractCall(this.state.curveSwapContract.name,'calc_token_amount',[amounts,true]);\n        const depositParams = [amounts,minMintAmount];\n\n        // No need for callback atm\n        contractSendResult = await this.props.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n      break;\n      case 'redeem':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        let curveTokensToRedeem = null;\n        if (selectedPercentage){\n          curveTokensToRedeem = this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage);\n        } else {\n          curveTokensToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals));\n          if (!this.state.redeemUnevenAmounts){\n            const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n            curveTokensToRedeem = curveTokensToRedeem.div(curveTokenPrice);\n          }\n        }\n\n        if (!curveTokensToRedeem){\n          return false;\n        }\n\n        const callbackRedeem = (tx,error) => {\n          const txSucceeded = tx.status === 'success';\n\n          // Send Google Analytics event\n          const eventData = {\n            eventLabel: tx.status,\n            eventCategory: `CurveRedeem`,\n            eventAction: this.state.selectedToken,\n            eventValue: curveTokensToRedeem.toFixed()\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          }\n        };\n\n        const callbackReceiptRedeem = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const _amount = this.functionsUtil.normalizeTokenAmount(curveTokensToRedeem,this.state.curvePoolContract.decimals).toString();\n        let min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,0);\n\n        const contractName = this.state.curveDepositContract.name;\n        if (this.state.redeemUnevenAmounts){\n          console.log('remove_liquidity_imbalance',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_imbalance', [min_amounts, _amount], null, callbackRedeem, callbackReceiptRedeem);\n        } else {\n          min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,_amount);\n          console.log('remove_liquidity',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts], null, callbackRedeem, callbackReceiptRedeem);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    // console.log('contractSendResult',contractSendResult);\n\n    if (contractSendResult !== false){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    const userHasFunds = this.props.account && this.state.curveTokenBalance && this.functionsUtil.BNify(this.state.curveTokenBalance).gt(0);\n    const canPerformAction = true;\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            {\n              <Breadcrumb\n                {...this.props}\n                isMobile={this.props.isMobile}\n                path={['Boost',this.state.selectedToken]}\n                handleClick={ e => this.props.goToSection('best') }\n                text={this.functionsUtil.getGlobalConfig(['strategies','best','title'])}\n              />\n            }\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Curve Pool\n        </Title>\n        <Flex\n          width={1}\n        >\n          <Flex\n            width={1}\n            alignItems={'center'}\n            flexDirection={'column'}\n            justifyContent={'center'}\n          >\n            <Flex\n              width={[1,0.36]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Box\n                width={1}\n              >\n                <Text\n                  mb={1}\n                >\n                  Select your asset:\n                </Text>\n                <AssetSelector\n                  {...this.props}\n                  id={'token-from'}\n                  onChange={this.changeFromToken}\n                  selectedToken={this.state.selectedToken}\n                  tokenConfig={this.state.curveTokenConfig}\n                  showBalance={this.state.action === 'deposit'}\n                  availableTokens={this.state.curveAvailableTokens}\n                />\n              </Box>\n              <Box\n                width={1}\n              >\n                {\n                  canPerformAction ? (\n                    <Flex\n                      mt={2}\n                      flexDirection={'column'}\n                    >\n                      <Text\n                        mb={2}\n                      >\n                        Choose the action:\n                      </Text>\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('deposit');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'deposit' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'deposit'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Deposit\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('redeem');\n                            }\n                          }}\n                          isInteractive={true}\n                          isDisabled={ !this.state.canRedeem }\n                          isActive={ this.state.action === 'redeem' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'redeem'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Redeem\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </Flex>\n                  ) : (\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    >\n                      <Icon\n                        size={'2.3em'}\n                        name={'MoneyOff'}\n                        color={'cellText'}\n                      />\n                      <Text\n                        mt={2}\n                        fontSize={2}\n                        color={'cellText'}\n                        textAlign={'center'}\n                      >\n                        You don't have any {this.state.tokenConfig.idle.token} in your wallet.\n                      </Text>\n                    </Flex>\n                  )\n                }\n              </Box>\n            </Flex>\n            <Flex\n              width={1}\n              mt={ this.props.account ? 3 : 0 }\n            >\n            {\n              this.state.action === 'deposit' ? (\n                <CurveDeposit\n                  {...this.props}\n                  {...this.state}\n                />\n              ) : this.state.action === 'redeem' && (\n                <CurveRedeem\n                  {...this.props}\n                  {...this.state}\n                />\n              )\n            }\n            </Flex>\n          </Flex>\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverviewCurve\n                {...this.props}\n                tokenFees={this.state.tokenFees}\n                tokenConfig={this.state.tokenConfig}\n                selectedToken={this.state.selectedToken}\n                availableTokens={this.state.availableTokens}\n                enabledTokens={Object.keys(this.state.availableTokens)}\n              />\n            </Flex>\n        }\n        {\n          /*\n          this.props.account && !this.state.govTokensDisabled[this.state.selectedToken] && Object.keys(availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id=\"earnings-estimation\"\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(availableGovTokens)}\n                handleClick={(props) => {}}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.33,0.22]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.26],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    props:{\n                      width:[0.33,0.26],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                      {\n                        name:'tooltip',\n                        props:{\n                          placement:'bottom',\n                          message:'The shown balance may be lower than the real one.',\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    mobile:false,\n                    props:{\n                      width: 0.26,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                ]}\n                {...this.props}\n                availableTokens={availableGovTokens}\n              />\n            </Flex>\n          */\n        }\n        {\n          /*\n          this.props.account && \n            <Flex\n              mb={[3,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'estimated-earnings-container'}\n            >\n              <Title my={[3,4]}>Estimated earnings</Title>\n              <EstimatedEarnings\n                {...this.props}\n              />\n            </Flex>\n          */\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              availableTokens={this.state.availableTokens}\n              enabledTokens={Object.keys(this.state.availableTokens)}\n              enabledActions={['CurveIn','CurveOut','CurveZapIn','CurveZapOut','CurveTransferIn','CurveTransferOut','CurveDepositIn','CurveDepositOut']}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.state.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Button,\n  Form,\n  Icon,\n  Flex,\n  Link\n} from \"rimble-ui\";\nimport axios from 'axios';\nimport colors from '../../colors';\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\nimport globalConfigs from '../../configs/globalConfigs';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass WelcomeModal extends React.Component {\n\n  state = {\n    email:null,\n    error:false,\n    subscribed:false,\n    sendingForm:false\n  };\n\n  functionsUtil = null;\n\n  constructor(props) {\n    super(props);\n    this.functionsUtil = new FunctionsUtil(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleValidation = this.handleValidation.bind(this);\n  }\n\n  componentDidUpdate = async () => {\n    this.functionsUtil.setProps(this.props);\n  }\n\n  sendUserInfo = (sendEmail=true) => {\n    const walletProvider = this.functionsUtil.getWalletProvider();\n    const userInfo = {\n      address: this.props.account,\n      provider: walletProvider\n    };\n\n    if (sendEmail && this.state.email !== null){\n      userInfo.email = this.state.email;\n    }\n\n    this.functionsUtil.simpleIDPassUserInfo(userInfo);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if (!this.state.email){\n      return false;\n    }\n\n    const callback = () => {\n      this.setState({\n        sendingForm:false,\n        subscribed:true\n      });\n      window.setTimeout(this.props.closeModal,2500);\n    };\n\n    this.sendUserInfo();\n\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'send_email',\n      eventLabel: 'WelcomeModal'\n    });\n\n    axios.post(globalConfigs.newsletterSubscription.endpoint, {\n      'email': this.state.email\n    }).then(r => {\n      callback();\n    })\n    .catch(err => {\n      callback();\n    });\n\n    // Set signedUp in the localStorage\n    if (localStorage){\n      const walletAddress = this.props.account.toLowerCase();\n      let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : null;\n      if (lastLogin && lastLogin[walletAddress] && !lastLogin[walletAddress].signedUp){\n        lastLogin[walletAddress].signedUp = true;\n        this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n      }\n    }\n\n    this.setState({\n      sendingForm:true\n    })\n  };\n\n  closeModal = async () => {\n\n    const closeModal = () => {\n      this.props.closeModal();\n    };\n\n    try{\n      // Prevent sending email\n      this.sendUserInfo(false);\n\n      // Send Google Analytics event\n      if (globalConfigs.analytics.google.events.enabled){\n        this.functionsUtil.sendGoogleAnalyticsEvent({\n          eventCategory: 'UI',\n          eventAction: 'continue_without_email',\n          eventLabel: 'WelcomeModal'\n        },closeModal);\n\n        // Call callback after 1 second if stuck\n        setTimeout(closeModal,1000);\n      } else {\n        closeModal();\n      }\n    } catch (err) {\n      closeModal();\n    }\n  }\n\n  handleValidation(e) {\n    if (e && e.target) {\n      this.setState({ email: e.target.value });\n      e.target.parentNode.classList.add(\"was-validated\");\n    }\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        {\n          this.state.subscribed ? (\n            <ModalCard\n              closeFunc={this.closeModal}\n            >\n              <ModalCard.Header title={'All done'} icon={`images/done.svg`}></ModalCard.Header>\n              <ModalCard.Body>\n                <Flex width={1} flexDirection={'column'} mb={3}>\n                  <Text color={'dark-gray'} textAlign={'center'} fontSize={3} my={0}>\n                    Thanks for subscribing!\n                  </Text>\n                  <Button\n                    my={3}\n                    width={'100%'}\n                    borderRadius={4}\n                    onClick={this.closeModal}\n                  >\n                    CLOSE\n                  </Button>\n                </Flex>\n              </ModalCard.Body>\n            </ModalCard>\n          ) : (\n            <ModalCard closeFunc={this.closeModal}>\n              <ModalCard.Header title={'Stay up-to-date!'} icon={`images/notification.svg`}>\n              </ModalCard.Header>\n              <ModalCard.Body>\n                <Form onSubmit={this.handleSubmit}>\n                  <Flex width={1} flexDirection={'column'} mb={3}>\n                    <Text color={'mid-gray'} textAlign={'left'} fontSize={3} my={0}>\n                      Add your e-mail to receive updates about:\n                    </Text>\n                  </Flex>\n                  <Flex width={1} flexDirection={'column'} mt={2}>\n                    <Flex my={2} flexDirection={'row'} alignItems={'center'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Performance reports\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        New Protocols & Tokens\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Latest updates\n                      </Text>\n                    </Flex>\n                    <Form.Field width={1} label={''}>\n                      <Form.Input\n                        type=\"email\"\n                        name=\"EMAIL\"\n                        width={1}\n                        outline={'none'}\n                        border={0}\n                        px={3}\n                        py={4}\n                        fontSize={3}\n                        textAlign={['center','left']}\n                        placeholder={'Enter your e-mail'}\n                        onChange={this.handleValidation}\n                        required\n                      />\n                    </Form.Field>\n                    <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n                      <ButtonLoader\n                        buttonText={'SUBMIT'}\n                        isLoading={this.state.sendingForm}\n                        buttonProps={{className:header_styles.gradientButton,width:'100%',type:'submit'}}\n                      >\n                      </ButtonLoader>\n                      <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without e-mail</Link>\n                    </Flex>\n                  </Flex>\n                </Form>\n              </ModalCard.Body>\n            </ModalCard>\n          )\n        }\n      </Modal>\n    );\n  }\n}\n\nexport default WelcomeModal;\n","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\n\nclass MigrateModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'continue_without_migrate',\n        eventLabel: 'MigrateModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowMigrateModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowMigrateModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = () => {\n    const tokenMigrationRoute = this.functionsUtil.getGlobalConfig(['tools','tokenMigration','route']);\n    this.props.goToSection('tools/'+tokenMigrationRoute);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            iconHeight={'40px'}\n            title={'Migrate to Idle'}\n            icon={`images/migrate.svg`}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={3}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                You can migrate your funds from Compound, Aave, Fulcrum, Yearn and Idle V2 with just one transaction.\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                my={2}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.protocolsTokensBalances && Object.keys(this.props.protocolsTokensBalances).map( token => (\n                    <Flex\n                      mb={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      key={`token_${token}`}\n                      justifyContent={'space-between'}\n                    >\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'icon',\n                          props:{\n                            mr:2,\n                            height:'2.3em'\n                          }\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                      <SmartNumber\n                        mr={2}\n                        {...fieldProps}\n                        minPrecision={5}\n                        number={this.props.protocolsTokensBalances[token].balance} \n                      />\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'tokenName',\n                          props:fieldProps\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                    </Flex>\n                  ) )\n                }\n                <Text\n                  mb={0}\n                  fontSize={1}\n                  color={'red'}\n                  fontWeight={500}\n                  textAlign={'center'}\n                >\n                  Please be aware that by migrating your tokens from other protocols, your open positions might be liquidated if collateralized with migrated tokens.\n                </Text>\n              </Flex>\n              <Flex\n                mb={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <ButtonLoader\n                  buttonText={'MIGRATE'}\n                  handleClick={this.migrate}\n                  isLoading={this.state.sendingForm}\n                  buttonProps={{\n                    width:['100%','50%'],\n                    className:header_styles.gradientButton\n                  }}\n                >\n                </ButtonLoader>\n                {\n                /*\n                <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without migrate</Link>\n                */\n                }\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default MigrateModal;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass UpgradeModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'close_upgrade_modal',\n        eventLabel: 'UpgradeModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowUpgradeModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowUpgradeModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = async (token,strategy=null) => {\n\n    if (!strategy){\n      strategy = this.props.selectedStrategy;\n    }\n\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  convert = async (token) => {\n    const convertTool = this.functionsUtil.getGlobalConfig(['tools','tokenMigration']);\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n\n    if (!this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            icon={`images/migrate.svg`}\n            title={'Upgrade Available'}\n            iconHeight={['35px','40px']}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={[2,3]}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                Idle now supports yield farming and governance tokens distribution, migrate now your portfolio with just one click!\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n              >\n                <Flex\n                  fontSize={[2,3]}\n                  width={[0.5,0.28]}\n                  fontWeight={[4,5]}\n                  color={'copyColor'}\n                >\n                  {\n                    this.props.isMobile ? 'ASSET' : 'ASSET TO MIGRATE'\n                  }\n                </Flex>\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      BALANCE\n                    </Flex>\n                  )\n                }\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      OLD APY\n                    </Flex>\n                  )\n                }\n                <Flex\n                  fontSize={[2,3]}\n                  fontWeight={[4,5]}\n                  width={[0.25,0.19]}\n                  color={'copyColor'}\n                  justifyContent={'center'}\n                >\n                  {\n                    this.props.isMobile ? 'APY' : 'NEW APY'\n                  }\n                </Flex>\n                <Flex\n                  width={[0.25,0.15]}\n                >\n                  \n                </Flex>\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.tokensToMigrate && Object.keys(this.props.tokensToMigrate).map( tokenKey => {\n                    const token = this.props.tokensToMigrate[tokenKey].token;\n                    const strategy = this.props.tokensToMigrate[tokenKey].strategy;\n                    const tokenConfig = this.props.tokensToMigrate[tokenKey].tokenConfig;\n                    const balance = this.props.tokensToMigrate[tokenKey].oldContractBalanceFormatted;\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${tokenKey}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={[0.5,0.28]}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:['1.8em','2.3em']\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                        </Flex>\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <SmartNumber\n                                {...fieldProps}\n                                minPrecision={5}\n                                number={balance}\n                                flexProps={{\n                                  justifyContent:'center'\n                                }}\n                              />\n                            </Flex>\n                          )\n                        }\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <AssetField\n                                {...this.props}\n                                fieldInfo={{\n                                  name:'oldApy',\n                                  props:fieldProps\n                                }}\n                                token={token}\n                                tokenConfig={tokenConfig}\n                              />\n                            </Flex>\n                          )\n                        }\n                        <Flex\n                          width={[0.25,0.19]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={token}\n                            tokenConfig={tokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={[0.25,0.15]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.migrate(token,strategy) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.oldIdleTokensToMigrate && Object.keys(this.props.oldIdleTokensToMigrate).map( token => {\n                    const tokenConfig = this.props.oldIdleTokensToMigrate[token].tokenConfig;\n\n                    if (!tokenConfig){\n                      return null;\n                    }\n\n                    const balance = this.props.oldIdleTokensToMigrate[token].balance;\n                    let newTokenConfig = null;\n\n                    if (tokenConfig.availableStrategies && !this.props.availableTokens[tokenConfig.baseToken]){\n                      newTokenConfig = this.props.availableStrategies[tokenConfig.availableStrategies[0]][tokenConfig.baseToken];\n                    } else {\n                      newTokenConfig = this.props.availableTokens[tokenConfig.baseToken];\n                    }\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${token}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={0.28}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:'2.3em'\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <SmartNumber\n                            {...fieldProps}\n                            minPrecision={5}\n                            number={balance}\n                            flexProps={{\n                              justifyContent:'center'\n                            }}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'oldApy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.15}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.convert(token) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                my={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <RoundButton\n                  handleClick={this.closeModal}\n                  buttonProps={{\n                    fontSize:[2,3],\n                    width:['100%','40%'],\n                  }}\n                >\n                  MIGRATE LATER\n                </RoundButton>\n                {\n                  <Checkbox\n                    mt={2}\n                    required={false}\n                    color={'mid-gray'}\n                    checked={this.state.dontShowAgain}\n                    label={`Don't show this popup again`}\n                    onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                  />\n                }\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default UpgradeModal;","import React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport { Flex, Card, Icon, Text } from 'rimble-ui';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardMenu from '../DashboardMenu/DashboardMenu';\n\n// Import page components\nimport Stats from '../Stats/Stats';\nimport Utils from '../Utils/Utils';\nimport AssetPage from '../AssetPage/AssetPage';\nimport RoundButton from '../RoundButton/RoundButton';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CurveStrategy from '../CurveStrategy/CurveStrategy';\nimport WelcomeModal from \"../utilities/components/WelcomeModal\";\nimport TooltipModal from \"../utilities/components/TooltipModal\";\nimport MigrateModal from \"../utilities/components/MigrateModal\";\nimport UpgradeModal from \"../utilities/components/UpgradeModal\";\nimport DashboardHeader from '../DashboardHeader/DashboardHeader';\n\nclass Dashboard extends Component {\n  state = {\n    menu:[],\n    baseRoute:null,\n    clickEvent:null,\n    activeModal:null,\n    currentRoute:null,\n    pageComponent:null,\n    currentSection:null,\n    selectedSection:null,\n    tokensToMigrate:null,\n    showResetButton:false,\n    selectedSubsection:null,\n    oldIdleTokensToMigrate:null,\n    protocolsTokensBalances:null,\n  };\n\n  timeoutId = null;\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    window.functionsUtil = this.functionsUtil;\n  }\n\n  async loadMenu() {\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n    const menu = Object.keys(strategies).filter( s => ( !strategies[s].comingSoon ) ).map(strategy => ({\n        submenu:[],\n        color:'#fff',\n        selected:false,\n        route:baseRoute+'/'+strategy,\n        label:strategies[strategy].title,\n        image:strategies[strategy].icon,\n        bgColor:strategies[strategy].color,\n        component:strategies[strategy].component,\n        imageInactive:strategies[strategy].iconInactive,\n        imageInactiveDark:strategies[strategy].iconInactiveDark\n      })\n    );\n\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n\n    // Add Curve\n    if (curveConfig.enabled){\n      const curveParams = Object.assign({\n        submenu:[],\n        selected:false,\n        component:CurveStrategy,\n      },curveConfig.params);\n\n      menu.push(curveParams);\n    }\n\n    // Add Stats\n    menu.push(\n      {\n        icon:'Equalizer',\n        label:'Stats',\n        bgColor:'#21f36b',\n        color:'dark-gray',\n        component:Stats,\n        selected:false,\n        route:'/dashboard/stats',\n        submenu:[]\n      }\n    );\n\n    // Add tools\n    menu.push(\n      {\n        icon:'Build',\n        label:'Tools',\n        color:'dark-gray',\n        component:Utils,\n        selected:false,\n        route:'/dashboard/tools',\n        bgColor:this.props.theme.colors.primary,\n        submenu:Object.values(this.functionsUtil.getGlobalConfig(['tools'])).filter( u => (u.enabled) )\n      }\n    );\n\n    // Add Forum\n    menu.push(\n      {\n        submenu:[],\n        icon:'Forum',\n        mobile:false,\n        label:'Forum',\n        selected:false,\n        component:null,\n        color:'dark-gray',\n        bgColor:'#ff0000',\n        isExternalLink:true,\n        route:this.functionsUtil.getGlobalConfig(['forumURL'])\n      }\n    );\n\n    await this.setState({\n      menu\n    });\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  openTooltipModal = (modalTitle,modalContent) => {\n\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: modalTitle,\n      eventLabel: 'TooltipModal'\n    });\n\n    this.setState({\n      modalTitle,\n      modalContent\n    },() => {\n      this.setActiveModal('tooltip');\n    })\n  }\n\n  setActiveModal = (activeModal) => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadParams() {\n    const { match: { params } } = this.props;\n\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    let currentRoute = baseRoute;\n\n    let pageComponent = null;\n    let selectedToken = null;\n    let currentSection = null;\n    let selectedStrategy = null;\n\n    // Set strategy\n    if (params.section){\n      currentSection = params.section;\n      const param1 = params.param1;\n      const param2 = params.param2;\n\n      const section_is_strategy = Object.keys(this.props.availableStrategies).includes(currentSection.toLowerCase());\n      const param1_is_strategy = param1 && Object.keys(this.props.availableStrategies).includes(param1.toLowerCase());\n\n      if (section_is_strategy || param1_is_strategy){\n        selectedStrategy = section_is_strategy ? currentSection : param1;\n        currentRoute += '/'+selectedStrategy;\n\n        // Set token\n        const param1_is_token = param1 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param1.toUpperCase());\n        const param2_is_token = param2 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param2.toUpperCase());\n        if (param1_is_token || param2_is_token){\n          selectedToken = param1_is_token ? param1.toUpperCase() : param2.toUpperCase();\n          currentRoute += '/'+selectedToken;\n\n          if (section_is_strategy){\n            pageComponent = AssetPage;\n          }\n        }\n      } else {\n        currentRoute += '/'+params.section;\n\n        if (params.param1 && params.param1.length){\n          currentRoute += '/'+params.param1;\n        }\n\n        // if (params.param2 && params.param2.length){\n        //   currentRoute += '/'+params.param2;\n        // }\n      }\n    }\n\n    const menu = this.state.menu;\n\n    let selectedSection = null;\n    let selectedSubsection = null;\n\n    menu.forEach(m => {\n      m.selected = false;\n      const sectionRoute = baseRoute+'/'+params.section;\n      if (currentRoute.toLowerCase() === m.route.toLowerCase() || ( !m.submenu.length && m.route.toLowerCase() === sectionRoute.toLowerCase() )){\n        m.selected = true;\n        if (pageComponent === null){\n          pageComponent = m.component;\n        }\n      } else if (m.submenu.length) {\n        m.submenu.forEach(subm => {\n          subm.selected = false;\n          const submRoute = m.route+'/'+subm.route;\n          if (submRoute.toLowerCase() === currentRoute.toLowerCase()){\n            m.selected = true;\n            subm.selected = true;\n\n            // Set component, if null use parent\n            if (pageComponent === null){\n              if (subm.component){\n                pageComponent = subm.component;\n              } else {\n                pageComponent = m.component;\n              }\n            }\n          }\n\n          // Set selected subsection\n          if (subm.selected){\n            selectedSubsection = subm;\n          }\n\n        });\n      }\n\n      // Set selected section\n      if (m.selected){\n        selectedSection = m;\n      }\n    });\n\n    // console.log('pageComponent',params,pageComponent);\n\n    // Exit if no strategy and token selected\n    if (!pageComponent){\n      return this.goToSection('/',false);\n    }\n\n    // console.log('loadParams',selectedStrategy,selectedToken);\n    await this.props.setStrategyToken(selectedStrategy,selectedToken);\n\n    await this.setState({\n      menu,\n      params,\n      baseRoute,\n      currentRoute,\n      pageComponent,\n      currentSection,\n      selectedSection,\n      selectedSubsection\n    });\n  }\n\n  componentWillUnmount(){\n    if (this.timeoutId){\n      window.clearTimeout(this.timeoutId);\n    }\n  }\n\n  async componentWillMount() {\n\n    this.props.setCurrentSection('dashboard');\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n  }\n\n  async componentDidMount() {\n\n    this.timeoutId = window.setTimeout(() => {\n      if (!this.props.accountInizialized || !this.props.contractsInitialized){\n        this.setState({\n          showResetButton:true\n        });\n      }\n    },20000);\n\n    if (!this.props.web3){\n      return this.props.initWeb3();\n    } else if (!this.props.accountInizialized){\n      return this.props.initAccount();\n    } else if (!this.props.contractsInitialized){\n      return this.props.initializeContracts();\n    }\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n    this.checkModals();\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n\n    this.loadUtils();\n\n    const prevParams = prevProps.match.params;\n    const params = this.props.match.params;\n\n    if (JSON.stringify(prevParams) !== JSON.stringify(params)){\n      await this.setState({\n        pageComponent:null\n      }, () => {\n        this.loadParams();\n      });\n    }\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const strategyChanged = this.props.selectedStrategy && prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const accountInizialized = this.props.accountInizialized && prevProps.accountInizialized !== this.props.accountInizialized;\n    const contractsInitialized = this.props.contractsInitialized && prevProps.contractsInitialized !== this.props.contractsInitialized;\n\n    if (accountChanged || accountInizialized || contractsInitialized || strategyChanged){\n      this.checkModals();\n    }\n  }\n\n  async checkModals(){\n\n    if (this.props.selectedToken || !this.props.accountInizialized || !this.props.contractsInitialized || !this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    await this.checkTokensToMigrate();\n    await this.checkWelcomeModal();\n    await this.checkProtocolsTokensBalances();\n  }\n\n  async checkTokensToMigrate(){\n\n    const showUpgradeModal = this.functionsUtil.getStoredItem('dontShowUpgradeModal',false,null) !== null ? false : true;\n    if (this.props.selectedToken || !showUpgradeModal || !this.props.availableTokens){\n      return null;\n    }\n\n    const tokensToMigrate = await this.functionsUtil.getTokensToMigrate();\n    const oldIdleTokensToMigrate = await this.functionsUtil.getProtocolsTokensBalances('idle');\n\n    // console.log('tokensToMigrate',tokensToMigrate);\n    \n    if ((tokensToMigrate && Object.keys(tokensToMigrate).length>0) || (oldIdleTokensToMigrate && Object.keys(oldIdleTokensToMigrate).length>0)){\n      const activeModal = 'upgrade';\n      if (activeModal !== this.state.activeModal){\n        this.setState({\n          activeModal,\n          tokensToMigrate,\n          oldIdleTokensToMigrate\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkWelcomeModal(){\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show welcome modal\n    if (this.props.account && this.state.activeModal === null){\n      let welcomeIsOpen = false;\n\n      const welcomeModalProps = this.functionsUtil.getGlobalConfig(['modals','welcome']);\n\n      if (welcomeModalProps.enabled && localStorage){\n\n        // Check the last login of the wallet\n        const currTime = new Date().getTime();\n        const walletAddress = this.props.account.toLowerCase();\n        let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : {};\n\n        // First login\n        if (!lastLogin[walletAddress]){\n          lastLogin[walletAddress] = {\n            'signedUp':false,\n            'lastTime':currTime\n          };\n          welcomeIsOpen = true;\n        // User didn't sign up\n        } else if (!lastLogin[walletAddress].signedUp) {\n          const lastTime = parseInt(lastLogin[walletAddress].lastTime);\n          const timeFromLastLogin = (currTime-lastTime)/1000;\n          welcomeIsOpen = timeFromLastLogin>=welcomeModalProps.frequency; // 1 day since last login\n        }\n\n        if (welcomeIsOpen){\n          lastLogin[walletAddress].lastTime = currTime;\n          this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n        }\n      }\n\n      const activeModal = welcomeIsOpen ? 'welcome' : this.state.activeModal;\n      if (this.state.activeModal !== activeModal){\n        this.setState({\n          activeModal\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkProtocolsTokensBalances() {\n\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show migration modal if no other modals are opened\n    const migrateModalEnabled = this.functionsUtil.getGlobalConfig(['modals','migrate','enabled']);\n    const showMigrateModal = this.functionsUtil.getStoredItem('dontShowMigrateModal',false,null) !== null ? false : true;\n\n    if (this.state.activeModal === null && migrateModalEnabled && showMigrateModal && !this.state.protocolsTokensBalances){\n      const protocolsTokensBalances = await this.functionsUtil.getProtocolsTokensBalances();\n      const activeModal = protocolsTokensBalances && Object.keys(protocolsTokensBalances).length>0 ? 'migrate' : null;\n      const newState = {\n        activeModal,\n        protocolsTokensBalances\n      };\n      this.setState(newState);\n      return activeModal;\n    }\n\n    return null;\n  }\n\n  goToSection(section,isDashboard=true){\n\n    // Remove dashboard route\n    if (isDashboard){\n      section = section.replace(this.state.baseRoute +'/','');\n    }\n\n    const newRoute = isDashboard ? this.state.baseRoute +'/' + section : section;\n    window.location.hash=newRoute;\n\n    // Send GA event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'goToSection',\n      eventLabel: newRoute\n    });\n\n    window.scrollTo(0, 0);\n  }\n\n  logout = async () => {\n    this.props.setConnector('Infura','Infura');\n    await this.props.initWeb3('Infura');\n  }\n\n  changeToken(selectedToken){\n    selectedToken = selectedToken.toUpperCase();\n    if (Object.keys(this.props.availableTokens).includes(selectedToken)){\n      const routeParts = [];\n\n      // Add section\n      if (this.state.currentSection.toLowerCase() !== this.props.selectedStrategy.toLowerCase()){\n        routeParts.push(this.state.currentSection);\n      }\n\n      // Add strategy\n      routeParts.push(this.props.selectedStrategy); \n\n      // Add token\n      routeParts.push(selectedToken);\n\n      this.goToSection(routeParts.join('/'));\n    }\n  }\n\n  propagateClickEvent(clickEvent){\n    this.setState({\n      clickEvent:clickEvent.target\n    });\n  }\n\n  render() {\n    const PageComponent = this.state.pageComponent ? this.state.pageComponent : null;\n    return (\n      <Flex\n        width={'100%'}\n        position={'fixed'}\n        flexDirection={'row'}\n        backgroundColor={['dashboardBg','white']}\n        /*onClick={ e => this.propagateClickEvent(e) }*/\n        height={[(window.innerHeight-61)+'px','100vh']}\n      >\n        <Flex\n          bottom={0}\n          zIndex={1}\n          width={[1,1/6]}\n          flexDirection={'column'}\n          position={['fixed','relative']}\n        >\n          <Card\n            p={[0,3]}\n            border={0}\n            width={['100vw','auto']}\n            height={['auto','100vh']}\n            backgroundColor={'menuBg'}\n            >\n            <DashboardMenu\n              {...this.props}\n              menu={this.state.menu}\n            />\n          </Card>\n        </Flex>\n        <Flex\n          py={3}\n          px={[3,5]}\n          mb={0}\n          width={[1,5/6]}\n          style={{\n            overflowY:'scroll',\n            overflowX:'hidden'\n          }}\n          flexDirection={'columns'}\n          backgroundColor={'dashboardBg'}\n        >\n          {\n            !this.props.accountInizialized || !this.props.contractsInitialized || !PageComponent ? (\n              <Flex\n                width={1}\n                minHeight={'50vg'}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                {\n                  !this.state.showResetButton ? (\n                    <FlexLoader\n                      textProps={{\n                        textSize:4,\n                        fontWeight:2\n                      }}\n                      loaderProps={{\n                        mb:3,\n                        size:'40px'\n                      }}\n                      flexProps={{\n                        my:3,\n                        flexDirection:'column'\n                      }}\n                      text={ !this.props.accountInizialized ? 'Loading account...' : ( !this.props.contractsInitialized ? 'Loading contracts...' : 'Loading assets...' )}\n                    />\n                  ) : (\n                    <DashboardCard\n                      cardProps={{\n                        p:3,\n                        mt:3,\n                        width:[1,0.35]\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Icon\n                          size={'2.3em'}\n                          name={'Warning'}\n                          color={'cellText'}\n                        />\n                        <Text\n                          mt={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          Idle can't connect to your wallet!<br />Make sure that your wallet is unlocked and try again.\n                        </Text>\n                        <RoundButton\n                          buttonProps={{\n                            mt:3,\n                            width:[1,1/2]\n                          }}\n                          handleClick={this.logout.bind(this)}\n                        >\n                          Logout\n                        </RoundButton>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n              </Flex>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardHeader\n                  clickEvent={this.state.clickEvent}\n                  goToSection={this.goToSection.bind(this)}\n                  {...this.props}\n                />\n                {\n                  PageComponent &&\n                    <PageComponent\n                      {...this.props}\n                      match={{ params:{} }}\n                      urlParams={this.state.params}\n                      changeToken={this.changeToken.bind(this)}\n                      goToSection={this.goToSection.bind(this)}\n                      selectedSection={this.state.selectedSection}\n                      selectedSubsection={this.state.selectedSubsection}\n                      openTooltipModal={this.openTooltipModal.bind(this)}\n                      />\n                }\n              </Flex>\n            )\n          }\n        </Flex>\n        <UpgradeModal\n          {...this.props}\n          closeModal={this.resetModal}\n          goToSection={this.goToSection.bind(this)}\n          tokensToMigrate={this.state.tokensToMigrate}\n          isOpen={this.state.activeModal === 'upgrade'}\n          oldIdleTokensToMigrate={this.state.oldIdleTokensToMigrate}\n        />\n        <MigrateModal\n          {...this.props}\n          closeModal={this.resetModal}\n          goToSection={this.goToSection.bind(this)}\n          isOpen={this.state.activeModal === 'migrate'}\n          protocolsTokensBalances={this.state.protocolsTokensBalances}\n        />\n        <TooltipModal\n          closeModal={this.resetModal}\n          title={this.state.modalTitle}\n          content={this.state.modalContent}\n          isOpen={this.state.activeModal === 'tooltip'}\n        >\n        </TooltipModal>\n        <WelcomeModal\n          closeModal={this.resetModal}\n          account={this.props.account}\n          simpleID={this.props.simpleID}\n          network={this.props.network.current}\n          tokenName={this.props.selectedToken}\n          initSimpleID={this.props.initSimpleID}\n          baseTokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'welcome'}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default Dashboard;"],"sourceRoot":""}