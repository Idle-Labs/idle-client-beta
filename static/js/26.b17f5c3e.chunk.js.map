{"version":3,"sources":["RoundIconButton/RoundIconButton.js","Breadcrumb/Breadcrumb.js","CardIconButton/CardIconButton.js","ConnectBox/ConnectBox.js","Governance/DelegateVote/DelegateVote.js","Governance/NewProposal/NewProposal.module.scss","Governance/NewProposal/NewProposal.js","Governance/CastVote/CastVote.js","Governance/ProposalDetails/ProposalDetails.js","Governance/Proposals.js"],"names":["RoundIconButton","buttonProps","Object","assign","p","boxShadow","width","height","mainColor","borderRadius","disabled","this","props","minWidth","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_RoundButton_RoundButton__WEBPACK_IMPORTED_MODULE_7__","handleClick","rimble_ui__WEBPACK_IMPORTED_MODULE_5__","color","name","iconName","size","iconSize","Component","Breadcrumb","_this","showPathMobile","rimble_ui__WEBPACK_IMPORTED_MODULE_7__","id","alignItems","_RoundIconButton_RoundIconButton__WEBPACK_IMPORTED_MODULE_8__","text","length","ml","fontSize","fontWeight","hoverColor","onClick","isMobile","path","map","index","link","pathLink","Link","Text","pl","style","maxWidth","overflow","whiteSpace","textOverflow","borderLeft","concat","theme","colors","divider","key","e","goToSection","CardIconButton","cardProps","py","px","react__WEBPACK_IMPORTED_MODULE_5___default","_DashboardCard_DashboardCard__WEBPACK_IMPORTED_MODULE_7__","isInteractive","isActive","rimble_ui__WEBPACK_IMPORTED_MODULE_6__","my","flexDirection","justifyContent","useIconOnly","align","icon","iconColor","mr","backgroundColor","iconBgColor","transactions","actionBg","redeem","textProps","ConnectBox","functionsUtil","setProps","FunctionsUtil","loadUtils","prevProps","prevState","react__WEBPACK_IMPORTED_MODULE_7___default","_DashboardCard_DashboardCard__WEBPACK_IMPORTED_MODULE_11__","mt","rimble_ui__WEBPACK_IMPORTED_MODULE_8__","textAlign","_RoundButton_RoundButton__WEBPACK_IMPORTED_MODULE_9__","connectAndValidateAccount","DelegateVote","state","newDelegate","processing","txHash","loading","governanceUtil","checkNewDelegate","checkAddress","toLowerCase","currentDelegate","changeDelegate","target","value","setState","GovernanceUtil","address","_this2","setDelegate","tx","error","eventData","eventCategory","eventAction","eventLabel","status","getTransactionError","sendGoogleAnalyticsEvent","loadUserData","transactionHash","_Users_samuelecester_Desktop_git_idle_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","_this3","isUndelegated","parseInt","react__WEBPACK_IMPORTED_MODULE_8___default","rimble_ui__WEBPACK_IMPORTED_MODULE_15__","account","_DashboardCard_DashboardCard__WEBPACK_IMPORTED_MODULE_13__","mb","position","canClose","top","zIndex","right","icononly","closeFunc","_TxProgressBar_TxProgressBar__WEBPACK_IMPORTED_MODULE_14__","web3","waitText","hash","endMessage","cancelTransaction","bind","min","type","required","placeholder","onChange","border","_RoundButton_RoundButton__WEBPACK_IMPORTED_MODULE_11__","mx","_FlexLoader_FlexLoader__WEBPACK_IMPORTED_MODULE_10__","flexProps","minHeight","loaderProps","_ConnectBox_ConnectBox__WEBPACK_IMPORTED_MODULE_9__","module","exports","input","NewProposal","title","actions","txError","actionValue","customABI","description","validated","newAction","editAction","actionInputs","actionValid","customAddress","contractOptions","proposalCreated","functionsOptions","selectedContract","selectedFunction","selectedSignature","availableFunctions","availableContracts","loadData","validateForm","checkInputs","loadFunctionsOptions","getGlobalConfig","label","keys","forEach","contractName","push","field","arguments","undefined","defineProperty","values","contractABI","JSON","parse","err","getContractABI","filter","f","constant","inputs","includes","stateMutability","unshift","newState","find","Array","valid","isValidJSON","fieldPattern","getPatternByFieldType","toString","match","returnString","RegExp","inputValue","inputIndex","inputInfo","inputValid","validateField","objectSpread","v","split","n","toBN","substr","contract","getContractByName","_address","inputTypes","i","calldata","eth","abi","encodeParameters","signature","join","action","params","BNify","toFixed","function","_this4","preventDefault","targets","signatures","calldatas","propose","_this5","react_default","index_es","Title","DashboardCard","completed","votes","gte","proposalThreshold","onSubmit","handleSubmit","pb","borderColor","borderBottom","h4","className","styles","handleInput","rows","actionIndex","titleParentProps","titleProps","setEditAction","display","options","changeContract","pattern","changeFunction","payable","valueChange","fieldType","inputChange","RoundButton","addAction","deleteAction","proposalMaxOperations","setNewAction","TxProgressBar","balance","formatMoney","fixTokenDecimals","CastVote","vote","loaded","userVote","voteSucceed","showDelegateBox","setVote","proposal","voter","proposalId","castVote","support","callback","ProposalField","fieldInfo","lte","toggleDelegateBox","onMouseDown","gt","FlexLoader","ProposalDetails","showActionParams","callbackReceipt","queueProposal","executeProposal","window","lastState","states","pop","hasVotes","forVotes","div","againstVotes","totalVotes","plus","forVotesPerc","times","againstVotesPerc","forVotesAddrs","sort","b","lt","againstVotesAddrs","canQueue","canExecute","Date","getTime","start_time","timelockDelay","pr","StatsCard","labelTooltip","titleMinHeight","strToMoment","format","opts","bgcolor","spotcolor","seed","ShortHash","lineHeight","proposer","Governance_CastVote_CastVote","pt","data","decodedParams","attrs","decodeParameters","splice","toggleShowParams","param","paramIndex","stateInfo","stateIndex","rel","href","getEtherscanTransactionUrl","trx_hash","wordBreak","dangerouslySetInnerHTML","__html","replace","background","parseFloat","maxHeight","voteInfo","voteIndex","Proposals","proposals","addProposal","selectedProposal","contractsInitialized","getProposals","item_id","foundProposal","Governance_ProposalDetails_ProposalDetails","Governance_NewProposal_NewProposal","ProposalsList","cols","fields","mobile","parentProps"],"mappings":"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","file":"static/js/26.b17f5c3e.chunk.js","sourcesContent":["import { Icon } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport RoundButton from '../RoundButton/RoundButton';\n\nclass RoundIconButton extends Component {\n  render() {\n    const buttonProps = Object.assign({\n      p:0,\n      boxShadow:1,\n      width:'40px',\n      height:'40px',\n      mainColor:'white',\n      borderRadius:'50%',\n      disabled:this.props.disabled\n    },this.props.buttonProps);\n\n    buttonProps.minWidth = buttonProps.width;\n\n    return (\n       <RoundButton\n         buttonProps={buttonProps}\n         handleClick={this.props.handleClick}\n       >\n         <Icon\n           color={'copyColor'}\n           name={this.props.iconName}\n           size={ this.props.iconSize ? this.props.iconSize : '1.3em'}\n         />\n       </RoundButton>\n    );\n  }\n}\n\nexport default RoundIconButton;","import theme from '../theme';\nimport React, { Component } from 'react';\nimport { Flex, Link, Text } from \"rimble-ui\";\nimport RoundIconButton from '../RoundIconButton/RoundIconButton';\n\nclass Breadcrumb extends Component {\n  render() {\n\n    const showPathMobile = !!this.props.showPathMobile;\n\n    return (\n      <Flex\n        width={1}\n        id={'breadcrumb'}\n        alignItems={'center'}\n      >\n        {\n          this.props.handleClick && \n           <RoundIconButton\n             buttonProps={{\n               width:'35px',\n               height:'35px'\n             }}\n             iconSize={'1.2em'}\n             iconName={'ArrowBack'}\n             handleClick={this.props.handleClick}\n           />\n        }\n        {\n          this.props.text && this.props.text.length>0 &&\n           <Link\n             ml={[2,3]}\n             fontSize={[1,2]}\n             fontWeight={3}\n             color={'cellText'}\n             hoverColor={'copyColor'}\n             onClick={this.props.handleClick}\n           >\n            {this.props.text}\n           </Link>\n        }\n        {\n          (!this.props.isMobile || showPathMobile) && this.props.path && this.props.path.length>0 &&\n            this.props.path.map((path,index) => {\n              const link = this.props.pathLink ? (this.props.pathLink[index] || null) : null;\n              const Component = link ? Link : Text;\n              return (\n                <Component\n                  pl={[1,3]}\n                  ml={[1,3]}\n                  fontWeight={3}\n                  fontSize={[1,2]}\n                  hoverColor={'copyColor'}\n                  style={ !this.props.isMobile ? {\n                    maxWidth:'30%',\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap',\n                    textOverflow: 'ellipsis',\n                    borderLeft: `1px solid ${theme.colors.divider}`\n                  } : null }\n                  key={`breadcrumb_path_${index}`}\n                  color={link ? 'cellText' : 'statValue'}\n                  onClick={link ? e => this.props.goToSection(link) : null}\n                >\n                  {path}\n                </Component>\n              );\n          })\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default Breadcrumb;","import React, { Component } from 'react';\nimport { Flex, Text, Icon } from \"rimble-ui\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass CardIconButton extends Component {\n  render() {\n    const cardProps = Object.assign({\n      py:1,\n      width:'auto',\n      px:['12px',3],\n    },this.props.cardProps);\n\n    return (\n       <DashboardCard\n         cardProps={cardProps}\n         isInteractive={true}\n         isActive={this.props.isActive}\n         handleClick={this.props.handleClick}\n       >\n         <Flex\n           my={1}\n           alignItems={'center'}\n           flexDirection={'row'}\n           justifyContent={'center'}\n         >\n          {\n            this.props.useIconOnly ? (\n              <Icon\n                align={'center'}\n                name={this.props.icon}\n                size={ this.props.isMobile ? '1.2em' : '1.4em' }\n                color={ this.props.iconColor ? this.props.iconColor : 'redeem' }\n              />\n            ) : (\n             <Flex\n               mr={2}\n               p={['4px','7px']}\n               borderRadius={'50%'}\n               alignItems={'center'}\n               justifyContent={'center'}\n               backgroundColor={ this.props.iconBgColor ? this.props.iconBgColor : this.props.theme.colors.transactions.actionBg.redeem }\n             >\n               <Icon\n                 align={'center'}\n                 name={this.props.icon}\n                 size={ this.props.isMobile ? '1.2em' : '1.4em' }\n                 color={ this.props.iconColor ? this.props.iconColor : 'redeem' }\n               />\n             </Flex>\n            )\n          }\n           <Text\n             fontWeight={3}\n             fontSize={[1,3]}\n             {...this.props.textProps}\n           >\n             {this.props.text}\n           </Text>\n         </Flex>\n       </DashboardCard>\n    );\n  }\n}\n\nexport default CardIconButton;","import React, { Component } from 'react';\nimport { Flex, Icon, Text } from \"rimble-ui\";\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass ConnectBox extends Component {\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return (\n      <DashboardCard\n        cardProps={{\n          p:3,\n          mt:3\n        }}\n      >\n        <Flex\n          alignItems={'center'}\n          flexDirection={'column'}\n        >\n          <Icon\n            size={'1.8em'}\n            name={'Input'}\n            color={'cellText'}\n          />\n          <Text\n            mt={2}\n            fontSize={2}\n            color={'cellText'}\n            textAlign={'center'}\n          >\n            Please connect with your wallet interact with Idle.\n          </Text>\n          <RoundButton\n            buttonProps={{\n              mt:2,\n              width:[1,1/2]\n            }}\n            handleClick={this.props.connectAndValidateAccount}\n          >\n            Connect\n          </RoundButton>\n        </Flex>\n      </DashboardCard>\n    );\n  }\n}\n\nexport default ConnectBox;\n","import React, { Component } from 'react';\nimport ConnectBox from '../../ConnectBox/ConnectBox';\nimport FlexLoader from '../../FlexLoader/FlexLoader';\nimport RoundButton from '../../RoundButton/RoundButton';\nimport GovernanceUtil from '../../utilities/GovernanceUtil';\nimport DashboardCard from '../../DashboardCard/DashboardCard';\nimport TxProgressBar from '../../TxProgressBar/TxProgressBar';\nimport { Flex, Text, Input, Button, Box, EthAddress } from \"rimble-ui\";\n\nclass DelegateVote extends Component {\n\n  state = {\n    newDelegate:'',\n    processing:{\n      txHash:null,\n      loading:false\n    }\n  }\n\n  // Utils\n  functionsUtil = null;\n  governanceUtil = null;\n\n  loadUtils(){\n    if (this.governanceUtil){\n      this.governanceUtil.setProps(this.props);\n    } else {\n      this.governanceUtil = new GovernanceUtil(this.props);\n    }\n\n    this.functionsUtil = this.governanceUtil.functionsUtil;\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  checkNewDelegate = () => {\n    return this.functionsUtil.checkAddress(this.state.newDelegate) && this.state.newDelegate.toLowerCase() !== this.props.currentDelegate.toLowerCase();\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  setDelegate(address){\n    const addressOk = this.functionsUtil.checkAddress(address);\n\n    if (addressOk){\n\n      const callback = (tx,error) => {\n        // Send Google Analytics event\n        const eventData = {\n          eventCategory: 'Delegate',\n          eventAction: address,\n          eventLabel: tx.status\n        };\n\n        if (error){\n          eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n        }\n\n        // Send Google Analytics event\n        if (error || eventData.status !== 'error'){\n          this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n        }\n\n        if (typeof this.props.loadUserData === 'function' && tx.status === 'success'){\n          this.props.loadUserData();\n        }\n\n        this.setState({\n          processing: {\n            txHash:null,\n            loading:false\n          }\n        });\n      };\n\n      const callbackReceipt = (tx) => {\n        const txHash = tx.transactionHash;\n        this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            txHash\n          }\n        }));\n      };\n\n      this.governanceUtil.setDelegate(address,callback,callbackReceipt);\n\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          loading:true\n        }\n      }));\n    }\n    return null;\n  }\n\n  changeDelegate = (e) => {\n    const newDelegate = e.target.value;\n    this.setState({\n      newDelegate\n    });\n  }\n\n  render() {\n    const isUndelegated = parseInt(this.props.currentDelegate) === 0;\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        {\n        !this.props.account ? (\n          <Flex\n            width={[1,0.36]}\n            alignItems={'stretch'}\n            flexDirection={'column'}\n            justifyContent={'center'}\n          >\n            <ConnectBox\n              {...this.props}\n            />\n          </Flex>\n        ) : this.props.currentDelegate ? (\n          <DashboardCard\n            cardProps={{\n              mb:2,\n              py:[2,3],\n              px:[3,4],\n              width:[1,0.5],\n              position:'relative',\n            }}\n            isInteractive={false}\n          >\n            {\n              this.props.canClose &&\n                <Box\n                  top={'0'}\n                  zIndex={1}\n                  right={'0'}\n                  position={'absolute'}\n                >\n                  <Button.Text\n                    icononly\n                    icon={'Close'}\n                    size={'2.5em'}\n                    mainColor={'statValue'}\n                    onClick={this.props.closeFunc}\n                  />\n                </Box>\n            }\n            <Flex\n              width={1}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              {\n                /*\n                <Text\n                  mb={2}\n                  fontWeight={3}\n                  fontSize={[2,3]}\n                  color={'dark-gray'}\n                  textAlign={'center'}\n                >\n                  You have {this.functionsUtil.fixTokenDecimals(this.props.balance,18).toFixed(4)} {this.functionsUtil.getGlobalConfig(['governance','props','tokenName'])} available.\n                </Text>\n                */\n              }\n              <Text\n                mb={1}\n                fontWeight={3}\n                color={'statValue'}\n                textAlign={'center'}\n              >\n                Current Delegate:\n              </Text>\n              <Flex\n                mb={3}\n                width={1}\n                alignItems={'center'}\n                justifyContent={isUndelegated ? 'center' : 'stretch'}\n              >\n                {\n                  isUndelegated ? (\n                    <Text\n                      fontWeight={3}\n                      fontSize={[1,2]}\n                      color={'dark-gray'}\n                      textAlign={'center'}\n                    >\n                      Undelegated\n                    </Text>\n                  ) : (\n                    <EthAddress\n                      width={1}\n                      address={this.props.currentDelegate}\n                    />\n                  )\n                }\n              </Flex>\n              {\n                this.state.processing && this.state.processing.loading ? (\n                  <Flex\n                    width={1}\n                    flexDirection={'column'}\n                  >\n                    <TxProgressBar\n                      web3={this.props.web3}\n                      waitText={`Delegate estimated in`}\n                      hash={this.state.processing.txHash}\n                      endMessage={`Finalizing delegate request...`}\n                      cancelTransaction={this.cancelTransaction.bind(this)}\n                    />\n                  </Flex>\n                ) : (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      mb={1}\n                      fontWeight={3}\n                      color={'statValue'}\n                      textAlign={'center'}\n                    >\n                      Set New Delegate:\n                    </Text>\n                    <Input\n                      min={0}\n                      type={'text'}\n                      width={'100%'}\n                      required={true}\n                      height={'3.4em'}\n                      borderRadius={2}\n                      fontWeight={500}\n                      textAlign={'center'}\n                      boxShadow={'none !important'}\n                      value={this.state.newDelegate}\n                      placeholder={`Insert delegate address`}\n                      onChange={this.changeDelegate.bind(this)}\n                      border={`1px solid ${this.props.theme.colors.divider}`}\n                    />\n                    <Flex\n                      mt={3}\n                      width={1}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      justifyContent={'center'}\n                    >\n                      <RoundButton\n                        buttonProps={{\n                          mx:1,\n                          fontSize:[1,2],\n                          width:['auto','10em'],\n                          disabled:!this.checkNewDelegate()\n                        }}\n                        handleClick={ e => this.setDelegate(this.state.newDelegate) }\n                      >\n                        Delegate\n                      </RoundButton>\n                      <RoundButton\n                        buttonProps={{\n                          mx:1,\n                          fontSize:[1,2],\n                          width:['auto','10em'],\n                          mainColor:this.props.theme.colors.redeem,\n                          disabled:this.props.currentDelegate.toLowerCase() === this.props.account.toLowerCase()\n                        }}\n                        handleClick={ e => this.setDelegate(this.props.account) }\n                      >\n                        Self-delegate\n                      </RoundButton>\n                    </Flex>\n                  </Flex>\n                )\n              }\n            </Flex>\n          </DashboardCard>\n        ) : (\n          <FlexLoader\n            flexProps={{\n              minHeight:'50vh',\n              flexDirection:'row'\n            }}\n            loaderProps={{\n              size:'30px'\n            }}\n            textProps={{\n              ml:2\n            }}\n            text={'Loading Delegate...'}\n          />\n        )\n       } \n      </Flex>\n    );\n  }\n}\n\nexport default DelegateVote;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"NewProposal_input__KvbCb\"};","import Title from '../../Title/Title';\nimport React, { Component } from 'react';\nimport styles from './NewProposal.module.scss';\nimport DelegateVote from '../DelegateVote/DelegateVote';\nimport RoundButton from '../../RoundButton/RoundButton';\nimport GovernanceUtil from '../../utilities/GovernanceUtil';\nimport DashboardCard from '../../DashboardCard/DashboardCard';\nimport TxProgressBar from '../../TxProgressBar/TxProgressBar';\nimport { Flex, Text, Heading, Input, Form, Field, Textarea, Icon, Select, Link } from \"rimble-ui\";\n\nclass NewProposal extends Component {\n\n  state = {\n    title:'',\n    actions:[],\n    txError:false,\n    actionValue:0,\n    customABI:null,\n    description:'',\n    processing: {\n      txHash:null,\n      loading:false\n    },\n    validated:false,\n    newAction:false,\n    editAction:null,\n    actionInputs:null,\n    actionValid:false,\n    customAddress:null,\n    contractOptions:[],\n    proposalCreated:false,\n    functionsOptions:null,\n    selectedContract:null,\n    selectedFunction:null,\n    selectedSignature:null,\n    availableFunctions:null,\n    availableContracts:null\n  }\n\n  // Utils\n  functionsUtil = null;\n  governanceUtil = null;\n\n  loadUtils(){\n    if (this.governanceUtil){\n      this.governanceUtil.setProps(this.props);\n    } else {\n      this.governanceUtil = new GovernanceUtil(this.props);\n    }\n\n    this.functionsUtil = this.governanceUtil.functionsUtil;\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.loadData();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n    this.validateForm();\n    this.checkInputs();\n\n    const customABIChanged = prevState.customABI !== this.state.customABI;\n    // console.log('customABIChanged',customABIChanged,this.state.selectedContract);\n    if (customABIChanged && this.state.selectedContract === 'custom'){\n      this.loadFunctionsOptions();\n    }\n  }\n\n  loadData(){\n    const availableContracts = this.functionsUtil.getGlobalConfig(['governance','props','availableContracts']);\n    const contractOptions = [\n      {label:'Select a Contract',value:null}\n    ];\n\n    Object.keys(availableContracts).forEach( contractName => {\n      contractOptions.push({label:contractName,value:contractName});\n    });\n\n    contractOptions.push({label:'Custom',value:'custom'});\n\n    this.setState({\n      contractOptions,\n      availableContracts\n    });\n  }\n\n  handleInput(field,e,type=null){\n    let value = e.target.value;\n    this.setState({\n      [field]:value\n    });\n  }\n\n  validateForm(){\n    const validated = this.state.title.length>0 && this.state.description.length>0 && Object.values(this.state.actions).length>0;\n    if (validated !== this.state.validated){\n      this.setState({\n        validated\n      });\n    }\n  }\n\n  getContractABI(selectedContract=null){\n    selectedContract = selectedContract ? selectedContract : this.state.selectedContract;\n\n    let contractABI = null;\n    try {\n      contractABI = selectedContract === 'custom' ? JSON.parse(this.state.customABI) : this.state.availableContracts[selectedContract];\n    } catch (err) {\n      \n    }\n    return contractABI;\n  }\n\n  loadFunctionsOptions(selectedContract=null){\n    let actionInputs = null;\n    let functionsOptions = null;\n    let selectedFunction = null;\n    let selectedSignature = null;\n    let availableFunctions = null;\n\n    const contractABI = this.getContractABI(selectedContract);\n    if (contractABI){\n      availableFunctions = contractABI.filter( f => (!f.constant && f.type === 'function' && f.inputs.length>0 && ['nonpayable','payable'].includes(f.stateMutability)) )\n      functionsOptions = availableFunctions.map( (f,index) => ({\n                          label:f.name,\n                          value:index\n                        }));\n\n      // Add default option\n      functionsOptions.unshift({label:'Select a Function',value:null});\n    }\n\n    // console.log('loadFunctionsOptions',contractABI,functionsOptions);\n\n    this.setState({\n      actionInputs,\n      functionsOptions,\n      selectedFunction,\n      selectedSignature,\n      availableFunctions\n    });\n  }\n\n  changeContract(e){\n    const selectedContract = e.target.value;\n    const selectedContractChanged = selectedContract !== this.state.selectedContract;\n\n    if (selectedContractChanged){\n\n      // Reset function\n      let selectedFunction = null;\n      let selectedSignature = null;\n\n      const newState = {\n        selectedContract,\n        selectedFunction,\n        selectedSignature\n      };\n\n      // Load contract functions\n      if (selectedContract !== null){\n        const contractABI = this.getContractABI(selectedContract);\n        if (contractABI){\n          this.loadFunctionsOptions(selectedContract);\n        } else {\n          newState.functionsOptions = null;\n        }\n      }\n\n      // console.log('changeContract',newState);\n\n      this.setState(newState);\n    }\n  }\n\n  changeFunction(e){\n    const actionValue = 0;\n    let actionInputs = null;\n    const selectedSignature = e.target.value;\n    let selectedFunction = this.state.availableFunctions.find( (f,index) => (index === parseInt(selectedSignature)) );\n\n    if (selectedFunction){\n      actionInputs = new Array(selectedFunction.inputs.length);\n    } else {\n      selectedFunction  = null;\n    }\n\n    this.setState({\n      actionValue,\n      actionInputs,\n      selectedFunction,\n      selectedSignature\n    })\n  }\n  validateField(value,type){\n    if (value===null){\n      return false;\n    }\n    let valid = true;\n    if (type === 'json'){\n      valid = this.functionsUtil.isValidJSON(value);\n    } else {\n      const fieldPattern = this.getPatternByFieldType(type);\n      if (fieldPattern){\n        valid = value.toString().match(fieldPattern) !== null;\n      }\n    }\n    return valid;\n  }\n  getPatternByFieldType(type,returnString=false){\n    let fieldPattern = null;\n    switch (type){\n      case 'address':\n        fieldPattern = '^0x[a-fA-F0-9]{40}$';\n      break;\n      case 'address[]':\n        fieldPattern = '^((0x[a-fA-F0-9]{40})[,]?)+$';\n      break;\n      case 'string':\n        fieldPattern = '[\\\\w]+';\n      break;\n      case 'bool':\n        fieldPattern = '(0|1)';\n      break;\n      case 'uint256':\n      case 'uint8':\n        fieldPattern = '[\\\\d]+';\n      break;\n      default:\n        fieldPattern = null;\n      break;\n    }\n\n    if (!returnString && fieldPattern){\n      fieldPattern = new RegExp(fieldPattern);\n    }\n\n    return fieldPattern;\n  }\n\n  checkInputs(){\n\n    if (!this.state.actionInputs || !this.state.selectedFunction){\n      return false;\n    }\n\n    const inputs = this.state.selectedFunction.inputs;\n    let actionValid = Object.values(this.state.actionInputs).length === inputs.length;\n\n    if (actionValid){\n      Object.values(this.state.actionInputs).forEach( (inputValue,inputIndex) => {\n        const inputInfo = inputs[inputIndex];\n        const fieldPattern = this.getPatternByFieldType(inputInfo.type);\n        const inputValid = fieldPattern ? inputValue.match(fieldPattern) !== null : true;\n        actionValid = actionValid && inputValid;\n        // console.log('checkInputs',inputInfo.name,inputInfo.type,inputValue,inputValid,actionValid);\n      });\n    }\n\n    // Check custom token\n    if (actionValid && this.state.selectedContract === 'custom'){\n      actionValid = actionValid && this.validateField(this.state.customABI,'json') && this.validateField(this.state.customAddress,'address');\n    }\n\n    // console.log('actionValid',this.state.selectedContract,this.validateField(this.state.customABI,'json'),this.state.customAddress,this.validateField(this.state.customAddress,'address'),actionValid);\n\n    if (actionValid !== this.state.actionValid){\n      this.setState({\n        actionValid\n      });\n    }\n  }\n\n  valueChange(e,inputIndex){\n    let actionValue = e.target.value;\n    this.setState({\n      actionValue\n    });\n  }\n\n  inputChange(e,inputIndex){\n    let inputValue = e.target.value;\n\n    this.setState((prevState) => ({\n      actionInputs:{\n        ...prevState.actionInputs,\n        [inputIndex]:inputValue\n      }\n    }));\n  }\n\n  deleteAction(){\n    if (this.state.editAction !== null){\n      let actions = this.state.actions;\n      if (actions[this.state.editAction]){\n        delete actions[this.state.editAction];\n        actions = Object.values(actions);\n        const editAction = null;\n        const actionInputs = null;\n        const selectedContract = null;\n        const selectedFunction = null;\n        const selectedSignature = null;\n\n        this.setState({\n          actions,\n          editAction,\n          actionInputs,\n          selectedContract,\n          selectedFunction,\n          selectedSignature\n        });\n      }\n    }\n  }\n\n  addAction(){\n\n    // Check inputs number\n    const inputs = Object\n                    .values(this.state.actionInputs).filter( v => v.length>0 )\n                    .map( (inputValue,inputIndex) => {\n                      const inputInfo = this.state.selectedFunction.inputs[inputIndex];\n                      switch (inputInfo.type){\n                        case 'address[]':\n                          inputValue = inputValue.split(',');\n                        break;\n                        case 'uint256[]':\n                          inputValue = inputValue.split(',').map( n => this.functionsUtil.toBN(n) );\n                        break;\n                        case 'uint256':\n                          inputValue = this.functionsUtil.toBN(inputValue);\n                        break;\n                        default:\n                          if (inputInfo.type.substr(-2) === '[]'){\n                            inputValue = inputValue.split(',');\n                          }\n                        break;\n                      }\n\n                      return inputValue;\n                    });\n\n    if (inputs.length<this.state.selectedFunction.inputs.length){\n      return false;\n    }\n\n    // Check contract\n    let target = null;\n    if (this.state.selectedContract !== 'custom'){\n      const contract = this.functionsUtil.getContractByName(this.state.selectedContract);\n      if (!contract){\n        return false;\n      } else {\n        target = contract._address;\n      }\n    } else {\n      const contractABIValid = this.functionsUtil.isValidJSON(this.state.customABI);\n      if (!contractABIValid){\n        return false;\n      } else {\n        target = this.state.customAddress;\n      }\n    }\n    \n    const customABI = this.state.customABI;\n    const customAddress = this.state.customAddress;\n    const inputTypes = this.state.selectedFunction.inputs.map( i => (i.type) );\n    const calldata = this.props.web3.eth.abi.encodeParameters(inputTypes,inputs);\n    const signature = this.state.selectedFunction.name+'('+inputTypes.join(',')+')';\n    const value = this.state.actionValue ? this.functionsUtil.BNify(this.state.actionValue).toFixed(0) : this.functionsUtil.BNify(0).toFixed(0);\n\n    const action = {\n      params:{\n        value,\n        target,\n        calldata,\n        signature\n      },\n      customABI,\n      customAddress,\n      inputs:this.state.actionInputs,\n      function:this.state.selectedFunction,\n      contract:this.state.selectedContract,\n      signature:this.state.selectedSignature\n    };\n\n    const newAction = false;\n    const actions = Object.values(this.state.actions);\n\n    if (this.state.editAction === null){\n      actions.push(action);\n    } else {\n      actions[this.state.editAction] = action;\n    }\n\n    const editAction = null;\n\n    this.setState({\n      actions,\n      newAction,\n      editAction\n    });\n  }\n\n  setEditAction(editAction){\n\n    if (!this.state.actions[editAction]){\n      return false;\n    }\n\n    if (editAction === this.state.editAction){\n      return false;\n    }\n\n    const action = this.state.actions[editAction];\n\n    const newAction = false;\n    const actionInputs = action.inputs;\n    const customABI = action.customABI;\n    const actionValue = action.params.value;\n    const selectedContract = action.contract;\n    const selectedFunction = action.function;\n    const customAddress = action.customAddress;\n    const selectedSignature = action.signature;\n\n    this.setState({\n      customABI,\n      newAction,\n      editAction,\n      actionValue,\n      actionInputs,\n      customAddress,\n      selectedContract,\n      selectedFunction,\n      selectedSignature\n    });\n  }\n\n  setNewAction(newAction){\n    if (newAction === this.state.newAction){\n      return false;\n    }\n\n    const editAction = null;\n    const selectedContract = null;\n    const selectedFunction = null;\n\n    this.setState({\n      newAction,\n      editAction,\n      selectedContract,\n      selectedFunction\n    });\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  handleSubmit(e){\n    e.preventDefault();\n\n    const callback = (tx,error) => {\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventAction: 'propose',\n        eventCategory: 'Proposal',\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      const txSucceeded = tx.status === 'success';\n\n      const newState = {\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      };\n      \n      if (txSucceeded){\n        newState.actionValue = 0;\n        newState.customABI = null;\n        newState.newAction = null;\n        newState.editAction = null;\n        newState.actionInputs = null;\n        newState.customAddress = null;\n        newState.proposalCreated = true;\n        newState.selectedContract = null;\n        newState.functionsOptions = null;\n        newState.selectedFunction = null;\n        newState.selectedSignature = null;\n      } else {\n        newState.txError = true;\n      }\n\n      this.setState(newState);\n    };\n\n    const callbackReceipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const targets = [];\n    const values = [];\n    const signatures = [];\n    const calldatas = [];\n    const description = '#'+this.state.title+\"\\n\"+this.state.description;\n\n    Object.values(this.state.actions).forEach( action => {\n      values.push(action.params.value);\n      targets.push(action.params.target);\n      calldatas.push(action.params.calldata);\n      signatures.push(action.params.signature);\n    });\n\n    this.governanceUtil.propose(targets, values, signatures, calldatas, description, callback, callbackReceipt);\n    // this.governanceUtil.proposeAndVoteFor(targets, values, signatures, calldatas, description, callback, callbackReceipt);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n\n    return false;\n  }\n\n  formValidated(){\n\n  }\n\n  render() {\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Title\n          mb={[3,4]}\n        >\n          Create Proposal\n        </Title>\n        {\n        this.state.proposalCreated ? (\n          <DashboardCard\n            cardProps={{\n              py:3,\n              px:4,\n              width:[1,'auto']\n            }}\n          >\n            <Flex\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Icon\n                name={'Done'}\n                align={'center'}\n                size={ this.props.isMobile ? '1.4em' : '2.2em' }\n                color={this.props.theme.colors.transactions.status.completed}\n              />\n              <Text\n                mt={1}\n                fontWeight={3}\n                fontSize={[2,3]}\n                color={'dark-gray'}\n                textAlign={'center'}\n              >\n                The proposal has been successfully created\n              </Text>\n            </Flex>\n          </DashboardCard>\n        ) : \n        // Has balance\n        this.props.votes && this.props.votes.gte(this.props.proposalThreshold) ? (\n          <Form\n            width={1}\n            validated={this.state.validated}\n            onSubmit={this.handleSubmit.bind(this)}\n          >\n            <Flex\n              mb={2}\n              width={1}\n              flexDirection={['column','row']}\n              justifyContent={['center','space-between']}\n            >\n              <Flex\n                width={[1,0.48]}\n                flexDirection={'column'}\n              >\n                <Flex\n                  pb={2}\n                  width={1}\n                  mb={[2,3]}\n                  borderColor={'divider'}\n                  borderBottom={'1px solid transparent'}\n                >\n                  <Heading.h4\n                    fontSize={[2,3]}\n                    fontWeight={[2,3]}\n                  >\n                    Proposal Description\n                  </Heading.h4>\n                </Flex>\n                <Flex\n                  flexDirection={'column'}\n                >\n                  <Field\n                    width={1}\n                    label={\"Title\"}\n                    validated={this.state.validated}\n                  >\n                    <Input\n                      required\n                      width={1}\n                      type={'text'}\n                      className={styles.input}\n                      value={this.state.title}\n                      placeholder={'Title of your proposal'}\n                      onChange={ e => this.handleInput('title',e) }\n                    />\n                  </Field>\n                </Flex>\n                <Flex\n                  flexDirection={'column'}\n                >\n                  <Field\n                    width={1}\n                    label={'Description'}\n                    validated={this.state.validated}\n                  >\n                    <Textarea\n                      required\n                      rows={8}\n                      width={1}\n                      className={styles.input}\n                      value={this.state.description}\n                      placeholder={'Description of your proposal'}\n                      onChange={ e => this.handleInput('description',e) }\n                    />\n                  </Field>\n                </Flex>\n              </Flex>\n\n              <Flex\n                width={[1,0.48]}\n                flexDirection={'column'}\n              >\n                <Flex\n                  pb={2}\n                  width={1}\n                  mb={[2,3]}\n                  borderColor={'divider'}\n                  borderBottom={'1px solid transparent'}\n                >\n                  <Heading.h4\n                    fontSize={[2,3]}\n                    fontWeight={[2,3]}\n                  >\n                    Actions\n                  </Heading.h4>\n                </Flex>\n                <Flex\n                  flexDirection={'column'}\n                >\n                  {\n                    Object.values(this.state.actions).map( (action,actionIndex) => {\n                      return (\n                        <DashboardCard\n                          cardProps={{\n                            py:2,\n                            px:3,\n                            mb:3,\n                            width:1\n                          }}\n                          titleParentProps={{\n                            ml:0,\n                            my:1,\n                            justifyContent:'center'\n                          }}\n                          titleProps={{\n                            fontSize:2,\n                            fontWeight:3\n                          }}\n                          isInteractive={true}\n                          key={`action_${actionIndex}`}\n                          handleClick={ e => this.setEditAction(actionIndex) }\n                          title={ this.state.editAction === actionIndex ? 'Edit Action' : null }\n                        >\n                          {\n                            this.state.editAction === actionIndex ? (\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Field\n                                  style={{\n                                    width:'100%',\n                                    display:'flex',\n                                    alignItems:'stretch',\n                                    flexDirection:'column'\n                                  }}\n                                  label={\"Select Contract\"}\n                                >\n                                  <Select\n                                    style={{\n                                      width:'100%'\n                                    }}\n                                    required={true}\n                                    value={this.state.selectedContract}\n                                    options={this.state.contractOptions}\n                                    onChange={this.changeContract.bind(this)}\n                                  />\n                                </Field>\n                                {\n                                  this.state.selectedContract && this.state.selectedContract === 'custom' &&\n                                  (\n                                    <Flex\n                                      width={1}\n                                      flexDirection={'column'}\n                                    >\n                                      <Field\n                                        width={1}\n                                        label={\"Contract Address\"}\n                                        validated={this.state.validated}\n                                      >\n                                        <Input\n                                          required\n                                          width={1}\n                                          type={'text'}\n                                          className={styles.input}\n                                          placeholder={'Custom contract address'}\n                                          pattern={this.getPatternByFieldType('address',true)}\n                                          onChange={ e => this.handleInput('customAddress',e,'address') }\n                                          value={this.state.customAddress ? this.state.customAddress : ''}\n                                        />\n                                      </Field>\n                                      <Field\n                                        width={1}\n                                        label={'Custom ABI'}\n                                        validated={this.state.validated}\n                                      >\n                                        <Textarea\n                                          required\n                                          rows={8}\n                                          width={1}\n                                          className={styles.input}\n                                          placeholder={'Insert the ABI of your contract'}\n                                          onChange={ e => this.handleInput('customABI',e,'json') }\n                                          value={this.state.customABI ? this.state.customABI : ''}\n                                        />\n                                      </Field>\n                                    </Flex>\n                                  )\n                                }\n                                {\n                                  this.state.selectedContract && this.state.functionsOptions &&\n                                    <Field\n                                      style={{\n                                        width:'100%',\n                                        display:'flex',\n                                        alignItems:'stretch',\n                                        flexDirection:'column'\n                                      }}\n                                      label={\"Select Function\"}\n                                    >\n                                      <Select\n                                        style={{\n                                          width:'100%'\n                                        }}\n                                        required={true}\n                                        options={this.state.functionsOptions}\n                                        onChange={this.changeFunction.bind(this)}\n                                        value={this.state.selectedSignature ? this.state.selectedSignature : ''}\n                                      />\n                                    </Field>\n                                }\n                                {\n                                  this.state.selectedFunction && this.state.selectedFunction.payable && (\n                                    <Field\n                                      label={`Value`}\n                                      style={{\n                                        width:'100%',\n                                        display:'flex',\n                                        alignItems:'stretch',\n                                        flexDirection:'column'\n                                      }}\n                                    >\n                                      <Input\n                                        required\n                                        width={1}\n                                        type={'number'}\n                                        className={styles.input}\n                                        placeholder={`Enter ETH value`}\n                                        onChange={ e => this.valueChange(e) }\n                                        value={this.state.actionValue ? this.state.actionValue : 0}\n                                      />\n                                    </Field>\n                                  )\n                                }\n                                {\n                                  this.state.selectedFunction &&\n                                    this.state.selectedFunction.inputs.map( (input,inputIndex) => {\n                                      const fieldType = ['uint256','bool'].includes(input.type) ? 'number' : 'text';\n                                      const fieldPattern = this.getPatternByFieldType(input.type,true);\n                                      return (\n                                        <Field\n                                          style={{\n                                            width:'100%',\n                                            display:'flex',\n                                            alignItems:'stretch',\n                                            flexDirection:'column'\n                                          }}\n                                          key={`input_${inputIndex}`}\n                                          label={`${input.name} (${input.type})`}\n                                        >\n                                          <Input\n                                            required\n                                            width={1}\n                                            type={fieldType}\n                                            pattern={fieldPattern}\n                                            className={styles.input}\n                                            placeholder={`${input.name} (${input.type})`}\n                                            onChange={ e => this.inputChange(e,inputIndex) }\n                                            value={this.state.actionInputs[inputIndex] ? this.state.actionInputs[inputIndex] : ''}\n                                          />\n                                        </Field>\n                                      )\n                                    })\n                                }\n                                {\n                                  this.state.selectedContract && this.state.selectedFunction &&\n                                    <Flex\n                                      mb={2}\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <RoundButton\n                                        buttonProps={{\n                                          px:[0,4],\n                                          width:[1,'auto'],\n                                          type:'button',\n                                          disabled:!this.state.actionValid\n                                        }}\n                                        handleClick={this.addAction.bind(this)}\n                                      >\n                                        Save Action\n                                      </RoundButton>\n                                      <Link\n                                        mt={2}\n                                        color={'red'}\n                                        hoverColor={'red'}\n                                        onClick={this.deleteAction.bind(this)}\n                                      >\n                                        Delete Action\n                                      </Link>\n                                    </Flex>\n                                }\n                              </Flex>\n                            ) : (\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'space-between'}\n                              >\n                                <Text>\n                                  {action.contract} - {action.params.signature}\n                                </Text>\n                                <Flex\n                                  p={['4px','7px']}\n                                  borderRadius={'50%'}\n                                  alignItems={'center'}\n                                  justifyContent={'center'}\n                                  backgroundColor={ this.props.theme.colors.transactions.actionBg.redeem }\n                                >\n                                  <Icon\n                                    name={'Edit'}\n                                    align={'center'}\n                                    color={'redeem'}\n                                    size={ this.props.isMobile ? '1.2em' : '1.4em' }\n                                  />\n                                </Flex>\n                              </Flex>\n                            )\n                          }\n                        </DashboardCard>\n                      );\n                    })\n                  }\n                  {\n                    (!this.state.actions || Object.values(this.state.actions).length<this.props.proposalMaxOperations) && (\n                      <DashboardCard\n                        cardProps={{\n                          py:2,\n                          px:3,\n                          mb:3,\n                          width:1\n                        }}\n                        titleParentProps={{\n                          ml:0,\n                          my:1,\n                          justifyContent:'center'\n                        }}\n                        titleProps={{\n                          fontSize:2,\n                          fontWeight:3\n                        }}\n                        isInteractive={true}\n                        handleClick={ e => this.setNewAction(true) }\n                        title={ this.state.newAction ? 'Add Action' : null }\n                      >\n                        {\n                          this.state.newAction ? (\n                            <Flex\n                              width={1}\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <Field\n                                style={{\n                                  width:'100%',\n                                  display:'flex',\n                                  alignItems:'stretch',\n                                  flexDirection:'column'\n                                }}\n                                label={\"Select Contract\"}\n                              >\n                                <Select\n                                  style={{\n                                    width:'100%'\n                                  }}\n                                  required={true}\n                                  options={this.state.contractOptions}\n                                  onChange={this.changeContract.bind(this)}\n                                />\n                              </Field>\n                              {\n                                this.state.selectedContract && this.state.selectedContract === 'custom' &&\n                                (\n                                  <Flex\n                                    width={1}\n                                    flexDirection={'column'}\n                                  >\n                                    <Field\n                                      width={1}\n                                      label={\"Contract Address\"}\n                                      validated={this.state.validated}\n                                    >\n                                      <Input\n                                        required\n                                        width={1}\n                                        type={'text'}\n                                        className={styles.input}\n                                        placeholder={'Custom contract address'}\n                                        pattern={this.getPatternByFieldType('address',true)}\n                                        onChange={ e => this.handleInput('customAddress',e,'address') }\n                                        value={this.state.customAddress ? this.state.customAddress : ''}\n                                      />\n                                    </Field>\n                                    <Field\n                                      width={1}\n                                      label={'Custom ABI'}\n                                      validated={this.state.validated}\n                                    >\n                                      <Textarea\n                                        required\n                                        rows={8}\n                                        width={1}\n                                        className={styles.input}\n                                        placeholder={'Insert the ABI of your contract'}\n                                        onChange={ e => this.handleInput('customABI',e,'json') }\n                                        value={this.state.customABI ? this.state.customABI : ''}\n                                      />\n                                    </Field>\n                                  </Flex>\n                                )\n                              }\n                              {\n                                this.state.selectedContract && this.state.functionsOptions && \n                                  <Field\n                                    style={{\n                                      width:'100%',\n                                      display:'flex',\n                                      alignItems:'stretch',\n                                      flexDirection:'column'\n                                    }}\n                                    label={\"Select Function\"}\n                                  >\n                                    <Select\n                                      style={{\n                                        width:'100%'\n                                      }}\n                                      required={true}\n                                      options={this.state.functionsOptions}\n                                      onChange={this.changeFunction.bind(this)}\n                                      value={this.state.selectedSignature ? this.state.selectedSignature : ''}\n                                    />\n                                  </Field>\n                              }\n                              {\n                                this.state.selectedFunction && this.state.selectedFunction.payable && (\n                                  <Field\n                                    label={`Value`}\n                                    style={{\n                                      width:'100%',\n                                      display:'flex',\n                                      alignItems:'stretch',\n                                      flexDirection:'column'\n                                    }}\n                                  >\n                                    <Input\n                                      required\n                                      width={1}\n                                      type={'number'}\n                                      className={styles.input}\n                                      placeholder={`Enter ETH value`}\n                                      onChange={ e => this.valueChange(e) }\n                                      value={this.state.actionValue ? this.state.actionValue : 0}\n                                    />\n                                  </Field>\n                                )\n                              }\n                              {\n                                this.state.selectedFunction &&\n                                  this.state.selectedFunction.inputs.map( (input,inputIndex) => {\n                                    const fieldType = ['uint256','bool'].includes(input.type) ? 'number' : 'text';\n                                    const fieldPattern = this.getPatternByFieldType(input.type,true);\n                                    return (\n                                      <Field\n                                        style={{\n                                          width:'100%',\n                                          display:'flex',\n                                          alignItems:'stretch',\n                                          flexDirection:'column'\n                                        }}\n                                        key={`input_${inputIndex}`}\n                                        label={`${input.name} (${input.type})`}\n                                      >\n                                        <Input\n                                          required\n                                          width={1}\n                                          type={fieldType}\n                                          pattern={fieldPattern}\n                                          className={styles.input}\n                                          placeholder={`${input.name} (${input.type})`}\n                                          onChange={ e => this.inputChange(e,inputIndex) }\n                                          value={this.state.actionInputs[inputIndex] ? this.state.actionInputs[inputIndex] : ''}\n                                        />\n                                      </Field>\n                                    )\n                                  })\n                              }\n                              {\n                                this.state.selectedContract && this.state.selectedFunction &&\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    justifyContent={'center'}\n                                  >\n                                    <RoundButton\n                                      buttonProps={{\n                                        px:[0,4],\n                                        type:'button',\n                                        width:[1,'auto'],\n                                        disabled:!this.state.actionValid\n                                      }}\n                                      handleClick={this.addAction.bind(this)}\n                                    >\n                                      Add Action\n                                    </RoundButton>\n                                  </Flex>\n                              }\n                            </Flex>\n                          ) : (\n                            <Flex\n                              width={1}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              justifyContent={'space-between'}\n                            >\n                              <Text>\n                                Add Action\n                              </Text>\n                              <Flex\n                                p={['4px','7px']}\n                                borderRadius={'50%'}\n                                alignItems={'center'}\n                                justifyContent={'center'}\n                                backgroundColor={ this.props.theme.colors.transactions.actionBg.redeem }\n                              >\n                                <Icon\n                                  name={'Add'}\n                                  align={'center'}\n                                  color={'redeem'}\n                                  size={ this.props.isMobile ? '1.2em' : '1.4em' }\n                                />\n                              </Flex>\n                            </Flex>\n                          )\n                        }\n                      </DashboardCard>\n                    )\n                  }\n\n                </Flex>\n              </Flex>\n            </Flex>\n            <Flex\n              mb={3}\n              width={1}\n              alignItems={'center'}\n              justifyContent={'center'}\n            >\n              {\n                // Sending transaction\n                this.state.processing && this.state.processing.loading ? (\n                  <TxProgressBar\n                    web3={this.props.web3}\n                    hash={this.state.processing.txHash}\n                    waitText={`Proposal creation estimated in`}\n                    endMessage={`Finalizing proposal creation request...`}\n                    cancelTransaction={this.cancelTransaction.bind(this)}\n                  />\n                ) : (\n                  <RoundButton\n                    buttonProps={{\n                      type:'submit',\n                      width:[1,'15em'],\n                      disabled:!this.state.validated\n                    }}\n                  >\n                    Submit Proposal\n                  </RoundButton>\n                )\n              }\n            </Flex>\n          </Form>\n        ) : this.props.balance && this.props.balance.gte(this.props.proposalThreshold) ? (\n          <Flex\n            width={1}\n            alignItems={'center'}\n            flexDirection={'column'}\n            justifyContent={'center'}\n          >\n            <Text\n              mb={3}\n              fontWeight={2}\n              fontSize={[2,3]}\n              color={'dark-gray'}\n              textAlign={'center'}\n            >\n              Please delegate your votes to yourself to create a new proposal.\n            </Text>\n            <DelegateVote\n              {...this.props}\n            />\n          </Flex>\n        ) : (\n          <Text\n            fontWeight={2}\n            fontSize={[2,3]}\n            color={'dark-gray'}\n            textAlign={'center'}\n          >\n            You need at least {this.functionsUtil.formatMoney(this.functionsUtil.fixTokenDecimals(this.props.proposalThreshold,18),0)} delegated votes to send a new proposal.\n          </Text>\n        )\n       }\n      </Flex>\n    );\n  }\n}\n\nexport default NewProposal;","import React, { Component } from 'react';\nimport { Flex, Text, Box, Link } from \"rimble-ui\";\nimport FlexLoader from '../../FlexLoader/FlexLoader';\nimport RoundButton from '../../RoundButton/RoundButton';\nimport DelegateVote from '../DelegateVote/DelegateVote';\nimport ProposalField from '../ProposalField/ProposalField';\nimport GovernanceUtil from '../../utilities/GovernanceUtil';\nimport DashboardCard from '../../DashboardCard/DashboardCard';\nimport TxProgressBar from '../../TxProgressBar/TxProgressBar';\n\nclass CastVote extends Component {\n\n  state = {\n    vote:null,\n    loaded:false,\n    userVote:null,\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    voteSucceed:false,\n    showDelegateBox:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  governanceUtil = null;\n\n  loadUtils(){\n    if (this.governanceUtil){\n      this.governanceUtil.setProps(this.props);\n    } else {\n      this.governanceUtil = new GovernanceUtil(this.props);\n    }\n\n    this.functionsUtil = this.governanceUtil.functionsUtil;\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.loadData();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    if (accountChanged){\n      this.loadData();\n    }\n  }\n\n  async loadData(){\n    if (this.props.account){\n      const userVote = this.props.proposal.votes.find( v => (v.voter.toLowerCase() === this.props.account.toLowerCase()) );\n      this.setState({\n        userVote,\n        loaded:true\n      });\n    }\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  toggleDelegateBox(showDelegateBox){\n    this.setState({\n      showDelegateBox\n    });\n  }\n\n  castVote(){\n\n    if (this.state.vote === null){\n      return false;\n    }\n\n    const callback = (tx,error) => {\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Proposal',\n        eventAction: 'CastVote',\n        eventLabel: this.state.vote\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      let userVote = null;\n      const txSucceeded = tx.status === 'success';\n      if (txSucceeded){\n        userVote = {\n          voter:this.props.account,\n          votes:this.props.votes.toString(),\n          support:this.state.vote === 'for',\n          proposalId:this.props.proposal.id,\n        };\n\n        if (typeof this.props.callback === 'function'){\n          this.props.callback();\n        }\n      }\n\n\n      this.setState({\n        userVote,\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      });\n    };\n\n    const callbackReceipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const vote = this.state.vote === 'for';\n    const proposalId = parseInt(this.props.proposal.id);\n\n    this.governanceUtil.castVote(proposalId,vote,callback,callbackReceipt);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  setVote = (vote) => {\n    this.setState({\n      vote\n    });\n  }\n\n  render() {\n    return this.state.userVote ? (\n        <Flex\n          p={3}\n          width={1}\n          mb={[2,3]}\n          alignItems={'center'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          <Text\n            mb={2}\n            fontWeight={4}\n            fontSize={[2,3]}\n            color={'dark-gray'}\n            textAlign={'center'}\n          >\n            You have voted for the proposal #{this.props.proposal.id}:\n          </Text>\n          <DashboardCard\n            cardProps={{\n              mb:2,\n              py:[2,3],\n              px:[3,4],\n              width:'auto'\n            }}\n            isInteractive={false}\n          >\n            <Flex\n              my={1}\n              alignItems={'center'}\n              flexDirection={'row'}\n              justifyContent={'center'}\n            >\n              <ProposalField\n                fieldInfo={{\n                  name:'statusIcon',\n                  state: this.state.userVote.support ? 'Executed' : 'Canceled',\n                  props:{\n                    mr:2\n                  }\n                }}\n              />\n              <Text\n                fontWeight={3}\n                fontSize={[2,3]}\n              >\n                {this.state.userVote.support ? 'For' : 'Against'}\n              </Text>\n            </Flex>\n          </DashboardCard>\n          <Text\n            fontSize={1}\n            fontWeight={500}\n            color={'statValue'}\n            textAlign={'center'}\n          >\n            voted with {this.functionsUtil.formatMoney(this.functionsUtil.fixTokenDecimals(this.state.userVote.votes,18).toFixed(0,1),0)} votes\n          </Text>\n        </Flex>\n      ) : this.props.proposal.state === 'Active' && (\n        <Box\n          p={3}\n          width={1}\n          mb={[2,3]}\n        >\n          {\n            // Data not loaded yet\n            !this.state.loaded ? (\n              <FlexLoader\n                flexProps={{\n                  flexDirection:'row',\n                }}\n                loaderProps={{\n                  size:'30px'\n                }}\n                textProps={{\n                  ml:2\n                }}\n                text={'Loading data...'}\n              />\n            ) :\n            // No votes delegated\n            (!this.props.votes || this.functionsUtil.BNify(this.props.votes).lte(0) || this.state.showDelegateBox) ? (\n              <DelegateVote\n                {...this.props}\n                canClose={this.state.showDelegateBox}\n                closeFunc={ e => this.toggleDelegateBox(false) }\n              />\n            ) : (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <Text\n                  mb={1}\n                  fontWeight={4}\n                  fontSize={[2,3]}\n                  color={'dark-gray'}\n                  textAlign={'center'}\n                >\n                  Cast your vote for the proposal #{this.props.proposal.id}:\n                </Text>\n                <Text\n                  mb={2}\n                  fontSize={1}\n                  color={'red'}\n                  fontWeight={500}\n                  textAlign={'center'}\n                >\n                  Make sure you have been delegated before this proposal has been submitted\n                </Text>\n                {\n                  this.state.processing && this.state.processing.loading ? (\n                    <Flex\n                      width={1}\n                      flexDirection={'column'}\n                    >\n                      <TxProgressBar\n                        web3={this.props.web3}\n                        waitText={`Vote estimated in`}\n                        hash={this.state.processing.txHash}\n                        endMessage={`Finalizing vote request...`}\n                        cancelTransaction={this.cancelTransaction.bind(this)}\n                      />\n                    </Flex>\n                  ) : (\n                    <Flex\n                      width={1}\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                      justifyContent={'center'}\n                    >\n                      <Flex\n                        mb={2}\n                        width={[1,0.4]}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setVote('for');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.vote === 'for' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <ProposalField\n                              fieldInfo={{\n                                name:'statusIcon',\n                                state:'Executed',\n                                props:{\n                                  mr:2\n                                }\n                              }}\n                            />\n                            <Text\n                              fontWeight={3}\n                              fontSize={[2,3]}\n                            >\n                              For\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setVote('against');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.vote === 'against' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <ProposalField\n                              fieldInfo={{\n                                name:'statusIcon',\n                                state:'Canceled',\n                                props:{\n                                  mr:2\n                                }\n                              }}\n                            />\n                            <Text\n                              fontWeight={3}\n                              fontSize={[2,3]}\n                            >\n                              Against\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                      <Text\n                        mb={0}\n                        fontSize={1}\n                        fontWeight={500}\n                        color={'statValue'}\n                        textAlign={'center'}\n                      >\n                        You have {this.functionsUtil.formatMoney(this.functionsUtil.fixTokenDecimals(this.props.votes,18).toFixed(0,1),0)} votes delegated\n                      </Text>\n                      {\n                        this.props.balance && this.functionsUtil.BNify(this.props.balance).gt(0) &&\n                          <Link\n                            mt={0}\n                            mainColor={'primary'}\n                            hoverColor={'primary'}\n                            onClick={ e => this.toggleDelegateBox(true) }\n                          >\n                            change delegate\n                          </Link>\n                      }\n                      <RoundButton\n                        buttonProps={{\n                          mt:2,\n                          width:[1,0.2],\n                          disabled:this.state.vote === null\n                        }}\n                        handleClick={this.castVote.bind(this)}\n                      >\n                        Vote\n                      </RoundButton>\n                    </Flex>\n                  )\n                }\n              </Flex>\n            )\n          }\n        </Box>\n      );\n  }\n}\n\nexport default CastVote;","import Title from '../../Title/Title';\nimport React, { Component } from 'react';\nimport CastVote from '../CastVote/CastVote';\nimport StatsCard from '../../StatsCard/StatsCard';\nimport RoundButton from '../../RoundButton/RoundButton';\nimport { Box, Flex, Blockie, Text, Link } from \"rimble-ui\";\nimport ProposalField from '../ProposalField/ProposalField';\nimport GovernanceUtil from '../../utilities/GovernanceUtil';\nimport ShortHash from \"../../utilities/components/ShortHash\";\nimport TxProgressBar from '../../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../../DashboardCard/DashboardCard';\n\nclass ProposalDetails extends Component {\n\n  state = {\n    showActionParams:null,\n    processing:{\n      action:null,\n      txHash:null,\n      loading:false\n    },\n  };\n\n  // Utils\n  functionsUtil = null;\n  governanceUtil = null;\n\n  loadUtils(){\n    if (this.governanceUtil){\n      this.governanceUtil.setProps(this.props);\n    } else {\n      this.governanceUtil = new GovernanceUtil(this.props);\n    }\n\n    this.functionsUtil = this.governanceUtil.functionsUtil;\n  }\n\n  toggleShowParams(showActionParams){\n    // Reset show action params\n    if (this.state.showActionParams === showActionParams){\n      showActionParams = null;\n    }\n    this.setState({\n      showActionParams\n    });\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        action:null,\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  async queueProposal(){\n\n    const callback = (tx,error) => {\n      // Send Google Analytics event\n      const eventData = {\n        eventAction: 'queue',\n        eventCategory: 'Governance',\n        eventLabel: this.props.proposal.id\n      };\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      if (typeof this.props.loadData === 'function' && tx.status === 'success'){\n        this.props.loadData();\n      }\n\n      this.setState({\n        processing: {\n          action:null,\n          txHash:null,\n          loading:false\n        }\n      });\n    };\n\n    const callbackReceipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    this.governanceUtil.queueProposal(this.props.proposal.id,callback,callbackReceipt);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true,\n        action:'Queue'\n      }\n    }));\n  }\n\n  async executeProposal(){\n    const callback = (tx,error) => {\n      // Send Google Analytics event\n      const eventData = {\n        eventAction: 'execute',\n        eventCategory: 'Governance',\n        eventLabel: this.props.proposal.id\n      };\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      if (typeof this.props.loadData === 'function' && tx.status === 'success'){\n        this.props.loadData();\n      }\n\n      this.setState({\n        processing: {\n          action:null,\n          txHash:null,\n          loading:false\n        }\n      });\n    };\n\n    const callbackReceipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    this.governanceUtil.executeProposal(this.props.proposal.id,callback,callbackReceipt);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true,\n        action:'Execute'\n      }\n    }));\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n\n    window.loadData = this.props.loadData;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    let proposal = this.props.proposal;\n    const lastState = Object.values(proposal.states).pop();\n    const hasVotes = proposal.votes && proposal.votes.length>0;\n    const forVotes = this.functionsUtil.BNify(proposal.forVotes).div(1e18);\n    const againstVotes = this.functionsUtil.BNify(proposal.againstVotes).div(1e18);\n    const totalVotes = forVotes.plus(againstVotes);\n    const forVotesPerc = forVotes.div(totalVotes).times(100).toFixed(2);\n    const againstVotesPerc = againstVotes.div(totalVotes).times(100).toFixed(2);\n    const forVotesAddrs = proposal.votes.filter( v => (v.support) ).sort( (a,b) => (this.functionsUtil.BNify(a.votes).lt(this.functionsUtil.BNify(b.votes)) ? 1 : -1) );\n    const againstVotesAddrs = proposal.votes.filter( v => (!v.support) ).sort( (a,b) => (this.functionsUtil.BNify(a.votes).lt(this.functionsUtil.BNify(b.votes)) ? 1 : -1) );\n\n    const canQueue = proposal.state.toLowerCase() === 'succeeded'; \n    const canExecute = proposal.state.toLowerCase() === 'queued' && parseInt(new Date().getTime()/1000)-parseInt(proposal.states[proposal.states.length-1].start_time)>=parseInt(this.props.timelockDelay);\n\n    return (\n      <Box\n        width={1}\n      >\n        <Title\n          mb={[3,4]}\n        >\n          {proposal.title}\n        </Title>\n        <Flex\n          mb={3}\n          width={1}\n          alignItems={'center'}\n          justifyContent={'center'}\n          flexDirection={['column','row']}\n        >\n          <Flex\n            mb={[2,0]}\n            pr={[0,1]}\n            width={[1,1/4]}\n            flexDirection={'column'}\n          >\n            <StatsCard\n              labelTooltip={null}\n              title={'Proposal ID'}\n              value={`#${proposal.id}`}\n              minHeight={['110px','143px']}\n              titleMinHeight={['auto','50px']}\n              label={`Created on ${this.functionsUtil.strToMoment(proposal.states[0].start_time*1000).format('DD MMM, YYYY')}`}\n            />\n          </Flex>\n          <Flex\n            mb={[2,0]}\n            pl={[0,1]}\n            pr={[0,1]}\n            width={[1,1/4]}\n            flexDirection={'column'}\n          >\n            <StatsCard\n              titleMinHeight={['auto','50px']}\n              minHeight={['110px','143px']}\n              labelTooltip={ null }\n              title={'Proposer'}\n              label={null}\n            >\n              <Flex\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <Blockie\n                  opts={{\n                    size: 12,\n                    color: \"#dfe\",\n                    bgcolor: \"#a71\",\n                    spotcolor: \"#000\",\n                    seed: proposal.address,\n                  }}\n                />\n                <ShortHash\n                  ml={2}\n                  lineHeight={1}\n                  fontSize={[3,4]}\n                  fontWeight={[3,4]}\n                  color={'statValue'}\n                  hash={proposal.proposer}\n                />\n              </Flex>\n            </StatsCard>\n          </Flex>\n          <Flex\n            mb={[2,0]}\n            pl={[0,1]}\n            pr={[0,1]}\n            width={[1,1/4]}\n            flexDirection={'column'}\n          >\n            <StatsCard\n              title={'Status'}\n              labelTooltip={ null }\n              minHeight={['110px','143px']}\n              titleMinHeight={['auto','50px']}\n              label={`Updated on ${this.functionsUtil.strToMoment(lastState.start_time*1000).format('DD MMM, YYYY')}`}\n            >\n              <Flex\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <ProposalField\n                  {...this.props}\n                  proposal={proposal}\n                  fieldInfo={{\n                    name:'statusIcon',\n                    props:{\n                      size: this.props.isMobile ? '1.7em' : '2em'\n                    }\n                  }}\n                />\n                <Text\n                  ml={2}\n                  lineHeight={1}\n                  fontSize={[4,5]}\n                  fontWeight={[3,4]}\n                  color={'statValue'}\n                >\n                  {proposal.state}\n                </Text>\n              </Flex>\n            </StatsCard>\n          </Flex>\n          <Flex\n            pl={[0,1]}\n            mb={[2,0]}\n            width={[1,1/4]}\n            flexDirection={'column'}\n          >\n            <StatsCard\n              label={null}\n              title={'Total Votes'}\n              labelTooltip={ null }\n              minHeight={['110px','143px']}\n              titleMinHeight={['auto','50px']}\n              value={this.functionsUtil.formatMoney(totalVotes.toFixed(0,1),0)}\n            />\n          </Flex>\n        </Flex>\n        {\n          this.props.account && \n            <CastVote\n              {...this.props}\n              callback={this.props.loadData}\n            />\n        }\n        <Flex\n          width={1}\n          mb={[2,3]}\n          id={'details-container'}\n          justifyContent={'space-between'}\n          flexDirection={['column','row']}\n        >\n          <DashboardCard\n            cardProps={{\n              p:3,\n              mb:[2,0],\n              mr:[0,1],\n              width:[1,1/2]\n            }}\n            title={'Actions'}\n            titleParentProps={{\n              mt:0,\n              ml:0\n            }}\n          >\n            <Flex\n              pt={2}\n              width={1}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              {\n                proposal.actions.signatures.map( (action,actionIndex) => {\n                  const data = proposal.actions.calldatas[actionIndex];\n                  // const targetAddr = proposal.actions.targets[actionIndex];\n\n                  let decodedParams = null;\n                  let attrs = action.match(/\\(([a-z0-9,]+(\\[\\])?)\\)/i);\n                  attrs = attrs ? attrs[1].split(',') : null;\n\n                  if (attrs){\n                    decodedParams = this.props.web3.eth.abi.decodeParameters(attrs,data);\n                    if (decodedParams){\n                      decodedParams = Object.values(decodedParams).splice(0,attrs.length);\n                    }\n                  }\n\n                  return (\n                    <Flex\n                      py={1}\n                      width={1}\n                      flexDirection={'column'}\n                      alignItems={'flex-start'}\n                      key={`action_${actionIndex}`}\n                      justifyContent={'flex-start'}\n                      borderBottom={`1px solid ${this.props.theme.colors['near-white']}`}\n                    >\n                      <Flex\n                        mb={1}\n                        width={1}\n                        flexDirection={['column','row']}\n                        alignItems={['flex-start','center']}\n                      >\n                        <Flex\n                          flexDirection={'row'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            color={'dark-gray'}\n                          >\n                            {parseInt(actionIndex)+1}\n                          </Text>\n                          <Text\n                            ml={2}\n                            fontSize={1}\n                            fontWeight={2}\n                            color={'dark-gray'}\n                          >\n                            {action}\n                          </Text>\n                        </Flex>\n                        {\n                          decodedParams &&\n                            <Link\n                              mt={[1,0]}\n                              ml={[0,1]}\n                              fontSize={1}\n                              fontWeight={2}\n                              textAlign={'left'}\n                              lineHeight={'initial'}\n                              hoverColor={'primary'}\n                              onClick={ e => this.toggleShowParams(actionIndex) }\n                            >\n                              {\n                                this.state.showActionParams === actionIndex ? '(hide params)' : '(show params)'\n                              }\n                            </Link>\n                        }\n                      </Flex>\n                      {\n                        decodedParams && this.state.showActionParams === actionIndex &&\n                          <Flex\n                            pl={[0,3]}\n                            width={1}\n                            flexDirection={'column'}\n                          >\n                            {\n                              decodedParams.map( (param,paramIndex) => (\n                                <Text\n                                  fontSize={0}\n                                  color={'statValue'}\n                                  key={`param_${paramIndex}`}\n                                >\n                                  {param}\n                                </Text>\n                              ))\n                            }\n                          </Flex>\n                      }\n                    </Flex>\n                  );\n                })\n              }\n            </Flex>\n          </DashboardCard>\n          <DashboardCard\n            cardProps={{\n              p:3,\n              ml:[0,1],\n              width:[1,1/2]\n            }}\n          >\n            <Flex\n              mb={2}\n              width={1}\n              alignItems={'center'}\n              flexDirection={'row'}\n              justifyContent={'space-between'}\n            >\n              <Text\n                fontWeight={4}\n                fontSize={[2,3]}\n                textAlign={'left'}\n                color={'dark-gray'}\n                lineHeight={'initial'}\n              >\n                Proposal History\n              </Text>\n              <Text\n                fontWeight={4}\n                fontSize={[2,3]}\n                textAlign={'left'}\n                color={'dark-gray'}\n                lineHeight={'initial'}\n              >\n                Date\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              {\n                proposal.states.map( (stateInfo,stateIndex) => {\n                  return (\n                    <Flex\n                      py={2}\n                      width={1}\n                      alignItems={'center'}\n                      key={`state_${stateIndex}`}\n                      justifyContent={'space-between'}\n                      borderBottom={`1px solid ${this.props.theme.colors['near-white']}`}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <ProposalField\n                          {...this.props}\n                          proposal={proposal}\n                          fieldInfo={{\n                            name:'statusIcon',\n                            state:stateInfo.state,\n                            props:{\n                              size: this.props.isMobile ? '1.3em' : '1.5em'\n                            }\n                          }}\n                        />\n                        <Link\n                          ml={2}\n                          fontSize={1}\n                          fontWeight={2}\n                          target={'_blank'}\n                          textAlign={'left'}\n                          color={'dark-gray'}\n                          lineHeight={'initial'}\n                          hoverColor={'primary'}\n                          rel={'nofollow noopener noreferrer'}\n                          href={this.functionsUtil.getEtherscanTransactionUrl(stateInfo.trx_hash)}\n                        >\n                          {stateInfo.state}\n                        </Link>\n                      </Flex>\n                      <Text\n                        fontSize={1}\n                        fontWeight={2}\n                        textAlign={'left'}\n                        color={'dark-gray'}\n                        lineHeight={'initial'}\n                      >\n                        {this.functionsUtil.strToMoment(stateInfo.start_time*1000).format('DD MMM, YYYY')}\n                      </Text>\n                    </Flex>\n                  );\n                })\n              }\n              {\n                this.state.processing && this.state.processing.loading ? (\n                  <Flex\n                    mt={3}\n                    width={1}\n                    flexDirection={'column'}\n                  >\n                    <TxProgressBar\n                      web3={this.props.web3}\n                      hash={this.state.processing.txHash}\n                      cancelTransaction={this.cancelTransaction.bind(this)}\n                      waitText={`${this.state.processing.action} estimated in`}\n                      endMessage={`Finalizing ${this.state.processing.action.toLowerCase()} request...`}\n                    />\n                  </Flex>\n                ) : canQueue ? (\n                  <RoundButton\n                    buttonProps={{\n                      mt:3,\n                      width:[1,'auto'],\n                    }}\n                    handleClick={this.queueProposal.bind(this)}\n                  >\n                    Queue Proposal\n                  </RoundButton>\n                ) : canExecute && (\n                  <RoundButton\n                    buttonProps={{\n                      mt:3,\n                      width:[1,'auto'],\n                    }}\n                    handleClick={this.executeProposal.bind(this)}\n                  >\n                    Execute Proposal\n                  </RoundButton>\n                )\n              }\n            </Flex>\n          </DashboardCard>\n        </Flex>\n        <DashboardCard\n          cardProps={{\n            p:3,\n            mb:[2,3]\n          }}\n          title={'Details'}\n          titleParentProps={{\n            mt:0,\n            ml:0\n          }}\n        >\n          <Text\n            mt={2}\n            fontSize={[1,2]}\n            style={{\n              wordBreak:'break-word'\n            }}\n            dangerouslySetInnerHTML={{\n              __html:proposal.description.replace(/\\n/g,\"<br />\")\n            }}\n          >\n          </Text>\n        </DashboardCard>\n        {\n          hasVotes && \n            <DashboardCard\n              cardProps={{\n                p:3,\n                mb:[2,3]\n              }}\n            >\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <Flex\n                  mb={2}\n                  width={1}\n                  alignItems={'center'}\n                  flexDirection={'row'}\n                  justifyContent={'space-between'}\n                >\n                  <Text\n                    fontWeight={4}\n                    fontSize={[2,3]}\n                    textAlign={'left'}\n                    color={'dark-gray'}\n                    lineHeight={'initial'}\n                  >\n                    For ({forVotesPerc}%)\n                  </Text>\n                  <Text\n                    fontWeight={4}\n                    fontSize={[2,3]}\n                    textAlign={'left'}\n                    color={'dark-gray'}\n                    lineHeight={'initial'}\n                  >\n                    Against ({againstVotesPerc}%)\n                  </Text>\n                </Flex>\n                <Flex\n                  mb={2}\n                  width={1}\n                  height={'20px'}\n                  alignItems={'center'}\n                  flexDirection={'row'}\n                  id={'votes-cursor-container'}\n                >\n                  <Flex\n                    height={'100%'}\n                    width={`${forVotesPerc}%`}\n                    style={{background:'rgba(0, 211, 149, 1)'}}\n                    borderRadius={ parseFloat(forVotesPerc)===100 ? '20px' : '20px 0 0 20px' }\n                  >\n                  </Flex>\n                  <Flex\n                    height={'100%'}\n                    width={`${againstVotesPerc}%`}\n                    style={{background:'rgba(211, 0, 0, 1)'}}\n                    borderRadius={ parseFloat(againstVotesPerc)===100 ? '20px' : '0 20px 20px 0' }\n                  >\n                  </Flex>\n                </Flex>\n                <Flex\n                  width={1}\n                  height={'20px'}\n                  alignItems={'center'}\n                  flexDirection={'row'}\n                  id={'votes-number-container'}\n                >\n                  <Flex\n                    width={1/2}\n                    height={'100%'}\n                    justifyContent={'flex-end'}\n                  >\n                    <Flex\n                      width={1}\n                      height={'100%'}\n                      justifyContent={'flex-start'}\n                    >\n                      <Text\n                        fontWeight={3}\n                        fontSize={[1,2]}\n                        textAlign={'left'}\n                        color={'statValue'}\n                        lineHeight={'initial'}\n                      >\n                        {this.functionsUtil.formatMoney(forVotes.toFixed(0,1),0)}\n                      </Text>\n                    </Flex>\n                  </Flex>\n                  <Flex\n                    width={1/2}\n                    height={'100%'}\n                    justifyContent={'flex-start'}\n                  >\n                    <Flex\n                      width={1}\n                      height={'100%'}\n                      minWidth={'10%'}\n                      justifyContent={'flex-end'}\n                    >\n                      <Text\n                        fontWeight={3}\n                        fontSize={[1,2]}\n                        textAlign={'right'}\n                        color={'statValue'}\n                        lineHeight={'initial'}\n                      >\n                        {this.functionsUtil.formatMoney(againstVotes.toFixed(0,1),0)}\n                      </Text>\n                    </Flex>\n                  </Flex>\n                </Flex>\n              </Flex>\n            </DashboardCard>\n        }\n        {\n          hasVotes && \n            <Flex\n              mb={4}\n              width={1}\n              id={'votes-addresses-container'}\n              justifyContent={'space-between'}\n              flexDirection={['column','row']}\n            >\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mb:[2,0],\n                  mr:[0,1],\n                  width:[1,1/2]\n                }}\n                id={'for-votes-addresses-container'}\n              >\n                <Flex\n                  width={1}\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  <Flex\n                    mb={2}\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'space-between'}\n                  >\n                    <Text\n                      fontWeight={4}\n                      fontSize={[2,3]}\n                      textAlign={'left'}\n                      color={'dark-gray'}\n                      lineHeight={'initial'}\n                    >\n                      For Addresses ({forVotesAddrs.length})\n                    </Text>\n                    <Text\n                      fontWeight={4}\n                      fontSize={[2,3]}\n                      textAlign={'left'}\n                      color={'dark-gray'}\n                      lineHeight={'initial'}\n                    >\n                      Votes\n                    </Text>\n                  </Flex>\n                  <Flex\n                    width={1}\n                    style={{\n                      overflow:'scroll'\n                    }}\n                    maxHeight={'400px'}\n                    flexDirection={'column'}\n                  >\n                    {\n                      forVotesAddrs.map( (voteInfo,voteIndex) => {\n                        const votes = this.functionsUtil.formatMoney(this.functionsUtil.BNify(voteInfo.votes).div(1e18).toFixed(4,1),4);\n                        return (\n                          <Flex\n                            py={2}\n                            width={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            key={`vote_for_${voteIndex}`}\n                            justifyContent={'space-between'}\n                            borderBottom={`1px solid ${this.props.theme.colors['near-white']}`}\n                          >\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              justifyContent={'flex-start'}\n                            >\n                              <Blockie\n                                opts={{\n                                  size: 7,\n                                  color: \"#dfe\",\n                                  bgcolor: \"#a71\",\n                                  spotcolor: \"#000\",\n                                  seed: voteInfo.voter,\n                                }}\n                              />\n                              <Link\n                                ml={2}\n                                fontSize={1}\n                                fontWeight={2}\n                                target={'_blank'}\n                                textAlign={'left'}\n                                color={'statValue'}\n                                lineHeight={'initial'}\n                                hoverColor={'primary'}\n                                rel={'nofollow noopener noreferrer'}\n                                href={`/#/governance/leaderboard/${voteInfo.voter}`}\n                              >\n                                {\n                                  this.props.isMobile ? (\n                                    <ShortHash\n                                      fontSize={1}\n                                      fontWeight={2}\n                                      textAlign={'left'}\n                                      color={'statValue'}\n                                      hash={voteInfo.voter}\n                                      lineHeight={'initial'}\n                                    />\n                                  ) : voteInfo.voter\n                                }\n                              </Link>\n                            </Flex>\n                            <Text\n                              fontSize={1}\n                              fontWeight={2}\n                              textAlign={'left'}\n                              color={'statValue'}\n                              lineHeight={'initial'}\n                            >\n                              {votes}\n                            </Text>\n                          </Flex>\n                        )\n                      })\n                    }\n                  </Flex>\n                </Flex>\n              </DashboardCard>\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  ml:[0,1],\n                  width:[1,1/2]\n                }}\n                id={'against-votes-addresses-container'}\n              >\n                <Flex\n                  mb={2}\n                  width={1}\n                  alignItems={'center'}\n                  flexDirection={'row'}\n                  justifyContent={'space-between'}\n                >\n                  <Text\n                    fontWeight={4}\n                    fontSize={[2,3]}\n                    textAlign={'left'}\n                    color={'dark-gray'}\n                    lineHeight={'initial'}\n                  >\n                    Against Addresses ({againstVotesAddrs.length})\n                  </Text>\n                  <Text\n                    fontWeight={4}\n                    fontSize={[2,3]}\n                    textAlign={'left'}\n                    color={'dark-gray'}\n                    lineHeight={'initial'}\n                  >\n                    Votes\n                  </Text>\n                </Flex>\n                <Flex\n                  width={1}\n                  style={{\n                    overflow:'scroll'\n                  }}\n                  maxHeight={'400px'}\n                  flexDirection={'column'}\n                >\n                  {\n                    againstVotesAddrs.map( (voteInfo,voteIndex) => {\n                      const votes = this.functionsUtil.formatMoney(this.functionsUtil.BNify(voteInfo.votes).div(1e18).toFixed(4,1),4);\n                      return (\n                        <Flex\n                          py={2}\n                          width={1}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'space-between'}\n                          key={`vote_against_${voteIndex}`}\n                          borderBottom={`1px solid ${this.props.theme.colors['near-white']}`}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'flex-start'}\n                          >\n                            <Blockie\n                              opts={{\n                                size: 7,\n                                color: \"#dfe\",\n                                bgcolor: \"#a71\",\n                                spotcolor: \"#000\",\n                                seed: voteInfo.voter,\n                              }}\n                            />\n                            <Link\n                              ml={2}\n                              fontSize={1}\n                              fontWeight={2}\n                              target={'_blank'}\n                              textAlign={'left'}\n                              color={'statValue'}\n                              lineHeight={'initial'}\n                              hoverColor={'primary'}\n                              rel={'nofollow noopener noreferrer'}\n                              href={`/#/governance/leaderboard/${voteInfo.voter}`}\n                            >\n                              {voteInfo.voter}\n                            </Link>\n                          </Flex>\n                          <Text\n                            fontSize={1}\n                            fontWeight={2}\n                            textAlign={'left'}\n                            color={'statValue'}\n                            lineHeight={'initial'}\n                          >\n                            {votes}\n                          </Text>\n                        </Flex>\n                      )\n                    })\n                  }\n                </Flex>\n              </DashboardCard>\n            </Flex>\n        }\n      </Box>\n    );\n  }\n}\n\nexport default ProposalDetails;","import Title from '../Title/Title';\nimport { Box, Flex } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport NewProposal from './NewProposal/NewProposal';\nimport GovernanceUtil from '../utilities/GovernanceUtil';\nimport ProposalsList from './ProposalsList/ProposalsList';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport ProposalDetails from './ProposalDetails/ProposalDetails';\n\nclass Proposals extends Component {\n  state = {\n    proposals:null,\n    addProposal:false,\n    selectedProposal:null\n  };\n\n  // Utils\n  governanceUtil = null;\n\n  loadUtils(){\n    if (this.governanceUtil){\n      this.governanceUtil.setProps(this.props);\n    } else {\n      this.governanceUtil = new GovernanceUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.loadData();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const contractsInitialized = this.props.contractsInitialized && prevProps.contractsInitialized !== this.props.contractsInitialized;\n    if (contractsInitialized){\n      this.loadData();\n    }\n  }\n\n  async loadData(){\n\n    if (!this.props.contractsInitialized){\n      return false;\n    }\n\n    const proposals = await this.governanceUtil.getProposals();\n\n    const { match: { params } } = this.props;\n      \n    // Look if proposalId exists\n    let addProposal = false;\n    let selectedProposal = null;\n    if (params.item_id && parseInt(params.item_id)){\n      const proposalId = parseInt(params.item_id);\n      const foundProposal = proposals.find( p => parseInt(p.id) === proposalId );\n      // Set selected proposal\n      if (foundProposal){\n        selectedProposal = foundProposal;\n      }\n    } else if (params.item_id && params.item_id.toLowerCase() === 'new'){\n      addProposal = true;\n    }\n\n    this.setState({\n      proposals,\n      addProposal,\n      selectedProposal\n    });\n  }\n\n  render() {\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          mb={3}\n          width={1}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={(this.state.selectedProposal || this.state.addProposal) ? 'space-between' : 'flex-end'}\n        >\n          {\n            this.state.selectedProposal ? (\n              <Flex\n                alignItems={'center'}\n                width={0.5}\n              >\n                <Breadcrumb\n                  {...this.props}\n                  text={'Governance'}\n                  pathLink={['proposals']}\n                  isMobile={this.props.isMobile}\n                  handleClick={ e => this.props.goToSection('/') }\n                  path={['Proposals',this.state.selectedProposal.title]}\n                />\n              </Flex>\n            ) : this.state.addProposal ? (\n              <Flex\n                alignItems={'center'}\n                width={0.5}\n              >\n                <Breadcrumb\n                  {...this.props}\n                  text={'Governance'}\n                  pathLink={['proposals']}\n                  isMobile={this.props.isMobile}\n                  path={['Proposals','Add proposal']}\n                  handleClick={ e => this.props.goToSection('/') }\n                />\n              </Flex>\n            ) : (\n              <Flex\n                alignItems={'center'}\n                width={0.5}\n              >\n                <Breadcrumb\n                  {...this.props}\n                  text={'Governance'}\n                  path={['Proposals']}\n                  isMobile={this.props.isMobile}\n                  handleClick={ e => this.props.goToSection('/') }\n                />\n              </Flex>\n            )\n          }\n          {\n            !this.state.addProposal && \n              <Flex\n                width={0.5}\n                alignItems={'center'}\n                justifyContent={'flex-end'}\n              >\n                <CardIconButton\n                  icon={'Add'}\n                  {...this.props}\n                  text={'New Proposal'}\n                  handleClick={ e => this.props.goToSection(`proposals/new`) }\n                />\n              </Flex>\n          }\n        </Flex>\n        {\n          this.state.selectedProposal ? (\n            <Box\n              width={1}\n            >\n              <ProposalDetails\n                {...this.props}\n                loadData={this.loadData.bind(this)}\n                proposal={this.state.selectedProposal}\n              />\n            </Box>\n          ) : this.state.addProposal ? (\n            <Box\n              width={1}\n            >\n              <NewProposal\n                {...this.props}\n              />\n            </Box>\n          ) : (\n            <Box\n              width={1}\n            >\n              <Title\n                mb={[3,4]}\n              >\n                Governance Proposals\n              </Title>\n              <Flex\n                mb={3}\n                width={1}\n                id={'proposals'}\n                flexDirection={'column'}\n              >\n                <ProposalsList\n                  {...this.props}\n                  proposals={this.state.proposals}\n                  cols={[\n                    {\n                      title: '#',\n                      props:{\n                        width:[0.1,0.05]\n                      },\n                      fields:[\n                        {\n                          name:'id',\n                          props:{\n                          }\n                        },\n                      ]\n                    },\n                    {\n                      title:'DATE',\n                      mobile:false,\n                      props:{\n                        width:[0.15,0.12],\n                      },\n                      fields:[\n                        {\n                          name:'date'\n                        }\n                      ]\n                    },\n                    {\n                      title:'TITLE',\n                      props:{\n                        width:[0.75,0.60],\n                      },\n                      fields:[\n                        {\n                          name:'title'\n                        }\n                      ]\n                    },\n                    {\n                      mobile:false,\n                      title:'VOTES',\n                      props:{\n                        width:[0.11,0.11],\n                      },\n                      fields:[\n                        {\n                          name:'votes'\n                        }\n                      ]\n                    },\n                    {\n                      title:'STATUS',\n                      props:{\n                        width:[0.15,0.12],\n                        alignItems:['center','flex-start'],\n                        justifyContent:['center','flex-start']\n                      },\n                      parentProps:{\n                        justifyContent:['center','flex-start']\n                      },\n                      fields:[\n                        {\n                          name:'statusIcon',\n                          props:{\n                            mr:[0,2],\n                          },\n                        },\n                        {\n                          mobile:false,\n                          name:'status'\n                        }\n                      ]\n                    },\n                  ]}\n                />\n              </Flex>\n            </Box>\n          )\n        }\n      </Box>\n    );\n  }\n}\n\nexport default Proposals;\n"],"sourceRoot":""}